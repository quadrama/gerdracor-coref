#begin document (Nathan.xml.rkpt.0.CoNLL2012.conll); part 000
Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Szene	NN	(VROOT(PSEUDO(S*	szene	sg	fem	-	(17)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Flur	NN	(NP*	flur	sg	fem	-	(18
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nathans	NE	*	nathan	sg	*	-	(19|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Hause	NN	*)))	haus	sg	neut	-	18)|19)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	(AP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	sg	fem	-	(20
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Reise	NN	*)	reise	sg	fem	-	20)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	kommend	ADJD	*)	kommend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daja	NE	(VROOT(PSEUDO(S*	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	entgegen	PTKVZ	*)	entgegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(21)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(MPN*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	(S*	gott	sg	masc	(PER*)	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ewig	ADJD	*)	ewig	-	-	-	(23
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Dank	NN	(NP*	dank	-	-	-	23)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	endlich	ADV	(AVP*	endlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	einmal	ADV	*)	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wiederkommt	VVFIN	*))	wiederkommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Gott	NN	(S*	gott	-	-	(PER*)	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Dank	NN	*))	dank	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	warum	PWAV	*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	endlich	ADV	*	endlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hab	XY	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	eher	ADV	*	eher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wiederkommen	VVINF	*	wiederkommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wollen	VMINF	*	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wiederkommen	VVINF	*	wiederkommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	können	VMFIN	*)	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Babylon	NE	(VROOT(PSEUDO(CS(S*	babylon	-	-	-	(25)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	(VP(VP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Jerusalem	NE	*	jerusalem	sg	neut	(LOC*)	(14)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	den	ART	(NP*	der	sg	masc	-	(26
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Weg	NN	*	weg	sg	masc	-	26)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Seit	NN	(VP*	seit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ab	APPR	(PP*	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	bald	ADV	*)	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	rechts	ADV	(AVP*	rechts	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	bald	ADV	*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	links	ADV	*)	links	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	nehmen	VVINF	*)))	nehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	bin	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Genötigt	VVPP	*)	nötigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	worden	VAPP	*))	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	gut	ADV	(S(NP(AP*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	zwei	CARD	(NM*	zwei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	hundert	CARD	*))	hundert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Meilen	NN	*)	meile	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Schulden	NN	*	schuld	sg	fem	-	(27)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	einkassieren	VVFIN	*	einkassieren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	ist	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	gewiß	ADV	*	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	Auch	ADV	(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	kein	PIAT	*	kein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	Geschäft	NN	*	geschäft	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	das	PRELS	(S*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	merklich	ADJD	*	merklich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	födert	VVFIN	*	födern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	das	ART	(AVP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	So	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	von	APPR	(VP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	Hand	NN	*)	hand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	sich	PRF	*	sich	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	schlagen	VVINF	*)))	schlagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	50	läßt	VVFIN	*))))	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	51	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	NE	(VROOT(PSEUDO(NP(MPN*	O	-	-	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*)	nathan	-	-	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wie	PWAV	(CO(AP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	elend	ADJD	*)	elend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	elend	ADJD	(S*	elend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hättet	VVFIN	*	hätten	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	indes	ADV	(VP(AP*	indes	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Hier	ADV	*)	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	werden	VAINF	*)	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	können	VMFIN	*)))	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Euer	ADJA	(VROOT(PSEUDO*	euer	-	-	-	(19|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Haus	NN	*	haus	-	-	-	19)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(19)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	brannte	VVFIN	*)	brennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hab	VAFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	vernommen	VVPP	*	vernehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gebe	NN	*	gebe	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gott	NN	(NP*	gott	sg	masc	(PER*)	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	(VP(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	alles	PIS	*)	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	vernommen	VVPP	*)	vernehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	habe	VAFIN	*))	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wäre	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	leicht	ADJD	(VP*	leicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Grund	NN	*	grund	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	aus	APZR	*)	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	abgebrannt	VVPP	*))	abgebrennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dann	ADV	(VROOT(PSEUDO(S*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hätten	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wir	PPER	*	wir	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	(NP*	ein	sg	neut	-	(28
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	neues	ADJA	*)	neu	sg	neut	-	28)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	uns	PPER	*	uns	sg	neut	-	(29)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Gebaut	NN	(CNP*	gebaut	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ein	ART	(NP*	ein	sg	neut	-	(28
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	bequemeres	ADJA	*)))	bequem	sg	neut	-	28)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Schon	ADV	(VROOT(PSEUDO(S(ISU*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wahr	ADJD	*))	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	(30
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Recha	NE	*	recha	-	-	(PER*)	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	einem	ART	*	ein	sg	neut	-	(31
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Haare	NN	*	haar	sg	neut	-	31)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Verbrannt	NN	*	verbrannt	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	30)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Verbrannt	NN	(VROOT(PSEUDO*	verbrannt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	meine	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	fem	-	(2|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Recha	NN	*)	recha	sg	fem	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	sie	PPER	*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	*	der	sg	neut	-	(30)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hab	VAFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gehört	VVFIN	*	gehören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dann	ADV	*)	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	(NP*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	keines	ADJA	(NP*	keiner	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Hauses	NN	*))	haus	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	ADV	(VP*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bedurft	VVPP	*))	bedürfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Verbrannt	NN	*	verbrannt	sg	-	-	(32)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	einem	ART	(NP*	ein	sg	masc	-	(31
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Haare	NN	*)	haar	sg	masc	-	31)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ha	NE	*	ha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(32)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wirklich	ADJD	*	wirklich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	(VP*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	verbrannt	VVPP	*))	verbrennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sag	NE	*	sag	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	heraus	PTKVZ	*	heraus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Heraus	ADV	(VROOT(PSEUDO*	heraus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Töte	NN	*	töte	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	(CS*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	martre	VVFIN	(S*	martren	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	länger	ADJD	*)))	lang	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ja	PTKANT	(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	verbrannt	VVPP	*)	verbrennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	(33
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Es	PPER	*	es	sg	neut	-	(32)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wäre	VAFIN	*)))	sein	sg	-	-	33)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Warum	PWAV	(VROOT(PSEUDO(S*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	erschreckest	VVFIN	*	erschreckeen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*)	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	O	XY	*	O	-	-	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Recha	NE	*	recha	-	-	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(S*)	O	-	-	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	meine	PPOSAT	(NP*	mein	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Recha	NE	*)	recha	-	-	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Eure	PPOSAT	*	euer	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Eure	PPOSAT	(VROOT(PSEUDO(NP*	euer	-	-	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Recha	NN	*)	recha	-	-	(PER*)	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PRF	(VP*	mich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wieder	ADV	(AVP*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	je	ADV	*)	je	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	entwöhnen	VVINF	*)	entwöhnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	müßte	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Dies	FM	(VP(NP*	dieser	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Kind	NN	*	kind	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mein	PPOSAT	*	mein	sg	masc	-	(34|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Kind	NN	*)	kind	sg	neut	-	34)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nennen	VVINF	*)))	nennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nennt	VVFIN	(VROOT(PSEUDO(S*	nennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	(NP*	ihr	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	*)	alle	sg	neut	-	(35
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	35)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Was	PWS	(CS(S*	was	sg	neut	-	(35)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	besitzt	VVFIN	*)	besitzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mit	APPR	(S(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	eben	ADV	(AP*	eben	-	-	-	(36
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	viel	PIAT	*)	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Rechte	NN	*)	recht	*	*	-	36)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Das	ART	(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Eure	NN	*))))	euer	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nichts	PIS	(VROOT(PSEUDO(NP*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	größerm	ADJD	*))	größer	-	-	-	(37)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Alles	PIS	(VROOT(PSEUDO(S(NP*	alle	sg	neut	-	(35
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PRELS	(S*	was	sg	neut	-	35)|(35)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	besitze	VVFIN	*))	besitzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Natur	NN	(VP(NP(CNP*	natur	sg	fem	-	(38)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Glück	NN	*)	glück	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Mir	NE	*)	sich	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zugeteilt	VVPP	*))	zuteilen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dies	APPRART	*	dieser	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Eigentum	NN	*	eigentum	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	allein	ADV	*	allein	-	-	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Dank	NN	*	dank	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Tugend	NN	*	tugend	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(S*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wie	KOKOM	(VP(AP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	teuer	ADJD	*))	teuer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	laßt	VVIMP	*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Eure	PPOSAT	(NP*	euer	pl	neut	-	(39|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Güte	NN	*)	güte	pl	neut	-	39)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Nathan	NE	*	nathan	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mich	PPER	(VP*	mich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	bezahlen	VVINF	*))	bezahlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Güt	NE	*	güt	-	-	-	(40)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	solcher	PIAT	*	solcher	sg	fem	-	(41
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Absicht	NN	*	absicht	sg	fem	-	41)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ausgeübt	VVPP	*	ausüben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Güte	NN	*	güte	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	heißen	VVINF	*	heißen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	In	APPR	(VROOT(PSEUDO(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	solcher	PIAT	*	solcher	sg	fem	-	(41
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Absicht	NN	*)	absicht	sg	fem	-	41)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	In	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	welcher	PWAT	*	welcher	sg	fem	-	(41)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	neut	-	(42|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gewissen	NN	*)	gewissen	sg	neut	-	42)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daja	NE	(VROOT(PSEUDO(S*	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	laß	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vor	APPR	(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	allen	PIAT	*	aller	pl	*	-	(43
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Dingen	NN	*)	ding	pl	-	-	43)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dir	PPER	(VP*	dir	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	erzählen	VVINF	*))	erzählen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	neut	-	(42|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gewissen	NN	*)))	gewissen	sg	neut	-	42)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Babylon	NE	*)	babylon	sg	neut	-	(25)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	einen	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schönen	ADJA	*	schön	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Stoff	NN	*)	stoff	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	(VP*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dir	PPER	*	dir	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gekauft	VVPP	*))	kaufen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(CS(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	reich	ADJD	*)	reich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(S(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Geschmack	NN	*)	geschmack	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	reich	ADJD	*)))	reich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bringe	VVFIN	*	bringen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Für	APPR	(PP*	für	-	-	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Recha	NE	*)	recha	sg	neut	(PER*)	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kaum	ADV	(VP*	kaum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	einen	PIS	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	schönern	VVINF	*)	schönern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mit	PTKVZ	*)	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hilfts	ADV	*	hilft	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(CS(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mein	PPOSAT	(NP*	mein	sg	neut	-	(42|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gewissen	NN	*)	gewissen	sg	neut	-	42)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Euch	PRF	(VP*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sagen	VVINF	*))	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	läßt	VVFIN	(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sich	PRF	(VP*	sich	sg	-	-	(42)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	länger	ADJD	*	lang	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	betäuben	VVINF	*)))	betäuben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	*	der	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Spangen	NN	*)	spange	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	(NP*	der	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ohrgehenke	NN	*	ohrgehenk	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ring	NN	(CNP*	ring	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Kette	NN	*)	kette	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	dir	PPER	*	dir	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	gefallen	VVPP	(VP*	fallen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	werden	VAINF	*)	werden	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Die	NN	*	der	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Damaskus	NE	*)))	damaskus	sg	-	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	dir	PPER	*	dir	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	ausgesucht	VVPP	*	aussuchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Verlanget	NN	(VP*	verlanget	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	sehn	VVINF	*)))	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(VP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schenken	VVINF	*)	schenken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	könnt	VVFIN	*)	können	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nur	ADV	(VROOT(PSEUDO(VP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schenken	VVINF	*)	schenken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	könnt	VVFIN	*	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nimm	VVIMP	*	nimm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	als	KOUS	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dir	PPER	*	dir	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	geb	VVFIN	*	geb	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	–	ADJD	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	schweig	ADJD	*	schweig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(VP(AP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schweig	ADJD	*))	schweig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wer	PWS	(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zweifelt	VVFIN	*)	zweifeln	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nathan	NE	(NP*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ihr	PPER	*	ihr	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Die	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ehrlichkeit	NN	*)	ehrlichkeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	die	ART	(NP*	der	sg	fem	-	(44
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Großmut	NN	*	großmut	sg	fem	-	44)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	selber	ADV	*)	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	seid	VAFIN	*))	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	(45
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	*	ein	sg	neut	-	(46
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Jude	NN	*))	jude	sg	neut	-	46)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	45)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gelt	NN	(NP*	gelt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Das	PDS	(S*	der	sg	neut	-	(45)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	willst	VVFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	du	PPER	(VP*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sagen	VVINF	*)))	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(CS(S*	was	sg	neut	-	(47
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	(VP*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sagen	VVINF	*)	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	will	VMFIN	*)	wollen	sg	-	-	47)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Das	PDS	(S*	der	sg	neut	-	(47)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wißt	VVFIN	*	wissen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	besser	ADJD	*))	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schweig	ADJD	*)	schweig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schweige	VVFIN	*)	schweigen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	(48
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sträfliches	NN	*	sträflich	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vor	APPR	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gott	NN	*	gott	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hierbei	ADV	*	hierbei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	geschieht	VVPP	*	geschehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Und	KON	*	und	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	hindern	VVINF	*	hindern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ändern	VVINF	*	ändern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	–	KOUI	*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Nicht	PTKNEG	*	nicht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	kann	VMFIN	*	können	sg	-	-	48)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Komm	NN	*	komm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	über	APPR	*	über	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wo	PWAV	(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	*)	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wo	PWAV	(VROOT(PSEUDO(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*)	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Daja	NE	(NP*	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hintergehst	VVFIN	*))	hintergehst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Weiß	VVFIN	(S*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*)	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(49)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	(NP*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Daß	KOUS	(S*	daß	sg	-	-	(49
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gekommen	VVPP	*	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	bin	VAFIN	*))	sein	sg	-	-	49)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	frag	VVFIN	*	frag	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(S*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	zittert	VVFIN	*	zittern	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPER	*	ihr	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Schreck	NN	*)	schreck	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	durch	APPR	(PP*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	jede	PIAT	*	jeder	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Nerve	NN	*))	nerve	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(S*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	malet	VVFIN	*	malet	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Feuer	NN	*	feuer	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihre	PPOSAT	(NP*	ihr	pl	masc	-	(50|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Phantasie	NN	*)	phantasie	pl	masc	-	50)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	allem	PIS	*)	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	was	PRELS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sie	PPER	*	sie	sg	fem	-	(50)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	malt	VVFIN	*))	malen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Im	APPRART	(VROOT(PSEUDO(S(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Schlafe	NN	*)	schlaf	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wacht	VVFIN	*	wachen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Im	APPRART	(CO(S(PP*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wachen	NN	*)	wache	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	schläft	VVFIN	*	schlafen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihr	PPOSAT	(NP*	ihr	sg	masc	-	(51|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Geist	NN	*	geist	sg	masc	-	51)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	bald	ADV	(NP*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	weniger	PIS	*	weniger	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Tier	NN	*))))	tier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	bald	ADV	(NP*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	mehr	PIS	*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	als	KOKOM	(NP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Engel	NN	*))))	engel	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Armes	ADJA	(VROOT(PSEUDO(NP*	armes	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kind	NN	*)	kind	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wir	PPER	*	wir	pl	*	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Menschen	NN	*)	mensch	pl	masc	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Diesen	PDAT	*	dieser	pl	*	-	(53
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Morgen	NN	*	morgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	lag	VVFIN	*	liegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	lange	ADV	*	lange	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	verschloßnem	ADJA	*	verschloßn	sg	masc	-	(54
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Aug	NN	*	aug	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	54)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Wie	NN	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	tot	ADJD	*	tot	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Schnell	ADJD	(VROOT(PSEUDO(CS(S*	schnell	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fuhr	VVFIN	*	fahren	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auf	PTKVZ	*)	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	rief	VVFIN	(S*	rufen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	»	PPER	(NP*	»	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Horch	NE	*	horch	-	-	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*)))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	horch	PTKVZ	*	horch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kommen	VVFIN	*	kommen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	pl	neut	-	(55
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Kamele	NN	*	kamele	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	meines	PPOSAT	(NP*	mein	sg	masc	-	(1|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Vaters	NN	*)))	vater	sg	masc	-	55)|1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Horch	NE	(VROOT(PSEUDO(MPN*	horch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	seine	PPOSAT	*	sein	pl	masc	-	(56|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sanfte	ADJA	*	sanft	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Stimme	NN	*	stimme	pl	masc	-	56)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	«	XY	*	«	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Indem	KOUS	(S*	indem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Brach	NE	*	brach	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sich	PRF	*	sich	sg	-	-	(54)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihr	PPOSAT	(NP*	ihr	sg	masc	-	(54|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Auge	NN	*	auge	sg	masc	-	54)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	(CNP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ihr	PPOSAT	(NP*	ihr	sg	fem	-	(57|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Haupt	NN	*)	haupt	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	57)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Dem	NN	(NP*	der	sg	masc	-	(57)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	seines	PPOSAT	(NP*	sein	sg	neut	-	(58|(57)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Armes	NN	*	arm	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Stütze	NN	*))))	stütze	sg	fem	-	58)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	sich	PRF	*	sich	sg	-	-	(58)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	entzog	VVFIN	*)	entziehen	sg	-	-	53)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Stürzt	NN	(NP*	stürzt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Küssen	NN	*))	küssen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zur	APPRART	*	zu	sg	fem	-	(59
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Pfort	NN	*	pfort	sg	fem	-	59)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hinaus	APZR	*	hinaus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sieh	VVIMP	*	sieh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	da	ADV	(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wahrlich	ADV	*))	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	kommt	VVFIN	(VROOT(PSEUDO(S*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wahrlich	ADV	*)	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	(53
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wunder	NN	*	wunder	sg	neut	-	53)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ihre	PPOSAT	*	ihr	sg	fem	-	(60|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ganze	ADJA	*	ganz	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Seele	NN	*	seele	sg	fem	-	60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Zeit	NN	*	zeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	her	ADV	*	her	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Euch	PPER	*	euch	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bei	APPR	(VROOT(PSEUDO(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihm	PPER	*)	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	welchem	PWAT	*	welcher	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihm	PPER	*	ihm	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bei	APPR	(VROOT(PSEUDO(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihm	PPER	(CNP*	ihm	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(NP*	der	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dem	ART	*	der	sg	masc	-	(62
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Feuer	NN	*))))	feuer	sg	masc	-	61)|62)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Sie	PPER	(S*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	rettete	VVFIN	*)	retten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	rettete	VVFIN	*	retten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	meine	PPOSAT	(NP*	mein	sg	fem	-	(2|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Recha	NN	*))	recha	sg	fem	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	junger	ADJA	*	jung	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Tempelherr	NN	*	tempelherr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	(NP*	der	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wenig	PIAT	(S(NP*	wenig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Tage	NN	*)	tag	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Zuvor	NN	*	zuvor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	man	PIS	(S(AVP(S(NP*	man	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	hier	ADV	*)	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	gefangen	ADJD	(VP*	gefangen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	eingebracht	VVPP	*))	einbringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Und	KON	*)	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Saladin	NE	*	saladin	sg	fem	(PER*)	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	begnadigt	VVPP	*	begnadigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	hatte	VAFIN	*))))))	haben	sg	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(S(NP*	ein	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherr	NN	(CNP*	tempelherr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	(NP*	der	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sultan	NN	*	sultan	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Saladin	NE	*))	saladin	sg	neut	(PER*)	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Das	ART	(NP*	der	sg	neut	-	(63
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Leben	NN	*))	leben	-	-	-	63)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ließ	VVFIN	*	lassen	sg	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	War	NN	(VP(NP*	sein	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Recha	NE	*)	recha	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	retten	VVINF	*)))	retten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gott	NN	(VROOT(PSEUDO*	gott	-	-	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ohn	XY	*	ohn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Der	PRELS	*	der	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	seinen	PPOSAT	*	sein	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	unvermuteten	ADJA	*	unvermutet	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gewinst	NN	*	gewinst	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Frisch	ADJD	*	frisch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wagte	VVFIN	*	wagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	es	PPER	*	es	sg	neut	-	(64)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	aus	APPR	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	(VROOT(PSEUDO(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	(NP*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Daja	NE	*)	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dieser	PDAT	(NP*	dieser	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	edle	ADJA	*	edel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Mann	NN	*))	mann	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Führe	VVFIN	(VROOT(PSEUDO(S*	führe	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	seinen	PPOSAT	*	sein	pl	masc	-	(65|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Füßen	NN	*))	fuß	pl	masc	-	65)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	-	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gabt	VVFIN	*	gebten	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	vors	ADJD	(AP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	erste	PIS	(NP*	erster	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	was	PRELS	(S*	was	sg	neut	-	(66
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	an	APPR	(VP(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Schätzen	NN	*)	schatz	pl	masc	-	66)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	euch	PPER	*	euch	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	gelassen	VVPP	*)	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	hatte	VAFIN	*))))	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	gabt	VVFIN	(VROOT(PSEUDO(S*	gaben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	*)	alle	sg	neut	-	(66)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Verspracht	VVPP	(VROOT(PSEUDO(S*	verspracht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mehr	ADV	*)	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	weit	ADJD	(VROOT(PSEUDO*	weit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mehr	ADV	(S*)	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	konnten	VMFIN	*	können	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wir	PPER	*	wir	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kam	VVFIN	*)	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	niemand	PIS	(S*	niemand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	woher	PTKVZ	*))	woher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ging	VVFIN	*)	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	niemand	PIS	(S*	niemand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	weiß	VVFIN	*	weiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wohin	PTKVZ	*))	wohin	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ohn	XY	*	ohn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	alle	PIAT	*	aller	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Des	ART	*	der	sg	neut	-	(19
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Hauses	NN	*	haus	sg	neut	-	19)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Kundschaft	NN	*	kundschaft	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	seinem	PPOSAT	*	sein	sg	neut	-	(68|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Ohr	NN	*	ohr	sg	neut	-	68)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Geleitet	VVFIN	*	leiten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	drang	VVFIN	*	dringen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	vorgespreiztem	ADJA	*	vorgespreizt	sg	neut	-	(69
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Mantel	NN	*	mantel	sg	neut	-	69)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	kühn	ADJD	*	kühn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	durch	APPR	*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Flamm	NN	*	flamm	sg	neut	-	(62)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Rauch	NN	*	rauch	sg	masc	-	(70)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	der	ART	*	der	sg	fem	-	(71
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Stimme	NN	*	stimme	sg	fem	-	71)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	nach	PTKVZ	*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Die	NN	*	der	sg	fem	-	(71)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	uns	PPER	*	uns	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	um	APPR	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	Hülfe	NN	*	hülfe	sg	fem	-	(72)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	rief	VVFIN	*	rufen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Schon	ADV	(VROOT(PSEUDO(S*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hielten	VVFIN	*	halten	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wir	PPER	*	wir	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	verloren	ADJD	(AP*	verloren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Rauch	NN	(CNP*	rauch	sg	neut	-	(70)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Flamme	NN	*))	flamm	sg	fem	-	(62)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	eins	CARD	*)	einer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	vor	APPR	(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	uns	PPER	*)	uns	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	stand	VVFIN	*)))	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	im	APPRART	(PP*	in	sg	neut	-	(73
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	starken	ADJA	*	stark	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Arm	NN	*	arm	sg	neut	-	73)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Empor	NE	*)	empor	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	tragend	ADJD	*)	tragend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kalt	NN	(VROOT(PSEUDO(S*	kalt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ungerührt	VVFIN	(S*	ungerührt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vom	APPRART	(PP*	von	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Jauchzen	NN	*	jauchzen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	unsers	PPOSAT	(NP*	unsers	-	-	-	(74|(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Danks	NN	*))	dank	-	-	-	74)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	setzt	VVFIN	(S*	setzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	seine	PPOSAT	(NP*	sein	sg	fem	-	(2|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Beute	NN	*)	beute	sg	fem	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nieder	PTKVZ	*	nieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	drängt	VVFIN	(CS(S*	drängen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sich	PRF	*	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	unters	APPRART	(PP*	unter	sg	*	-	(75
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Volk	NN	*))	volk	sg	neut	-	75)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	ist	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	–	PPOSAT	(NP*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Verschwunden	NN	*))))))	verschwunde	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(S(PP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	immer	ADV	*)	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	(VP*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hoffen	VVINF	*))	hoffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nachher	APPR	(VROOT(PSEUDO(S(PP*	nachher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	*	der	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ersten	ADJA	*	erster	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Tage	NN	*)	tag	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sahen	VVFIN	*	sehen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wir	PPER	*	wir	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihn	PPER	(S*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	untern	VVFIN	*	untern	-	-	-	(76
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Palmen	NN	*	palme	-	-	-	76)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	auf	PTKVZ	*)	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nieder	PTKVZ	*	nieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wandeln	VVFIN	*	wandeln	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Die	NN	(VP*	der	pl	masc	-	(76)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	dort	ADV	*	dort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	des	ART	(NP*	der	sg	masc	-	(77|(78
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Auferstandnen	NN	*	auferstandn	sg	masc	-	78)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Grab	NE	*)	grab	sg	masc	-	77)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	umschatten	VVINF	*))	umschatten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nahte	VVFIN	*	nahen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PRF	*	mich	sg	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Entzücken	NN	*	entzück	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dankte	VVFIN	*	danken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Erhob	VVFIN	*	erhob	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	entbot	VVFIN	*	entbot	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	beschwor	VVFIN	*	beschwören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	–	$(	*	–	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	einmal	ADV	*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Die	ART	*	der	sg	fem	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	fromme	ADJA	*	fromm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Kreatur	NN	*	kreatur	sg	fem	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	sehen	VVINF	*	sehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	die	ART	*	der	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Nicht	NN	*	nicht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	ruhen	VVINF	*	ruhen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	könne	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	bis	KOUS	*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	ihren	PPOSAT	*	ihr	sg	masc	-	(79|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Dank	NN	*	dank	sg	masc	-	79)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	Zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	seinen	PPOSAT	*	sein	pl	neut	-	(65|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	Füßen	NN	*	fuß	pl	neut	-	65)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	ausgeweinet	VVPP	*	ausgeweinet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Umsonst	ADV	(VROOT(PSEUDO(S*)	umsonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(80|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	unsrer	ADJA	*	unsrer	-	-	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bitte	NN	*)	bitte	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	taub	PTKVZ	*)	taub	-	-	-	80)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	goß	ADV	(VP(AVP*	goß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	*)	so	-	-	-	(81
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	bittern	VVINF	*)))	bittern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Spott	NN	(NP*	spott	sg	-	-	81)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mich	PPER	*))	mich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	besonders	ADV	*	besonders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bis	APPR	(VROOT(PSEUDO(VP(PP*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dadurch	PROAV	*)	dadurch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	abgeschreckt	VVPP	*)	abschrecken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	(S(ISU*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nichts	PIS	(VROOT(PSEUDO(CO(AVP*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weniger	ADV	*))	weniger	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	trat	VVFIN	*	treten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	jeden	PIAT	(NP*	jeder	sg	masc	-	(82
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Tag	NN	*)	tag	sg	masc	-	82)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	von	APPR	(PP*	von	-	-	-	(83
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	neuem	ADJA	*)	neu	sg	*	-	83)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	an	PTKVZ	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ließ	NN	*	ließ	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	jeden	PIAT	(NP*	jeder	sg	masc	-	(82
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Tag	NN	*	tag	sg	masc	-	82)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	von	APPR	(PP*	von	-	-	-	(83
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	neuem	ADJA	*))	neu	sg	*	-	83)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	mich	PPER	(VP*	mich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	verhöhnen	VVINF	*))	verhöhnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	litt	VVFIN	*	leiden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihm	PPER	*))	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hätt	VAFIN	*	hätt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ertragen	VVINF	*	ertragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	(S*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	lange	ADV	(AVP*	lange	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	*)	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mehr	ADV	*)	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	die	ART	(CVP(VP(NP*	der	pl	fem	-	(76
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Palmen	NN	*)	palme	pl	fem	-	76)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	besuchen	VVINF	*))	besuchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Die	NN	(VP(NP*	der	sg	fem	-	(76)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	unsers	PPOSAT	(NP*	unser	sg	masc	-	(77|(78|(75)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Auferstandnen	NN	*))	auferstandn	sg	masc	-	78)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Grab	NN	*	grab	sg	masc	-	77)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	umschatten	VVINF	*)))	umschatten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	niemand	PIS	*	niemand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	wo	PWAV	(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	geblieben	VVPP	*	bleiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	ist	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	staunt	VVFIN	*)	staunen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sinnt	VVFIN	*)	sinnen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	überdenke	VVFIN	*	überdenken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	PDS	*	der	sg	neut	-	(80)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	auf	APPR	(VP(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	einen	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Geist	NN	*	geist	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Rechas	NE	*	rechas	sg	*	(LOC*)	(1033)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Eindruck	NN	*)))	eindruck	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	machen	VVINF	*)	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	muß	VMFIN	*))	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sich	PRF	(VROOT(PSEUDO(S(NP*	sich	pl	-	-	(84)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	verschmäht	VVFIN	*	verschmähen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Von	APPR	(VP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dem	PDS	*	der	sg	masc	-	(85)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	finden	VVINF	*)	finden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	den	PRELS	(S*	der	sg	masc	-	(85)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	man	PIS	*	man	sg	*	-	(84)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	hochzuschätzen	VVIZU	(VP*	hochzuhätzen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Sich	PRF	(NP*	sich	pl	-	-	(84)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	gezwungen	VVPP	*)	zwingen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	fühlt	VVFIN	*	fühlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	so	ADV	(VP(CVP(VP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	weggestoßen	VVPP	*)	wegstoßen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Und	KON	(VP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	angezogen	VVPP	*))	anziehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	werden	VAINF	*))))	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Traun	NE	(NP*	traun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Da	ADV	(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	müssen	VMFIN	*	müssen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Herz	NN	(CNP*	herz	pl	-	-	(86)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	Kopf	NN	*)	kopf	sg	masc	-	(87)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	sich	PRF	(VP*	sich	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	lange	ADV	*	lange	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	zanken	VVINF	*	zanken	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	Ob	KOUS	(S*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	Menschenhaß	NN	*	menschenhaß	sg	neut	-	(88)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	ob	KOUS	(S*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	Schwermut	NN	*	schwermut	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	siegen	VVINF	*	siegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	soll	VMFIN	*)))))	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Oft	ADV	*	oft	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	siegt	VVFIN	*	siegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	keines	PIS	*	keiner	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	*	der	sg	fem	-	(1032
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Phantasie	NN	*	phantasie	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	1032)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Die	NN	*	der	sg	fem	-	(90)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	den	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Streit	NN	*	streit	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sich	PRF	*	sich	sg	-	-	(90)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	mengt	VVFIN	*	mengen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	macht	VVFIN	*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Schwärmer	NE	*	schwärmer	sg	masc	-	(91
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	91)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Bei	APPR	*	bei	-	-	-	(92
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	welchen	PWAT	*	welcher	sg	masc	-	(91)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	bald	ADV	*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	der	ART	*	der	sg	masc	-	(87
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Kopf	NN	*	kopf	sg	masc	-	87)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Herz	NN	*	herz	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	bald	ADV	*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Das	ART	*	der	sg	neut	-	(86
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Herz	NN	*	herz	sg	neut	-	86)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	den	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	Kopf	NN	*	kopf	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	spielen	VVINF	*	spielen	pl	-	-	92)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	Das	ART	*	der	sg	neut	-	(89
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	letztere	ADJA	*	letzter	sg	fem	-	89)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	verkenn	FM	*	verkenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	Recha	NE	*	recha	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	Rechas	NE	*	rechas	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	Fall	NN	*	fall	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	sie	PPER	*	sie	*	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	schwärmt	VVFIN	*	schwärmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	50	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Allein	ADV	(VROOT(PSEUDO(CS(AP(AVP*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	fromm	ADJD	*)	fromm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	So	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	liebenswürdig	ADJD	*))	liebenswürdig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	(VP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	geschwärmt	VVPP	*))	schwärmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Vornehmlich	ADJD	(VROOT(PSEUDO(S*	vornehmlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Eine	ART	(AVP(NP*	ein	sg	fem	-	(93
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	–	ADJA	*	–	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Grille	NN	*)	grille	sg	fem	-	93)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wenn	KOUS	*)	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wollt	VMFIN	*	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ist	VAFIN	(S*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ihr	PPER	*	ihr	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sehr	ADV	(AP*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wert	ADJD	*)))	wert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPOSAT	(NP*	ihr	sg	masc	-	(61|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Tempelherr	NN	*)	tempelherr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Kein	PIAT	(NP*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Irdischer	ADJA	(CAP*	irdischer	sg	masc	(MISC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	keines	ADJA	*)	keiner	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Irdischen	NN	*	irdischen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Der	ART	(NP*	der	sg	masc	-	(94|(95
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Engel	NN	*	engel	sg	masc	-	95)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	einer	PIS	*	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	deren	PRELAT	(S(NP*	der	sg	fem	-	(95)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Schutze	NN	*)	schutzen	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	sich	PRF	*	sich	sg	-	-	(60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Ihr	PPOSAT	(NP*	ihr	sg	neut	-	(60|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	kleines	ADJA	*	klein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Herz	NN	*	herz	sg	neut	-	60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Kindheit	NN	*))	kindheit	sg	fem	-	(96)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	auf	PTKVZ	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	so	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Vertrauet	NN	*	vertrauet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	glaubte	VVFIN	*))))	glauben	sg	-	-	94)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	In	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	die	ART	*	der	pl	masc	-	(94)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	er	PPER	(S*	er	sg	masc	-	(94)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	verhüllt	VVFIN	*)	verhüllen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	auch	ADV	(AP(PP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	im	APPRART	*	in	sg	neut	-	(62
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	Feuer	NN	*)	feuer	sg	neut	-	62)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	Um	KOUI	(VP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	geschwebt	VVPP	*	schweben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	eins	CARD	*	einer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	als	APPR	(PP*	als	-	-	-	(97
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	Tempelherr	NN	*))))	tempelherr	sg	masc	-	97)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	Hervorgetreten	NN	*))	hervorgetreten	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Lächelt	VVFIN	*	lächelt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wer	PWS	(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	weiß	VVFIN	*)	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laßt	VVIMP	*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	lächelnd	ADJD	*	lächelnd	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wenigstens	ADV	*	wenigstens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	einen	ART	*	ein	sg	masc	-	(93
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wahn	NN	*	wahn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	93)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	In	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dem	PRELS	*	der	sg	neut	-	(93)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sich	PRF	*	sich	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Jud	NE	*	jud	-	-	-	(98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Christ	NE	*	christ	-	-	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Muselmann	NE	*	muselmann	pl	*	-	(100)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Vereinigen	NE	*	vereiniger	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	so	ADV	*	so	-	-	-	(93
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	einen	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	süßen	ADJA	*	süß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Wahn	NN	*	wahn	sg	masc	-	93)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(S*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	(NP*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	süß	ADJD	*)	süß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wackre	FM	*	wackren	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Daja	FM	*	daja	-	-	(PER*)	0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Sieh	NE	(S(NP*	sieh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	macht	VVFIN	*))	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	sie	PPER	(VP*	sie	pl	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	sprechen	VVINF	*)	sprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	kann	VMFIN	*)	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sodann	ADV	*	sodann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	such	ADV	*	such	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	den	ART	*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wilden	ADJA	*	wilden	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	launigen	ADJA	*	launig	pl	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Schutzengel	NN	*	schutzengel	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	auf	PTKVZ	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	beliebt	ADJD	*	beliebt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Hiernieden	NN	*	hiernieden	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	unter	APPR	*	unter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	uns	PPER	*	uns	pl	*	-	(29)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wallen	VVINF	*	wallen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Beliebt	ADJD	*	belieben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ungesittet	ADJD	*	ungesittet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Ritterschaft	NN	*	ritterschaft	-	-	-	(72)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	treiben	VVINF	*	treiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	find	VAFIN	*	find	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	gewiß	ADV	*	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	bring	VVFIN	*	bring	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	her	PTKVZ	*	her	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	unternehmet	VVFIN	*	unternehmet	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	viel	PIS	*)	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Macht	VVFIN	*	macht	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	süße	ADJA	*	süß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Wahn	NN	*	wahn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	*	der	sg	masc	-	(101
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	süßern	ADJA	*	süßern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Wahrheit	NN	*	wahrheit	sg	fem	-	101)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Platz	NN	*	platz	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Daja	NE	*	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	glaube	VVFIN	*	glauben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	dem	ART	*	der	sg	neut	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Menschen	NN	*	mensch	sg	neut	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Ein	ART	*	ein	sg	masc	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Mensch	NN	*	mensch	sg	masc	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	immer	ADV	*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	lieber	ADJD	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	ein	ART	*	ein	sg	neut	-	(102
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Engel	NN	*	engel	sg	neut	-	102)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	–	$(	*	–	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	So	ADV	*	so	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	wirst	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	du	PPER	*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	zürnen	VVINF	*	zürnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	Die	ART	*	der	sg	fem	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	Engelschwärmerin	NN	*	engelschwärmerin	sg	fem	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	geheilt	VVPP	*	heilen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	sehn	VAINF	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(CS(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gut	ADJD	*))	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	seid	VAFIN	(S*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zugleich	ADV	*	zugleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	schlimm	ADJD	*)))	schlimm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geh	XY	*	gehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hört	VVFIN	*	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	doch	ADV	(VROOT(PSEUDO(S*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seht	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	(NP*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Recha	NE	(VROOT(PSEUDO(CNP*	recha	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	(NP*	der	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Vorigen	NN	*))	vorige	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	(S*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(21)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ganz	ADV	(CAVP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gar	ADV	*)	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mein	PPOSAT	(NP*	mein	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Vater	NN	*))	vater	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	glaubt	VVFIN	*	glauben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hättet	VVFIN	*	hätten	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Eure	PPOSAT	*	euer	-	-	-	(56|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Stimme	NN	*	stimme	sg	-	-	56)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Vorausgeschickt	NN	*	vorausgeschickt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	(VROOT(PSEUDO(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*)	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Berge	NN	*)	berg	sg	fem	-	(103)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Für	APPR	(S(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wüsten	NN	*)	wüste	pl	*	-	(104)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ströme	NN	*)	strom	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	trennen	VVFIN	*	trennen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	uns	PPER	*)	uns	pl	*	-	(105)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Denn	KON	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S(AVP(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	atmet	VVFIN	*	atmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wand	NN	*	wand	sg	-	-	(106)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Wand	NN	*	wand	sg	-	-	(106)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ihr	PPER	*)))	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Und	KON	*)	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	eilt	VVFIN	*	eilen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Eure	PPOSAT	(VP(NP*	euer	sg	neut	-	(2|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Recha	NN	*)	recha	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	umarmen	VVINF	*)))	umarmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(NP*	der	sg	fem	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	arme	ADJA	*	arm	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Recha	NN	*	recha	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	die	PRELS	(S*	der	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	indes	ADV	*	indes	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	verbrannte	VVFIN	*))	verbrennen	sg	-	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Fast	NN	(S*	fast	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	fast	ADV	*	fast	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	verbrannte	VVFIN	*)	verbrennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Fast	ADV	(VROOT(PSEUDO(AVP*	fast	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Schaudert	VVFIN	*	schaudert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	*	es	sg	neut	-	(107)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	garst	ADJD	*	garst	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ger	ADJA	*	g	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Tod	NN	*	tod	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	verbrennen	VVINF	*	verbrennen	-	-	-	(107)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(S*)	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	neut	-	(2|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kind	NN	*)	kind	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	neut	-	(2|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	liebes	ADJA	*	lieb	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Kind	NN	*)	kind	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mußtet	VVFIN	*	mußten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	über	APPR	*	über	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Den	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euphrat	NE	*	euphrat	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Tigris	NE	*	tigris	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Jordan	NE	*	jordan	-	-	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	über	APPR	*	über	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	–	CARD	*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Weiß	NN	*	weiße	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Wasser	NN	*	wasser	sg	neut	-	(108)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	all	PIAT	*	all	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	oft	ADV	*	oft	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hab	VAFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Um	APPR	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	*	euch	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gezittert	VVPP	*	zittern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	eh	KOUS	*	eh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	das	ART	*	der	sg	neut	-	(62
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Feuer	NN	*	feuer	sg	neut	-	62)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mir	PPER	*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nahe	ADJD	*	nahe	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	kam	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seit	KOUS	(S*	seit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(NP*	der	sg	neut	-	(62
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Feuer	NN	*)	feuer	sg	neut	-	62)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	So	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nahe	ADJD	*)	nahe	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	kam	VVFIN	*)	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dünkt	ADJD	(PP*	dünken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mich	PPER	*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	im	APPRART	(PP*	in	sg	neut	-	(108
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Wasser	NN	*))	wasser	sg	neut	-	108)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sterben	VVFIN	*	sterben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Erquickung	NN	(CNP*	erquickung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Labsal	NN	*	labsal	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Rettung	NN	*))	rettung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ja	NN	(VP*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ertrunken	VVINF	*))	ertrunken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	(NP*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ich	PPER	(S*	ich	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ja	ADV	(VP*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Verbrannt	VVPP	*)))	verbrannt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wollen	VMFIN	*	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wir	PPER	*	wir	pl	*	-	(105)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	uns	PRF	(CVP(VP*	uns	pl	-	-	(105)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	freun	VVINF	*)	freun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gott	NN	(VP(CNP*	gott	sg	masc	(PER*)	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Gott	NN	*)	gott	sg	masc	(PER*)	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	loben	VVINF	*)))	loben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	trug	VVFIN	*	tragen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	den	ART	*	der	sg	masc	-	(109
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Nachen	NN	*	nache	sg	masc	-	109)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Auf	APPR	*	auf	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Flügeln	NN	*	flügeln	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	seiner	PPOSAT	*	sein	pl	fem	-	(95|(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	unsichtbaren	ADJA	*	unsichtbar	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Engel	NN	*	engel	*	*	-	95)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Die	ART	*	der	pl	*	-	(108
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ungetreuen	ADJA	*	ungetreu	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Ström	NN	*	ström	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	108)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	hinüber	ADV	*	hinüber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Er	PPER	*	er	sg	masc	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	winkte	VVFIN	*	winken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	meinem	PPOSAT	(NP*	mein	sg	masc	-	(61|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Engel	NN	*)	engel	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sichtbar	ADJD	(AP*	sichtbar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	seinem	PPOSAT	*	sein	sg	masc	-	(69|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	weißen	ADJA	*	weiß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Fittiche	NN	*))	fittich	sg	masc	-	69)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	mich	PPER	*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	durch	APPR	(PP*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Das	ART	*	der	sg	neut	-	(62
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Feuer	NN	*)	feuer	sg	neut	-	62)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	trüge	VVFIN	*))	tragen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	–	$.	*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	(	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Weißem	ADJA	*	weißem	-	-	-	(69
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Fittiche	NN	*	fittich	pl	masc	-	69)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*)	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	*	der	sg	masc	-	(69
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiße	ADJA	*	weiß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vorgespreizte	ADJA	*	vorgespreizt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mantel	NN	*	mantel	sg	neut	-	69)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Des	NE	*	der	sg	neut	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Tempelherrn	NE	*	tempelherr	sg	neut	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	)	$(	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sichtbar	ADJD	*	sichtbar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sichtbar	ADJD	*	sichtbar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Durchs	NE	*	durch	sg	masc	-	(62
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Feuer	NN	*	feuer	sg	neut	-	62)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	trüg	VVFIN	*	trüg	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	seinem	PPOSAT	*	sein	sg	neut	-	(69|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Fittiche	ADJA	*	fittich	sg	neut	-	69)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Verweht	NN	*	verwehen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	also	ADV	*	also	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hab	VVFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	einen	ART	*	ein	sg	masc	-	(1042
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Engel	NN	*	engel	sg	masc	-	1042)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Angesicht	NN	*	angesicht	-	-	-	(111)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Angesicht	NN	*	angesicht	sg	fem	-	(112)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	gesehn	VVPP	*	gesehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	meinen	PPOSAT	*	meinen	sg	masc	-	(94|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Engel	NN	*	engel	sg	masc	-	94)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Recha	NE	*	recha	-	-	(PER*)	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(110)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wert	ADJD	*	wert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	würd	VAFIN	*	würd	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ihm	PPER	*	ihm	sg	masc	-	(94)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Schönres	NE	*	schönre	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	als	KOUS	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	er	PPER	*	er	sg	masc	-	(94)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	An	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*))	recha	-	-	-	(2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	lächelnd	ADJD	(VROOT(PSEUDO*	lächelnd	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wem	PWS	(VROOT(PSEUDO(S*	wem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schmeichelt	VVFIN	*	schmeicheln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(NP*	ihr	pl	*	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mein	PPOSAT	(NP*	mein	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Vater	NN	*)))	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wem	PWS	*	wem	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dem	ART	(VROOT(PSEUDO(CNP(NP*	der	sg	neut	-	(94
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Engel	NN	*)	engel	sg	neut	-	94)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*)	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hätt	VAFIN	*	hätt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ein	ART	*	ein	sg	masc	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Mensch	NN	*	mensch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	–	APPO	*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Mensch	NN	*	mensch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	die	ART	*	der	sg	fem	-	(38
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Natur	NN	*	natur	sg	fem	-	38)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	sie	PPER	*	sie	pl	masc	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	täglich	ADJD	*	täglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Gewährt	NN	*	gewährt	sg	-	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	dich	PPER	*	dich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	ein	ART	*	ein	sg	neut	-	(114
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Engel	NN	*	engel	sg	neut	-	114)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	müßt	VMFIN	*	müßen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	würde	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	*	ein	sg	neut	-	(114
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Engel	NN	*	engel	sg	neut	-	114)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nein	PTKANT	*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ein	ART	(VROOT(PSEUDO(DL(NP*	ein	sg	masc	-	(95
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wirklicher	ADJA	*)	wirklich	sg	masc	-	95)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Es	PPER	(S*	es	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gewiß	ADV	*	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	(NP*	ein	sg	masc	-	(115
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wirklicher	ADJA	*)))	wirklich	sg	masc	-	115)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Habt	VAFIN	(S*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	*	ihr	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Möglichkeit	NN	*	möglichkeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	daß	KOUS	(CS(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Engel	NN	*	engel	pl	masc	-	(95)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Gott	NN	*	gott	sg	masc	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	zum	APPRART	(PP*	zu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Besten	NN	*)	gut	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	derer	PDS	(NP*	der	pl	*	-	(116
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	die	PRELS	(S*	der	pl	*	-	(116)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	ihn	PPER	*	ihn	sg	masc	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	lieben	VVFIN	*))))	lieben	pl	-	-	116)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Auch	ADV	(S(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Wunder	NN	*)	wunder	pl	neut	-	(117)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	könne	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	tun	VVINF	(CVP*	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	mich	PPER	(VP*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	gelehrt	VVPP	*)))))	lehren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	lieb	VVFIN	*	leiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*	ihn	sg	masc	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	(118
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	liebt	VVFIN	*	lieben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dich	PRF	*	dich	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	(CS(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	tut	VVFIN	*	tun	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dich	PPER	*))	dich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	deines	PPOSAT	(S(NP*	dein	sg	masc	-	(116|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	gleichen	ADJA	*	gleich	-	-	-	116)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	stündlich	ADJD	*	stündlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Wunder	NN	*)	wunder	*	*	-	(117)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Ja	PTKANT	(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	sie	PPER	(VP*	sie	sg	fem	-	(117)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	aller	PIAT	*	aller	sg	fem	-	(119
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Ewigkeit	NN	*)	ewigkeit	sg	fem	-	119)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	euch	PPER	*)	euch	pl	*	-	(116)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	getan	VVPP	*)))))	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	.	$.	*))	--	-	-	-	118)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	*	der	sg	neut	-	(118)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hör	VAFIN	*	hör	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	weil	KOUS	*	weil	-	-	-	(120)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	natürlich	ADV	*	natürlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	alltäglich	ADJD	*	alltäglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	klänge	VVFIN	*	klängen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	dich	PPER	*	dich	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ein	ART	*	ein	sg	masc	-	(121
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	eigentlicher	ADJA	*	eigentlich	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Tempelherr	NN	*	tempelherr	sg	masc	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Gerettet	VVPP	*	retten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	sollt	VMFIN	*	sollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	es	PPER	*	es	sg	neut	-	(113)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	darum	PROAV	*	darum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	weniger	PIAT	*	weniger	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Ein	ART	*	ein	*	*	-	(122
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Wunder	NN	*	wunder	*	*	-	122)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	sein	VAINF	*	sein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	(S(VP(NP(S(NP(AP(NP*	der	sg	masc	-	(117
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wunder	NN	*)	wunder	sg	masc	-	117)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	höchstes	ADJA	*))	hoch	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	uns	PPER	*	uns	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	die	ART	(PP(AVP*	der	pl	*	-	(117
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wahren	ADJA	*)	wahren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	echten	ADJA	(S(NP*	echt	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Wunder	NN	*)	wunder	sg	masc	-	117)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Alltäglich	ADJD	(VP*	alltäglich	-	-	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	werden	VAINF	*)	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	können	VMFIN	*))	können	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*))	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	werden	VAINF	*)	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	sollen	VMFIN	*)	sollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ohn	NE	*	ohn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dieses	PDAT	*	dieser	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	allgemeine	ADJA	*	allgemein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Wunder	NN	*	wunder	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ein	ART	*	ein	sg	masc	-	(123
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Denkender	NN	*	denkender	sg	masc	-	123)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	schwerlich	ADJD	*	schwerlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Wunder	NN	*	wunder	*	*	-	(117)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	je	ADV	*	je	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Genannt	VVPP	*	nennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Kindern	NN	*	kind	pl	neut	-	(124)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	bloß	ADV	*	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	heißen	VVINF	*	heißen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	müßte	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Die	NN	*	der	sg	fem	-	(124)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	gaffend	ADJD	*	gaffend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Ungewöhnlichste	NN	*	ungewöhnlichste	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Neuste	NN	*	neust	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	verfolgen	VVINF	*	verfolgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*))	daja	-	-	-	(0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	zu	APPR	(VROOT(PSEUDO(MPN*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*)	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wollt	VMFIN	(VROOT(PSEUDO(S*	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	NN	*	ihr	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ohnedem	PIS	*	ohnedem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schon	ADV	(NP*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Überspanntes	NN	*	überspannt	sg	masc	-	(51
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Hirn	NE	*)	hirn	sg	masc	-	51)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Durch	APPR	(PP*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	solcherlei	PIAT	*	solcherlei	*	*	-	(120
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Subtilitäten	NN	*)	subtilität	pl	fem	-	120)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Zersprengen	NN	*)	zersprenge	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	KOUS	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Meiner	PPOSAT	*	meiner	*	*	-	(2|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Recha	FM	*	recha	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wär	FM	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Wunders	NN	*	wunder	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	genug	ADV	*	genug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ein	ART	*	ein	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Mensch	NN	*	mensch	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Gerettet	VVPP	*	retten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	welchen	PWAT	*	welcher	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	kein	PIAT	*	kein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	kleines	ADJA	*	klein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Wunder	NN	*	wunder	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	retten	VVINF	*	retten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	müssen	VMINF	*	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kein	PIAT	(NP*	kein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kleines	ADJA	*	klein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Wunder	NN	*))	wunder	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	(125
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gehört	VVPP	(CVP*	gehören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(VP(PP*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Saladin	NE	*	saladin	sg	fem	(PER*)	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Je	NE	*)	je	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	eines	ART	(NP*	ein	sg	masc	-	(121
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Tempelherrn	NN	*)	tempelherr	sg	masc	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	verschont	VVPP	*)))	verschonen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	je	ADV	*	je	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ein	ART	(NP*	ein	sg	masc	-	(121
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Tempelherr	NN	*	tempelherr	sg	masc	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	von	APPR	(VP(VP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihm	PPER	*)	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	verschont	VVPP	*)	verschonen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	werden	VAINF	*)))	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Verlangt	NN	*)	verlangen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	gehofft	VVPP	*	hoffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ihm	PPER	(VROOT(PSEUDO(DL(VP*	ihm	sg	masc	-	(121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	je	ADV	(PP*	je	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	seine	PPOSAT	*	sein	sg	fem	-	(126|(121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Freiheit	NN	*)	freiheit	sg	fem	-	126)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Mehr	PIAT	(AP*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	als	KOKOM	(NP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	den	ART	*	der	sg	masc	-	(127
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ledern	ADJA	*	ledern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Gurt	NN	*))	gurt	sg	masc	-	127)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	geboten	VVPP	*	geboten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	der	ART	(S(NP*	der	sg	masc	-	(127)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Sein	NN	*	sein	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Eisen	NN	*)	eisen	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	schleppt	VVFIN	*))	schleppen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	höchstens	ADV	*	höchstens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	seinen	PPOSAT	(NP*	sein	pl	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Dolch	NN	*)))	dolch	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	?	$.	*))	--	-	-	-	125)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(125)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schließt	VVFIN	*	schließen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*)	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mein	PPOSAT	(NP*	mein	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Vater	NN	*))	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Darum	PROAV	(S*	darum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	War	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	*	der	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kein	PIAT	(NP*	kein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Tempelherr	NN	*)	tempelherr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	(S*	er	sg	masc	-	(94)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	schien	VVFIN	*	scheinen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	es	PPER	*	es	sg	neut	-	(97)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nur	ADV	*))	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kein	PIAT	*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gefangner	ADJA	*	gefangn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Tempelherr	NN	*	tempelherr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	je	ADV	*	je	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	anders	ADV	*	anders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zum	APPRART	*	zu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gewissen	ADJA	*	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Tode	NN	*	tod	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nach	APPR	*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Jerusalem	NE	*	jerusalem	sg	neut	(LOC*)	(14)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	keiner	PIS	*	keiner	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Jerusalem	NE	*	jerusalem	sg	neut	(LOC*)	(14)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	frei	ADJD	*	frei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Umher	NN	*	umher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	wie	KOKOM	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	mich	PPER	*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	des	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Nachts	NN	*	nacht	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	freiwillig	ADJD	*	freiwillig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	einer	ART	*	ein	sg	fem	-	(121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	retten	VVINF	*	retten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	können	VMINF	*	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sieh	NE	(VROOT(PSEUDO*	sieh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wie	PWAV	(VROOT(PSEUDO(AP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sinnreich	ADJD	*)	sinnreich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Jetzt	ADV	(VROOT(PSEUDO(CS*	jetzt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	(S(CNP*	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nimm	NE	*)	nimm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	(NP*	der	sg	neut	-	(128
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Wort	NN	*)))	wort	sg	neut	-	128)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hab	VVFIN	*	hab	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(129)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dir	PPER	*	dir	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	daß	KOUS	*	daß	-	-	-	(129
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	gefangen	VVPP	*	gefangen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	hergeschickt	VVPP	*	hergeschickt	-	-	-	129)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Ist	VVPP	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	worden	VAPP	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ohne	APPR	(VROOT(PSEUDO(S(PP*	ohne	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zweifel	NN	*)	zweifel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	weißt	VVFIN	*	weißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mehr	ADV	*)	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ja	PTKANT	*)	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	man	PIS	*	man	sg	*	-	(75)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	–	PPER	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	man	PIS	*	man	sg	*	-	(130|(75)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sagt	VVFIN	*	sagen	sg	-	-	130)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Zugleich	ADV	*	zugleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Saladin	NE	*	saladin	sg	*	(PER*)	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	den	ART	(NP*	der	pl	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Tempelherrn	NN	*)	tempelherr	pl	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Begnadigt	VVPP	*	begnadigen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	weil	KOUS	(S*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	seiner	PPOSAT	(VP(NP*	sein	sg	fem	-	(131|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Brüder	NN	*)	Bruder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	einem	PIS	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Den	PRELS	(S*	der	sg	masc	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	besonders	ADV	*	besonders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	lieb	VVFIN	*))	leiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	gehabt	VAPP	*)	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	ähnlich	ADJD	*))))	ähnlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	sehe	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(CS(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	da	KOUS	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(132)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	viele	PIS	*	vieler	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zwanzig	CARD	(NP*	zwanzig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Jahre	NN	*)	jahr	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	her	PTKVZ	*	her	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Daß	KOUS	(S*	daß	-	-	-	(132
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dieser	PDAT	(NP*	dieser	sg	masc	-	(131
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Bruder	NN	*)	bruder	sg	masc	-	131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mehr	ADV	*)	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	lebt	VVFIN	*))	leben	sg	-	-	132)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	–	NN	(S*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	er	PPER	*	er	sg	masc	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	hieß	VVFIN	*	heißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Ich	PPER	(S*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	wie	KOKOM	(PP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	–	KON	(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	er	PPER	*	er	sg	masc	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	blieb	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	ich	PPER	(S*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	nicht	PTKNEG	*))))))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	So	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	klingt	VVFIN	*	klingen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	das	PDS	*	der	sg	neut	-	(130)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	so	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	gar	ADV	*)	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	–	ADV	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	so	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	gar	ADV	*)	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	unglaublich	ADJD	*	unglaublich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	der	ART	*	der	sg	fem	-	(130
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	ganzen	ADJA	*	ganz	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	Sache	NN	*)	sache	sg	fem	-	130)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	50	wohl	ADV	(NP*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	51	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	52	ist	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	53	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	(VROOT(PSEUDO*	ei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Warum	PWAV	(VROOT(PSEUDO(S*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wäre	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*	der	sg	neut	-	(130)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Unglaublich	ADJD	*))	unglaublich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wie	KOKOM	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	s	PPER	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	geschieht	VVFIN	*	geschehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Um	NN	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	lieber	ADV	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	etwas	ADV	*	etwas	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	noch	ADV	*	noch	-	-	-	(133
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Unglaublichers	NN	*	unglaublicher	sg	*	-	133)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	glauben	VVINF	*	glauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Warum	PWAV	(NP(AP(S*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Saladin	NN	(NP*	saladin	-	-	(PER*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Der	PRELS	(S*	der	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sein	PPOSAT	(NP*	sein	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Geschwister	NN	*)	geschwister	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	insgesamt	ADV	*)))	insgesamt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	liebt	ADJD	*)	lieben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	In	APPR	(VP(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	jüngern	ADJA	*	jüngern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Jahren	NN	*)	jahr	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	einen	ART	(VP(NP*	ein	sg	masc	-	(131
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Bruder	NN	*)	bruder	sg	masc	-	131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	ganz	ADV	(AVP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	besonders	ADV	*)	besonders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	lieben	VVINF	*)	lieben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	können	VMINF	*))	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Pflegen	VVFIN	(S*	pflege	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sich	PRF	(VP*	sich	pl	-	-	(134)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zwei	CARD	(NP*	zwei	-	-	-	(134
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Gesichter	NN	*)	gesicht	sg	*	-	134)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ähneln	VVINF	*)))	ähneln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ein	ART	(NP*	ein	sg	masc	-	(135
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	alter	ADJA	*	alt	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Eindruck	NN	*))	eindruck	sg	masc	-	135)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ein	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	verlorner	ADJA	*)	verlorn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wirkt	NN	(NP*	wirken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Das	ART	(NP*	der	sg	neut	-	(136
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nämliche	ADJA	*))	nämlich	sg	neut	-	136)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	(NP(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	ADV	*)	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	das	ART	*	der	sg	neut	-	(137
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nämliche	ADJA	*)	nämlich	sg	neut	-	137)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Seit	NN	*	seit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wo	PWAV	(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	steckt	VVFIN	*)	stecken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hier	ADV	(NP*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	*	der	sg	neut	-	(133
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Unglaubliche	NN	*)	unglaubliche	sg	neut	-	133)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ei	XY	*	ei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	weise	VVFIN	*	weise	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Daja	NE	*	daja	-	-	(PER*)	0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	s	PPER	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	dich	PRF	*	dich	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Kein	PIAT	*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Wunder	NN	*	wunder	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	mehr	ADV	*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	deine	PPOSAT	*	dein	pl	neut	-	(133
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Wunder	NN	*	wunder	pl	neut	-	133)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Bedürf	NN	*	bedürf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	verdienen	VVFIN	*	verdienen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	sagen	VVINF	*	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Glauben	NN	*	glaube	sg	masc	-	(138)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	spottet	VVFIN	*)	spotten	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Weil	KOUS	(VROOT(PSEUDO(S*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	masc	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	meiner	PIS	*	mein	sg	fem	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	spottest	VVFIN	*)	spottest	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(S(AVP(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Auch	ADV	(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Recha	NE	*	recha	sg	neut	(PER*)	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	bleibet	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	deine	PPOSAT	(NP*	dein	sg	fem	-	(113
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Rettung	NN	*	rettung	sg	fem	-	113)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Ein	ART	(NP*	ein	sg	masc	-	(122
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Wunder	NN	*	wunder	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	dem	PRELS	(S*	der	sg	masc	-	(139)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	möglich	ADJD	*))	möglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	der	PRELS	(S*	der	sg	masc	-	(139)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	die	ART	(NP*	der	pl	fem	-	(140
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	strengsten	ADJA	*	streng	pl	masc	-	140)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Entschlüsse	NN	*)	entschluß	pl	masc	-	122)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Könige	NN	*)	könig	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	sein	PPOSAT	(AP(NP*	sein	sg	masc	-	(139)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Spiel	NN	*)	spiel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	–	APPO	*))))	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	wenn	ADV	*)	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	sein	PPOSAT	(NP*	sein	sg	masc	-	(139)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Spott	NN	*)	spott	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	–	PIAT	(NP*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Gern	NN	*)	gern	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	den	ART	*	der	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	schwächsten	ADJA	*	schwache	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	Fäden	NN	*))	faden	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	lenkt	VVFIN	*	lenken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	*	mein	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vater	NN	*	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	irr	PRF	*	irr	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ihr	PPER	*	ihr	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wißt	VVFIN	*	wissen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	irre	PPOSAT	*	irre	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Nicht	NN	*	nicht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Vielmehr	ADV	(VROOT(PSEUDO(S*	vielmehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	läßst	VVFIN	*	läßsen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dich	PPER	*	dich	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	belehren	VVINF	*)	belehren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sieh	NE	*	sieh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	eine	ART	*	ein	sg	fem	-	(141
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Stirn	NN	*	stirn	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gewölbt	VVPP	*	wölben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	141)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Rücken	NN	*	rücken	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	einer	ART	*	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Nase	NN	*	nase	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	vielmehr	ADV	*	vielmehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	geführet	VVPP	*	geführet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Augenbraunen	NN	*	augenbraune	-	-	-	(142
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	die	PRELS	*	der	sg	fem	-	142)|(142)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	einem	ART	*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	scharfen	ADJA	*	scharf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	stumpfen	ADJA	*	stumpf	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Knochen	NN	*	knochen	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	sich	PRF	*	sich	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	schlängeln	VVINF	*	schlängeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	eine	ART	*	ein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	Linie	NN	*	linie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	Ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	Bug	NN	*	bug	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	Winkel	NN	*	winkel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	eine	ART	*	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	Falt	NN	*	falt	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	ein	ART	*	ein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	Mal	NN	*	mal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	50	Ein	ART	*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	51	Nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	52	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	53	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	54	eines	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	55	wilden	ADJA	*	wild	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	56	Europäers	NN	*	europäer	sg	masc	(MISC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	57	Gesicht	NN	*	gesicht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	58	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	59	–	TRUNC	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	60	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	61	du	PPER	*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	62	entkömmst	VVFIN	*	entkömmsen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	63	dem	ART	*	der	sg	neut	-	(62
Nathan.xml.rkpt.0.CoNLL2012.conll	000	64	Feur	NN	*	feur	sg	neut	-	62)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	65	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	66	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	67	Asien	NE	*	asien	sg	neut	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	68	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	*	der	sg	neut	-	(141)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kein	PIAT	*	kein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Wunder	NN	*	wunder	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wundersücht	NN	*	wundersüchen	-	-	-	(67
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ges	ADJA	*	g	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Volk	NN	*	volk	-	-	-	67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Warum	PWAV	(VROOT(PSEUDO(S*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bemüht	ADJD	*	bemühen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPER	*	ihr	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	(NP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	einen	ART	*	ein	sg	masc	-	(102
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Engel	NN	*))	engel	sg	masc	-	102)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schadets	ADV	(AP*	schadets	-	-	-	(143)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	–	CARD	(NP*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NN	*))	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sprechen	VVINF	*	sprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	darf	VMFIN	*))	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	XY	*	–	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	alle	PIS	(NP*	aller	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	dem	PDS	(NP*	der	sg	neut	-	(120)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	von	APPR	(VP(PP*	von	-	-	-	(143
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	einem	ART	*	ein	sg	neut	-	(102
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Engel	NN	*)	engel	sg	neut	-	102)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	lieber	ADV	(VP*	lieber	-	-	-	143)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	einem	ART	*	ein	sg	neut	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Menschen	NN	*)	mensch	sg	neut	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	sich	PRF	*	sich	sg	-	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	gerettet	VVPP	*)	retten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	denken	VVINF	*)))	denken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Fühlt	VVFIN	(VROOT(PSEUDO(S*	fühlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	man	PIS	*	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ersten	ADJA	*	erster	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	unbegreiflichen	ADJA	*	unbegreiflich	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ursache	NN	*	ursache	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	seiner	PPOSAT	(NP*	sein	sg	fem	-	(144|(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Rettung	NN	*))	rettung	sg	fem	-	144)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sich	PRF	*	sich	sg	-	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Viel	ADV	*)	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	näher	ADJD	*)	nah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Stolz	ADJD	(VROOT(PSEUDO*	stolz	-	-	-	(145)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	(NP*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Stolz	NN	*)))	stolz	sg	masc	-	(145)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(146
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Topf	NN	*	topf	sg	masc	-	146)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Von	APPR	(PP*	von	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Eisen	NN	*))	eisen	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mit	APPR	(VP(VP(NP(VP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	einer	PIS	*)	ein	sg	fem	-	(133
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	silbern	VVINF	*)	silbern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Zange	ADJA	*	zange	-	-	-	133)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Gern	NN	*)	ger	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	der	ART	*	der	sg	fem	-	(147
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Glut	NN	*)	glut	sg	fem	-	147)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	gehoben	VVPP	*)	heben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	um	KOUI	(VP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Ein	ART	(NP*	ein	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Topf	NN	*	topf	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Silber	NN	*))	silber	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	sich	PRF	*	sich	sg	-	-	(146)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	dünken	VVINF	*))))	dünken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Pah	NE	*	pah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(143)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schadet	VVFIN	*)	schaden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	fragst	VVFIN	(S*	fragen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*)	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	es	PPER	*	es	sg	neut	-	(143)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schadet	VVFIN	*)	schaden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hilft	VVFIN	*	helfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*)	es	sg	neut	-	(143)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	dürft	VVFIN	(VROOT(PSEUDO(S*	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(VP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hinwieder	ADV	*	hinwieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	fragen	VVINF	*))	fragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dein	PPOSAT	(S(NP*	dein	-	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	»	NN	*)	»	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sich	PRF	(VP*	sich	sg	-	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Gott	NN	*	gott	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	um	KOUI	(AVP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	viel	ADV	(AP*	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	näher	ADJD	*)	nah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	fühlen	VVINF	*)	fühlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	«	VAFIN	*)	«	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Unsinn	NN	(CNP*	unsinn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Gotteslästerung	NN	*))	gotteslästerung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Allein	ADV	(S(NP*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*)	es	sg	neut	-	(143)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schadet	VVFIN	*)	schaden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ja	PTKANT	(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	es	PPER	(S*	es	sg	neut	-	(143)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	schadet	VVFIN	*	schaden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	allerdings	ADV	*))	allerdings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	hört	VVFIN	(VROOT(PSEUDO(S*	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKVZ	*)	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wahr	PTKVZ	*	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	dem	ART	(VROOT(PSEUDO(CS(S(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wesen	NN	*	wesen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	PRELS	(S*	der	sg	neut	-	61)|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Dich	PPER	*	dich	sg	neut	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	rettete	VVFIN	*))	retten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	–	VAFIN	*	–	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	es	PPER	(S*	es	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ein	ART	(CNP(NP*	ein	sg	neut	-	(115
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Engel	NN	*)	engel	sg	neut	-	115)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Ein	ART	(NP*	ein	sg	masc	-	(114
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Mensch	NN	*))))	mensch	sg	masc	-	114)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	dem	PDS	(S*	der	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	möchtet	VMFIN	*	möchten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	ihr	PPER	*	ihr	sg	fem	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	und	KON	(VP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	du	PPER	*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	besonders	ADV	*	besonders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Gern	NN	(NP*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	wieder	ADV	(NP(AP*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	viele	PIAT	*)	vieler	pl	*	-	(148
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	große	ADJA	*	groß	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Dienste	NN	*))	dienst	pl	masc	-	148)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	tun	VVINF	*)))	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wahr	PTKVZ	*	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	einem	ART	(NP*	ein	sg	neut	-	(94
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Engel	NN	*	engel	sg	neut	-	94)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	was	PWS	(S*	was	sg	neut	-	(148
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Dienste	NN	*	dienst	pl	masc	-	148)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Für	APPR	(PP*	für	-	-	-	(148
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	große	ADJA	*	groß	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Dienste	NN	*))	dienst	pl	masc	-	148)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	könnt	VVFIN	*	können	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ihr	PPER	*	ihr	sg	fem	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	dem	PDS	*	der	sg	neut	-	(94)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	tun	VVINF	*))	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	könnt	VVFIN	*	können	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	*	-	(94)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	danken	VVINF	(VP*	danken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	APPR	(CO(VP(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ihm	PPER	*)	ihm	sg	masc	-	(94)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	seufzen	VVINF	*)	seufzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	beten	VVINF	(VP*	beten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Könnt	NN	(CO(VP*	könnt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Entzückung	NN	*)	entzückung	sg	fem	-	(149
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	über	APPR	(PP*	über	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ihn	PPER	*)	ihn	sg	masc	-	149)|(94)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	zerschmelzen	VVINF	*	zerschmelzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Könnt	NN	(NP*	könnt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	dem	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Tage	NN	*	tag	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	seiner	PPOSAT	(NP*	sein	pl	neut	-	(94)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Feier	NN	*)))	feier	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	fasten	VVINF	*)	fasten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Almosen	NN	(VP*	almosen	pl	fem	-	(150)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	spenden	VVINF	*))))))	spenden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Alles	PIS	(NP*	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S(AVP(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Deucht	VVFIN	*)	deucht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	immer	ADV	*)	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihr	PPER	*	ihr	sg	fem	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	selbst	ADV	(AVP*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*)	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	euer	ADV	(NP*	eu	pl	masc	-	(52|(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Nächster	NN	*	nächster	*	*	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Hierbei	PROAV	(AVP*	hierbei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	weit	ADV	*	weit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	mehr	ADV	*))	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	gewinnt	ADJD	*))	gewinnen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	als	KOKOM	(NP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	er	PPER	*)	er	sg	masc	-	(94)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(94)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	fett	ADJD	*)	fett	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	durch	APPR	(PP*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	euer	PPOSAT	*	eu	pl	fem	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Fasten	NN	*)	fasten	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wird	VAFIN	(S*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	reich	ADJD	*	reich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Durch	APPR	(PP*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	eure	PPOSAT	*	euer	pl	fem	-	(150|(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Spenden	NN	*)))	spende	pl	fem	-	150)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	wird	VAFIN	(S*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	nicht	PTKNEG	(NP(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	herrlicher	ADJA	*))))	herrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Durch	APPR	(S(PP*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	eur	PPOSAT	*	eur	-	-	-	(149|(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Entzücken	NN	*)	entzücken	-	-	-	149)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	mächtiger	ADJA	(NP*	mächtig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Durch	NN	*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	eur	APPRART	(PP*	eur	-	-	-	(138|(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Vertraun	NN	*)))	vertraun	-	-	-	138)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wahr	PTKVZ	*	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Allein	ADV	(VROOT(PSEUDO(NP*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ein	ART	*	ein	sg	masc	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mensch	NN	*)	mensch	sg	masc	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	*	ei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hätt	VAFIN	*	hätt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	*	ein	sg	masc	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Mensch	NN	*	mensch	sg	masc	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	etwas	PIS	*	etwas	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ihn	PPER	*	ihn	sg	masc	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	tun	VVINF	*	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	uns	PPER	*	uns	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	mehr	PIAT	*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Gelegenheit	NN	*	gelegenheit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	verschafft	VVPP	*	verschaffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S(NP(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*	gott	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	weiß	VVFIN	*)	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bereit	ADJD	*	bereit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wir	PPER	*	wir	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dazu	PROAV	*))	dazu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	waren	VAFIN	*)	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Allein	ADV	(VROOT(PSEUDO(CS(S(NP*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*)	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wollte	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	PTKANT	(AP(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bedurfte	VVFIN	*)	bedürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	völlig	ADJD	*)	völlig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	war	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	in	APPR	(AP(CPP(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sich	PRF	*)	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	mit	APPR	(PP*	mit	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	sich	PRF	*))	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Vergnügsam	ADJD	*)))	vergnügsam	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Engel	NN	*	engel	pl	masc	-	(102)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	sind	VAFIN	*)	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	nur	ADV	(S(VP(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Engel	NN	*)	engel	sg	neut	-	(102)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Sein	VAINF	*)	sein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	können	VMFIN	*))	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Endlich	ADV	(VROOT(PSEUDO(S*	endlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	als	KOUS	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	verschwand	ADJD	*)	verschwinden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Verschwand	ADJD	(VROOT(PSEUDO*	verschwand	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	KOKOM	(AVP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*)	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	verschwand	VVFIN	*)	verschwinden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sich	PRF	(VP*	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	untern	VVINF	*)	untern	-	-	-	(76
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Palmen	NN	*	palme	pl	fem	-	76)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ferner	ADV	*	ferner	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sehen	VVINF	*)	sehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ließ	VVFIN	*)	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	oder	KON	(VROOT(PSEUDO(S*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	habt	VAFIN	*	haben	pl	-	-	(151)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(VP*	ihr	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wirklich	ADJD	*	wirklich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	weiter	ADV	*	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	aufgesucht	VVPP	*))	aufsuchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(151)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*)	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Da	KOUS	(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sieh	FM	(AVP*	sieh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nun	FM	*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	es	PPER	*	es	sg	neut	-	(143)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	schadt	VVFIN	*)	schadt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Grausame	ADJA	*	grausam	pl	fem	-	(67
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Schwärmerinnen	NN	*	schwärmerin	pl	fem	-	67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dieser	PDAT	(NP*	dieser	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Engel	NN	*)	engel	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	–	ADV	(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	krank	ADJD	(VP*	krank	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	geworden	VAPP	*))	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Krank	NE	(VROOT(PSEUDO*	krank	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Krank	NE	(VROOT(PSEUDO*	krank	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Welch	PWAT	(VROOT(PSEUDO(S(NP*	welch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kalter	ADJA	*	kalt	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Schauer	NN	*)	schauer	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Befällt	VVFIN	*	befallen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	*)	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Daja	NE	*	daja	-	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Meine	PPOSAT	(CAP(NP*	mein	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Stirne	NN	*)	stirne	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sonst	ADV	(AP*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	warm	ADJD	*)	warm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	fühl	ADJD	*)	fühl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	einmal	ADV	*)	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Eis	NN	*)	eis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(CS(S*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ein	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Franke	NN	*))	franke	sg	masc	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dieses	PDAT	(S(NP*	dieser	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Klimas	NN	*)	klima	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ungewohnt	ADJD	*))	ungewohnt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ist	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	jung	ADJD	*	jung	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	der	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	harten	ADJA	*	hart	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Arbeit	NN	*	arbeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	seines	PPOSAT	(NP*	sein	sg	masc	-	(152|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Standes	NN	*)))	stand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	152)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Des	NE	(S(NP(MPN*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Hungerns	NE	*)	hungern	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Wachens	NE	*)	wachen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	ungewohnt	ADJD	*))	ungewohnt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Krank	NE	(VROOT(PSEUDO*	krank	-	-	-	(153
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	153)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	krank	ADJD	(VROOT(PSEUDO*	krank	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(CS(S*	der	sg	neut	-	(153)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wäre	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	möglich	ADJD	*)	möglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	meint	VVFIN	(S*	meinen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ja	ADV	(NP*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nathan	NE	*)	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nur	ADV	*))	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	liegt	VVFIN	*	liegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	da	PTKVZ	*)	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	hat	VAFIN	(VROOT(PSEUDO(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weder	KON	(CNP*	weder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Freund	NN	*	freund	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	(NP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Geld	NN	*))	geld	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Sich	PRF	(VP*	sich	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Freunde	NN	*	freund	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	besolden	VVINF	*)))	besolden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	XY	(VROOT(PSEUDO*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mein	PPOSAT	(NP*	mein	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Liegt	VVFIN	(VROOT(PSEUDO(S*	liegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ohne	APPR	(PP*	ohne	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wartung	NN	(CNP(NP*	wartung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ohne	APPR	(PP*	ohne	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Rat	NN	(CNP*	Rat	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Zusprach	NN	*)))	zusprach	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ein	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Raub	NN	*	raub	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	der	ART	(NP*	der	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Schmerzen	NN	*))	schmerz	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	des	ART	(NP*	der	sg	masc	-	(154
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Todes	NN	*)))	tod	sg	masc	-	154)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	da	PTKVZ	*)	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	(VROOT(PSEUDO*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wo	PWAV	(VROOT(PSEUDO*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S(NP*	er	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	PRELS	(S*	der	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	eine	PIS	*)	ein	sg	fem	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	die	PRELS	(S*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nie	ADV	*	nie	-	-	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Gekannt	NN	*)))	gekannt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gesehn	ADJD	(S(AP*	gesehn	-	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Ins	APPRART	(PP*	in	-	-	-	(62
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Feur	NN	*))	feur	-	-	-	62)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	sich	PRF	*	sich	pl	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	stürzte	VVFIN	*))	stürzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schonet	VVFIN	*	schonen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihrer	PPOSAT	*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	PDS	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PRELS	(S*	was	sg	neut	-	(67
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	rettete	VVFIN	*))	retten	sg	-	-	67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(S(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	näher	ADJD	*)	nah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	kennen	VVINF	*	kennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Nicht	PTKNEG	(VP(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	weiter	ADV	*	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sehen	VVINF	*)	sehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mocht	PTKNEG	*	mochen	sg	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sparen	VVINF	*))))	sparen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Schonet	NN	(VROOT(PSEUDO(NP*	schonet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihrer	PPOSAT	(NP*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Weiter	ADV	*	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	verlangt	VVPP	*	verlangen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	–	KON	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	es	PPER	*	es	sg	neut	-	(155)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wäre	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Daß	KOUS	*	daß	-	-	-	(155
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	zum	APPRART	*	zu	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	zweiten	ADJA	*	zweiter	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Mal	NN	*	mal	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	es	PPER	*	es	sg	neut	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	retten	VVINF	*	retten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	sollte	VMFIN	*	sollen	sg	-	-	155)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	–	$.	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	gnug	ADJD	*	gnug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	es	PPER	*	es	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	ein	ART	*	ein	sg	masc	-	(114
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Mensch	NN	*	mensch	sg	masc	-	114)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hört	VVIMP	*	hören	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auf	PTKVZ	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	seht	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	PDS	*	der	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sterbend	ADJD	*	sterbend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sich	PRF	*	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	laben	VVINF	*	laben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	$(	*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Als	KOUS	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Bewußtsein	NN	*	bewußtsein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	dieser	PDAT	*	dieser	sg	masc	-	(72
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Tat	NN	*	tat	sg	masc	-	72)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hört	VVIMP	*	hören	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auf	PTKVZ	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	tötet	VVFIN	*	töten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*)	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hast	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	(VP*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	getötet	VVPP	*))	töten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hättst	VVFIN	*	hättst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	töten	VVINF	*	töten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	können	VMFIN	*)	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Recha	NE	*	recha	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Recha	NE	(VROOT(PSEUDO(MPN*	recha	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(120)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Arznei	NE	*	arznei	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Gift	NN	*	gift	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	(S*	was	sg	neut	-	(120)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dir	PPER	*	dir	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	reiche	VVFIN	*))	reichen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	lebt	VVFIN	*)	leben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	komm	VVIMP	(S*	komm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dir	PPER	*))	dir	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	(AP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	krank	ADJD	*))	krank	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Nicht	PTKNEG	(S(VP(AP(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	einmal	ADV	*)	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	krank	ADJD	*)))	krank	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gewiß	ADV	(VROOT(PSEUDO(S*)	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	(CO(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	tot	ADJD	*))	tot	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nicht	PTKNEG	(VROOT(PSEUDO(VP(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	krank	ADJD	*))	krank	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gewiß	ADV	(VROOT(PSEUDO(S*	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	tot	ADJD	*))	tot	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gott	NN	*	gott	-	-	(PER*)	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	lohnt	VVFIN	*	lohnen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Gutes	NN	*)	gut	sg	neut	-	(156)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Getan	NE	(NP*	getan	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	auch	ADV	(CO(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	noch	ADV	*)))	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Begreifst	VVFIN	(S*	begreifst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*)	du	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	(NP*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	viel	PIS	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	andächtig	ADJD	(VP*	andächtig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	schwärmen	VVFIN	(S*	schwärmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	leichter	ADJD	*)	leicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Gut	NN	*)	gut	sg	neut	-	(156
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	handeln	VVINF	*)	handeln	-	-	-	156)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ist	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	sg	masc	-	(157
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schlaffste	ADJA	*	schlaff	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Mensch	NN	*	mensch	sg	masc	-	157)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Andächtig	ADJD	*	andächtig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	schwärmt	VVFIN	*	schwärmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	um	KOUI	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	er	PPER	*	er	sg	masc	-	(157)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Zeiten	NN	*	zeit	pl	fem	-	(158)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Sich	PRF	*	sich	pl	-	-	(157)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	der	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Absicht	NN	*	absicht	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	deutlich	ADJD	*	deutlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	bewußt	ADJD	*	bewußt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Um	NN	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	gut	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	handeln	VVFIN	*	handeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	dürfen	VMINF	*	dürfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	XY	(VROOT(PSEUDO*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mein	PPOSAT	(NP*	mein	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	laßt	VVIMP	(VROOT(PSEUDO(S*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	laßt	VVIMP	(S*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Eure	PPOSAT	(NP*	euer	pl	fem	-	(2|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Recha	NE	*)	recha	-	-	(PER*)	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nie	ADV	(AVP*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wiederum	ADV	*	wiederum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	allein	ADV	*)))	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wahr	PTKVZ	*	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	verreist	ADV	*	verreisen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Allerdings	ADV	(S*)	allerdings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	seh	XY	*	seh	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dort	ADV	*	dort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mustert	VVFIN	*	mustert	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	neugier	ADJA	*	neugi	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gem	ADJA	*	g	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Blick	NN	*	blick	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Ein	ART	*	ein	sg	masc	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Muselmann	NN	*	muselmann	sg	masc	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	die	ART	*	der	pl	masc	-	(55
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	beladenen	ADJA	*	beladen	-	-	-	55)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Kamele	NN	*	kamele	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kennt	VVFIN	*	kennen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihr	PPER	*	ihr	sg	fem	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ha	XY	*	ha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Euer	PPOSAT	(VROOT(PSEUDO(NP*	euer	-	-	-	(3|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Derwisch	NN	*)	derwisch	-	-	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Euer	PPOSAT	(VROOT(PSEUDO(S(NP*	euer	-	-	-	(3|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Derwisch	NN	*)	derwisch	-	-	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euer	ADJA	(NP*	euer	-	-	-	(3|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Schachgesell	NN	*))	schachgesell	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	(VROOT(PSEUDO(MPN*	al-hafi	-	-	(LOC*)	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	das	ART	(VROOT(PSEUDO(NP*	der	sg	neut	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Al-Hafi	NN	*)	al-hafi	sg	neut	(LOC*)	(159)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Itzt	APPR	(VROOT(PSEUDO(PP*	itzt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	des	ART	*	der	sg	neut	-	(1027
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sultans	NN	*	sultan	sg	neut	-	1027)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Schatzmeister	NN	*)	schatzmeister	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	(VROOT(PSEUDO(MPN*	al-hafi	-	-	(LOC*)	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Träumst	VVFIN	(VROOT(PSEUDO(S*	träumst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wieder	ADV	*)	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	*	er	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ists	ADV	*)	ist	-	-	-	(159)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wahrhaftig	ADJD	*	wahrhaftig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ists	FM	*	ists	-	-	-	(159)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kömmt	VVFIN	(S*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	uns	PPER	*)	uns	pl	*	-	(29)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKVZ	*)	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hinein	ADV	(VROOT(PSEUDO(CAP(AP(PP*	hinein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*))	euch	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	geschwind	ADJD	*)	geschwind	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	werd	VAFIN	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hören	VVINF	*	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(CNP*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Derwisch	NN	*))	derwisch	sg	masc	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Reißt	VVFIN	(VROOT(PSEUDO(S*	reißen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	pl	neut	-	(161
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Augen	NN	*)	auge	pl	neut	-	161)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auf	PTKVZ	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	(S(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	weit	ADJD	*)	weit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	könnt	VVFIN	*))	können	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	*	*	-	(1024
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	s	PPER	*	--	-	-	-	1024)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	du	PPER	*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	es	PPER	*	es	sg	neut	-	(159)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	In	APPR	(NP(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dieser	PDAT	*	dieser	sg	fem	-	(162
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Pracht	NN	*)	pracht	sg	fem	-	162)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ein	ART	(NP*	ein	sg	neut	-	(163
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Derwisch	NN	*))	derwisch	sg	neut	-	163)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	warum	PWAV	(VROOT(PSEUDO(S*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Läßt	VVFIN	(VROOT(PSEUDO(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sich	PRF	*	sich	sg	-	-	(163)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Aus	APPR	(CO(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	einem	ART	*	ein	sg	neut	-	(163
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Derwisch	NN	*)	derwisch	sg	neut	-	163)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nichts	PIS	(VP*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	machen	VVINF	*))	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	*	ei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	genug	PIAT	*	genug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dachte	VVFIN	*	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	immer	ADV	*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Der	ART	*	der	sg	masc	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Derwisch	NN	*	derwisch	sg	masc	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	ADV	*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	der	ART	*	der	sg	masc	-	(163
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	rechte	ADJA	*	rechter	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Derwisch	NN	*	derwisch	sg	masc	-	163)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	–	VVINF	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	woll	VMFIN	*	woll	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Aus	APPR	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	sich	PRF	*	sich	sg	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	machen	VVINF	*	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	lassen	VVINF	*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Beim	APPRART	(VROOT(PSEUDO(PP*	bei	-	-	-	(164
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Propheten	NN	*)	prophet	pl	*	-	164)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kein	PIAT	(NP*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	rechter	NN	*)	rechter	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bin	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mag	VMFIN	*	mögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wahr	ADJD	(VP*	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sein	VAINF	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zwar	ADV	*	zwar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	man	PIS	*	man	sg	*	-	(163)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	XY	*	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Muß	VMFIN	*	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Derwisch	ADJD	(VROOT(PSEUDO*	derwisch	-	-	-	(163)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Derwisch	NN	*	derwisch	sg	masc	-	(163)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kein	PIAT	*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mensch	NN	*	mensch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	müssen	VMFIN	*	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	*	ein	sg	neut	-	(163
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Derwisch	NN	*	derwisch	sg	neut	-	163)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	müßte	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	müßt	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(163)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Warum	PWAV	(VROOT(PSEUDO(CO(S*	warum	-	-	-	(165
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	man	PIS	*	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(163)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	recht	ADV	*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bittet	VVFIN	*)	bitten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	er	PPER	*	er	sg	masc	-	(163)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gut	ADJD	*)	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	erkennt	VVFIN	*))))	erkennen	-	-	-	165)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bei	APPR	(VROOT(PSEUDO(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	unserm	PPOSAT	*	unser	sg	masc	-	(24|(166)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gott	NN	*)	gott	sg	masc	-	24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	da	ADV	(VROOT(PSEUDO(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sagst	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wahr	PTKVZ	*)	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Laß	VVIMP	(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PRF	*	dich	sg	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Umarmen	NN	(CNP*	umarmen	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Mensch	NN	*))	mensch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	(S*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mein	PPOSAT	(NP*	mein	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Freund	NN	*)	freund	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fragt	VVFIN	*	fragen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	geworden	VAPP	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Trotz	APPR	*	trotz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dem	PDS	*	der	sg	neut	-	(160
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	was	PRELS	*	was	sg	neut	-	(160)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	geworden	VAPP	*	werden	-	-	-	160)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Könnt	NE	*	könnt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ein	ART	*	ein	sg	neut	-	(167
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Kerl	NN	*	kerl	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	im	APPRART	*	in	sg	masc	-	(168
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Staat	NN	*	staat	sg	masc	-	167)|168)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	geworden	VAPP	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	des	ART	*	der	sg	masc	-	(169|(167)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Freundschaft	NN	*	freundschaft	sg	masc	-	169)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Euch	PPER	*	euch	pl	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ungelegen	ADJD	*	ungelegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	wäre	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dein	PPOSAT	*	dein	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Herz	NN	*	herz	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Derwisch	ADJD	*	derwisch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wag	NE	*	wag	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ichs	NE	*	ichs	-	-	-	(169)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	drauf	PTKVZ	*	drauf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(170
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kerl	NN	*)	kerl	sg	masc	-	170)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Im	APPRART	(PP*	in	sg	masc	-	(168
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Staat	NN	*)	staat	sg	masc	-	168)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dein	PPOSAT	*	dein	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Kleid	NN	*))	kleid	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	*	der	sg	neut	-	(170)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	geehrt	ADJD	*	ehren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Will	VMFIN	*	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	meint	VVFIN	*	meinen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*)	ihr	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ratet	VVFIN	*	raten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	An	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Eurem	PPOSAT	*	eurem	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Hofe	NN	*	hof	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Derwisch	ADJD	(VROOT(PSEUDO(S*	derwisch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	weiter	ADV	(NP*	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nichts	PIS	*))	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	neben	APPR	(PP*	neben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	her	ADV	*)	her	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wahrscheinlich	ADJD	(PP(AP*	wahrscheinlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	–	CARD	*)	–	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Koch	NN	*))	koch	sg	neut	(PER*)	(171)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(VP(NP*	mein	sg	neut	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Handwerk	NN	*	handwerk	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*))	euch	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	verlernen	VVINF	*))	verlernen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Koch	NE	*	koch	-	-	-	(171)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(NP*	nicht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kellner	NN	*	kellner	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gesteht	VVFIN	(S*	gesteht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Saladin	NE	*	saladin	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Mich	PPER	*	mich	sg	fem	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	besser	ADJD	*))	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Schatzmeister	NN	*	schatzmeister	sg	masc	-	(160)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bin	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bei	APPR	(VP(VP(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ihm	PPER	*))	ihm	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	worden	VAPP	*))	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bei	APPR	(NP(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*))	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Versteht	VVFIN	(VROOT(PSEUDO(CS(S*	verstehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Des	PPER	(S*	der	-	-	-	(172
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kleinern	VVFIN	*	kleinern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Schatzes	NN	*))	schatz	-	-	-	172)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	–	NE	(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	denn	KON	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	des	ART	(NP*	der	sg	masc	-	(173
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	größern	NN	*)	größern	sg	masc	-	173)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	waltet	VVFIN	*)	walten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Sein	PPOSAT	(NP*	sein	sg	masc	-	(174|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Vater	NN	*)	vater	sg	masc	-	174)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	–	NN	(NP*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	des	ART	(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Schatzes	NN	*)	schatz	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	sein	PPOSAT	*	sein	sg	neut	-	(175|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Haus	NN	*))))	haus	sg	neut	-	175)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sein	PPOSAT	(VROOT(PSEUDO(S(NP*	sein	sg	neut	-	(175|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Haus	NN	*)	haus	sg	neut	-	175)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	groß	ADJD	*)	groß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(CS(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	größer	ADJD	*	groß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	als	KOUS	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	*	ihr	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	glaubt	VVFIN	*))	glauben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Denn	KON	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	jeder	PIAT	(NP*	jeder	sg	masc	-	(176
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Bettler	NN	*)	bettler	sg	masc	-	176)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	seinem	PPOSAT	*	sein	sg	neut	-	(175|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Hause	NN	*)))	haus	sg	neut	-	175)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	(177
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	*	der	pl	masc	-	(176
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bettlern	NN	*	bettler	pl	masc	-	176)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Saladin	NE	*	saladin	sg	neut	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	feind	ADJD	*	feind	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	–	XY	*	–	-	-	-	177)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Strumpf	NN	*	strumpf	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Stiel	NN	*	stiel	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sie	PPER	*	sie	pl	*	-	(176)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	vertilgen	VVINF	*	vertilgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Sich	PRF	*	sich	pl	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	vorgesetzt	VVPP	*	vorsetzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	sollt	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	darüber	PROAV	*	darüber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Zum	APPRART	*	zu	sg	neut	-	(178
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Bettler	NN	*	bettler	sg	neut	-	178)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	werden	VAINF	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Brav	NE	(VROOT(PSEUDO*	brav	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mein	PPOSAT	*	mein	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ichs	ADJD	*	ichs	-	-	-	(177)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ists	ADV	*	ists	sg	-	-	(178)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	(AP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	(NP(AP*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	trotz	APPR	*	trotz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	einem	ART	*))))	ein	sg	neut	-	(172)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sein	PPOSAT	(NP*	sein	sg	masc	-	(172|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Schatz	NN	*)	schatz	sg	masc	-	172)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	jeden	PIAT	(NP*	jeder	sg	masc	-	(179
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Tag	NN	*	tag	sg	masc	-	179)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Sonnenuntergang	NN	*)))	sonnenuntergang	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Viel	ADV	(S(AP*	viel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	leerer	ADJD	*)	leer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	leer	ADJD	*))	leer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	(180
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Flut	NN	*	flut	sg	fem	-	180)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	(S(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hoch	ADJD	*)	hoch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Sie	PPER	*	sie	pl	*	-	(180)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	morgens	ADV	*	morgens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	eintritt	VVFIN	*))	eintreten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	des	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Mittags	NN	*)	mittag	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	längst	ADV	*	längst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Verlaufen	NN	(NP*	verlaufen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	–	CARD	*))))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Weil	KOUS	(VROOT(PSEUDO(S*	weil	-	-	-	(181
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kanäle	NN	*	kanal	sg	-	-	(182)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(180)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zum	APPRART	(CO(NP(PP*	zu	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Teil	NN	*)	teil	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Verschlingen	NN	*)	verschlingen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	die	PRELS	(VP*	der	sg	fem	-	(182)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	füllen	VVINF	*))	füllen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Verstopfen	NN	*))	verstopfen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	gleich	ADV	(AP*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	unmöglich	ADJD	*)	unmöglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ist	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	181)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Getroffen	VVPP	*	getroff	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kenne	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*)	der	sg	neut	-	(181)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(CS(S*	es	sg	neut	-	(183)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	taugt	VVFIN	*	taugen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Wenn	KOUS	(S*	wenn	-	-	-	(183
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Fürsten	NN	(NP*	fürst	sg	masc	-	(184)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Geier	NE	*)	geier	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	unter	APPR	(PP*	unter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Äsern	NN	*)	äser	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sind	VAFIN	*))	sein	pl	-	-	183)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sind	VAFIN	*	sein	pl	-	-	(185
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	pl	*	-	(184)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Äser	NN	(NP*	äser	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	unter	APPR	(PP*	unter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Geiern	NN	(MPN*	geier	sg	neut	-	185)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	taugts	FM	*)))	taugt	-	-	-	(185)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Noch	ADV	(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zehnmal	ADV	*)	zehnmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	weniger	PIS	*)	weniger	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	KON	(VROOT(PSEUDO(S*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(AP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Derwisch	ADJD	*))	derwisch	sg	neut	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(CO(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*))	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	habt	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gut	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	reden	VVINF	*	reden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	an	PTKVZ	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gebt	VVFIN	*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mir	PPER	*	sich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	tret	VVFIN	*	tret	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	meine	PPOSAT	*	mein	sg	fem	-	(186|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Stell	NN	*	stellen	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	186)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	*	euch	pl	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ab	PTKVZ	*	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bringt	VVFIN	*	bringen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dir	PPER	*	dir	sg	fem	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	deine	PPOSAT	(NP*	dein	sg	fem	-	(186|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Stelle	NN	*))	stelle	sg	fem	-	186)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mir	PPER	*	sich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(CO(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	viel	ADV	*))	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*	euch	pl	*	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sie	PPER	(VP*	sie	sg	fem	-	(186)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	trefflich	ADJD	*	trefflich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wuchern	VVINF	*))	wuchern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	(187
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ebb	NE	*	ebb	-	-	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	im	APPRART	*	in	sg	neut	-	(172
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Schatz	NN	*	schatz	sg	neut	-	172)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	–	NN	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wie	KOKOM	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	öfters	NE	*	öfter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	–	KON	*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	zieht	VVFIN	*	ziehen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Ihr	PPER	*	ihr	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Eure	PPOSAT	*	euer	pl	fem	-	(188|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Schleusen	NN	*	schleusen	pl	fem	-	188)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	auf	PTKVZ	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	schießt	VVFIN	*	schießen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	vor	PTKVZ	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	nehmt	VVFIN	*	nehmt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Zinsen	NN	*	zins	pl	masc	-	(189)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Euch	PPER	*	euch	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	gefällt	VVPP	*	fällen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	.	$.	*	--	-	-	-	187)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(S*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zins	NN	(NP*	zins	sg	*	-	(190
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vom	APPRART	(PP*	von	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Zins	NN	*	zins	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(NP*	der	pl	fem	-	(189
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Zinsen	NN	*))))	zins	pl	fem	-	190)|189)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Freilich	ADV	(VROOT(PSEUDO(S*)	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bis	APPR	(VROOT(PSEUDO(S*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mein	PPOSAT	(NP*	mein	sg	neut	-	(35|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Kapital	NN	*)	kapital	sg	neut	-	35)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	lauter	PIAT	*	laut	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Zinsen	NN	*)	zins	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wird	VAFIN	*)	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(187)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	lockt	VVFIN	*	locken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schreibet	VVFIN	*	schreiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	unsrer	ADJA	(NP*	unsrer	sg	*	-	(169|(166)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Freundschaft	NN	*	freundschaft	sg	fem	-	169)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nur	ADV	(AVP*	nur	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gleich	ADV	*)))	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	den	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Scheidebrief	NN	*)	scheidebrief	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wahrlich	ADV	*	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hab	VAFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sehr	ADV	*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	*	euch	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gerechnet	VVPP	*	rechnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wahrlich	ADJD	(VROOT(PSEUDO*	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	NE	(NP*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*))	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*)	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mein	PPOSAT	(NP*	mein	sg	neut	-	(186|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Amt	NN	*)	amt	sg	neut	-	186)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Mit	APPR	(PP*	mit	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ehren	NN	*))	ehre	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	würdet	VAFIN	*	würden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	führen	VVINF	(VP*	führen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	helfen	VVINF	*	helfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Ich	PPER	(NP*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	allzeit	ADV	(AP*	allzeit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	offne	ADJA	*)	offn	-	-	-	(188
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Kasse	NN	*)	kasse	sg	-	-	188)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Euch	PPER	*)	euch	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	hätte	VAFIN	*)))	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schüttelt	VVFIN	*)	schütteln	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	verstehn	VVFIN	*	verstehn	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wir	PPER	*	wir	pl	*	-	(166)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	uns	PRF	*	uns	pl	-	-	(166)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	(AP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	recht	ADJD	*))	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hier	ADV	(VROOT(PSEUDO(VP*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gibts	ADV	*	gibt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	unterscheiden	VVINF	*))	unterscheiden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	warum	PWAV	*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	(VROOT(PSEUDO(S(MPN*	al-hafi	*	*	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Derwisch	NE	*)	derwisch	sg	*	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	allem	PIS	*	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	vermag	VVFIN	*))	vermögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	stets	ADV	*	stets	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	willkommen	ADJD	*)	willkommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	(NP*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Al-Hafi	NE	*	al-hafi	*	*	-	(170
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Defterdar	NE	*	defterdar	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	des	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Saladin	NN	*))	saladin	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Der	ART	(NP*	der	sg	masc	-	(170)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	–	NN	*)	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dem	ART	(NP*	der	sg	masc	-	(170)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	NN	*)))	–	sg	masc	-	170)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Erriet	VVFIN	(VROOT(PSEUDO(S*	erriet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ichs	ADV	*	ich	-	-	-	(191)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	(191
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	immer	ADV	(AP(AVP(AP(AVP*	immer	-	-	-	191)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	So	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gut	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	als	KOKOM	(AP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	klug	ADJD	*))	klug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	klug	ADJD	*	klug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	als	KOKOM	(AVP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	weise	ADV	*))	weise	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	seid	VAFIN	*)	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geduld	NN	*	geduld	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	am	APPRART	(PP*	an	sg	masc	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Hafi	NE	*)	hafi	sg	masc	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	unterscheidet	VVFIN	*	unterscheiden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Soll	VMFIN	(VP(S*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	bald	ADV	(VP*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	geschieden	VVPP	*))	scheiden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sein	VAINF	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Seht	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	da	ADV	(NP*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Das	ART	*	der	sg	neut	-	(162
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ehrenkleid	NN	*	ehrenkleid	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	das	ART	(S(NP*	der	sg	neut	-	(162)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Saladin	NN	*)	saladin	*	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mir	PPER	*	sich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gab	VVFIN	*))	geben	sg	-	-	162)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Eh	XY	(VROOT(PSEUDO*	eh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	es	PPER	(NP(AVP(CS(S(VP*	es	sg	neut	-	(162)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	verschossen	VVPP	*)	verschießen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	eh	ADV	(S*	eh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	es	PPER	(NP*	es	sg	neut	-	(162)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Lumpen	NN	*	lump	pl	fem	-	(192)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Geworden	NN	*)	geworden	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sie	PPER	*	sie	pl	fem	-	(192)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	einen	ART	(VP(NP*	ein	sg	masc	-	(163
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Derwisch	NN	*)	derwisch	sg	masc	-	163)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	kleiden	VVINF	*)))))	kleiden	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Hängts	NN	(NP*	hängt	sg	masc	-	(162)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Jerusalem	NE	*)))	jerusalem	sg	neut	(LOC*)	(14)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	am	APPRART	(PP*	an	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Nagel	NN	*))	nagel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Ich	PPER	(S*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	am	APPRART	(PP*	an	-	-	-	(193
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Ganges	NN	*	gange	sg	neut	-	193)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	wo	PWAV	(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	leicht	ADJD	(CAVP*	leicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	barfuß	ADV	*)	barfuß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	Den	NE	*	der	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	heißen	VVFIN	*))	heiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	Sand	NN	*	sand	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	meinen	PPOSAT	*	mein	pl	neut	-	(194|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	Lehrern	NN	*)	lehrer	pl	neut	-	194)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	trete	VVFIN	*)	treten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dir	PPER	(VROOT(PSEUDO(AP(AP*	dir	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ähnlich	ADJD	*)	ähnlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gnug	ADJD	*)	gnug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Schach	NE	*	schach	sg	neut	-	(195)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihnen	PPER	*)	ihnen	pl	neut	-	(194)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	spiele	VVFIN	*)	spielen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dein	PPOSAT	(VROOT(PSEUDO(NP*	dein	sg	neut	-	(195|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	höchstes	ADJA	*	hoch	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gut	NN	*)	gut	sg	neut	-	195)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denkt	VVFIN	(VROOT(PSEUDO(S*	denken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	was	PWS	(S*	was	sg	neut	-	(196
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	*	mich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	verführte	VVFIN	*))	verführen	sg	-	-	196)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Damit	PROAV	(S*	damit	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	selbst	ADV	(AP(AVP*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	länger	ADJD	*)	lang	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	betteln	VVINF	*	betteln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dürfte	VMFIN	*)	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Den	NE	(VROOT(PSEUDO(S(NP(AP*	der	pl	fem	-	(160
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	reichen	ADJA	*)	reich	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mann	NN	*)	mann	pl	*	-	160)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bettlern	NN	*)	bettler	pl	masc	-	(176)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	spielen	VVINF	*)	spielen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	könnte	VMFIN	*)	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Vermögend	ADJD	*	vermögend	-	-	-	(197
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	im	APPRART	*	in	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Hui	NN	*	hui	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	den	ART	*	der	sg	masc	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	reichsten	ADJA	*	reich	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Bettler	NN	*	bettler	sg	masc	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	In	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	einen	ART	*	ein	sg	masc	-	(160
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	armen	ADJA	*	arm	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Reichen	NN	*	reiche	sg	masc	-	160)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	verwandeln	VVINF	*	verwandeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*	--	-	-	-	197)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(197)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Weit	ADJD	(VROOT(PSEUDO(S*	weit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	etwas	PIAT	(NP*	etwas	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Abgeschmackters	NN	*))	abgeschmackter	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fühlte	VVFIN	*	fühlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PRF	*	mich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zum	APPRART	*	zu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	erstenmal	ADV	*	erstenmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	geschmeichelt	VVPP	*	gesmeichelt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Durch	APPR	*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Saladins	NE	*	saladin	-	-	-	(198|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gutherz	NE	*	gutherz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gen	APPR	*	gen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Wahn	NN	*	wahn	-	-	-	198)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	geschmeichelt	VVPP	*	gesmeicheln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	–	XY	*	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	PDS	*	der	sg	masc	-	(198)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	»	XY	(VROOT(PSEUDO*	»	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ein	ART	(S(NP*	ein	sg	masc	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bettler	NN	*)	bettler	sg	masc	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wisse	VVFIN	*	wissen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Bettlern	NE	(MPN*	bettler	pl	masc	-	(176)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Zu	NE	*)	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Mute	NN	*	mute	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sei	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ein	ART	(S(NP*	ein	sg	masc	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Bettler	NN	*)	bettler	sg	masc	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nur	ADV	(VP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Gelernt	VVPP	*	gelernt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	guter	ADJA	*	gut	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Weise	NN	*)	weise	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Bettlern	NN	*	bettler	pl	masc	-	(176)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	geben	VVINF	*)))	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dein	PPOSAT	(VROOT(PSEUDO(CS(S(NP*	dein	-	-	-	(199|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vorfahr	NN	*)	vorfahr	-	-	-	199)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sprach	VVFIN	*	sprechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*)	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	war	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mir	PPER	*	sich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	viel	ADV	(AP*	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zu	PTKA	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	kalt	ADJD	*)	kalt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Zu	PTKA	(AP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	rauh	ADJD	*)))	rauh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(199)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gab	VVFIN	*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	unhold	ADJD	*	unhold	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(199)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gab	VVFIN	*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Erkundigte	NN	*	erkundigte	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ungestüm	ADJD	*	ungestüm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sich	PRF	*	sich	sg	-	-	(199)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Nach	APPR	*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	dem	ART	*	der	sg	masc	-	(176
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Empfänger	NN	*	empfänger	sg	masc	-	176)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	nie	ADV	*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	zufrieden	ADJD	*	zufrieden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Er	PPER	*	er	sg	masc	-	(199)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	den	ART	*	der	sg	masc	-	(200
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Mangel	NN	*	mangel	sg	masc	-	200)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	kenne	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	wollt	VMFIN	*	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	er	PPER	*	er	sg	masc	-	(199)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	Des	ART	*	der	sg	masc	-	(201|(200
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Mangels	NN	*	mangel	sg	masc	-	200)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	Ursach	NN	*	ursach	-	-	-	201)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	wissen	VVINF	*	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	um	KOUI	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	die	ART	*	der	sg	fem	-	(1050
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	Gabe	NN	*	gabe	sg	fem	-	1050)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	Nach	APPR	*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	dieser	PDAT	*	dieser	sg	fem	-	(201
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	Ursach	NN	*	ursach	sg	fem	-	201)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	filzig	ADJD	*	filzig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	abzuwägen	VVIZU	*	abwägen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	*	der	sg	neut	-	(202)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Al-Hafi	NE	*	al-hafi	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	unmild	ADJD	*	unmild	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mild	ADJD	*	mild	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wird	KOKOM	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Saladin	NE	*	saladin	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	im	APPRART	*	in	sg	masc	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Hafi	NE	*	hafi	sg	masc	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	erscheinen	VVINF	*	erscheinen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	*	al-hafi	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gleicht	VVFIN	*	gleichen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	verstopften	ADJA	*	verstopft	pl	-	-	(203
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Röhren	NN	*	röhren	sg	*	-	203)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Die	NN	*	der	sg	fem	-	(203|(203)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihre	PPOSAT	*	ihr	sg	fem	-	(203)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	klar	ADJD	*	klar	-	-	-	(204
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	still	ADJD	*	still	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	empfangnen	ADJA	*	empfangnen	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Wasser	NN	*	wasser	sg	neut	-	204)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	unrein	ADJD	*	unrein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	sprudelnd	ADJD	*	sprudelnd	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	geben	VVINF	*	geben	-	-	-	203)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Al-Hafi	NE	*	al-hafi	-	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	denkt	VVFIN	*	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Al-Hafi	NE	*	al-hafi	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	fühlt	VVFIN	*	fühlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	wie	KOKOM	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	ich	PPER	*	ich	sg	*	-	(1012)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	!	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	«	XY	*	«	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	lieblich	ADJD	*	lieblich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	klang	VVFIN	(S*	klingen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	des	ART	(NP*	der	sg	masc	-	(196|(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Voglers	NN	*	vogler	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Pfeife	NE	*)	pfeife	sg	-	-	196)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	bis	KOUS	(S*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Der	ART	(NP*	der	sg	masc	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Gimpel	NN	*)	gimpel	sg	masc	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	dem	ART	*	der	sg	neut	-	(186
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Netze	NN	*)	netz	sg	neut	-	186)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	war	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(3|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Geck	NE	*	geck	sg	-	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(NP*	ich	sg	*	-	(3|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eines	ART	(NP*	ein	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gecken	NN	*	geck	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Geck	NE	*))	geck	-	-	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gemach	NN	(VROOT(PSEUDO(CNP*	gemach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mein	PPOSAT	(NP*	mein	sg	neut	-	(3|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Derwisch	NN	*)	derwisch	sg	neut	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Gemach	NN	*)	gemach	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	NE	*	ei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	*	es	sg	neut	-	(205)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Geckerei	VVPP	*	geckerei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Bei	APPR	*	bei	-	-	-	(205
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Hunderttausenden	NN	*	hunderttausend	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	die	ART	*	der	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Menschen	NN	*	mensch	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	drücken	VVINF	*	drücken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Ausmergeln	NN	*	ausmergel	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	plündern	VVFIN	*	plündern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	martern	VVINF	*	martern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	würgen	VVINF	*	würgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Menschenfreund	NN	*	menschenfreund	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	einzeln	ADJD	*	einzeln	-	-	-	(206)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	scheinen	VVINF	*	scheinen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	wollen	VMFIN	*	wollen	pl	-	-	205)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Es	PPER	*	es	sg	neut	-	(207)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	Geckerei	VVPP	*	geckerei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	des	ART	*	der	sg	masc	-	(207|(208|(209
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	Höchsten	NN	*	hoch	sg	masc	-	209)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	Milde	NN	*	milde	sg	-	-	208)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	,	$,	*	--	-	-	-	207)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	Die	NN	*	der	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	sonder	KON	*	sonder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	Auswahl	NN	*	auswahl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	über	APPR	*	über	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	Bös	NE	*	bös	-	-	-	(210)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	Gute	NN	*	gut	pl	*	-	(211)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	Flur	NN	*	flur	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	Wüstenei	NN	*	wüstenei	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	50	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	51	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	52	Sonnenschein	NE	*	sonnenschein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	53	Und	KON	*	und	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	54	Regen	APPR	*	regen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	55	sich	PRF	*	sich	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	56	verbreitet	VVPP	*	verbreiten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	57	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	58	–	NN	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	59	nachzuäffen	VVIZU	*	nachzuäffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	60	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	61	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	62	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	63	des	ART	*	der	sg	masc	-	(212|(209
Nathan.xml.rkpt.0.CoNLL2012.conll	000	64	Höchsten	NN	*	hoch	sg	masc	-	209)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	65	immer	ADV	*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	66	volle	ADJA	*	voll	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	67	Hand	NN	*	hand	sg	fem	-	212)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	68	Zu	NN	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	69	haben	VAFIN	*	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	70	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	es	PPER	*	es	sg	neut	-	(213)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Geckerei	NN	*	geckerei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Genug	NN	(VROOT(PSEUDO*	genug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	hör	XY	(VROOT(PSEUDO*	hör	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laßt	VVIMP	(VROOT(PSEUDO(S*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	meiner	PPOSAT	(NP*	mein	sg	fem	-	(213|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Geckerei	NN	*)	geckerei	sg	fem	-	213)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mich	PPER	*	mich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	(VP(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	auch	ADV	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	erwähnen	VVINF	*))	erwähnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(213)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wäre	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nicht	PTKNEG	(VP(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Geckerei	NN	(NP*	geckerei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	an	APPR	(NP(PP*	an	-	-	-	(213
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	solchen	PIAT	*	solcher	pl	fem	-	(214
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Geckereien	NN	*)	geckerei	pl	fem	-	213)|214)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Die	ART	*	der	sg	fem	-	(215
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gute	ADJA	*	gut	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Seite	NN	*	seite	sg	fem	-	215)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	dennoch	ADV	*))	dennoch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	auszuspüren	VVIZU	*)	ausspüren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Um	KOUI	(VP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Anteil	NN	*	anteil	sg	masc	-	(213)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	dieser	PDAT	(AP(NP*	dieser	sg	masc	-	(215
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	guten	ADJA	*	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Seite	NN	*)	seite	sg	masc	-	215)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	wegen	APPO	*)	wegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	An	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	dieser	PDAT	*	dieser	sg	fem	-	(214
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Geckerei	NN	*)	geckerei	sg	fem	-	214)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	nehmen	VVINF	*))))	nehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Heh	XY	*	heh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	*	der	sg	neut	-	(213)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	(VROOT(PSEUDO(DL*	al-hafi	-	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mache	VVFIN	(S*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	du	PPER	*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bald	ADV	(PP*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	In	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	deine	PPOSAT	*	dein	pl	masc	-	(104|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Wüste	NN	*)	wüste	pl	masc	-	104)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	kömmst	VVFIN	*)))	kömmsen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fürchte	VVFIN	*	fürchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Grad	NE	*	grad	-	-	-	(216
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	unter	APPR	*	unter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Menschen	NN	*	mensch	pl	masc	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	möchtest	VMFIN	*	möchtest	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	du	PPER	*	du	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Mensch	NN	*	mensch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sein	PPOSAT	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	verlernen	ADJA	*	verlern	-	-	-	216)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DERWISCH	NE	(VROOT(PSEUDO*	derwisch	-	-	(LOC*)	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Recht	NN	*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(216)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	fürcht	VVFIN	*	fürcht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Lebt	VVPP	(VROOT(PSEUDO(VP*	leben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	(S*))	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S(ISU*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hastig	ADJD	*))	hastig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Warte	NN	*	warte	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(NP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Al-Hafi	NE	*)	al-hafi	-	-	(LOC*)	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Entläuft	VVFIN	(VROOT(PSEUDO(S*	entlaufen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dir	PPER	*	dir	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	(NP*	der	sg	fem	-	(104
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Wüste	NN	*))	wüste	sg	fem	-	104)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Warte	NN	(NP*	warte	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hörte	VVFIN	*)	hören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	He	NE	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Al-Hafi	NE	*	al-hafi	-	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	hier	ADV	(VROOT(PSEUDO(S*)	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Weg	NN	*	weg	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hätt	VAFIN	*	hätt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ihn	PPER	*	ihn	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Nach	APPR	*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	unserm	PPOSAT	*	unser	sg	neut	-	(61|(29)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Tempelherrn	NN	*	tempelherr	sg	neut	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	gefragt	VVPP	*	fragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Vermutlich	ADV	(VROOT(PSEUDO(DL*	vermutlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kennt	VVFIN	*))	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daja	NE	(VROOT(PSEUDO*	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eilig	ADJD	(AP*	eilig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	herbei	ADV	*)	herbei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	NE	(VROOT(PSEUDO(NP(MPN*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*)	nathan	-	-	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*)	nathan	-	-	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gibts	ADV	*	gibt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	läßt	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	*	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wieder	ADV	(NP*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sehn	CARD	*))	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	läßt	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sich	PRF	*	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wieder	ADV	(NP*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sehn	CARD	*))	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	KON	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wann	PWAV	*	wann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	läßt	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sich	PRF	*	sich	sg	-	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	*	der	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nur	ADV	*	nur	-	-	-	(217
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	euer	PPOSAT	*	eu	sg	masc	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Er	PPER	*	er	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	heißt	VVFIN	*	heißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	217)|(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	*	der	sg	neut	-	(217)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sollt	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Engel	NN	*	engel	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wäre	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wandelt	VVFIN	*	wandeln	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	untern	APPR	(PP*	untern	-	-	-	(76
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Palmen	NN	*)	palme	pl	fem	-	76)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Und	NN	*)	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ab	PTKVZ	*)	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	bricht	VVFIN	(S*	brechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Zeit	NN	*)	zeit	sg	fem	-	(158)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Zeit	NN	*)))	zeit	sg	fem	-	(158)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sich	PRF	*	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Datteln	NN	*	dattel	pl	neut	-	(218)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(VP(AP*	sie	sg	fem	-	(218)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	essend	ADJD	*))	essend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Tempelherr	NN	*)	tempelherr	sg	masc	-	(114)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	quält	VVFIN	*	quälen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(219|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gierig	ADJD	*	gierig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Aug	NN	*	aug	-	-	-	219)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	erriet	VVFIN	*	erraten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hinter	APPR	*	hinter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Den	ART	*	der	pl	fem	-	(76
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dicht	ADJD	*	dicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	verschränkten	ADJA	*	verschränkt	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Palmen	NN	*	palme	pl	fem	-	76)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	folgt	VVFIN	*	folgen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Ihm	PPER	*	ihm	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	unverrückt	ADJD	*	unverrückt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	läßt	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bitten	VVINF	(VP*	bitten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	–	KOUS	(S*	–	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Euch	PPER	(NP*	euch	pl	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Beschwören	NN	*)	beschwören	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	NN	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ungesäumt	ADJD	(AP*	ungesäumen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ihn	PPER	(VP*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	anzugehn	VVIZU	*)))))	anzugehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(S*)	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eilt	VVFIN	*	eilen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	(VP*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Fenster	NN	*)	fenster	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	winken	VVINF	*	winken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ob	KOUS	(S*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	hinauf	ADV	*	hinauf	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	weiter	ADV	(PP*	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ab	APPR	*	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Sich	NE	*)	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	schlägt	VVFIN	*)))	schlagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(S*)	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eilt	VVFIN	*	eilen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	(220
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wie	KOKOM	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	vom	APPRART	*	von	sg	neut	-	(55
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Kamele	NN	*	kamel	sg	neut	-	55)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Gestiegen	VVPP	*	gestieg	sg	neut	-	220)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKVZ	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	meld	ADJD	*	meld	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	meine	PPOSAT	*	mein	sg	fem	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Wiederkunft	NN	*	wiederkunft	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gib	VVIMP	(VROOT(PSEUDO(S*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Acht	CARD	*	acht	-	-	-	(221)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(CS(S(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Biedermann	NE	*)	biedermann	sg	masc	(PER*)	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	(VP(VP(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mein	PPOSAT	*	mein	sg	masc	-	(19|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Haus	NN	*	haus	sg	neut	-	19)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	In	APPR	(PP*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	meinem	PPOSAT	*	mein	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Absein	NN	*))	absein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	betreten	VVINF	*)	betreten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	wollen	VMINF	*))	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	ungern	VVINF	(VP*	ungern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	der	ART	(NP*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	selbst	ADV	(VP(NP*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Ihn	PPER	*)	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	laden	VVINF	*)	laden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	läßt	VVFIN	*)))))	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sag	VVFIN	*	sag	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	laß	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	bitten	VVFIN	*	bitten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	herzlich	ADJD	*	herzlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	bitten	VVINF	*	bitten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	All	PIAT	*	all	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	umsonst	ADV	*	umsonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kurz	ADJD	*	kurz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kömmt	VVFIN	*)	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	keinem	PIAT	(NP*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Juden	NN	*)	Jude	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geh	XY	*	gehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wenigstens	ADV	(S*	wenigstens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihn	PPER	(VP*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	anzuhalten	VVIZU	*)	anhalten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wenigstens	ADV	*	wenigstens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	deinen	PPOSAT	*	dein	pl	neut	-	(222|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Augen	NN	*))	auge	pl	neut	-	222)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Begleiten	NN	*	begleit	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	komme	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gleich	ADV	*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dir	PPER	*	dir	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nach	PTKVZ	*)	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(S(AVP(S*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eilet	VVFIN	*	eilet	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hinein	PTKVZ	*)	hinein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*)	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Daja	NE	*	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	heraus	PTKVZ	*)	heraus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Szene	NN	(VROOT(PSEUDO(S*	szene	sg	fem	-	(223)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Platz	NN	*	platz	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Palmen	NN	*))	palme	pl	fem	-	(76
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	unter	APPR	(PP*	unter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	welchen	PWAT	*	welcher	sg	fem	-	(76)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	*	der	sg	fem	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Tempelherr	NN	*)	tempelherr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	auf	PTKVZ	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nieder	ADV	*	nieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	geht	VVFIN	*)	gehen	sg	-	-	76)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(S(NP*	ein	sg	masc	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Klosterbruder	NN	*)	klosterbruder	sg	masc	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	folgt	VVFIN	*	folgen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	einiger	PIAT	*	einiger	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Entfernung	NN	*)	entfernung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	der	ART	*	der	sg	fem	-	(224
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Seite	NN	*)	seite	sg	fem	-	224)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	immer	ADV	(AVP*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	er	PPER	*	er	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	anreden	VVINF	*	anreden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	wolle	VMFIN	*)))	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	PDS	(VROOT(PSEUDO(S*	der	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	folgt	VVFIN	*	folgen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	vor	APPR	(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	langer	ADJA	*	lang	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Weile	NN	*))	weile	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sieh	NE	(NP*	sieh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schielt	VVFIN	*	schielen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	*	er	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nach	APPR	(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	den	ART	*	der	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Händen	NN	*)))	hand	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Guter	ADJA	(NP*	guter	*	*	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bruder	NN	*)	bruder	sg	*	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ich	PPER	(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Euch	PPER	*	euch	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	auch	ADV	(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wohl	ADV	(CNP(NP*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Vater	NN	*)	vater	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nennen	VVINF	*	nennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	;	$.	*))	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(VP(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bruder	NN	*	bruder	-	-	-	(225)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	–	APPR	(PP*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Laienbruder	NN	*	laienbruder	*	masc	-	(225)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dienen	VVINF	*))	dienen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	guter	ADJA	*	gut	*	*	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bruder	NN	*	bruder	sg	*	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wer	PWS	*	wer	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	was	PWS	*	was	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bei	APPR	(VROOT(PSEUDO(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*)	gott	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	bei	APPR	(VROOT(PSEUDO(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*)	gott	-	-	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	XY	*	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	(NP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Recht	NN	*)	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	warmen	VVFIN	*	warm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Dank	NN	*)	dank	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gott	NN	*	gott	-	-	(PER*)	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geb	XY	*	geb	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	-	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	tausendfach	VVFIN	*	tausendfach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	*	ihr	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	geben	VVINF	*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wolltet	VMFIN	*	wollten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	(NP*	der	sg	masc	-	(226
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wille	NN	*	wille	sg	masc	-	226)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Und	KON	(CNP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	*	der	sg	fem	-	(150
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Gabe	NN	*)))	gabe	sg	fem	-	150)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	macht	VVFIN	*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	den	ART	(NP*	der	sg	masc	-	(211
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Geber	NN	*))	geber	sg	masc	-	211)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ward	VAFIN	*	ward	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	*	der	sg	neut	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Herrn	NN	*	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Almosens	NE	*	almosen	sg	masc	(PER*)	(150)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wegen	APPR	*	wegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nachgeschickt	VVPP	*	nachschicken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nachgeschickt	VVFIN	*)	nachschicken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	aus	APPR	(NP(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	*	der	sg	neut	-	(227
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Kloster	NN	*)))	kloster	sg	neut	-	227)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	(VROOT(PSEUDO(S*	wo	-	-	-	(227
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	eben	ADV	(AVP*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	jetzt	ADV	*)	jetzt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ein	ART	(VP(NP*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kleines	ADJA	*	klein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Pilgermahl	NN	*)	pilgermahl	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	finden	VVINF	*))	finden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	hoffte	VVFIN	*)))	hoffen	sg	-	-	227)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Tische	NN	*	tisch	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	waren	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	besetzt	VVPP	*	besetzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	komm	VVIMP	*	komm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	aber	KON	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Der	ART	*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Herr	NN	*	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zurück	PTKVZ	*	zurück	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wozu	PWAV	(VROOT(PSEUDO*	wozu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(228|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Fleisch	NN	*	fleisch	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	lange	ADV	*	lange	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gegessen	VVPP	*	gegessen	-	-	-	228)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	was	PIS	*	was	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	tuts	FM	*	tut	-	-	-	(228)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	pl	*	-	(218
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Datteln	NN	*)	dattel	pl	*	-	218)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	(AP*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	reif	ADJD	*))	reif	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nehm	NE	*	nehm	-	-	-	(229
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	*	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Herr	NN	*	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Acht	NE	*	acht	-	-	-	(230)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dieser	PDAT	*	dieser	sg	fem	-	(218
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Frucht	NN	*	frucht	sg	fem	-	218)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zu	APPR	(VROOT(PSEUDO(CS(S(VP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	viel	PIS	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	genossen	VVPP	*)	genießen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	taugt	VVFIN	*	taugen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	-	-	-	(218)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	verstopft	VVFIN	(S*	verstopfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Die	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Milz	NN	*))	milz	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	macht	VVFIN	(S*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	melancholisches	ADJA	(NP*	melancholisch	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Geblüt	NN	*)))	geblüt	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	229)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	melancholisch	ADJD	*	melancholisch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	fühlte	VVFIN	*)	fühlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dieser	PDAT	(AP(NP*	dieser	sg	fem	-	(229
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Warnung	NN	*)	warnung	sg	fem	-	229)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wegen	APPO	*)	wegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wurdet	VAFIN	*)	wurden	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	(S(NP*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Mir	NE	*	sich	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nachgeschickt	VVPP	*))	nachgeschickt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nein	PTKANT	*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(231|(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	soll	VMFIN	*	sollen	sg	-	-	231)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mich	PRF	*	mich	sg	-	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nach	APPR	(VP(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Euch	PPER	*)	euch	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	erkunden	VVINF	*))	erkunden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	auf	APPR	(S(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Zahn	NN	*)	zahn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	fühlen	VVFIN	*)	fühlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(231)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	selbst	ADV	*))	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Warum	PWAV	*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	(	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ein	ART	*	ein	sg	masc	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	verschmitzter	ADJA	*	verschmitzt	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bruder	NN	*	bruder	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	)	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Das	ART	*	der	sg	neut	-	(227
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Kloster	NN	*	kloster	sg	neut	-	227)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Eures	NE	*	dein	sg	masc	-	(232|(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gleichen	VVFIN	*	gleichen	sg	masc	-	232)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mehr	ADV	*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Weiß	NN	*	weiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S(S*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gehorchen	VVINF	*)	gehorchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	lieber	ADJA	(NP*	lieber	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Herr	NN	*))	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gehorcht	NN	(VP*	gehorcht	pl	-	-	(233)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ohne	APPR	(PP*	ohne	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	viel	ADV	*)	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	klügeln	VVINF	*)))	klügeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wär	XY	*	sein	-	-	-	(233
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	s	PPER	*	--	-	-	-	233)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gehorchen	VVPP	*	gehorchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	lieber	ADJA	*	lieber	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Herr	NN	*	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	(	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Die	ART	*	der	sg	fem	-	(234
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Einfalt	NN	*	einfalt	sg	fem	-	234)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	immer	ADJA	*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Recht	NN	*	recht	sg	neut	-	(37)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	behält	VVFIN	*	behalten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	)	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	CARD	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Ihr	PPER	*	ihr	pl	*	-	(235|(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	dürft	VVFIN	*	dürfen	pl	-	-	235)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	vertrauen	VVINF	*	vertrauen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Genauer	NN	*	genauer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	kennen	VVINF	*	kennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	möchte	VMFIN	*	möchten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihrs	PPER	*	ihr	-	-	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nicht	PTKNEG	(S*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	will	VMFIN	(S*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	(VP*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	schwören	VVINF	*)))	schwören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ziemte	NN	(VROOT(PSEUDO(S*	ziemen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mirs	VVFIN	*)	mir	-	-	-	(235)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	frommte	VVFIN	*	frommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mirs	APPRART	(PP*))	mir	-	-	-	(235)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wem	PWS	(VROOT(PSEUDO(CS(S*	wem	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ziemt	VVFIN	*)	ziemen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	frommt	VVFIN	(S*	frommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*	es	sg	neut	-	(236)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Daß	KOUS	(S*	daß	-	-	-	(236
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	neubegierig	ADJD	*)	neubegierig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ist	VAFIN	*)))	sein	sg	-	-	236)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wem	PWS	*	wem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dem	ART	(VROOT(PSEUDO(DL(NP*	der	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Patriarchen	NN	*)	patriarch	sg	neut	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	muß	VMFIN	(S*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	(VP*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	glauben	VVINF	*)))	glauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Der	PDS	(S*	der	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sandte	VVFIN	*	senden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	*	mich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	-	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nach	PTKVZ	*)	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Patriarch	NN	*)	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kennt	VVFIN	(VROOT(PSEUDO(S*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	der	PDS	*	der	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(NP*	der	sg	neut	-	(237
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	rote	ADJA	*	rot	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Kreuz	NN	*)	kreuz	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	weißem	ADJA	*	weiß	sg	masc	-	(238
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Mantel	NN	*)	mantel	sg	masc	-	237)|238)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	besser	ADJD	*))	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kenn	NE	*	kenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ichs	CARD	*	ich	-	-	-	(237)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bruder	NN	*	bruder	-	-	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ein	ART	*	ein	sg	masc	-	(239
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Tempelherr	NN	*	tempelherr	sg	masc	-	239)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ein	ART	*	ein	-	-	-	(240
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gefang	FM	*	gefingen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ner	PTKVZ	*	ner	-	-	-	240)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Setz	NN	*	setz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hinzu	PTKVZ	*	hinzu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gefangen	ADJD	*	fangen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Tebnin	NE	*	tebnin	-	-	-	(241)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Der	ART	*	der	sg	masc	-	(241
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Burg	NN	*	burg	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	die	PRELS	*	der	sg	fem	-	(241)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	des	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Stillstands	NN	*	stillstand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	letzter	ADJA	*	letzter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Stunde	NN	*	stunde	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Wir	PPER	*	wir	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	erstiegen	VVPP	*	erstiegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	hätten	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	um	KOUI	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	sodann	ADV	*	sodann	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Auf	APPR	*	auf	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Sidon	NE	*	sidon	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	los	PTKVZ	*	los	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	gehn	CARD	*	gehn	-	-	-	241)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Selbzwanzigster	NN	*	selbzwanzigster	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	gefangen	VVPP	*	gefangen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	Vom	APPRART	*	von	sg	neut	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	Saladin	NN	*	saladin	sg	neut	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	begnadiget	VVPP	*	begnadigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	Der	ART	*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	Patriarch	NN	*	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	er	PPER	*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	wissen	VVINF	*	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	braucht	VVFIN	*	brauchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	50	–	XY	*	–	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	51	Mehr	PIS	*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	52	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	53	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	54	er	PPER	*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	55	braucht	VVFIN	*	brauchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	56	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wohl	ADV	(VROOT(PSEUDO(S(AP*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schwerlich	ADJD	(AP*	schwerlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	ADV	*))	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Als	KOUS	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	weiß	VVFIN	*))	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wüßt	VVFIN	*	wüssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	warum	PWAV	*	warum	-	-	-	(242)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Der	ART	*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Herr	NN	*	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	vom	APPRART	*	von	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Saladin	NN	*	saladin	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	begnadigt	VVPP	*	begnadigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	worden	VAPP	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(242)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	selber	ADV	*	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Schon	NN	*	schon	-	-	-	(243)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Den	NE	*	der	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Hals	NE	*	hals	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	entblößt	VVFIN	*	entbloßen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	kniet	VVFIN	*	knaten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	meinem	PPOSAT	*	mein	sg	masc	-	(69|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Mantel	NN	*	mantel	sg	masc	-	69)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Den	NE	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Streich	NE	*	streich	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	erwartend	ADJD	*	erwartend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	schärfer	ADJA	*	scharf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Saladin	NN	*	saladin	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Ins	NE	*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Auge	NE	*	auge	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	faßt	VVFIN	*	fassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	näher	ADJD	*	nah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	springt	VVFIN	*	springen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	winkt	VVFIN	*	winken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Man	PIS	*	man	sg	*	-	(244)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hebt	VVFIN	*	heben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auf	PTKVZ	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	entfesselt	VVPP	*	entfesseln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	will	VMFIN	*	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ihm	PPER	*	ihm	sg	neut	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	danken	VVINF	*	danken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	seh	XY	*	seh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sein	PPOSAT	*	sein	-	-	-	(245|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Aug	NN	*	aug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	'	$(	*	--	-	-	-	245)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Tränen	NN	*	träne	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	stumm	ADJD	*	stumm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Ist	VVFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	bleibe	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*	der	sg	neut	-	(243)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zusammenhängt	VVFIN	*	zusammenhängen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	enträtsle	VVFIN	(S*	enträtslen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sich	PRF	*))	sich	sg	-	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Der	ART	(NP*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Patriarche	NN	*	patriarche	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schließt	VVFIN	*	schließen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	daraus	PROAV	*	daraus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Gott	NN	*	gott	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	großen	ADJA	*	groß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	großen	ADJA	*	groß	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Dingen	NN	*	ding	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Müß	NN	*	müß	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	aufbehalten	VVPP	*	aufbehalten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	haben	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	großen	ADJA	*))	groß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	*	ein	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Judenmädchen	NN	*	judenmädchen	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	aus	APPR	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	*	der	sg	neut	-	(62
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Feur	NN	*	feur	sg	neut	-	62)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	retten	VVINF	*	retten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Sinai	NE	*	sinai	sg	masc	-	(246)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	neugier	FM	*	neugier	-	-	-	(247
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ge	ADJA	*	GE	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Pilger	NN	*	pilger	-	-	-	247)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Geleiten	NN	*	geleit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	dergleichen	VVFIN	*	dergleichen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	mehr	ADV	*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wird	VAFIN	(VROOT(PSEUDO(S*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kommen	VVINF	*)	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	inzwischen	ADV	*	inzwischen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	(AP(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	übel	ADJD	*))	übel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Patriarch	NN	*	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bereits	ADV	*	bereits	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Weit	ADJD	*	weit	-	-	-	(248
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wicht	PTKNEG	*	wichen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	gere	ADJA	*	g	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Geschäfte	NN	*	geschäft	pl	neut	-	248)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	den	ART	*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Herrn	NN	*	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	meint	VVFIN	(VROOT(PSEUDO(S*	meinen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	(NP*	ihr	sg	masc	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bruder	NN	(S*)))	bruder	sg	masc	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	merken	VVINF	*	merken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	lassen	VVINF	*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	(VROOT(PSEUDO*	ei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	(AP*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Den	ART	(NP*	der	pl	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Herrn	NN	*)	herr	pl	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	erst	ADV	*)	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ergründen	VVINF	(VP*	ergründen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ob	KOUS	(S*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	so	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Der	ART	(S(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Mann	NN	*)	mann	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	wohl	ADV	*))	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ist	VAFIN	*)))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ja	PTKANT	(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ergründet	VVFIN	*	ergründen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	(	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	*	der	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ergründet	VVPP	*	ergründen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	)	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	–	$.	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kürzste	ADJA	*)	kürzsen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	(VP*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dem	ART	(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Herrn	NN	*)	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ganz	ADV	(AP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	grade	ADJD	*)	grade	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	des	ART	*	der	sg	masc	-	(248|(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Patriarchen	ADJA	*	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Wunsch	NN	*	wunsch	sg	masc	-	248)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Eröffne	NE	*))))	eröffne	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wohl	ADV	(VROOT(PSEUDO(S*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(249
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	durch	APPR	(VP(PP*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	den	ART	*	der	pl	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Herrn	NN	*	herr	pl	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ein	ART	(NP*	ein	sg	neut	-	(250
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Briefchen	NN	*)	briefchen	sg	neut	-	250)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gern	ADV	*)	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	bestellt	VVPP	*))))	bestellen	-	-	-	249)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Durch	APPR	(VROOT(PSEUDO(PP*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*)	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Kein	PIAT	(NP*	kein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bote	NN	*))	bote	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(CNP(NP*	der	sg	neut	-	(249)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	(S*	der	sg	neut	-	(249)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wäre	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	(NP*	der	sg	neut	-	(251
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Geschäft	NN	*)))	geschäft	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	251)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Das	NN	*)	der	sg	neut	-	(251)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	weit	ADJD	*	weit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	glorreicher	ADJD	(S*	glorreich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	als	KOKOM	(VP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Judenmädchen	NN	(NP*	judenmädch	sg	neut	-	(252)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Dem	ART	(NP*	der	sg	neut	-	(253
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Feur	NN	*))	feur	sg	neut	-	253)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	entreißen	VVINF	*))	entreißen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Muß	VMFIN	(VROOT(PSEUDO(S*	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	–	PPER	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Der	ART	(NP*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Patriarch	NN	*	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	–	NE	*)	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	diesem	PDAT	*	dieser	sg	masc	-	(250
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Briefchen	NN	*))	briefchen	sg	masc	-	250)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Der	ART	(VP(NP*	der	sg	masc	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ganzen	ADJA	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Christenheit	NN	*)	christenheit	sg	fem	-	99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sehr	ADV	(AP*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	viel	PIS	*)	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	gelegen	VVPP	*))	liegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dies	PDAT	*	dieser	sg	neut	-	(250
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Briefchen	NN	*	briefchen	sg	neut	-	250)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bestellt	VVPP	*	bestellen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	haben	VAINF	*	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	–	PPER	*	–	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Der	ART	*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Patriarch	NN	*	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	–	$.	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	werd	VAFIN	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	einst	ADV	*	einst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	im	APPRART	*	in	sg	masc	-	(254
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Himmel	NN	*	himmel	sg	masc	-	254)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Gott	NN	*	gott	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	einer	ART	*	ein	sg	fem	-	(255
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	besondern	ADJA	*	besondern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Krone	NN	*	krone	-	-	-	255)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	lohnen	VVFIN	*	lohnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dieser	PDAT	*	dieser	sg	masc	-	(255
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Krone	NN	*	krone	sg	masc	-	255)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	PPER	*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Patriarch	NN	*	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	$.	*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Sei	NN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	niemand	PIS	*	niemand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	würd	VAFIN	*	würd	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ger	ADJD	*	g	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	mein	PPOSAT	*	mein	sg	masc	-	(61|(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Herr	NN	*	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Als	KOUS	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	diese	PDAT	(VP(NP*	dieser	sg	fem	-	(255
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Krone	NN	*)	krone	sg	fem	-	255)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	verdienen	VVINF	*))	verdienen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	–	PPER	(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Der	ART	(NP*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Patriarch	NN	*))	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	–	$.	*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	schwerlich	ADJD	*	schwerlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	jemand	PIS	*	jemand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	auch	ADV	(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Geschickter	NN	*)	geschickter	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	als	KOKOM	(NP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	mein	PPOSAT	*	mein	sg	masc	-	(61|(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Herr	NN	*))	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Als	KOUS	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	frei	ADJD	*	frei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	könn	VMFIN	*	könn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	überall	ADV	*	überall	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sich	PRF	*	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	besehn	ADJD	*	besehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Versteh	NE	*	versteh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	eine	ART	*	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Stadt	NN	*	stadt	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	stürmen	VVINF	*	stürmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Zu	PPER	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	schirmen	VVINF	*	schirma	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	könne	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	–	PPER	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	der	ART	*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Patriarch	NN	*	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	–	$.	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	Die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Stärk	NN	*	stärk	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	Schwäche	NN	*	schwäche	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	der	ART	*	der	sg	masc	-	(256
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	Saladin	NE	*	saladin	*	*	-	256)|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	Neu	ADJD	*	neu	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	aufgeführten	ADJA	*	aufgeführen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	innern	ADJA	*	innern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	zweiten	ADJA	*	zweiter	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	Mauer	NN	*	mauer	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	Am	PTKA	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	besten	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	schätzen	VVINF	*	schätzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	50	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	51	sie	PPER	*	sie	-	-	-	(256)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	52	am	APPRART	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	53	deutlichsten	ADJA	*	deutlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	54	Den	ART	*	der	pl	masc	-	(121
Nathan.xml.rkpt.0.CoNLL2012.conll	000	55	Streitern	NN	*	streiter	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	56	Gottes	NN	*	gott	sg	masc	(LOC*)	121)|(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	57	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	58	–	PPER	*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	59	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	60	der	ART	*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	61	Patriarch	NN	*	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	62	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	63	–	$.	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	64	Beschreiben	NN	*	beschreiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	65	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Guter	ADJA	(VROOT(PSEUDO(S(NP*	gut	sg	masc	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bruder	NN	*)	bruder	sg	masc	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	doch	ADV	(VP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	des	ART	(NP*	der	sg	masc	-	(257|(250
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Briefchens	NN	*)	briefchen	sg	masc	-	250)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nähern	VVINF	*)	nähern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Inhalt	NN	*	inhalt	sg	masc	-	257)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wüßte	VVFIN	*)	wissen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	den	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	PPER	(S*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	(S*	der	sg	masc	-	(257)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nun	ADV	*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	recht	ADJD	*)	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(250
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Briefchen	NN	*)	briefchen	sg	neut	-	250)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	König	NN	*	könig	sg	masc	-	(258
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Philipp	NE	*))	philipp	sg	masc	(PER*)	258)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Patriarch	NN	*	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hab	VAFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mich	PPER	*	mich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	oft	ADV	*	oft	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gewundert	VVPP	*	wundern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ein	ART	*	ein	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Heiliger	NN	*	heilige	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	der	PRELS	*	der	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	ganz	ADV	*	ganz	-	-	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Im	APPRART	*	in	sg	neut	-	(259
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Himmel	NN	*	himmel	sg	neut	-	259)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	lebt	VVFIN	*	leben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	zugleich	ADV	*	zugleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	so	ADV	*	so	-	-	-	(260
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	unterrichtet	VVFIN	*	unterrichten	-	-	-	260)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Von	APPR	*	von	-	-	-	(261
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Dingen	NN	*	dingen	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	dieser	PDAT	*	dieser	sg	fem	-	(262
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	Welt	NN	*	welt	sg	fem	-	261)|262)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	herab	ADV	*	herab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	Sich	PRF	*	sich	sg	-	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	lassen	VVINF	*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(260)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sauer	ADJD	(VP*	sauer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	werden	VAINF	*))	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Patriarch	NN	*)	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Weiß	NN	*	weiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	genau	ADJD	*	genau	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zuverlässig	ADJD	*	zuverlässig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wie	KOKOM	*	wie	-	-	-	(263
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	stark	ADJD	*	stark	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	263)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	welcher	PWAT	*	welcher	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Seite	NN	*	seite	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Saladin	NE	*	saladin	sg	masc	(PER*)	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	im	APPRART	*	in	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Fall	NN	*	fall	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Es	PPER	*	es	sg	neut	-	(264)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	völlig	ADJD	*	völlig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	losgeht	VVFIN	*	losgehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	seinen	PPOSAT	*	sein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Feldzug	NN	*	feldzug	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Eröffnen	NN	*	eröffnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(263)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*)	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	möcht	VMFIN	*	möchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Es	PPER	*	es	sg	neut	-	(263)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dem	ART	*	der	sg	masc	-	(258
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	König	NN	*	könig	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Philipp	NE	*	philipp	sg	masc	(PER*)	258)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wissen	VVINF	*	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	lassen	VVINF	*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Damit	PROAV	*	damit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	der	ART	*	der	sg	fem	-	(258)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ungefähr	ADJD	*	ungefähr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ermessen	VVINF	*	ermessen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	könne	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Gefahr	NN	*	gefahr	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	schrecklich	ADJD	*	schrecklich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	um	APPR	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Mit	APPR	*	mit	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Saladin	NN	*	saladin	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	den	ART	*	der	sg	masc	-	(1018
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Waffenstillestand	NN	*	waffenstillestand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	,	$,	*	--	-	-	-	1018)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Den	NE	*	der	sg	masc	-	(266)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	Euer	NE	*	euer	*	*	-	(267|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	Orden	NE	*	orden	pl	fem	-	267)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	brav	ADJD	*	brav	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	gebrochen	VVPP	*	brechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	Es	PPER	*	es	sg	neut	-	(265)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	koste	VVFIN	*	kosten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	was	PIS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	es	PPER	*	es	sg	neut	-	(265)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	wolle	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	her	ADV	*	her	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	Zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	50	stellen	VVINF	*	stellen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	51	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Welch	PWAT	(VROOT(PSEUDO(NP*	welch	-	-	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ein	ART	*	ein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Patriarch	NN	*)	patriarch	-	-	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	liebe	ADJA	*	liebe	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	tapfre	ADJA	*	tapfr	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mann	NN	*	mann	*	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	keinem	PIAT	*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Gemeinen	ADJA	*	gemein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Boten	NN	*	bote	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	will	VMFIN	*	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zum	APPRART	*	zu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Spion	NN	*	spion	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sagt	VVFIN	*	sagen	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euerm	PPOSAT	*	euerm	*	*	-	(8|(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Patriarchen	NN	*	patriarch	pl	fem	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	guter	ADJA	*	gut	*	*	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Bruder	NN	*	bruder	sg	*	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	viel	ADV	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ihr	PPER	*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	mich	PRF	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ergründen	VVINF	*	ergründen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	können	VMFIN	*	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	wär	VAFIN	*	sein	sg	-	-	(268
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	268)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Das	ART	*	der	sg	neut	-	(248)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	meine	PPOSAT	*	mein	sg	neut	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Sache	NN	*	sache	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	müsse	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PRF	(VP*	mich	sg	-	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Gefangenen	NN	*)	gefangener	pl	*	-	(240)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	betrachten	VVINF	*))	betrachten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	(VP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Der	ART	(NP*	der	sg	fem	-	(269|(121
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Tempelherren	NN	*)	tempelherr	pl	masc	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	einziger	ADJA	(NP*	einzig	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Beruf	NN	*	beruf	sg	masc	-	269)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Sei	NN	*	sei	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	dem	ART	*	der	sg	masc	-	(270
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Schwerte	NN	*))	schwert	sg	masc	(LOC*)	270)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	drein	ADV	*	drein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	schlagen	VVINF	*)	schlagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Kundschafterei	NN	*	kundschafterei	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	treiben	VVINF	*)))	treiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dacht	NN	*	dacht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ichs	APPRART	*	ichs	-	-	-	(268)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wills	NE	*	wills	-	-	-	(268)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	(VP(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Herrn	NN	*)	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	eben	ADV	*)	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sehr	ADV	*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	verübeln	VVINF	*)	verübeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zwar	ADV	*	zwar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	(NP*	der	sg	neut	-	(271
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Beste	NN	*	gut	sg	neut	-	271)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	(S(NP*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Patriarch	NN	*	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Hiernächst	NN	*)	hiernächst	sg	masc	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ausgegattert	VVPP	(VP*	ausgattern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wie	PWAV	(CS(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	die	ART	(NP*	der	sg	fem	-	(272
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Feste	NN	*)	fest	sg	fem	-	272)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Sich	NE	*	sich	sg	-	-	(272)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nennt	VVFIN	*)	nennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	wo	PWAV	(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Libanon	NE	*)	libanon	sg	masc	-	(273)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	sie	PPER	*	sie	sg	fem	-	(272)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	liegt	VVFIN	*))))	liegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	In	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	der	PRELS	(CNP(NP*	der	sg	fem	-	(272)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	die	ART	(VP(NP*	der	pl	masc	-	(274
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	ungeheuern	ADJD	*	ungeheuern	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Summen	NN	*)	summe	pl	fem	-	274)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	stecken	VVINF	*	stecken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Mit	APPR	(S(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	welchen	PWAT	*	welcher	sg	fem	-	(274)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Saladins	NE	*	saladin	sg	masc	-	(174
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	vorsichtger	ADJA	*	vorsichtg	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Vater	NN	*)	vater	sg	masc	-	174)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	Das	ART	(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Heer	NN	*)	heer	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	besoldet	VVFIN	*)))	besolden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	die	ART	(NP*	der	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	Zurüstungen	NN	*	zurüstung	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	Des	NE	(MPN*	der	sg	masc	-	(264
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	Kriegs	NE	*)))	krieg	sg	masc	-	264)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	bestreitet	VVFIN	*	bestreiten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO(S*	saladin	sg	*	(PER*)	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	verfügt	VVFIN	*	verfügen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Zeit	NN	*	zeit	sg	fem	-	(158)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Zeit	NN	*	zeit	sg	fem	-	(158)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	abgelegnen	ADJA	*	abgelegn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Wegen	NN	*)))	weg	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Nach	APPR	(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	dieser	PDAT	*	dieser	sg	fem	-	(272
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Feste	NN	*)	feste	sg	fem	-	272)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sich	PRF	*	sich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	nur	ADV	(VP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	kaum	ADV	*	kaum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	begleitet	VVPP	*))	begleiten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	(S*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	merkt	VVFIN	*)	merken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nimmermehr	ADV	(VROOT(PSEUDO(S*)	nimmermehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wäre	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	leichter	ADJD	(AP*	leicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	als	KOKOM	(NP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	des	ART	*	der	sg	neut	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Saladins	NN	*))	saladin	sg	neut	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sich	PRF	*	sich	sg	-	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Bemächtigen	NN	*))	bemächtigen	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	den	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Garaus	NN	*	garaus	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	(VP*	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	machen	VVINF	*)))	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	(S*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schaudert	VVFIN	*)	schaudern	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	O	XY	*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	(NP(CS(S*	es	sg	neut	-	(275)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	haben	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ein	ART	(NP*	ein	*	*	-	(275
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Paar	NN	*)	paar	*	*	-	275)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gottsfürchtge	NN	(NP*	gottsfürchtge	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Maroniten	NN	*)	maronit	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sich	PRF	*	sich	pl	-	-	(275)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	erboten	VVFIN	*)	erboten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ein	ART	*	ein	sg	masc	-	(276
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	wackrer	ADJA	*	wackr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Mann	NN	*)	mann	sg	masc	-	276)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	sie	PPER	*	sie	pl	masc	-	(275)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	führen	VVINF	*	führen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	wolle	VMFIN	*))	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Das	ART	(VP(NP*	der	sg	neut	-	(271
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Stück	NN	*)	stück	sg	neut	-	271)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	wagen	VVINF	*)))	wagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Patriarch	NN	*	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Hätt	NE	*	hätt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	diesem	PDAT	*	dieser	sg	masc	-	(277
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wackern	NN	*	wackern	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Manne	NN	*	manne	sg	-	-	277)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mich	APPR	*	mich	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Ersehn	NN	*	ersehn	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	glaubt	VVFIN	*	glauben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	König	NN	(NP*	könig	sg	masc	-	(258
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Philipp	NE	*)	philipp	sg	masc	(PER*)	258)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ptolemais	NE	*	ptolemais	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	aus	APZR	*)	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	die	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Hand	NN	*)	hand	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	hierzu	PROAV	*	hierzu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Am	PTKA	(VP(AP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	besten	ADJD	*)	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	bieten	VVINF	*)	bieten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	könne	VMFIN	*))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	mir	PPER	(VROOT(PSEUDO(S(NP*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bruder	NN	*))	bruder	*	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Habt	VAFIN	(VROOT(PSEUDO(S*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	(VP*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gehört	VVPP	*))	gehören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nur	ADV	(VROOT(PSEUDO(S(AP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	erst	ADV	*)	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gehört	VVFIN	*	gehören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Was	PWS	(S*	was	sg	neut	-	(278|(279
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	für	APPR	(NP(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Verbindlichkeit	NN	*)	verbindlichkeit	-	-	-	279)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dem	ART	*	der	sg	neut	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Saladin	NN	*)	saladin	sg	neut	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	habe	VAFIN	*))))	haben	sg	-	-	278)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wohl	ADV	(VROOT(PSEUDO(S*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hab	VAFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ichs	NE	(VP*	ichs	-	-	-	(1022)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gehört	VVPP	*))	gehören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	–	PPER	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	meint	VVFIN	*	meinen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Patriarch	NN	*	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	–	KON	*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	das	PDS	*	der	sg	neut	-	(279)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	gut	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Gott	NN	*	gott	-	-	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	der	ART	*	der	sg	fem	-	(267
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Orden	NN	*	orden	-	-	-	267)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ändern	KON	*	and	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gebieten	NN	(VROOT(PSEUDO(S*	gebiet	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kein	PIAT	(NP*	kein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bubenstück	NN	*))	bubenstück	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gewiß	ADV	(VROOT(PSEUDO(CO(AVP*	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	(S*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	CARD	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	meint	VVFIN	*	meinen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	(NP*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Patriarch	NN	*)	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	–	$.	*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sei	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Bubenstück	NN	*	bubenstück	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Vor	APPR	(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Menschen	NN	*)))	mensch	pl	masc	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	(NP(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	auch	ADV	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Bubenstück	NN	*	bubenstück	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	vor	APPR	(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Gott	NN	*))	gott	sg	masc	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	*	der	sg	neut	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Saladin	NN	*	saladin	sg	neut	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mein	PPOSAT	*	mein	sg	neut	-	(63|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Leben	NN	*	leben	sg	neut	-	63)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	schuldig	ADJD	*	schuldig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	raubt	VVFIN	*	rauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	seines	PPOSAT	*	sein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Pfui	NE	(VROOT(PSEUDO(MPN*	pfui	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bliebe	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	PPER	(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	meint	VVFIN	*))	meinen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Der	ART	(S(NP*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Patriarch	NN	*)	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	$.	*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	noch	ADV	(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	immer	ADV	*)	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Saladin	NN	(NP*	saladin	sg	neut	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Ein	ART	(NP*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Feind	NN	*	feind	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	der	ART	(NP*	der	sg	masc	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Christenheit	NN	*)))	christenheit	sg	masc	-	99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	der	ART	(VP(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Euer	ADJA	*	euer	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Freund	NN	*	freund	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Zu	NE	*)	zu	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	sein	VAINF	*)	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	kein	PIAT	(S(NP*	kein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Recht	NN	*)	recht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	erwerben	VVINF	*	erwerben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	könne	VMFIN	*))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Freund	NN	(VROOT(PSEUDO*	freund	-	-	-	(280)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	An	APPR	(VROOT(PSEUDO*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dem	ART	*	der	sg	masc	-	(280)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bloß	ADV	(AVP*	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	will	VMFIN	*	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zum	APPRART	(VP(PP*	zu	sg	neut	-	(281
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Schurken	NN	*)	schurke	sg	neut	-	281)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	werden	VAINF	*))	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Zum	APPRART	(PP*	zu	sg	neut	-	(281
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	undankbaren	ADJA	*	undankbar	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Schurken	NN	*)	schurke	sg	neut	-	281)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Allerdings	ADV	(VROOT(PSEUDO(S*)	allerdings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zwar	ADV	(S(AVP*	zwar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	CARD	*)	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	meint	VVFIN	*	meinen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	(NP*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Patriarch	NN	*)	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	–	NN	(NP*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	des	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Dankes	NN	*))	dank	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sei	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Man	PIS	(S*	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	quitt	ADJD	(AP*	quitt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	vor	APPR	(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Gott	NN	(CNP*	gott	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Menschen	NN	*)))	mensch	sg	masc	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	quitt	VVFIN	*	quitt	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	uns	PPER	*	uns	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Dienst	NN	*)	dienst	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	um	APPR	(PP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	unsertwillen	PIS	*)	unsertwillen	sg	masc	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	geschehen	VVINF	*))	geschehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	verlauten	VVINF	*	verlauten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wolle	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	–	NN	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	meint	VVFIN	*	meinen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Patriarch	NN	*	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	$.	*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Daß	KOUS	*	daß	sg	masc	-	(130
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Euch	PPER	*	euch	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	darum	PROAV	*	darum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Saladin	NN	*	saladin	*	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	begnadet	VVPP	*	begnaden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Weil	KOUS	*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Eurer	PPOSAT	*	eurer	sg	fem	-	(112|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Mien	NN	*	mie	pl	fem	-	112)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Euerm	PPOSAT	*	euerm	sg	neut	-	(282|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Wesen	NN	*	wesen	sg	neut	-	282)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	was	PIS	*	was	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	seinem	PPOSAT	*	sein	sg	masc	-	(131|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Bruder	NN	*	bruder	sg	masc	-	131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	eingeleuchtet	VVPP	*	eingeuchten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	.	$.	*	--	-	-	-	130)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(S(AP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dieses	PDAT	*)	dieser	sg	neut	-	(130)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(NP*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Patriarch	NN	*))	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wäre	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(130)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gewiß	ADV	*	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(NP*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Saladin	NE	*)	saladin	sg	neut	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	die	ART	*	der	sg	fem	-	(38
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Natur	NN	*	natur	sg	fem	-	38)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hätt	VAFIN	*	hätt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Einen	ART	*	ein	sg	masc	-	(283
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Zug	NN	*	zug	sg	masc	-	283)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	deines	PPOSAT	*	dein	sg	masc	-	(284|(131|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Bruders	NN	*	bruder	sg	masc	-	131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Form	NN	*	form	sg	fem	-	284)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	gebildet	VVPP	*	bilden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	dem	PDS	*	der	sg	masc	-	(283)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	entspräche	VVFIN	*	entsprechen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	meiner	PPOSAT	*	mein	sg	fem	-	(282|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Seele	NN	*	seele	sg	fem	-	282)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dem	PDS	*	der	sg	masc	-	(283)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	entspräche	VVFIN	*)	entsprechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	könnt	VVFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	unterdrücken	VVINF	*	unterdrücken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Um	KOUI	(VP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	einem	ART	(NP*	ein	sg	neut	-	(285
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Patriarchen	NN	*)	patriarch	sg	neut	-	285)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	gefallen	VVINF	*)))	fallen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Natur	NN	(NP*	natur	sg	fem	-	(38)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	leugst	VVFIN	*	leugst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	du	PPER	*	du	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	widerspricht	VVFIN	*	widersprechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sich	NE	(NP*	sich	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gott	NN	*	gott	sg	masc	(PER*)	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	seinen	PPOSAT	*	sein	pl	neut	-	(52|(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Werken	NN	*))	werk	pl	neut	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bruder	NN	*	bruder	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Erregt	VVFIN	(S*	erregen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	meine	PPOSAT	(NP*	mein	sg	fem	-	(286|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Galle	NN	*)	galle	sg	fem	-	286)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	vergnügter	ADJD	*	vergnügt	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	kam	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Verzeihe	VVFIN	(VROOT(PSEUDO(S*	verzeihe	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	*	sich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Herr	NN	*))	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wir	PPER	(VROOT(PSEUDO(S*	wir	pl	*	-	(287
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Klosterleute	NN	*	klosterleute	pl	*	-	287)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sind	VAFIN	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schuldig	ADJD	*	schuldig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	unsern	PPOSAT	(VP(NP*	unsern	pl	masc	-	(287)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Obern	NN	*)	ober	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gehorchen	VVINF	*)))	gehorchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(CNP(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherr	NN	*)	tempelherr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Daja	NE	(NP*	daja	-	-	(PER*)	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	die	PRELS	(CS(S*	der	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	den	ART	(VP(NP*	der	pl	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Tempelherrn	NN	*)	tempelherr	pl	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	schon	ADV	(AP(NP*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	eine	ART	*	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Zeit	NN	*)	zeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	lang	ADJD	*)	lang	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	weiten	NN	*)	weit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	beobachtet	VVPP	*)	beobachten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	hatte	VAFIN	*)	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	sich	PRF	(S*	sich	sg	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	ihm	PPER	*	ihm	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	nähert	VVFIN	*))))	nähern	sg	-	-	0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Klosterbruder	NN	*	klosterbruder	sg	masc	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	*	mich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dünkt	VVFIN	*	dünken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ließ	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Der	ART	*	der	sg	fem	-	(288
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	besten	ADJA	*	gut	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Laun	NN	*	laun	sg	fem	-	288)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mein	PPOSAT	(VP(NP*	mein	sg	neut	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Paket	NN	*)	paket	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wagen	VVINF	*))	wagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S(ISU*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vortrefflich	ADJD	*))	vortrefflich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Lügt	VVFIN	(S*	lügen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Das	ART	(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sprichwort	NN	*)	sprichwort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(S(AVP(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Mönch	NN	(CNP*	mönch	-	-	-	(287)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Weib	NN	*))	weib	-	-	-	(289)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	und	KON	*)	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Weib	NN	*))	weib	sg	masc	-	(289)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Und	KON	(NP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Mönch	NN	*	mönch	sg	masc	-	(287)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	des	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Teufels	NN	*))	teufel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	beide	PIAT	(S(NP*	beide	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Krallen	NN	*)	kralle	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	sind	VAFIN	*)	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wirft	VVFIN	*	werfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	heut	ADV	*	heut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	einer	PIS	*)	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	andre	ADJA	*))	andre	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seh	XY	*	seh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Edler	NE	*	edler	pl	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ritter	NE	*	ritter	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	pl	*	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*	gott	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Dank	FM	*	dank	sg	masc	-	(23)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gott	NN	(VROOT(PSEUDO*	gott	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	tausend	CARD	(NP*	tausend	-	-	-	(23
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Dank	NN	*)	dank	-	-	-	23)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wo	PWAV	(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	habt	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*)	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Die	ART	(S(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ganze	ADJA	*	ganz	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Zeit	NN	*)	zeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gesteckt	VVPP	*)	stecken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	(S*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	(VP(AVP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	krank	ADJD	*)	krank	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gewesen	VAPP	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gesund	ADJD	(VROOT(PSEUDO*	gesund	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wir	PPER	(VROOT(PSEUDO(S*	wir	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	waren	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euertwegen	NN	(VP*	euertwegen	pl	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wahrlich	ADJD	*	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Bekümmert	VVPP	*))	bekümmert	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wart	VVFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gewiß	ADV	(AP*	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	verreist	VVPP	*))	verreisen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Erraten	NN	(VROOT(PSEUDO*	erraten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kamt	VVFIN	*	kamen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	heut	ADV	*	heut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wieder	ADV	*)	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gestern	ADV	(VROOT(PSEUDO*	gestern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(S(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Rechas	NE	*	rechas	sg	*	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	heut	ADV	(VP*	heut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	angekommen	VVPP	*))	ankommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	darf	VMFIN	*	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Recha	NE	*	recha	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wohl	ADV	(VP*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hoffen	VVINF	*))	hoffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Warum	PWAV	(VROOT(PSEUDO(S*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	(NP*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	öfters	ADJD	(VP*	öfters	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bitten	VVINF	*	bitten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	lassen	VVINF	*))	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPOSAT	(VROOT(PSEUDO(S(NP*	ihr	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ladet	VVFIN	*	laden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	selber	ADV	*	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bald	ADV	*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Aufs	NN	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dringlichste	VVFIN	*)	dringlich	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Babylon	NE	*	babylon	-	-	-	(25)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Mit	APPR	(CO(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zwanzig	CARD	*	zwanzig	-	-	-	(55
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hochbeladenen	ADJA	*	hochbeladen	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Kamelen	NN	*)	kamelen	pl	*	-	55)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	allem	PIS	(NP*	alle	sg	neut	-	(290
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	was	PRELS	(S*	was	*	neut	-	(290)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	edeln	PPOSAT	*	edeln	-	-	-	(291
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Spezereien	NN	*)	spezerei	pl	fem	-	291)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	290)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	An	APPR	(CPP(PP*	an	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Steinen	NN	*)	stein	pl	fem	-	(292)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Stoffen	NN	(CNP*	stoff	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Indien	NE	(MPN*	indien	sg	neut	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Und	NE	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Persien	NE	*)	persien	sg	neut	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Syrien	NE	*)))	syrien	sg	neut	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Sina	NE	(VP(MPN*	sina	sg	neut	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Kostbares	NE	*)	kostbar	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	gewähren	VVINF	*)))))))	gewähren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kaufe	VVFIN	*	kaufe	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sein	PPOSAT	(VROOT(PSEUDO(S(NP*	sein	sg	neut	-	(293|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Volk	NN	*)	volk	sg	neut	-	293)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	verehret	VVFIN	*	verehren	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	einen	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Fürsten	NN	*))	fürst	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(293)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	(NP*	der	sg	masc	-	(294
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Weisen	NN	*	weise	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nathan	NE	*)	nathan	sg	masc	-	294)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nennt	VVFIN	*)	nennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	vielmehr	ADV	*	vielmehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	den	ART	*	der	pl	fem	-	(295
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Reichen	NN	*)	reiche	pl	fem	-	295)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	mich	PPER	(VP*	mich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	oft	ADV	*	oft	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Gewundert	VVPP	*)))	gewundert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Seinem	PPOSAT	(VROOT(PSEUDO(S(NP*	sein	sg	masc	-	(293|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Volk	NN	*)	volk	sg	masc	-	293)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	reich	ADJD	(CO*	reich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	weise	ADV	*)	weise	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Vielleicht	ADV	*	vielleicht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	das	ART	(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nämliche	ADJA	*))	nämlich	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Vor	APPR	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	allen	PIS	*	aller	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Hätt	NN	*	hätt	-	-	-	(293
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	s	PPER	*	--	-	-	-	293)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	den	ART	*	der	sg	masc	-	(44
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Guten	NN	*	gute	sg	masc	-	44)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nennen	VVINF	*	nennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	müssen	VMINF	*	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	stellt	VVFIN	*	stellen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gar	ADV	(AVP*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	vor	PTKVZ	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wie	PWAV	(S(AP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gut	ADJD	*)	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ist	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Als	KOUS	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	erfuhr	VVFIN	*	erfahren	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	viel	PIAT	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Recha	NE	*	recha	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	schuldig	ADJD	*	schuldig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	hätt	VAFIN	*	hätt	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	diesem	PDAT	*	dieser	sg	masc	-	(296
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Augenblicke	NN	*	augenblick	sg	masc	-	296)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	alles	PIS	*	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Euch	PPER	*	euch	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	getan	VVPP	*	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	gegeben	VVPP	*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	*	ei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Versuchts	NN	(VROOT(PSEUDO(CS*	versucht	-	-	-	(297)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kommt	VVFIN	*	kommen	sg	-	-	(297
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	seht	VVFIN	*)	sehen	sg	-	-	297)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schnell	ADJD	(PP*	schnell	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ein	ART	*	ein	sg	masc	-	(296
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Augenblick	NN	*	augenblick	sg	masc	-	296)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	vorüber	APPO	*)	vorüber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ist	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hätt	NN	*	hätt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gut	ADV	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wär	ADJD	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mir	PPER	*	sich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	lange	ADJA	*	lang	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Bei	NN	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	gefallen	VVINF	*	gefallen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	lassen	VVINF	*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Meint	VVFIN	(VROOT(PSEUDO(S*	meint	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	etwa	ADV	*	etwa	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ich	PPER	(S*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	fühle	VVFIN	*	fühlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	meinen	PPOSAT	(NP*	mein	sg	masc	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Wert	NN	*	wert	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Christin	NN	*))	christin	sg	fem	-	(298)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	*	sich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wards	VAFIN	*	ward	-	-	-	(299)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	vor	APPR	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wiege	NN	*	wiege	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gesungen	VVPP	*	singen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Daß	KOUS	*	daß	-	-	-	(299
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	darum	PROAV	*	darum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	meinem	PPOSAT	*	mein	sg	masc	-	(300|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Ehgemahl	NN	*	ehgemahl	sg	masc	-	300)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Nach	APPR	*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Palästina	NE	*	palästina	sg	neut	(MISC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	folgen	VVINF	*	folgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	würd	VAFIN	*	würd	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	um	KOUI	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Ein	ART	*	ein	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Judenmädchen	NN	*	judenmädchen	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	erziehn	VVINF	*	erziehn	-	-	-	299)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Mein	PPOSAT	*	mein	sg	-	-	(300|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	lieber	ADJA	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Ehgemahl	NN	*	ehgemahl	sg	fem	-	300)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	ein	ART	*	ein	sg	masc	-	(302
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	edler	ADJA	*	edel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	Knecht	NN	*	knecht	sg	masc	-	302)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	In	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	Kaiser	NN	*	kaiser	*	*	-	(303
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	Friedrichs	NE	*	friedrich	sg	masc	-	303)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	Heere	NE	*	heer	pl	neut	-	301)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geburt	NN	*	geburt	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ein	ART	*	ein	sg	masc	-	(302
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Schweizer	NN	*	schweizer	sg	masc	(MISC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dem	PRELS	*	der	sg	masc	-	(302)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ehr	NN	*	ehr	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Gnade	NN	*	gnade	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ward	VVFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Seiner	PPOSAT	*	sein	sg	fem	-	(303|(302)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Kaiserlichen	NN	*	kaiserlich	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Majestät	NE	*	majestät	sg	fem	-	303)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	In	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	einem	ART	*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Flusse	NN	*	flusse	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	ersaufen	VVINF	*	ersaufen	-	-	-	302)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Wie	KOKOM	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	vielmal	ADV	*	vielmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	habt	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	das	PDS	*	der	sg	neut	-	(301)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	erzählt	VVFIN	*	erzählen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hört	VVFIN	(VROOT(PSEUDO(S*	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	(VP*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gar	ADV	(AVP*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mich	PPER	*)	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	verfolgen	VVINF	*)))	verfolgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Verfolgen	NN	(VROOT(PSEUDO*	verfolgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	lieber	ADJA	(VROOT(PSEUDO(NP*	lieb	-	-	-	(22
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*)	gott	-	-	-	22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	verfolgen	VVINF	*	verfolgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	(AVP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	einmal	ADV	*)	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	-	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	weiter	ADV	(NP*	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sehn	CARD	*))	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hören	VVINF	*)	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Will	VMFIN	*	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	eine	ART	*	ein	sg	fem	-	(72
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Tat	NN	*	tat	sg	fem	-	72)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	fort	PTKVZ	*	fort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	fort	VVFIN	*	fort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	erinnert	VVFIN	*	erinnern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	der	PRELS	*	der	sg	fem	-	(72)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	gedacht	VVPP	*	denken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	die	ART	*	der	pl	*	-	(72)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	drüber	PROAV	*	drüber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	denke	VVFIN	*	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Zum	APPRART	*	zu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Rätsel	NN	*	rätsel	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zwar	ADV	*	zwar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	möcht	VMFIN	*	möchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	*	*	-	(72)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	bereuen	VVINF	*	bereuen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seht	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Eräugnet	NN	*	eräugnet	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	(147
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Fall	NN	*	fall	sg	masc	-	147)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sich	PRF	*	sich	sg	-	-	(147)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Seid	NN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Schuld	NN	*	schuld	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	rasch	ADJD	*	rasch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	handle	PTKVZ	*	handeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	mich	PRF	*	mich	sg	-	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	vorher	ADV	*	vorher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	erkund	ADJD	*	erkund	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	brennen	VVFIN	*	brennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	lasse	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	brennt	VVFIN	*	brennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bewahre	ADJA	(VROOT(PSEUDO(NP*	bewahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*	gott	-	-	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	heut	ADV	*	heut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	tut	VVFIN	*	tun	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Mir	NE	*	sich	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	den	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gefallen	NN	*	gefalle	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wenigstens	ADV	*	wenigstens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	weiter	ADV	*	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bitt	VVFIN	*	bitt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	drum	ADV	*	drum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(S*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	laßt	VVFIN	*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Den	NE	(NP*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	vom	APPRART	(PP*	von	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Halse	NN	*))	halse	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Jud	NE	*	jud	-	-	-	(98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Jude	NN	*	jude	sg	fem	-	(304)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	plumper	ADJA	*	plumper	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Schwab	NN	*))	schwab	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Des	ART	(VROOT(PSEUDO(S(NP*	der	-	-	-	(305|(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mädchens	NE	*	mädchen	sg	*	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bild	NN	*)	bild	sg	neut	-	305)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	längst	ADV	*	längst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	meiner	PPOSAT	*	mein	sg	fem	-	(282|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Seele	NN	*)	seele	sg	fem	-	282)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	es	PPER	*	es	sg	neut	-	(305)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	je	ADV	*	je	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	war	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Eures	NE	*	dein	sg	neut	-	(1058)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aus	APPR	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihrer	PPOSAT	*	ihr	sg	fem	-	(60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	solls	VMFIN	*	solls	-	-	-	(306)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	da	PTKVZ	*)	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	(VROOT(PSEUDO(S*	was	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	solls	VMFIN	*)	solls	-	-	-	(306)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*)	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	pl	fem	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Menschen	NN	*)	mensch	pl	fem	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	immer	ADV	*)	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sie	PPER	*	sie	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	scheinen	VVFIN	*))	scheinen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	selten	ADJD	(NP*	selten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	etwas	PIAT	*	etwas	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bessers	NN	*))	besser	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geht	VVFIN	*)	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wartet	VVIMP	(VROOT(PSEUDO(S*	warten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eilt	VVFIN	*	eilen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*)	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Weib	NN	(VROOT(PSEUDO(S*	weib	-	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	macht	VVFIN	*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	die	ART	(NP*	der	pl	fem	-	(76
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Palmen	NN	*)	palme	pl	fem	-	76)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Verhaßt	NN	*	verhaßt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	worunter	PWS	(S*	worunter	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	gern	ADV	(AVP*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sonst	ADV	*)	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	wandle	VVFIN	*))	wandeln	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	deutscher	ADJA	*	deutsch	sg	masc	(MISC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Bär	NN	*	bär	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Spur	NN	*))	Spur	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	des	ART	(VP(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Tieres	NN	*)	tier	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	verlieren	VVINF	*)	verlieren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	weiten	PIS	*)	weiten	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nach	PTKVZ	*)	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Szene	NN	*)	szene	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	des	ART	(NP*	der	sg	neut	-	(175|(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sultans	NE	(MPN*	sultan	sg	neut	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Palast	NE	*)))	palast	sg	*	-	175)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO(S(CNP*	saladin	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*)	sittah	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	spielen	VVFIN	*	spielen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Schach	NE	*)	schach	sg	masc	-	(308)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	(VROOT(PSEUDO(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	(NP*	du	sg	*	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Saladin	NN	*))	saladin	*	*	(LOC*)	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	spielst	VVFIN	*	spielen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	(NP*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	heut	ADV	*))	heuen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gut	ADJD	*)	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dächte	VVFIN	*	dächen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Für	APPR	(VROOT(PSEUDO(S(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*)	mich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	kaum	ADV	*))	kaum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nimm	NE	(VROOT(PSEUDO(S*	nimm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	diesen	PDAT	(NP*	dieser	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Zug	NN	*)	zug	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zurück	PTKVZ	*)	zurück	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Warum	PWAV	(VROOT(PSEUDO*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(309
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Springer	NN	*)	springer	sg	masc	-	309)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	unbedeckt	ADJD	*)	unbedeckt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wahr	ADJD	*)	wahr	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	zieh	VVIMP	*	zieh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Gabel	NN	*	gabel	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wieder	ADV	(VROOT(PSEUDO(S(ISU*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wahr	ADJD	*))	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(CNP*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Schach	NE	*	schach	-	-	-	(310
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dann	ADV	*)	dann	-	-	-	310)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hilft	VVFIN	*	helfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dir	PPER	*	dir	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*	der	sg	neut	-	(310)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CS(S*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	setze	VVFIN	*	setzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vor	PTKVZ	*)	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	du	PPER	(S*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Bist	NN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wie	KOKOM	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	warst	VVFIN	*)))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Aus	APPR	*	aus	-	-	-	(311
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dieser	PDAT	*	dieser	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Klemme	NN	*	klemme	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	seh	XY	*	seh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wohl	ADV	*	wohl	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ohne	APPR	*	ohne	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Buße	NN	*	buße	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	kommen	VVINF	*	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	311)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mags	NE	(VROOT(PSEUDO*	mag	-	-	-	(311)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nimm	ADJD	(VROOT(PSEUDO(S*	nimm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	den	ART	(NP*	der	sg	masc	-	(309
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Springer	NE	*)	springer	sg	masc	(PER*)	309)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(309)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geh	XY	*	geh	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vorbei	ADV	*	vorbei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schenkst	VVFIN	*	schenken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dir	PPER	(VROOT(PSEUDO(S*	dir	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	liegt	VVFIN	*	liegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	An	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	diesem	PDAT	*	dieser	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Platze	NN	*)	platz	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	ADV	*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	als	KOKOM	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dem	ART	*	der	sg	neut	-	(309
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Springer	NE	*))	springer	sg	neut	(LOC*)	309)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	VMFIN	*	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mach	APPR	(VROOT(PSEUDO(S(PP*	mach	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	deine	PPOSAT	*	dein	sg	fem	-	(312|(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Rechnung	NN	*)	rechnung	sg	fem	-	312)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ohne	APPR	(PP*	ohne	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Den	ART	*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Wirt	NN	*))	wirt	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sieh	VVIMP	*	sieh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S(NP(AP*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gilts	ADV	*	gilt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	(S*	der	sg	neut	-	(313)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	warst	VVFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	du	PPER	*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Vermuten	NN	*))	vermuten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Freilich	ADV	(VROOT(PSEUDO(CO(AVP*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	konnt	ADJD	*	konnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Vermuten	NN	*	vermuten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	deiner	PPOSAT	*	dein	sg	fem	-	(314|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Königin	NN	*	königin	sg	fem	-	314)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	müde	ADJD	*	müde	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wärst	VVFIN	*	wärst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(NP*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	meiner	PPOSAT	(NP*	mein	sg	-	-	(314|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Königin	NN	*))	königin	*	*	-	314)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seh	VVFIN	*	seh	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	heut	ADV	*	heut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	meine	PPOSAT	*	mein	sg	fem	-	(315|(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	tausend	CARD	*	tausend	-	-	-	315)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Dinar	NN	*	dinar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	kein	PIAT	*	kein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Naserinchen	NN	*	naserinchen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	mehr	ADV	*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	gewinnen	VVINF	*	gewinnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Frag	NE	(VROOT(PSEUDO(NP*	frag	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Weil	KOUS	(S*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Fleiß	NN	*)	fleiß	sg	masc	-	(316)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	aller	PIAT	*	aller	sg	fem	-	(316)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Gewalt	NN	*)	gewalt	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	verlieren	VVINF	*)	verlieren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	willst	VMFIN	*)	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dabei	PROAV	*	dabei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	find	VAFIN	*	find	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	meine	PPOSAT	*	mein	sg	-	-	(312|(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Rechnung	NN	*	rechnung	sg	fem	-	312)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	außer	APPR	*	außer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ein	ART	*	ein	sg	neut	-	(308
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	solches	PIAT	*	solcher	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Spiel	NN	*	spiel	sg	neut	-	308)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	unterhaltendste	ADJA	*	unterhaltend	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Nicht	NN	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	gewann	VVFIN	*	gewinnen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	immer	ADV	*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	am	PTKA	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	meisten	PIS	*	meister	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Mit	APPR	*	mit	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	dir	PPER	*	dir	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	verlor	VVFIN	*	verlieren	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(CS(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hast	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Den	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Satz	NN	*)	satz	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mich	PPER	*	mich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	des	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	verlornen	ADJA	*	verlorn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Spieles	NN	*	spiele	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wegen	APPR	(PP*	wegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Zu	NN	*))	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	trösten	VVFIN	*)	trösen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	doppelt	VVFIN	(S*	doppelt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	hernach	ADJD	*	hernach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	geschenkt	VVPP	*)))	schenken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	*	ei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sieh	XY	*	sieh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	so	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hättest	VVFIN	*	hättest	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Verlorst	NN	(NP*	verlorst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Fleiß	NN	*)	fleiß	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	verloren	VVPP	*))	verlieren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Schwesterchen	NN	*))	schwesterchen	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zum	APPRART	(VROOT(PSEUDO(S(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wenigsten	PIS	*)	wenigster	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gar	ADV	(VP(AP*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*)	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	deine	PPOSAT	(NP*	dein	sg	fem	-	(1040)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Freigebigkeit	NN	*)	freigebigkeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	mein	PPOSAT	(NP*	mein	sg	neut	-	(7|(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	liebes	ADJA	*	lieb	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Brüderchen	NN	*)	brüderchen	sg	neut	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Schuld	NN	*	schuld	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	besser	ADJD	(VP(VP*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	spielen	VVINF	*)	spielen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	lernen	VVINF	*))))	lernen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wir	PPER	(VROOT(PSEUDO(S*	wir	pl	*	-	(317)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kommen	VVFIN	*	kommen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ab	PTKVZ	*	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	vom	APPRART	(PP*	von	sg	neut	-	(308
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Spiele	NN	*))	spiel	sg	neut	-	308)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mach	APPR	(VROOT(PSEUDO(PP*	mach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ein	ART	*	ein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ende	NN	*)	ende	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*)	es	sg	neut	-	(313)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dann	ADV	(NP*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Schach	NE	*	schach	sg	neut	-	(318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doppelt	VVFIN	*	doppelt	-	-	-	(318
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Schach	NE	*)	schach	-	-	-	318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dieses	PDAT	*	dieser	sg	neut	-	(318
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Abschach	NN	*	abschach	sg	neut	-	318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hab	VAFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Gesehn	NN	*	gesehn	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	das	PRELS	*	der	sg	neut	-	(318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	meine	PPOSAT	*	mein	sg	neut	-	(314|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Königin	NN	*	königin	sg	neut	-	314)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zugleich	ADV	*	zugleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	niederwirft	VVFIN	*	niederwerfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	War	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dem	PDS	(VP*	der	sg	masc	-	(318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	abzuhelfen	VVIZU	*))	abhelfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	ADJD	(VROOT(PSEUDO(NP(AP*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sehn	CARD	*))	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nein	PTKANT	*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nimm	ADJD	*	nimm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	*	der	sg	fem	-	(314
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Königin	NN	*	königin	sg	fem	-	314)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(AP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	diesem	PDAT	*	dieser	sg	masc	-	(319
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Steine	NN	*	stein	sg	masc	-	319)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nie	ADV	*)	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	recht	ADV	*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	glücklich	ADJD	*))	glücklich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bloß	ADV	(VROOT(PSEUDO(PP*	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dem	ART	*	der	sg	masc	-	(319
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Steine	NN	*)	stein	sg	masc	-	319)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Fort	NN	(VROOT(PSEUDO(NP*	fort	-	-	-	(320
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	damit	PROAV	*)	damit	-	-	-	320)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(320)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	tut	VVFIN	*	tun	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mir	PPER	*	sich	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	alles	PIS	(VP*	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wiederum	ADV	*	wiederum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Geschützt	VVPP	*))	geschützt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S(S(AP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	höflich	ADJD	*)	höflich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	man	PIS	*	man	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Königinnen	NN	*)	königin	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Verfahren	NN	*)	verfahren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	müsse	VMFIN	*)	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mein	PPOSAT	(NP*	mein	sg	masc	-	(7|(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Bruder	NN	*)	bruder	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	mich	PPER	(VP*	mich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Zu	NN	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	gelehrt	VVPP	*))	lehren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	läßt	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	(VP*	sie	*	*	-	(314)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	stehen	VVINF	*))	stehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nimm	ADJD	(VROOT(PSEUDO(S*	nimm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nimm	VVIMP	(S*	nimm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	sg	fem	-	(314)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	keine	PIAT	(NP*	kein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	PIS	*))	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wozu	PWAV	(VROOT(PSEUDO(S*	wozu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	pl	*	-	(314)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nehmen	VVFIN	*)	nehmen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Schach	NE	(VROOT(PSEUDO(MPN*	schach	sg	neut	-	(318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Schach	NE	*	schach	-	-	-	(318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiter	ADV	*)	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Schach	NE	(VROOT(PSEUDO(MPN*	schach	sg	neut	-	(318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(CNP*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Schach	NE	*)	schach	sg	neut	-	(318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(CNP*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Schach	NE	*)	schach	sg	neut	-	(318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(VP(AP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	matt	ADJD	*))	matt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(S(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ganz	ADV	*)	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ziehst	VVFIN	*	ziehsen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	den	ART	(NP*	der	sg	masc	-	(309
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Springer	NE	*)	springer	sg	masc	(PER*)	309)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Dazwischen	PROAV	(S*	dazwischen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	oder	KON	(S*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	du	PPER	(VP*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	machen	VVINF	*)	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	willst	VMFIN	*))	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gleichviel	NN	(VROOT(PSEUDO*	gleichviel	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ganz	ADV	(VROOT(PSEUDO(S(ISU*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	recht	ADJD	*))	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	(S*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hast	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gewonnen	VVPP	*)	gewinnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Al-Hafi	NE	*	al-hafi	sg	*	(LOC*)	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zahlt	VVFIN	*)	zahlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Man	PIS	(S*	man	sg	*	-	(244)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	laß	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	(VP*	ihn	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	rufen	VVINF	*))	rufen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	gleich	ADV	(VROOT(PSEUDO(S*)	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	(S*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hattest	VAFIN	*	hattest	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sittah	NN	*	sittah	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*))	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	unrecht	ADJD	(S*	unrecht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	War	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ganz	ADV	*)	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	beim	APPRART	(PP*	bei	-	-	-	(308
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Spiele	NN	*	spiel	pl	neut	-	308)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	;	$.	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	zerstreut	VVPP	*)	zerstreuen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gibt	VVFIN	*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	uns	PPER	*	uns	pl	*	-	(317)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	denn	ADV	(NP*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	*	der	pl	masc	-	(319
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	glatten	ADJA	*	glatt	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Steine	NN	*)	stein	pl	masc	-	319)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Beständig	NN	*)	beständig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	die	ART	(VROOT(PSEUDO(NP*	der	sg	fem	-	(319)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	an	APPR	(VP(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	erinnern	VVINF	*)	erinnern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nichts	PIS	(NP*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Bezeichnen	NN	*	bezeichnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hab	XY	*	hab	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Iman	NN	*	iman	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gespielt	NN	*	gespielt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Verlust	NN	(VROOT(PSEUDO*	verlust	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Vorwand	NN	*	vorwand	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(CNP(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	*	der	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ungeformten	ADJA	*	ungeformt	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Steine	NN	*)	stein	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Sittah	NE	(NP*	sittah	pl	masc	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sinds	FM	*	sinds	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Die	ART	(S*	der	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mich	PPER	*	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	verlieren	VVINF	*	verlieren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	machten	VVFIN	*	machen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	deine	PPOSAT	(NP*	dein	sg	fem	-	(321|(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Kunst	NN	*	kunst	sg	fem	-	321)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Dein	NN	(CO*	dein	sg	masc	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	ruhiger	ADJD	*	ruhig	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	schneller	ADJA	(NP*	schnell	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Blick	NN	*))))	blick	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(S(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Willst	VVFIN	*	willst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	(VP(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Stachel	NN	*	stachel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	des	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Verlusts	NN	*))	verlust	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	stumpfen	VVINF	*))	stumpfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Genug	ADV	(VROOT(PSEUDO(S*	genug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	warst	VVFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zerstreut	VVPP	*	zerstreuen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	(NP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mehr	PIS	*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	als	KOKOM	(NP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*)))	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Als	KOUS	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PPER	(VP*	dich	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zerstreuet	VVPP	*))	zerstreuet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Deine	PPOSAT	(VROOT(PSEUDO(S(NP*	dein	sg	fem	-	(322|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zerstreuung	NN	*	zerstreuung	sg	fem	-	322)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wenn	NE	*)	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	werden	VAFIN	*	werden	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wir	PPER	(VP*	wir	pl	*	-	(317)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	fleißig	ADJD	*)	fleißig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	spielen	VVINF	*))	spielen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	spielen	VVFIN	*	spielen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wir	PPER	*	wir	pl	*	-	(317)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	um	KOUI	(AVP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	viel	ADV	*	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gieriger	ADJD	*)	gierig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	weil	KOUS	(VROOT(PSEUDO(S(S*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	es	PPER	*	es	sg	neut	-	(264)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wieder	ADV	(AP*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	los	ADJD	*)	los	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	geht	VVFIN	*)	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	meinst	ADV	(NP*	meinst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*))	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mags	NE	*	mag	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKVZ	*)	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zuerst	ADV	*	zuerst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gezogen	VVPP	*))	ziehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ich	PPER	(CS(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	(NP*	der	sg	masc	-	(266
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Stillestand	NN	*	stillestand	sg	masc	-	266)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	aufs	APPRART	(PP*	auf	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	neue	ADJA	*	neu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Verlängert	NN	*)))	verlängern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	hätte	VAFIN	(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	meiner	PPOSAT	(NP*	mein	sg	fem	-	(307|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Sittah	NN	*)	sittah	sg	*	-	307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Gern	NN	(VP*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	einen	ART	(NP*	ein	sg	masc	-	(323
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	guten	ADJA	*	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Mann	NN	*)	mann	sg	masc	-	323)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	zugleich	ADV	*	zugleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	verschafft	VVPP	*)))	verschaffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(CS(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(323)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Richards	NE	(VP(NP*	richard	sg	*	(PER*)	(324|(325)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bruder	NN	*)	bruder	sg	masc	-	324)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	er	PPER	(S*	er	sg	masc	-	(324)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ja	NN	(NP*	ja	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Richards	NE	(MPN*	richard	sg	*	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Bruder	NE	*))))	bruder	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	deinen	PPOSAT	(VP(NP*	dein	sg	masc	-	(325|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Richard	NE	*)	richard	sg	masc	-	325)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	loben	VVINF	*)	loben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	kannst	VMFIN	*)	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	unserm	PPOSAT	*	unser	*	*	-	(326|(317)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bruder	NN	*	bruder	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Melek	NE	*	melek	*	*	-	326)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Dann	NE	*	dann	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Richards	NE	*	richard	sg	*	-	(327|(325)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Schwester	NN	*	schwester	sg	masc	-	327)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Teile	NN	*	teil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	worden	VAPP	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Ha	NE	*	ha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	welch	PWAT	*	welcher	*	*	-	(328
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ein	ART	*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Haus	NN	*	haus	sg	neut	-	328)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zusammen	PTKVZ	*	zusammen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ha	NE	(VROOT(PSEUDO(NP(MPN*	ha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	sg	masc	-	(328
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ersten	ADJA	*)	erster	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	328)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	besten	ADJA	*	gut	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Häuser	NN	*	haus	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Welt	NN	*)))	welt	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	das	ART	(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	beste	ADJA	*)	gut	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	(AP(S*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hörst	VVFIN	*	hörst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mich	PPER	(VP*	mich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	loben	VVINF	*))))	loben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	faul	ADJD	*))	faul	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dünk	VVFIN	*	dünk	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	meiner	PPOSAT	*	mein	sg	fem	-	(329|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Freunde	NN	*	freund	sg	fem	-	329)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wert	ADJD	*	wert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(328)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Menschen	NN	*	mensch	pl	masc	-	(211)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	geben	VVINF	*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sollen	VMFIN	*)	sollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	das	ART	*	der	sg	neut	-	(328)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hab	XY	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	des	ART	*	der	sg	neut	-	(328
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schönen	ADJA	*	schön	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Traums	NN	*	traum	sg	neut	-	328)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gleich	ADV	*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gelacht	VVPP	*	lachen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(DL(S*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kennst	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	pl	fem	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Christen	NN	*)	christ	pl	fem	(MISC*)	99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	willst	VVFIN	(S*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sie	PPER	*	sie	sg	fem	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	kennen	VVINF	*))	kennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPOSAT	(VROOT(PSEUDO(S(NP*	ihr	sg	masc	-	(330|(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Stolz	NN	*)	stolz	sg	masc	-	330)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Christen	NN	(S(VP*	christ	sg	masc	-	(331)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*)	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Menschen	NN	*	mensch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*)))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(CS(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Selbst	ADV	(NP*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(332
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	was	PRELS	(S*	was	sg	neut	-	(332)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	noch	ADV	(PP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihrem	PPOSAT	*	ihr	sg	neut	-	(78|(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Stifter	NN	*)	stifter	sg	neut	-	78)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	her	PTKVZ	*))	her	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	332)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Mit	APPR	(S*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Menschlichkeit	NN	*	menschlichkeit	sg	fem	-	(332)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	den	ART	(NP*	der	pl	fem	-	(333
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Aberglauben	NN	*)	aberglaube	pl	fem	-	333)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	wirzt	VVFIN	*))	wirzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Das	PDS	(S*	der	sg	neut	-	(332)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	lieben	VVFIN	*	lieben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	sie	PPER	*	sie	pl	*	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	weil	KOUS	(S*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	es	PPER	*	es	sg	neut	-	(332)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	menschlich	ADJD	*	menschlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	ist	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Weils	NE	(S(MPN*	weils	-	-	-	(332)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Christus	NE	*)	christus	-	-	-	(78)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	lehrt	VVFIN	*	lehren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	weils	ADV	(S(NP*	weils	-	-	-	(332)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Christus	NN	*)	christus	-	-	(PER*)	(78)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	getan	VVPP	*))))	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wohl	NN	(NP*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihnen	PPER	(NP*	ihnen	pl	*	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	*	er	sg	masc	-	(78)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	(NP*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	guter	ADJA	*)	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Mensch	NN	*)	mensch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	war	VAFIN	*)))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wohl	ADV	(VROOT(PSEUDO(S*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihnen	PPER	*	ihnen	pl	*	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	sg	fem	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	seine	PPOSAT	(VP(CNP(NP*	sein	sg	fem	-	(78)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Tugend	NN	*	tugend	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Treu	NN	*))	treu	-	-	-	(334)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Glaube	NN	*)	glaube	sg	-	-	(333)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nehmen	VVINF	*)	nehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	können	VMFIN	*))	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Tugend	NN	*	tugend	sg	neut	-	(332)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Seine	PPOSAT	(NP(VP(NP*	sein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Tugend	NN	*)	tugend	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*	sein	-	-	-	(335|(78)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Name	NN	(S*	name	sg	masc	-	335)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	überall	ADV	(VP(VP*	überall	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	verbreitet	VVPP	*)	verbreiten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	werden	VAINF	*))	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	soll	VMFIN	(S*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Die	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Namen	NN	*	name	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	aller	PIAT	(NP*	aller	pl	masc	-	(211
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	guten	ADJA	*	gut	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Menschen	NN	*))	mensch	pl	masc	-	211)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	schänden	VVFIN	*))	schinden	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Verschlingen	NN	*)	verschlingen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Um	KOUI	(VROOT(PSEUDO(S(PP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	den	ART	*	der	sg	masc	-	(335
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Namen	NN	*)	name	sg	masc	-	335)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	um	KOUI	(PP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	den	ART	*	der	sg	masc	-	(335
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Namen	NN	*)	name	sg	masc	-	335)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihnen	PPER	(VP*	ihnen	pl	masc	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	tun	VVINF	*)))	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(CS(S*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	meinst	VVFIN	*)	meinst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	warum	PWAV	(S*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sie	PPER	*	sie	pl	*	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	verlangen	VVINF	*	verlangen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	würden	VAFIN	*	werden	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	daß	KOUS	(CS(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ihr	PPER	(NP*	ihr	sg	fem	-	(336)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Auch	NN	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	du	PPER	(CNP*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Melek	NE	(NP*	melek	sg	neut	-	(326)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Christen	NN	*))	christ	pl	masc	(MISC*)	(337)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	hießet	VVFIN	*)	hießen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	eh	ADV	(S(VP(PP*	eh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Ehgemahl	NN	*)	ehgemahl	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	ihr	PPOSAT	(NP*	ihr	sg	fem	-	(336)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Christen	NN	*)	christ	pl	masc	(MISC*)	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	lieben	VVINF	*)	lieben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	wolltet	VMFIN	*))))	wollten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Christen	NN	*	christ	pl	masc	(MISC*)	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Christen	NN	*	christ	pl	masc	-	(337)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Die	ART	*	der	pl	masc	-	(338
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Liebe	NN	*	liebe	pl	masc	-	338)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	gewärtigen	VVINF	*	gewärtig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	womit	PWAV	*	womit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Der	ART	*	der	sg	masc	-	(209
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Schöpfer	NN	*	schöpfer	sg	masc	-	209)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Mann	NN	*	mann	sg	masc	-	(339)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Männin	NN	*	männin	sg	neut	-	(289)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	ausgestattet	VVPP	*	ausstatten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	*	der	pl	masc	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Christen	NN	*	christ	pl	masc	(MISC*)	99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	glauben	VVFIN	*	glauben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	PIAT	*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Armseligkeiten	NN	*	armseligkeit	pl	fem	-	(333)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sie	PPER	*	sie	pl	masc	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	die	ART	*	der	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	glauben	VVINF	*	glauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	könnten	VMFIN	*	können	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gleichwohl	ADV	*	gleichwohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	irrst	ADV	*	irrst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dich	PRF	*	dich	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	(S(NP*	der	pl	masc	-	(121
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Tempelherren	NN	*)	tempelherr	pl	masc	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Die	ART	(NP*	der	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Christen	NN	*)	christ	pl	masc	(MISC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sind	VAFIN	(S*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Schuld	NN	*	schuld	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sind	VAFIN	(S*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Christen	NN	*)	christ	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Tempelherren	NN	*))))	tempelherr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Schuld	NN	*	schuld	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Durch	APPR	(VROOT(PSEUDO(S(PP*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	*	der	sg	fem	-	(121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	allein	ADV	(AP*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wird	NN	*))	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	aus	APPR	(NP(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	*	der	sg	fem	-	(328
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Sache	NN	*)	sache	sg	fem	-	328)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nichts	PIS	*))	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S(S*	sie	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wollen	VMFIN	*	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Acca	NE	(MPN*	acca	-	-	-	(340
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	340)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Das	NE	*	der	sg	neut	-	(340)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Richards	NE	*	richard	sg	*	-	(327|(325)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Schwester	NE	*)	schwester	sg	fem	-	327)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	unserm	PPOSAT	(NP*	unser	*	*	-	(326|(317)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Bruder	NN	*	bruder	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Melek	NE	*))	melek	*	*	-	326)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Zum	APPRART	(VP(PP*	zu	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Brautschatz	NN	*)	brautschatz	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	bringen	VVINF	*)	bringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	müßte	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	schlechterdings	ADV	*	schlechterdings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Nicht	PTKNEG	(VP(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	fahren	VVINF	*)	fahren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	lassen	VVINF	*))	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	des	ART	(NP*	der	sg	masc	-	(341|(121
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ritters	NN	*)	ritter	sg	masc	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vorteil	NN	*	vorteil	sg	masc	-	341)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Gefahr	NN	*	gefahr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	laufe	VVFIN	*)	laufen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	spielen	VVFIN	*	spielen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sie	PPER	*	sie	pl	*	-	(121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	(NP*	der	sg	masc	-	(342
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Mönch	NN	*	mönch	sg	masc	-	342)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Den	NE	*)	der	pl	masc	-	(342
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	albern	ADJD	*	albern	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Mönch	NN	*)	mönch	pl	masc	-	342)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ob	KOUS	(S*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	im	APPRART	(PP*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Fluge	NN	*	flug	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ein	ART	(NP*	ein	sg	masc	-	(341
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	guter	ADJA	*	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Streich	NN	*))	streich	sg	masc	-	341)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gelänge	VVFIN	*)	gelingen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	haben	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	pl	*	-	(121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Des	ART	(VP(VP(NP*	der	sg	neut	-	(266
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Waffenstillestandes	NN	*	waffenstillestand	sg	neut	-	266)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Ablauf	NN	*	ablauf	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	kaum	ADV	*)	kaum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Erwarten	VVINF	*)	erwarten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	können	VMINF	*))	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Lustig	NE	*	lustig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(AP(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	weiter	ADV	*)	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPOSAT	(VROOT(PSEUDO(S(NP*	ihr	pl	*	-	(121
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Herren	NN	*)	herr	pl	-	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	weiter	PTKVZ	*)	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schon	ADV	(AVP*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	recht	ADV	*))	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wär	NN	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	(CS(S*	alle	sg	neut	-	(343)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	es	PPER	*	es	sg	neut	-	(343)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	müßte	VMFIN	*))	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	irrte	VVFIN	*	irren	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PPER	*	dich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sonst	ADV	*)	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	könnte	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Dich	PRF	(VP*	dich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	*	der	sg	fem	-	(344
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Fassung	NN	*)	fassung	sg	fem	-	344)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	bringen	VVINF	*))	bringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	je	ADV	(AP*	je	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mich	ADV	*	mich	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	immer	ADV	*))	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	*	der	sg	fem	-	(344
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Fassung	NN	*)	fassung	sg	fem	-	344)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gebracht	VVPP	*)	bringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Libanon	NE	*)	libanon	sg	masc	-	(273)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	unserm	PPOSAT	*	unser	sg	masc	-	(174|(317)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Vater	NN	*))	vater	sg	masc	-	174)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(174)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	unterliegt	VVFIN	*	unterliegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	(NP*	der	pl	fem	-	(345
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sorgen	NN	*)	sorge	pl	fem	-	345)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	XY	*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weh	XY	*	weh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(174)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	durch	PTKVZ	*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	es	PPER	(S*	es	sg	neut	-	(173)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	klemmt	VVFIN	*	klemmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sich	PRF	*	sich	sg	-	-	(173)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	aller	PIAT	(NP*	aller	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Orten	NN	*)))	ort	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Es	PPER	(S*	es	sg	neut	-	(173)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	fehlt	VVFIN	*	fehlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	bald	ADV	*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	bald	ADV	*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	dort	ADV	(NP*	dort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	–	CARD	*)))))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	klemmt	VVFIN	*)	klemmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fehlt	VVFIN	*)	fehlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	was	PWS	*	was	sg	neut	-	(346
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	kaum	ADV	*	kaum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nennen	VVINF	*	nennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	würd	VAFIN	*	würd	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ge	FM	*	GE	-	-	-	346)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	(346
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ichs	NE	*	ichs	-	-	-	(346)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	überflüssig	ADJD	*	überflüssig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	hab	VAFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ichs	ADV	*	ichs	-	-	-	(346)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	unentbehrlich	ADJD	*	unentbehrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	scheint	VVFIN	*	scheinen	sg	-	-	346)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Al-Hafi	NE	*	al-hafi	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	niemand	PIS	*	niemand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nach	APPR	(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihm	PPER	*)	ihm	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	aus	PTKVZ	*)	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(NP*	der	sg	neut	-	(346
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	leidige	ADJA	(PP*	leidig	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	verwünschte	ADJA	*	verwünschen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Geld	NN	*))	geld	sg	neut	-	346)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gut	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Hafi	NE	(NP*	hafi	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	du	PPER	*	du	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	kömmst	VVFIN	*))	kömmsen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Derwisch	NN	*	derwisch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Al-Hafi	NE	*)	al-hafi	sg	-	(PER*)	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO*	saladin	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sittah	NE	(VROOT(PSEUDO*	sittah	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	pl	neut	-	(347
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gelder	NN	*	geld	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ägypten	NE	(MPN*	ägypten	sg	neut	-	347)|(348)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Wenns	NE	*)))	wenn	sg	neut	-	(347)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	fein	ADJD	(AP*	fein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	viel	PIS	*)	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ist	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hast	VAFIN	(VROOT(PSEUDO(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nachricht	NN	*)	nachricht	sg	fem	-	(349)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	denke	VVFIN	*	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sie	PPER	*	sie	pl	*	-	(347)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Empfang	NN	*)	empfang	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nehmen	VVINF	*))	nehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zahl	NN	(VROOT(PSEUDO(NP*	zahl	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*	sittah	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	tausend	CARD	*	tausend	-	-	-	(315)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Dinare	NN	*))	dinar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	In	APPR	(VROOT(PSEUDO(CO(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gedanken	NN	*	gedanke	pl	*	-	(322)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hin	ADV	*)	hin	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	her	ADV	(AP*	her	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gehend	ADJD	*))	gehend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zahl	NN	(VROOT(PSEUDO*	zahl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	anstatt	KOUI	*	anstatt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	empfang	FM	*	empfingen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(AP*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schön	ADJD	*)	schön	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Was	PWS	(AP*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	weniger	PIS	(AP*	weniger	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	als	KOKOM	(NP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Nichts	PIS	*)))))	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	An	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*	sittah	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wiederum	ADV	*	wiederum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sittah	NE	*	sittah	sg	masc	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Verloren	NN	*	verlor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wiederum	ADV	*	wiederum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	im	APPRART	(VP(PP*	in	sg	masc	-	(308
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Schach	NN	*)	schach	sg	masc	-	308)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	verloren	VVPP	*))	verlieren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Da	ADV	(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	steht	VVFIN	*	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	(NP*	der	sg	neut	-	(318
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Spiel	NN	*)	spiel	sg	neut	-	318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gönnst	VVFIN	*	gönnen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Mein	PPOSAT	(NP*	mein	sg	neut	-	(315|(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Glück	NN	*))	glück	sg	neut	-	315)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*))	al-hafi	-	-	-	(3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	das	ART	(VROOT(PSEUDO(AP(NP*	der	sg	neut	-	(318
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Spiel	NN	*)	spiel	sg	neut	-	318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	betrachtend	ADJD	*)	betrachtend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gönnen	VVINF	*	gönnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	–	XY	*	–	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wißt	VVFIN	*	wissen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*))	sittah	-	-	-	(307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ihm	PPER	(VROOT(PSEUDO(AP*	ihm	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	winkend	ADJD	*)	winkend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bst	XY	*	bst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hafi	NE	(VROOT(PSEUDO(MPN*	hafi	-	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	bst	XY	*	bst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*))	al-hafi	-	-	-	(3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	noch	ADV	(VROOT(PSEUDO(VP(PP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	*	der	sg	neut	-	(318
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Spiel	NN	*)	spiel	sg	neut	-	318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gerichtet	VVPP	*)	richten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gönnts	NE	(VROOT(PSEUDO(S*	gönnt	-	-	-	(315)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*	euch	pl	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	selber	ADV	*	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	erst	ADV	*))	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	(VROOT(PSEUDO(MPN*	al-hafi	-	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	bst	XY	*	bst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*))	al-hafi	-	-	-	(3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	zu	APPR	(VROOT(PSEUDO(MPN*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sittah	NE	*)	sittah	-	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Weißen	NN	*)	weiße	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	waren	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euer	NN	*)	euer	*	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bietet	VVFIN	*	bieten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Schach	NE	*)	schach	sg	-	-	(318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gut	ADJD	(VROOT(PSEUDO(DL*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gehört	VVFIN	*))	gehören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Zug	NN	*	zug	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihm	PPER	*)))	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*))	sittah	-	-	-	(307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ihm	PPER	(VROOT(PSEUDO(AP*	ihm	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	näher	ADJD	*	nah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	tretend	ADJD	*)	tretend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sage	VVIMP	(S*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mein	PPOSAT	(VP(NP*	mein	sg	neut	-	(315|(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Geld	NN	*)	geld	sg	neut	-	315)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	bekommen	VVINF	*)	bekommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	kann	VMFIN	*))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*))	al-hafi	-	-	-	(3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	noch	ADV	(VROOT(PSEUDO(VP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	*	der	sg	neut	-	(318
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Spiel	NN	*)	spiel	sg	neut	-	318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	geheftet	VVPP	*)	heften	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ja	PTKANT	(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	(S*	ihr	pl	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sollts	ADV	*	sollts	-	-	-	(315)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bekommen	VVINF	*	bekommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ihrs	NE	*	ihr	sg	*	-	(1021)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	stets	ADV	*	stets	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	bekommen	VVFIN	*)))	bekommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	bist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	toll	FM	*	toll	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(308
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Spiel	NN	*)	spiel	sg	neut	-	308)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	aus	PTKVZ	*)	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	habt	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(NP(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	verloren	VVPP	*)	verloren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Saladin	NN	*))	saladin	-	-	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	kaum	ADV	(VROOT(PSEUDO(AP*	kaum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hinhörend	ADJD	*)	hinhörend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	doch	ADV	(VROOT(PSEUDO(S*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bezahl	NN	(VROOT(PSEUDO*	bezahl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	bezahl	ADJD	(VROOT(PSEUDO*	bezahl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bezahl	NN	(VROOT(PSEUDO*	bezahl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	bezahl	ADJD	(VROOT(PSEUDO*	bezahl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	steht	VVFIN	*	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Eure	PPOSAT	(NP*	euer	sg	fem	-	(314|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Königin	NN	*))	königin	sg	fem	-	314)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	noch	ADV	(VROOT(PSEUDO(CO(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*))	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gilt	VVFIN	(VROOT(PSEUDO(S*	gilt	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gehört	NN	(NP*	gehört	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	(PP(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	ADV	*)	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ins	APPRART	*	in	sg	neut	-	(318
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Spiel	NN	*)))	spiel	sg	neut	-	318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mach	VVFIN	*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sag	VVFIN	(S*	sag	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Daß	KOUS	(S*	daß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	das	ART	(VP(NP*	der	sg	neut	-	(315
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Geld	NN	*	geld	sg	neut	-	315)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mir	PPER	(S*	sich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	holen	VVINF	*))	holen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	lassen	VVINF	*))))	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*))	al-hafi	-	-	-	(3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	noch	ADV	(VROOT(PSEUDO(VP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	immer	ADV	*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	*	der	sg	neut	-	(318
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Spiel	NN	*)	spiel	sg	neut	-	318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	vertieft	VVPP	*)	vertiefen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Versteht	VVFIN	(VROOT(PSEUDO(AVP(S*	verstehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sich	PRF	*)	sich	sg	-	-	(351)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wie	KOKOM	(AVP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	immer	ADV	*))	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	auch	ADV	(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	*	der	sg	fem	-	(314
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Königin	NN	*)	königin	sg	fem	-	314)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	gilt	VVFIN	*))	gelten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Ihr	PPER	(S*	ihr	pl	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Doch	KON	(AP(AVP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	darum	PROAV	*	darum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	matt	ADJD	*))	matt	-	-	-	(352)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	tritt	VVFIN	(VROOT(PSEUDO(S*	treten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hinzu	PTKVZ	*	hinzu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wirft	VVFIN	(S*	werfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	(NP*	der	sg	neut	-	(318
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Spiel	NN	*)	spiel	sg	neut	-	318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	um	PTKVZ	*))	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(352)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Es	PPER	*	es	sg	neut	-	(352)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Spiel	NN	*	spiel	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gewinst	NN	*)	gewinst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(VP(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gewonnen	NN	*))	gewonne	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bezahlt	VVPP	*)	bezahlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	zu	APPR	(VROOT(PSEUDO(MPN*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sittah	NE	*)	sittah	-	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*)	er	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*))	sittah	-	-	-	(307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	von	APPR	(VROOT(PSEUDO(AP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zeit	NN	*)	zeit	sg	fem	-	(158)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Zeit	NN	*)	zeit	sg	fem	-	(158)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	(NP*	der	sg	masc	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Hafi	NN	*)	hafi	sg	masc	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	winkend	ADJD	*)	winkend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kennst	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*)	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sträubt	VVFIN	*	sträuben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	*	sich	sg	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	läßt	VVFIN	(CS(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Sich	PRF	(NP*	sich	sg	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	bitten	ADV	*))	bitten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ist	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wohl	ADV	(AP*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ein	ART	(AVP*	ein	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	wenig	ADV	*)	wenig	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	neidisch	ADJD	*))))	neidisch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auf	APPR	(VROOT(PSEUDO(S*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PPER	*	dich	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auf	APPR	(VROOT(PSEUDO(S*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	meine	PPOSAT	(NP*	mein	sg	fem	-	(307|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Schwester	NN	*)	schwester	sg	fem	-	307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hör	XY	*	hör	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Hafi	NE	*	hafi	sg	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Neidisch	ADJD	(VROOT(PSEUDO*	neidisch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	du	PPER	*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hätt	VAFIN	*	hätt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihr	PPOSAT	*	ihr	sg	fem	-	(321|(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Hirn	NN	*	hirn	-	-	-	321)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	lieber	ADV	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Wär	NN	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	lieber	ADV	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	gut	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	sie	PPER	*	sie	pl	masc	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Indes	ADV	(VROOT(PSEUDO(S*	ind	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	(VP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	immer	ADV	(AP*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	richtig	ADJD	*)	richtig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	bezahlt	VVPP	*))	bezahlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	heut	ADV	*	heut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bezahlen	VVINF	*	bezahlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	KOUS	(VROOT(PSEUDO(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*	ihn	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Al-Hafi	NE	*	al-hafi	sg	-	(LOC*)	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(VP(VP(NP*	der	sg	neut	-	(315
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Geld	NN	*)	geld	sg	neut	-	315)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	holen	VVINF	*)	holen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	lassen	VVINF	*))	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	(VROOT(PSEUDO(S*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(353|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	spiele	VVFIN	*	spielen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	länger	ADJD	(AP*	lang	-	-	-	353)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Die	ART	(NP*	der	pl	neut	-	(351
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Mummerei	NN	*))	mummerei	pl	neut	-	351)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mit	PTKVZ	*)	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	(VP*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Einmal	ADV	*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	erfahren	VVINF	*))	erfahren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	(VROOT(PSEUDO(MPN*	al-hafi	-	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dieses	PDS	(NP(AP*	dieser	sg	neut	-	(353)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dein	PPOSAT	*)	dein	sg	neut	-	(354|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Versprechen	NN	*))	versprechen	-	-	-	354)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hältst	VVFIN	(VROOT(PSEUDO(S*	hältst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mir	NE	(NP*	sich	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Wort	NN	*))	wort	-	-	-	(354)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	konnt	ADJD	*	konnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	glauben	VVFIN	*	glauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	es	PPER	*	es	sg	neut	-	(351)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Weit	ADJD	*	weit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	gehen	VVINF	*	gehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	würde	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	erfahr	ADJD	(VROOT(PSEUDO(S*	erfahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S(NP(S*	ich	sg	*	-	(355|(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bitte	VVFIN	*	bitten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PPER	*)	dich	sg	masc	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Al-Hafi	NE	*	al-hafi	sg	*	(LOC*)	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	bescheiden	ADJD	*)	bescheiden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	355)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(355)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(AP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sonderbar	ADJD	*))	sonderbar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(CS(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	könnte	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*	sittah	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	So	ADV	(PP(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	feierlich	ADJD	(CAP*	feierlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	warm	ADJD	*)))	warm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	einem	ART	*	ein	sg	neut	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Fremden	NN	*))	fremde	sg	neut	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Bei	NN	(S*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	einem	ART	(AP(NP*	ein	sg	neut	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Derwisch	NN	*)	derwisch	sg	neut	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	lieber	ADJD	*)	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	bei	APPR	(VP(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	mir	PPER	*)	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	ihrem	PPOSAT	*	ihr	sg	masc	-	(7|(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Bruder	NN	*)	bruder	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	sich	PRF	*	sich	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	verbitten	VVINF	*)	verbitten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	wollen	VMFIN	*)))	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	*	al-hafi	-	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	befehl	ADJD	*	befehl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Rede	NN	*	rede	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Derwisch	NN	*	derwisch	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	KOUS	(VROOT(PSEUDO(S*	lassen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eine	ART	(CNP(NP*	ein	sg	fem	-	(351
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Kleinigkeit	NN	*)	kleinigkeit	sg	fem	-	351)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mein	PPOSAT	(NP*	mein	sg	masc	-	(7|(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Bruder	NN	*))	bruder	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dir	PPER	(VP*	dir	sg	*	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Nicht	PTKNEG	(AP*	nicht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	näher	ADJD	*)	nah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	treten	VVINF	*)	treten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sie	PPER	*	sie	sg	fem	-	(351)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	würdig	ADJD	*	würdig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ist	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	*	du	sg	*	-	(356|(357|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weißt	VVFIN	*	weißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	verschiednen	VVINF	*	verschiednen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Malen	NE	*	mal	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Dieselbe	PDAT	*	derselbe	sg	fem	-	(350
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Summ	NN	*	summ	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	350)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	im	APPRART	*	in	sg	masc	-	(195
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Schach	NN	*	schach	sg	masc	-	195)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	dir	PPER	*	dir	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	gewonnen	VVPP	*	gewinnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weil	KOUS	(S*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	itzt	VVFIN	(S*	itzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	(NP*	der	sg	neut	-	(315
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Geld	NN	*)	geld	sg	neut	-	315)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nötig	ADJD	*))	nötig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	habe	VAFIN	*)	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Weil	NE	(S*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	itzt	ADJD	(AP*	itzt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Hafis	NE	(MPN*	hafis	sg	fem	-	(172|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Kasse	NE	*)))	kasse	sg	fem	-	172)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	das	ART	(NP*	der	sg	neut	-	(204
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Geld	NN	*)	geld	sg	neut	-	204)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Nicht	PTKNEG	(AP(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	eben	ADV	*)	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	allzuhäufig	ADJD	*)	allzuhäufig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	so	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Die	ART	(NP*	der	pl	masc	-	(358
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Posten	NN	*	posten	pl	masc	-	358)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	stehn	CARD	*)	stehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	geblieben	VVPP	*)))	bleiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	(VROOT(PSEUDO(S*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sorgt	VVFIN	*	sorgen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	pl	*	-	(358)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	weder	KON	(NP(CNP*	weder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*	dir	sg	*	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mein	PPOSAT	(NP*	mein	sg	masc	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Bruder	NN	*))	bruder	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Noch	NE	(MPN*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Hafi	NE	*))	hafi	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	der	ART	(VP(NP*	der	sg	masc	-	(172
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Kasse	NN	*)	kasse	sg	masc	-	172)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	schenken	VVINF	*))))	schenken	-	-	-	357)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wenns	NN	*	wenn	sg	-	-	(351)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*	der	sg	neut	-	(356)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wäre	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	das	ART	*	der	sg	neut	-	(356)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(NP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mehr	ADV	*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dergleichen	PIS	*)	dergleichen	-	-	-	(357)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Auch	ADV	(S*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(358)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	(VP(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	*	der	sg	fem	-	(172
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Kasse	NN	*	kasse	sg	fem	-	172)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	stehn	CARD	*)	stehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	geblieben	VVPP	*	bleiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mir	PPER	*	sich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	einmal	ADV	(VP*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ausgeworfen	VVPP	*	auswerfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ist	VAFIN	*)))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Seit	APPR	(VP*	seit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	wenig	PIAT	(NP*	wenig	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Monden	NN	*	monden	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	stehn	CARD	*)	stehn	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	geblieben	VVPP	*)	bleiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	*)	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(CO(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wirst	VAFIN	*	wirst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	(VP*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	reden	VVINF	*))	reden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Seit	APPR	*	seit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	aus	APPR	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ägypten	NE	*	ägypten	pl	-	-	(348)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wir	PPER	*	wir	pl	*	-	(359)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	*	der	sg	neut	-	(347
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Geld	NN	*	geld	sg	neut	-	347)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	erwarten	VVFIN	*	erwarten	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sie	PPER	*	sie	sg	fem	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*))	sittah	-	-	-	(307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Saladin	NE	*	saladin	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wozu	PWAV	(VROOT(PSEUDO(S*	wozu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*	ihn	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hören	VVFIN	*)	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(PP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nichts	NN	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bekommen	NN	*)	bekommen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gutes	ADJA	(VROOT(PSEUDO(NP*	gut	sg	neut	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mädchen	NN	*)	mädchen	sg	neut	-	307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Auch	ADV	(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	beiher	ADV	*)	beiher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	vorgeschossen	VVPP	*)	vorgeschießen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Den	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(175
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ganzen	ADJA	*	ganz	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Hof	NN	*)	hof	sg	masc	-	175)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Erhalten	NN	*	erhalten	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Euern	NN	(S(NP*	euer	sg	masc	-	(360|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Aufwand	NN	*)	aufwand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ganz	ADV	(AVP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	allein	ADV	*)	allein	-	-	-	360)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Bestritten	NN	*)	bestritten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ha	XY	*	ha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(360)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(360)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	meine	PPOSAT	(NP*	mein	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Schwester	NN	*))	schwester	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(AP*	sie	sg	fem	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	umarmend	ADJD	*)	umarmend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hatte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dies	PDS	(VP*	dieser	sg	neut	-	(360)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	können	VMINF	*)	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mich	PPER	(VP*	mich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	reich	ADJD	*	reich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Gemacht	VVPP	*))	gemacht	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	du	PPER	*	du	sg	*	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	mein	PPOSAT	(NP*	mein	sg	masc	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Bruder	NN	*)))	bruder	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wird	VAFIN	(VROOT(PSEUDO(S*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schon	ADV	(AP*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	So	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bettelarm	ADJD	*)	bettelarm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sie	PPER	*	sie	pl	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	(VP*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	machen	VVINF	*	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	selber	ADV	*))	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ist	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	arm	VVFIN	*)	arm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bruder	NN	*)	bruder	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	arm	ADJD	*)	arm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hab	VAFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mehr	ADV	*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weniger	ADV	*	weniger	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gehabt	VAPP	*	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ein	ART	(NP*	ein	sg	masc	-	(361
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Kleid	NN	*)	kleid	sg	masc	-	361)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ein	ART	(CNP(NP*	ein	sg	masc	-	(362
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Schwert	NN	*)	schwert	sg	masc	-	362)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ein	ART	(NP*	ein	sg	masc	-	(363
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Pferd	NN	*)	pferd	sg	masc	-	363)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	NN	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Einen	ART	(NP*	ein	sg	masc	-	(209
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Gott	NN	*))	gott	sg	masc	-	209)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	brauch	ADV	*	brauch	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mehr	ADV	*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kanns	NE	*	kanns	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	an	APPR	(AVP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	*)	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	fehlen	VVFIN	*)	fehlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Al-Hafi	NE	*	al-hafi	-	-	(LOC*)	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	könnt	VVFIN	*	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dir	PPER	*	dir	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	schelten	VVFIN	*	scheln	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Schilt	NE	(VROOT(PSEUDO(NP*	schilt	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mein	PPOSAT	(NP*	mein	sg	masc	-	(7|(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bruder	NN	*)))	bruder	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	unserm	PPOSAT	(NP*	unser	sg	-	-	(174|(317)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vater	NN	*)	vater	sg	masc	-	174)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Auch	ADV	*	auch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	seine	PPOSAT	(VP(NP*	sein	pl	fem	-	(345|(174)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Sorgen	NN	*	sorge	pl	fem	-	345)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	erleichtern	VVINF	*)	erleichtern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	könnte	VMFIN	*)	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schlägst	VVFIN	*	schlägen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	meine	PPOSAT	(NP*	mein	sg	fem	-	(364|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Freudigkeit	NN	*)	freudigkeit	sg	fem	-	364)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	einmal	ADV	*)	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nieder	PTKVZ	*)	nieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mir	PPER	(NP*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	für	APPR	(S(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	*)	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Fehlt	VVFIN	*	fehlt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nichts	PIS	(VP*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	fehlen	VVINF	*))))	fehlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	(VROOT(PSEUDO(CS(S*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihm	PPER	*	ihm	sg	masc	-	(174)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihm	PPER	*	ihm	sg	*	-	(174)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	fehlet	VVFIN	*)	fehlet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	in	APPR	(S(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihm	PPER	*)	ihm	sg	masc	-	(174)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	uns	PPER	(NP*	uns	pl	*	-	(168)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	allen	PIS	*)))	aller	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sagt	VVFIN	*	sagen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	machen	VVINF	*	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Aus	APPR	*	aus	-	-	-	(365
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ägypten	NE	*	ägypten	sg	neut	-	(348)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kommt	VVFIN	(S*	kommen	sg	-	-	365)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	lange	ADV	*)	lange	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Woran	PWAV	(VROOT(PSEUDO(S(S*	woran	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(365)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	liegt	VVFIN	*)	liegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Weiß	NN	(S*	weiß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Gott	NN	*))	gott	sg	masc	-	(209)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	da	ADV	(NP*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	alles	PIS	*)	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ruhig	ADJD	*)	ruhig	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Abbrechen	NN	(NP*	abbrechen	-	-	-	(366
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	einziehn	VVFIN	(S*	einziehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sparen	VVINF	*	sparen	-	-	-	366)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	will	VMFIN	(S*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Mir	PPER	(VP(VP*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	gefallen	VVINF	*)	gefallen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	lassen	VVINF	*))))	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	wenn	KOUS	(CS(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	es	PPER	*	es	sg	neut	-	(366)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	mich	PPER	*	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Bloß	NN	*	bloß	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	mich	PPER	*	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	betrifft	VVFIN	*	betreffen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	bloß	ADV	(NP*	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	mich	PPER	*))	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	niemand	PIS	(S(NP*	niemand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	sonst	ADV	*)	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Darunter	PROAV	*	darunter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	leidet	VVFIN	*))	leiden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	(VP*	der	sg	neut	-	(366)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	machen	VVINF	*))	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(S(NP*	ein	sg	masc	-	(363
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Pferd	NN	*	pferd	sg	masc	-	363)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ein	ART	(NP*	ein	sg	masc	-	(361
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Kleid	NN	*	kleid	sg	masc	-	361)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ein	ART	(NP*	ein	sg	masc	-	(362
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Schwerd	NN	*)))	schwerd	sg	masc	-	362)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ich	PPER	(VP*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	haben	VAINF	*))	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	meinem	PPOSAT	(NP*	mein	sg	masc	-	(209|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gott	NN	*)	gott	sg	masc	-	209)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	(VP(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	abzudingen	VVIZU	*))	audingen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihm	PPER	(VROOT(PSEUDO(S*	ihm	sg	*	-	(209)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gnügt	VVFIN	*	gnügen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schon	ADV	(AVP*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wenigem	PIS	*)	wenig	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	genug	ADV	*)	genug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	meinem	PPOSAT	*	mein	sg	masc	-	(367|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Herzen	NN	*))	herz	sg	masc	-	367)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	*	der	sg	masc	-	(368
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Überschuß	NN	*	überschuß	sg	masc	-	368)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	deiner	PPOSAT	*	dein	sg	fem	-	(172|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Kasse	NN	*	kasse	sg	fem	-	172)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Hafi	NE	*	hafi	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	hatt	VAFIN	*	hatt	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sehr	ADV	*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Gerechnet	ADJD	*	gerechnet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Überschuß	NN	(VROOT(PSEUDO*	überschuß	sg	masc	-	(368)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sagt	NN	*	sagt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	selber	ADV	*	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	pl	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mich	PRF	*	mich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	hättet	ADJD	*	hätten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	spießen	VVINF	*	spießen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wenigstens	ADV	*	wenigstens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Mich	PPER	*	mich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	drosseln	VVINF	*	drosseln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	lassen	VVINF	*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Überschuß	NN	*	überschuß	sg	masc	-	(368)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Euch	PPER	*	euch	pl	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	ergriffen	VVPP	*	ergreifen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	worden	VAPP	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Unterschleif	NN	*))	unterschleif	-	-	-	(369)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	*	der	sg	neut	-	(369)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wagen	VVINF	*	wagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	machen	VVFIN	*	machen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wir	PPER	*	wir	pl	*	-	(359)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	(AVP*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	aber	ADV	*))	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Konntest	NN	*	konntest	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vor	APPR	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	erst	ADV	(AVP*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	niemand	PIS	*))	niemand	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	andern	VVINF	(S*	anderer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	borgen	VVFIN	*	borgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	als	KOKOM	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Sittah	NE	*))	sittah	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Würd	VAFIN	*	würd	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dieses	PDAT	*	dieser	sg	neut	-	(370
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Vorrecht	NN	*	vorrecht	sg	neut	-	370)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Bruder	NN	*	bruder	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Mir	NE	*	sich	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	haben	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nehmen	VVINF	*	nehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	lassen	VVINF	*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mir	PPER	(VROOT(PSEUDO(NP*	sich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*)	ihm	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	besteh	VVFIN	*	besteh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	drauf	PTKVZ	*	drauf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(S*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Dem	ART	(AP(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Trocknen	NN	*)	trocknen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	völlig	ADJD	*))	völlig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(CO(AVP(AVP*	nur	-	-	-	(371
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	völlig	ADJD	*)	völlig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	371)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(371)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fehlte	VVFIN	*	fehlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gleich	ADV	(NP*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mach	APPR	(NP(PP*	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Anstalt	NN	*)	anstalt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Hafi	NE	*))	hafi	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nimm	VVIMP	*	nimm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auf	PTKVZ	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wem	PWS	*	wem	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kannst	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kannst	VMFIN	*)	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geh	XY	(VROOT(PSEUDO*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	borg	VVFIN	(S*	borg	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	versprich	VVFIN	*)	versprich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Hafi	NE	(NP*	hafi	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	borge	VVFIN	(S*	borgen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	denen	PDS	*	der	pl	fem	-	(206
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	die	PRELS	(S*	der	pl	fem	-	(206)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	reich	ADJD	(VP*	reich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	gemacht	VVPP	*)))))	machen	-	-	-	206)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	borgen	VVFIN	*	borgen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	diesen	PDS	*	dieser	pl	*	-	(206)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	möchte	VMFIN	*	möchten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wiederfodern	VVINF	*	wiederfodern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	heißen	VVINF	*	heißen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geh	NN	(VROOT(PSEUDO(S(NP*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	*	der	pl	fem	-	(372
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Geizigsten	NN	*))	geizigst	pl	fem	-	372)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	(S*	der	pl	fem	-	(372)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	werden	VAFIN	*	werden	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Am	NN	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	liebsten	ADJD	(VP*	lieb	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	leihen	VVINF	*)))	leihen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	pl	*	-	(372)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wissen	VVFIN	*	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wie	PWAV	(S(AP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gut	ADJD	*)	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihr	PPOSAT	(NP*	ihr	sg	neut	-	(372)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Geld	NN	*)	geld	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	meinen	PPOSAT	*	mein	pl	neut	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Händen	NN	*)	hand	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wuchert	VVFIN	*))	wuchern	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kenne	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	deren	PDS	*	der	pl	masc	-	(372)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	keine	PIAT	*	kein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Eben	ADV	(VROOT(PSEUDO(S*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fällt	VVFIN	*	fallen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mir	PPER	*	sich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ein	PTKVZ	*	ein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gehört	VVPP	(VP*	gehören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	haben	VAINF	*)	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Hafi	NN	(NP*	hafi	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Dein	NE	(VP(NP*	dein	sg	masc	-	(1|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Freund	NN	*)	freund	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zurückgekommen	VVPP	*)))))	zurückkommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*))	al-hafi	-	-	-	(3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	betroffen	VVPP	*	betreffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Freund	NN	(VROOT(PSEUDO*	freund	-	-	-	(373)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(373|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Freund	NN	*)	freund	sg	masc	-	373)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dein	PPOSAT	(VROOT(PSEUDO(NP*	dein	sg	masc	-	(1|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hochgepriesner	ADJA	*	hochgepriesn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Jude	NN	*)	jude	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gepriesner	ADJA	(VROOT(PSEUDO(NP*	gepriesner	-	-	-	(98
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Jude	NN	*)	jude	pl	-	-	98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	hoch	ADJD	(VROOT(PSEUDO(PP*	hoch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*)	sich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dem	ART	*	der	sg	neut	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*	gott	sg	-	(PER*)	1)|(209)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	$.	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	CARD	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Mich	PPER	*	mich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	denkt	VVFIN	*	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	des	ART	*	der	sg	masc	-	(374
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ausdrucks	NN	*	ausdruck	sg	masc	-	374)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	recht	ADV	*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	des	ART	*	der	-	-	-	(374)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	einst	ADV	*	einst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Du	PPER	*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	selber	ADV	*	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	dich	PRF	*	dich	sg	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	ihm	PPER	*	ihm	sg	masc	-	(374)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	bedientest	VVFIN	*	bedientest	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	–	XY	*	–	-	-	-	(374
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	dem	ART	*	der	sg	neut	-	374)|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Sein	PPOSAT	*	sein	sg	masc	-	(24
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Gott	NN	*	gott	sg	masc	-	24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	von	APPR	*	von	-	-	-	(375
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	allen	PIAT	*	aller	pl	masc	-	(1059
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Gütern	NN	*	gut	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	dieser	PDAT	*	dieser	sg	masc	-	(262
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Welt	NN	*	welt	sg	fem	-	375)|1059)|262)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	kleinst	ADJD	*	kleinst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	größte	VVFIN	*	groß	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	vollem	ADJA	*	voll	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	Maß	NN	*	maß	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	Erteilet	VVPP	*	erteilet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sagt	VVFIN	*	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	meint	VVFIN	*	meinen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	damit	PROAV	*	damit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(376
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kleinste	ADJA	*)	klein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Reichtum	NN	*)	reichtum	sg	neut	-	376)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(CS*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(375
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	größte	VVFIN	*)	groß	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Weisheit	NN	*)	weisheit	sg	fem	-	375)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	von	APPR	(VROOT(PSEUDO(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	einem	ART	*	ein	sg	masc	-	(98
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Juden	NN	*)	Jude	sg	masc	-	98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	einem	ART	*	ein	sg	masc	-	(98
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Juden	NN	*	Jude	sg	masc	-	98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hätt	VAFIN	*	hätt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	das	PDS	*	der	sg	neut	-	(374)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gesagt	VVPP	*	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(374)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hättest	VVFIN	*	hättest	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(VP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	deinem	PPOSAT	*	dein	sg	masc	-	(1|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nathan	NN	*)	nathan	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gesagt	VVPP	*))	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	von	APPR	(VROOT(PSEUDO(CO(AVP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dem	ART	*))	der	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	vom	APPRART	(VROOT(PSEUDO(PP*	von	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NN	*)	nathan	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Fiel	NN	*	fiel	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mir	PPER	*	sich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(S*	der	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gar	ADV	(AVP*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	bei	PTKVZ	*)	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wahrhaftig	NN	*	wahrhaftig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(VP(NP*	der	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	NN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	endlich	ADV	*	endlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	heim	ADJD	*	heim	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gekommen	VVPP	*)	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	*	ei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mags	ADV	*	mags	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(AP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schlecht	ADJD	*	schlecht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihm	PPER	*))	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	stehn	VVFIN	*)	stehn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ganz	NN	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	recht	ADV	*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	*	der	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nannt	FM	*	nennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	einmal	ADV	*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	das	ART	*	der	sg	neut	-	(75
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Volk	NN	*	volk	sg	neut	-	75)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	*	der	sg	masc	-	(294
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Weisen	NN	*	weise	sg	masc	-	294)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Den	ART	(VROOT(PSEUDO(NP*	der	pl	masc	-	(295
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Reichen	NN	*	reiche	pl	masc	-	295)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Den	ART	(VROOT(PSEUDO(S(NP*	der	pl	masc	-	(295
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Reichen	NN	*)	reiche	pl	masc	-	295)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nennt	VVFIN	*	nennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(75)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihn	PPER	(NP*	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Itzt	NN	*)	itzt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mehr	PIS	(AP*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	als	KOKOM	(AVP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	je	ADV	*)))	je	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(VP(NP*	der	sg	fem	-	(75
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ganze	ADJA	*	ganz	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Stadt	NN	*)	stadt	sg	fem	-	75)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	erschallt	VVPP	*	erschallen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Was	PWS	(S*	was	sg	neut	-	(290
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Kostbarkeiten	NN	*)	kostbarkeit	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Schätze	NN	*)	schatz	pl	masc	-	290)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Er	PPER	(S(VP*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	mitgebracht	VVPP	*)))))	mitbringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(VP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ists	FM	(NP*	ists	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(NP*	der	sg	masc	-	(295
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Reiche	NN	*)	reiche	sg	masc	-	295)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	So	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wirds	ADV	*	wirdsen	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wohl	ADV	*))	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	der	ART	(NP*	der	sg	masc	-	(294
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Weise	NN	*)	weise	sg	masc	-	294)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	sein	VAINF	*)	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	meinst	ADV	*	meinst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Hafi	NE	*	hafi	-	-	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	diesen	PDS	*	dieser	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	angingst	VVFIN	*))	angingen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	(S*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	borgen	VVINF	*)	borgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	pl	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Erborgen	NN	*	erborgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Seine	PPOSAT	(S(NP*	sein	sg	fem	-	(378|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Weisheit	NN	*)	weisheit	sg	fem	-	378)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	niemand	PIS	*))	niemand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	borgt	VVFIN	*	borgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hast	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mir	PPER	*	sich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ganz	ADV	(NP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ander	ADJA	*	ander	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Bild	NN	*)	bild	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ihm	PPER	*)	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Gemacht	NN	*)	gemacht	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zur	APPRART	(VROOT(PSEUDO(S(PP*	zu	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Not	NN	*)	not	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	(VP*	euch	pl	*	-	(317)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Waren	NN	*	sein	pl	fem	-	(379)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	borgen	VVINF	*))	borgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geld	NN	(VROOT(PSEUDO(NP*	geld	sg	neut	-	(346)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Geld	NN	*)	geld	sg	neut	-	(346)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geld	NN	(VROOT(PSEUDO(NP*	geld	sg	neut	-	(346)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nimmermehr	ADV	*)	nimmermehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	*	es	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ein	ART	*	ein	sg	masc	-	(46
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Jude	NN	*	jude	sg	masc	-	46)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	übrigens	ADV	*	übrigens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	s	PPER	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Viel	NN	*	viel	*	*	-	(98
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Juden	NN	*	Jude	pl	masc	-	98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	gibt	VVFIN	*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Verstand	NN	*	verstand	sg	masc	-	(380)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Zu	NN	(VP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	leben	VVINF	*)))	leben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	spielt	VVFIN	(S*	spielen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	gut	ADJD	*))	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Schach	NE	*	schach	-	-	-	(195)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	zeichnet	VVFIN	*	zeichnen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Im	APPRART	(PP*	in	sg	neut	-	(381
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Schlechten	NN	*)	schlecht	sg	neut	-	381)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sich	PRF	*	sich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	minder	ADJD	*)	minder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	als	KOKOM	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	im	APPRART	*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Guten	NN	*)	gut	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	allen	PIAT	*	aller	pl	masc	-	(98
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	andern	ADJA	*	anderer	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Juden	NN	*)	Jude	pl	masc	-	98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	aus	PTKVZ	*)	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	*	der	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Auf	APPR	(S(PP*	auf	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	den	PRELS	*)	der	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	rechnet	VVFIN	*	rechnen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Den	ART	(S(NP*	der	pl	masc	-	(382
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Armen	NN	*)	arme	pl	masc	-	382)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gibt	VVFIN	*)	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Er	PPER	(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zwar	ADV	*	zwar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gibt	VVFIN	*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Trotz	APPR	(PP*	trotz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Saladin	NN	*)))	saladin	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ganz	ADV	(AVP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	viel	PIS	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	gern	ADV	*)))	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Doch	KON	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ganz	ADV	(AVP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sonder	KON	*	sonder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Ansehn	NN	*))	ansehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Jud	XY	*	jud	-	-	-	(98
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Christ	NE	*	christ	sg	masc	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Muselmann	NE	*	muselmann	sg	masc	-	(100)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Parsi	NE	*	parsi	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	alles	PIS	*	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	eins	PIS	*	eins	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	(NP(AP*	so	-	-	-	(383
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	*)	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mann	NN	*))	mann	sg	masc	-	383)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(384)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Daß	KOUS	(S*	daß	sg	-	-	(384
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	diesem	PDAT	*	dieser	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Manne	NN	*)	manne	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nie	ADV	*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gehört	VVFIN	*))	gehören	sg	-	-	384)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	PDS	(VROOT(PSEUDO(S*	der	sg	masc	-	(383)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sollte	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Saladin	NE	*	saladin	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	borgen	VVINF	*)	borgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Dem	ART	*	der	sg	neut	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Saladin	NN	*	saladin	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	PRELS	*	der	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	andre	PIS	*	andre	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	braucht	VVFIN	*	brauchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Nicht	PTKNEG	*	nicht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sich	PRF	*	sich	sg	-	-	7)|(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seht	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gleich	ADV	(NP*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	*	der	sg	masc	-	(98
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Juden	NN	*)	Jude	sg	masc	(MISC*)	98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Den	ART	(NP*	den	sg	masc	-	(98
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ganz	ADV	(AP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	gemeinen	ADJA	*)	gemein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Juden	NN	*))	Jude	-	-	-	98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Glaubt	VVFIN	(S*	glauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mirs	PPER	*	mir	-	-	-	(385)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	(S*	er	sg	masc	-	(385|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aufs	APPRART	(PP*	auf	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Geben	NN	*)	geben	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	(NP(AP*	euch	-	-	-	(317)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	eifersüchtig	ADJD	*)	eifersüchtig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	So	ADV	(S(VP(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	neidisch	ADJD	*)	neidisch	-	-	-	385)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Der	ART	(NP*	der	sg	masc	-	(262
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Welt	NN	*)	welt	sg	masc	-	262)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	gesagt	VVPP	*)	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	wird	VAFIN	*))	werden	sg	-	-	386)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Allein	ADV	*)	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	darum	PROAV	*)	darum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	leiht	VVFIN	*	leihen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	keinem	PIS	(NP*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Damit	KOUS	(S*	damit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	(VP*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	stets	ADV	*	stets	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	geben	VVINF	*))	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	habe	VAFIN	*)))	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Weil	KOUS	*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mild	NN	*	mild	sg	fem	-	(40
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	40)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	im	APPRART	*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Gesetz	NN	*	gesetz	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	geboten	VVPP	*	bieten	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Gefälligkeit	NN	*	gefälligkeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	geboten	VVPP	*	bieten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	macht	VVFIN	*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Die	ART	*	der	sg	fem	-	(39
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Mild	NN	*	mild	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	'	$(	*	--	-	-	-	39)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	dem	ART	*	der	sg	masc	-	(387
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	ungefälligsten	ADJA	*	ungefällig	sg	masc	-	387)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Gesellen	NN	*	geselle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	der	ART	*	der	sg	fem	-	(262
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Welt	NN	*	welt	sg	fem	-	262)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zwar	ADV	(VROOT(PSEUDO(CS(S*	zwar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	seit	APPR	(VP(PP*	seit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Geraumer	NN	*	geraumer	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Zeit	NN	*)	zeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	(NP*	ein	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wenig	PIS	*)	wenig	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	übern	VVINF	*)	übern	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Fuß	NN	(VP(NP*	fuß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Mit	APPR	(PP*	mit	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ihm	PPER	*))	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	gespannt	VVPP	*))	gespannt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	denkt	VVFIN	(S*	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	darum	PROAV	*	darum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Gerechtigkeit	NN	*	gerechtigkeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	erzeige	VVFIN	*)))	erzeigen	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(AP(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	allem	PIS	*)	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gut	ADJD	*))	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bloß	ADV	(S*	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dazu	PROAV	*	dazu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Bloß	ADV	(S*	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	dazu	PROAV	*	dazu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wahrlich	ADV	*	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*)))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gleich	ADV	*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gehn	VVPP	*	gehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	andre	ADJA	*	andren	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Türen	NN	*	tür	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	klopfen	VVINF	*	klopfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Besinn	NN	*	besinn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	mich	PRF	*	mich	sg	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	eines	ART	*	ein	sg	masc	-	(388
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Mohren	NN	*	mohr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	388)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Der	PRELS	*	der	sg	masc	-	(388)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	reich	ADJD	*	reich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	geizig	ADJD	*	geizig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	geh	XY	*	geh	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eilst	VVFIN	*	eilen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	(NP*	du	sg	*	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Hafi	NE	*))	hafi	*	*	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	KOUS	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*	ihn	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	laß	VVFIN	(VROOT(PSEUDO(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*)	ihn	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sittah	NE	(VROOT(PSEUDO*	sittah	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO*	saladin	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Eilt	VVFIN	(VROOT(PSEUDO(S*	eilt	-	-	-	(389
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	(NP*	er	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mir	PPER	*	sich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gern	ADV	*))))	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	entkäme	FM	*	entkommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	389)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	heißt	VVFIN	*	heißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*)	der	sg	neut	-	(389)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hat	VAFIN	*	haben	sg	-	-	(390
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wirklich	ADJD	*	wirklich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sich	PRF	*	sich	sg	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ihm	PPER	*	ihm	sg	neut	-	390)|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Betrogen	NN	*	betroge	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	PPER	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	möcht	VMFIN	*	möchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	er	PPER	*	er	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	uns	PPER	*	uns	pl	*	-	(317)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Betriegen	NN	*	betriegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	*	der	sg	neut	-	(390)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fragst	VVFIN	*	fragen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ja	PTKANT	*	ja	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kaum	ADV	*	kaum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wem	PWS	*	wem	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Rede	NN	*	rede	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	höre	PPOSAT	*	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	euerm	PPOSAT	*	euer	-	-	-	(1|(391)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Juden	NN	*	Jude	-	-	(MISC*)	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	euerm	APPRART	*	euer	*	*	-	(1|(391)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Nathan	NE	*	nathan	sg	neut	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	heut	ADV	*	heut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Zum	APPRART	*	zu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	erstenmal	ADV	*	erstenmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ists	ADV	(VROOT(PSEUDO(S(ISU*	ist	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	möglich	ADJD	*))	möglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	daß	KOUS	(VROOT(PSEUDO(S(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ein	ART	(NP*	ein	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mann	NN	*)	mann	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Dir	PPER	(VP*	dir	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	verborgen	VVPP	*)	verbergen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	blieb	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	von	APPR	(S(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dem	PRELS	*)	der	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	heißt	VVFIN	*))	heißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Salomons	NE	(CNP*	salomon	-	-	(LOC*)	(392
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Davids	NE	(MPN*	david	pl	neut	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Gräber	NE	*))	grab	pl	neut	-	392)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Erforscht	VVFIN	*	erforschen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	wisse	VVFIN	*	wissen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	deren	PDS	*	der	sg	fem	-	(392)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Siegel	NN	(NP*	siegel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	durch	APPR	(PP*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Ein	ART	*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	mächtiges	ADJA	*	mächtig	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	geheimes	ADJA	*	geheim	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Wort	NN	*))	wort	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	lösen	VVINF	*)))	lösen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Aus	APPR	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihnen	PPER	*	ihnen	pl	*	-	(392)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bring	VVFIN	*	bring	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Zeit	NN	*	zeit	sg	fem	-	(158)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Zeit	NN	*	zeit	sg	fem	-	(158)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Die	ART	*	der	sg	fem	-	(35
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	unermeßlichen	ADJA	*	unermeßlich	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Reichtümer	NN	*	reichtum	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Den	ART	*	der	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Tag	NN	*	tag	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	die	PRELS	*	der	pl	masc	-	(35)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	keinen	PIAT	*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	mindern	VVFIN	*	mindern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Quell	NN	*	quell	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	verrieten	VVINF	*	verrieten	-	-	-	35)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hat	VAFIN	(VROOT(PSEUDO(S(S*	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seinen	PPOSAT	(NP*	sein	sg	masc	-	(35|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Reichtum	NN	*)	reichtum	sg	masc	-	35)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dieser	PDAT	(NP*	dieser	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Mann	NN	*)	mann	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Gräbern	NN	*))	gräber	pl	masc	-	(393)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	So	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	warens	ADV	*	warens	-	-	-	(393)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sicherlich	ADV	*	sicherlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Salomons	NE	*	salomon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Nicht	NN	(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Davids	NE	(MPN*	david	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Gräber	NE	*)))	grab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Narren	NN	(VROOT(PSEUDO(S*	narr	-	-	-	(394)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	lagen	VVFIN	*	liegen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Begraben	NN	*)	begraben	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Oder	KON	(VROOT(PSEUDO*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bösewichter	NN	*	bösewichter	-	-	-	(394)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Auch	ADV	(S*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	seines	PPOSAT	(NP*	sein	sg	neut	-	(35|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Reichtums	NN	*	reichtum	sg	neut	-	35)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Quelle	NN	*))	quelle	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	weit	ADJD	*	weit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ergiebiger	ADJA	(S(NP*	ergiebig	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Weit	NN	*)	weit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	unerschöpflicher	ADJD	*	unerschöpflich	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	als	KOUS	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	so	ADV	*	so	-	-	-	(392
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ein	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Grab	NN	*	grab	sg	masc	-	392)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Voll	NE	(MPN*	voll	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Mammon	NE	*))))	mammon	sg	*	-	(346)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	handelt	VVFIN	*	handeln	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wie	KOKOM	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hörte	VVFIN	*))	hören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sein	PPOSAT	(VROOT(PSEUDO(CS(S(NP*	sein	sg	masc	-	(395|(55|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Saumtier	NN	*)	saumtier	sg	masc	-	55)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	treibt	VVFIN	*	treiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	allen	PIAT	*	aller	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Straßen	NN	*))	straße	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zieht	VVFIN	(S*	ziehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Durch	APPR	(CO(S(PP*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	alle	PIAT	(NP*	aller	pl	fem	-	(104
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Wüsten	NN	*)	wüste	pl	fem	-	104)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	seine	PPOSAT	(NP*	sein	pl	neut	-	(109|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Schiffe	NN	*))	schiff	pl	neut	-	109)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	liegen	VVFIN	*	liegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	In	APPR	(VP(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	allen	PIAT	*	aller	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Häfen	NN	*	hafen	pl	*	-	395)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Al-Hafi	NE	(NP*	al-hafi	pl	*	(LOC*)	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	selbst	ADV	*))	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	gesagt	VVPP	*	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	;	$.	*))	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	voll	APPR	(VP(PP*	voll	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Entzücken	NN	*)	entzück	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Hinzugefügt	VVPP	*))	hinzugefügt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	groß	ADJD	*	groß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	wie	KOKOM	(S(AP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	edel	ADJD	*)	edel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	dieser	PDAT	(NP*	dieser	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Sein	NN	*	sein	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	Freund	NN	*)	freund	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	anwende	VVFIN	*	anwenden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	klug	ADJD	(CAP*	klug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	emsig	ADJD	(AP*	emsig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	Er	PPER	(VP*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	erwerben	VVINF	*)))))	erwerben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	zu	PTKA	(AP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	klein	ADJD	*))	klein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	achte	VVFIN	*))))	achter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	50	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	51	Hinzugefügt	VVPP	(S(VP*	hinzufügen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	52	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	53	wie	KOKOM	(S(AP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	54	frei	ADJD	*)	frei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	55	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	56	Vorurteilen	NN	*)	vorurteil	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	57	Sein	PPOSAT	(NP*	sein	sg	masc	-	(380|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	58	Geist	NN	*	geist	sg	masc	-	380)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	59	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	60	sein	PPOSAT	(NP*	sein	-	-	-	(396|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	61	Herz	NN	*))	herz	-	-	-	396)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	62	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	63	offen	ADJD	(AP*	offen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	64	jeder	PIAT	*)	jeder	sg	masc	-	(397
Nathan.xml.rkpt.0.CoNLL2012.conll	000	65	Tugend	NN	*)	tugend	sg	masc	-	397)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	66	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	67	Wie	KOKOM	(VP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	68	eingestimmt	VVPP	*	einstimmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	69	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	70	jeder	PIAT	*	jeder	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	71	Schönheit	NN	*))))	schönheit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	72	sei	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	73	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	itzt	ADV	*	itzt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sprach	VVFIN	*	sprechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Hafi	NE	*	hafi	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ungewiß	ADJD	(CAP*	ungewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	So	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	kalt	ADJD	*)))	kalt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ihm	PPER	*))	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kalt	VVIMP	(VROOT(PSEUDO(S*	kalt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	(AVP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	verlegen	VVINF	*))	verlegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Als	APPR	*	als	-	-	-	(398
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	halt	ADV	*	halt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ers	ADV	*	ers	-	-	-	(1017)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gefährlich	ADJD	*	gefährlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihn	PPER	*	ihn	sg	masc	-	(399|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	loben	VVINF	*	loben	-	-	-	399)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	woll	VMFIN	*	woll	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	unverdient	ADJD	*	unverdient	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	tadeln	VVINF	*	tadeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wirklich	ADJD	*	wirklich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Der	ART	*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Beste	NN	*	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	seines	PPOSAT	*	sein	sg	neut	-	(293|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Volkes	NN	*	volk	sg	neut	-	1)|293)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	seinem	PPOSAT	*	sein	sg	masc	-	(293|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Volke	NN	*	volk	sg	masc	-	293)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	entfliehen	VVINF	*	entfliehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wirklich	ADJD	(VP*	wirklich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	*	sich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Al-Hafi	NE	(NP*	al-hafi	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	seines	PPOSAT	(NP*	sein	sg	masc	-	(1|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Freunds	NN	*))	freund	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dieser	PDAT	*	dieser	sg	fem	-	(381
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Seite	NN	*)	seite	sg	fem	-	381)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Zu	NN	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	schämen	VVINF	*)	schämen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	hätte	VAFIN	*)	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	398)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Jude	NN	*	jude	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	ADV	*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	weniger	ADV	*	weniger	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Jud	NE	*	jud	-	-	-	(46)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	reich	ADJD	*	reich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	genug	PIAT	*	genug	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	uns	PPER	*	uns	pl	*	-	(317)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	willst	VVFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	(VP(NP*	der	sg	neut	-	(35
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Seine	NE	*	seine	sg	neut	-	35)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Gewalt	NN	*))	gewalt	sg	fem	-	(400)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nehmen	VVINF	*)	nehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Schwester	NN	*)	schwester	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	heißt	VVFIN	*	heißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dir	PPER	(AP*	dir	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Gewalt	NN	*)))	gewalt	sg	fem	-	(400)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Feu	NN	*	feu	sg	neut	-	(253
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	r	NN	*	--	-	-	-	253)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Schwert	NN	*	schwert	sg	masc	-	(270)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	(VROOT(PSEUDO(S*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nein	PTKANT	(AVP(S*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	braucht	VVFIN	*	brauchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	es	PPER	*)	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	den	ART	*	der	pl	*	-	(401
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Schwachen	NN	*	schwache	pl	*	-	401)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Gewalt	NN	*))	gewalt	sg	fem	-	(400)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Als	KOUS	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ihre	PPOSAT	*	ihr	sg	fem	-	(401)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Schwäche	NN	*)))	schwäche	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Komm	NN	*	komm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vor	APPR	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	itzt	ADV	(AVP*	itzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mit	APPR	(S(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	In	NN	*)	in	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	meinen	VVFIN	*	meinen	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Haram	NE	*	haram	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	eine	ART	(VP(NP*	ein	sg	fem	-	(402
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Sängerin	NN	*)	sängerin	sg	fem	-	402)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	hören	VVINF	*)	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	die	PRELS	(S*	der	sg	fem	-	(402)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ich	PPER	(NP*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	gestern	ADV	*)	gestern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	erst	ADV	(VP*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	gekauft	VVPP	*))))	kaufen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	reift	VVFIN	*	reifen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	indes	ADV	*	indes	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*)	sich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	(NP*	ein	sg	masc	-	(403
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Anschlag	NN	*	anschlag	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	403)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Den	NE	*)	der	sg	masc	-	(403)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	diesen	PDAT	*	dieser	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Nathan	NN	*)	nathan	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	habe	VAFIN	*)	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Komm	NN	*	komm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Szene	NN	(VROOT(PSEUDO(S*	szene	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vor	APPR	(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	*	der	sg	neut	-	(19
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Hause	NN	*	haus	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	des	ART	(NP*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nathan	NE	*))	nathan	sg	masc	-	19)|1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wo	PWAV	(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	es	PPER	*	es	sg	neut	-	(19)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	die	ART	*	der	pl	fem	-	(76
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Palmen	NN	*)	palme	pl	fem	-	76)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	stößt	VVFIN	*))	stoßen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Recha	NE	(VROOT(PSEUDO(S(CNP*	recha	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nathan	NE	*)	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kommen	VVFIN	*	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	heraus	PTKVZ	*)	heraus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zu	APPR	(VROOT(PSEUDO(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihnen	PPER	*)	ihnen	pl	*	-	(105)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	habt	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	(VP*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sehr	ADV	*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	verweilt	VVPP	*))	verweilen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mein	PPOSAT	(NP*	mein	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Vater	NN	*))	vater	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kaum	ADV	(VP(VP*	kaum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mehr	PIS	*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	treffen	VVINF	*))	treffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sein	VAINF	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Wenn	KOUS	(S(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hier	ADV	(S*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	untern	VVFIN	*	untern	-	-	-	(76
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Palmen	NE	*	palme	pl	fem	-	76)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mehr	ADV	*)))	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Doch	KON	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	anderwärts	ADV	*)))	anderwärts	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sei	NN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	itzt	VVFIN	(S*	itzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ruhig	ADJD	*)	ruhig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sieh	NE	*	sieh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kömmt	VVFIN	(VROOT(PSEUDO(S*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dort	ADV	*	dort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Daja	NE	*	daja	-	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	uns	PPER	*)	uns	pl	*	-	(105)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKVZ	*)	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihn	PPER	(VP(VP*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ganz	ADV	(AVP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gewiß	ADV	*)	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	verloren	VVPP	*)	verlieren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	haben	VAINF	*))	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	würde	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sonst	ADV	(VP*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	geschwinder	ADJD	*	geschwind	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	kommen	VVINF	*))	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	uns	PPER	(VP*	uns	pl	*	-	(105)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gesehn	VVPP	*))	gesehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sieht	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sie	PPER	*	sie	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	uns	PPER	*	uns	pl	*	-	(105)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doppelt	VVFIN	*	doppelt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihre	PPOSAT	(NP*	ihr	pl	masc	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Schritte	NN	*))	schritt	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sieh	NE	(VROOT(PSEUDO*	sieh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sei	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	(AP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ruhig	ADJD	*))	ruhig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ruhig	ADJD	(VROOT(PSEUDO*	ruhig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wolltet	VMFIN	(VROOT(PSEUDO(S*	wollten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPOSAT	(NP*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wohl	NN	*)	wohl	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	eine	ART	(NP*	ein	sg	fem	-	(404
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Tochter	NN	*	tochter	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	die	PRELS	(S*	der	sg	fem	-	(404)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hier	ADV	(AP*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ruhig	ADJD	*)	ruhig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wäre	VAFIN	*)))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	404)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sich	PRF	(VROOT(PSEUDO(S(AP*	sich	pl	-	-	(404)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	unbekümmert	ADJD	*	unbekümmert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ließe	VVFIN	(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wessen	PRELAT	(NP*	wessen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wohltat	NN	*)))	wohltat	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPOSAT	(NP*	ihr	pl	*	-	(405|(404)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Leben	NN	*)	leben	sg	neut	-	405)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sei	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPOSAT	(VROOT(PSEUDO(NP*	ihr	sg	neut	-	(405|(404)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Leben	NN	*	leben	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	KOUS	(S*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	(NP*	der	sg	neut	-	(405)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihr	PPOSAT	*	ihr	sg	fem	-	(404)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	(AP*	nur	-	-	-	405)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	lieb	ADJD	*)	leiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	weil	KOUS	(S*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	sg	fem	-	(404)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	es	PPER	*	es	sg	neut	-	(405)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	erst	ADV	*)))	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	verdanket	VVFIN	*))	verdanket	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CS(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	möchte	VMFIN	*	möchten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PRF	*	dich	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	anders	ADV	*	anders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	bist	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Auch	ADV	(S*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wüßte	VVFIN	*	wissen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	deiner	PPOSAT	*	dein	sg	fem	-	(60|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Seele	NN	*)	seele	sg	fem	-	60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Ganz	ADV	(AVP(AVP*	ganz	-	-	-	(406
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	etwas	ADV	*)	etwas	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	anders	ADV	*	anders	-	-	-	406)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	sich	PRF	*	sich	sg	-	-	(406)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	rege	VVFIN	*)))	regen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mein	PPOSAT	(NP*	mein	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vater	NN	*))	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Fragst	VVFIN	*	fragen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	so	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schüchtern	VVFIN	*	schüchtern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*)	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S(S*	was	sg	neut	-	(406
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	deinem	PPOSAT	*	dein	sg	neut	-	(60
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Innern	NN	*)	innere	pl	masc	-	60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	vorgeht	VVFIN	*)	vorgehen	sg	-	-	406)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Natur	NN	(CNP*	natur	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Unschuld	NN	*))	unschuld	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	VVFIN	(VROOT(PSEUDO(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	es	PPER	*	es	sg	neut	-	(406)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	keine	PIAT	(NP*	kein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sorge	NN	*)	sorge	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Dir	PPER	(VP*	dir	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	machen	VVINF	*))	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mir	NE	(VROOT(PSEUDO(NP(AP(NP*	sich	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	(S*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	macht	VVFIN	*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*))	es	sg	neut	-	(406)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	keine	PIAT	*))	kein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Versprich	NN	*)	versprich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dein	PPOSAT	(VP(NP(AP(NP*	dein	sg	masc	-	(60
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Herz	NN	*)	herz	sg	masc	-	60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	vernehmlicher	ADJA	*))	vernehmlich	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Sich	PRF	*	sich	sg	masc	-	(60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	einst	ADV	*	einst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	erklärt	VVPP	*)	erklären	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mir	PPER	(VP*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	seiner	PPOSAT	(NP*	sein	sg	fem	-	(407|(60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Wünsche	NN	*)	wunsch	sg	fem	-	407)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	keinen	PIAT	(NP*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Zu	NN	*)	zu	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	bergen	VVINF	*)))	bergen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Schon	ADV	(VROOT(PSEUDO(VP(NP*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	*	der	sg	fem	-	(408
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Möglichkeit	NN	*	möglichkeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mein	PPOSAT	(S(NP*	mein	sg	masc	-	(60|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Herz	NN	*)	herz	sg	masc	-	408)|60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Euch	PPER	(VP*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	lieber	ADV	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	verhüllen	VVINF	*))	verhüllen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	macht	VVFIN	(S*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mich	PPER	*)))	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	zittern	VVINF	*)	zittern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nichts	PIS	(VROOT(PSEUDO(AVP(AVP*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mehr	ADV	*)	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hiervon	PROAV	*)	hiervon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(VP(NP*	der	sg	neut	-	(408)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ein	PIS	*)	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	allemal	ADV	*)	allemal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ist	NN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	abgetan	VVPP	*)	abtun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Da	ADV	(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	(NP*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Daja	NE	*))	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(S*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(CS(S*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wandelt	VVFIN	*	wandeln	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	untern	APPR	(PP*	untern	-	-	-	(76
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Palmen	NN	*))	palme	-	-	-	76)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Wird	VAFIN	(S*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gleich	ADV	*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	um	APPR	(VP(PP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	jene	PDAT	*	jener	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Mauer	NN	*)	mauer	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	kommen	VVINF	*)))	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Seht	VVFIN	(S*	sehen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Da	ADV	(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	*))	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	scheinet	VVFIN	*	scheinen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	unentschlossen	ADJD	*	unentschlossen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Wohin	PWAV	*	wohin	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiter	ADV	*	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hinab	PTKVZ	*	hinab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	rechts	ADV	*	rechts	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	links	ADV	*	links	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	(VROOT(PSEUDO(S*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nein	PTKANT	(AVP(S*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	macht	VVFIN	*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	den	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Weg	NN	*))	weg	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ums	APPRART	(PP*	um	sg	neut	-	(227
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Kloster	NN	*)	kloster	sg	neut	-	227)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Gewiß	ADV	*	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	noch	ADV	*))	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	öfter	PIS	(S*	öfter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Vorbei	ADV	*))	vorbei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gilts	ADV	*	gilt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Recht	NN	(VROOT(PSEUDO*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	recht	ADV	(VROOT(PSEUDO(S*)	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hast	VAFIN	(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*)	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Gesprochen	NN	*	sprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	(NP*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	heut	ADV	*))	heut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(AVP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	immer	ADV	*)	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	macht	VVFIN	*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	euch	PPER	*	euch	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gewahr	ADJD	*)	gewahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Wird	VAFIN	*))	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Tretet	VVFIN	(VROOT(PSEUDO(S*	treten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mehr	PIS	*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zurück	PTKVZ	*)	zurück	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	(VROOT(PSEUDO(S*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	lieber	ADV	(AVP*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ganz	ADV	*)	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Hinein	PTKVZ	*)	hinein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	einen	ART	*	ein	sg	masc	-	(219
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Blick	NN	*	blick	sg	masc	-	219)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	(409
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hecke	NN	*)	hecke	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	409)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Die	NN	(S*	der	sg	fem	-	(409)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	stiehlt	VVFIN	*))	stehlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	recht	NN	*)	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	lauft	VVFIN	*	laufen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gefahr	NN	*	gefahr	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Euch	PPER	*	euch	pl	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sieht	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	der	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Stell	NN	*	stellen	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	umkehrt	VVFIN	*	umkehren	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	die	ART	(VROOT(PSEUDO(NP*	der	sg	fem	-	(409
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hecke	NN	*)	hecke	sg	fem	-	409)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	plötzlich	ADJD	*	plötzlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dort	ADV	*	dort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ihr	PPER	*)	ihr	sg	fem	-	(409)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hervor	PTKVZ	*	hervor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	So	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	anders	ADV	*	anders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	muß	VMFIN	*))	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	euch	PPER	*	euch	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Drum	ADV	(VROOT(PSEUDO(S*	drum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*	weißn	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	(410
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Fenster	NN	*	fenster	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	410)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Aus	APPR	(S(PP*	aus	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dem	PRELS	*)	der	sg	masc	-	(410)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wir	PPER	*	wir	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sie	PPER	*	sie	pl	*	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	bemerken	VVINF	*	bemerken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	können	VMFIN	*)))	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Beide	PIS	*	beide	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hinein	PTKVZ	*	hinein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(CNP*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bald	ADV	(NP(AVP*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	darauf	PROAV	*)	darauf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	*	der	sg	fem	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Tempelherr	NN	*))	tempelherr	sg	fem	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Fast	ADV	*	fast	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	scheu	ADJD	*	scheu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	des	ART	*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Sonderlings	NN	*	sonderling	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Fast	ADV	(VROOT(PSEUDO(S*	fast	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	macht	VVFIN	*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mich	PPER	*	mich	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	seine	PPOSAT	(VP(NP*	sein	sg	fem	-	(412|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	rauhe	ADJA	*	rauh	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Tugend	NN	*)	tugend	-	-	-	412)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	stutzen	VVINF	*))	stutzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ein	ART	(NP*	ein	sg	masc	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mensch	NN	*)	mensch	sg	masc	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	(VP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	einen	ART	(NP*	ein	sg	masc	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Menschen	NN	*)	mensch	sg	masc	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	verlegen	VVINF	*)	verlegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Soll	NN	(VP*	soll	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	machen	VVINF	*)	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	können	VMFIN	*)	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ha	NE	*	ha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kömmt	VVFIN	*)	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gott	NN	*	gott	-	-	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Jüngling	NN	*	jüngling	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Mann	NN	*))	mann	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mag	VMFIN	*	mögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Den	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	guten	ADJA	*	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	trotzgen	ADJA	*	trotzgen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Blick	NN	*))	blick	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	den	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(413
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	prallen	ADJA	*	prall	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gang	NN	*)	gang	sg	masc	-	413)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	(414
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Schale	NN	*)	schale	sg	fem	-	414)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	(VP(AP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bitter	ADJD	*)	bitter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*)	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	(NP*	der	sg	masc	-	(282
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Kern	NN	*	kern	sg	masc	-	282)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ists	NE	*)	ist	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sicher	ADV	*	sicher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sah	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	fem	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dergleichen	PIS	*	dergleichen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Verzeihet	VVFIN	*	verzeihet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	edler	ADJA	(NP*	edel	-	-	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Franke	NN	*)	franke	-	-	(PER*)	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Erlaubt	VVPP	(VROOT(PSEUDO(VP*	erlauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	(S(ISU*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*)))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Jude	NN	*)	jude	sg	fem	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	*	daß	-	-	-	(415
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PRF	*	mich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	untersteh	VVFIN	*	untersteh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Euch	PPER	*	euch	pl	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	anzureden	VVIZU	*	anreden	-	-	-	415)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ichs	CARD	*	ich	-	-	-	(415)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wehren	VVINF	*	wehren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kurz	ADJD	*)	kurz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Verzieht	VVFIN	(VROOT(PSEUDO(CS(S*	verziehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	eilet	VVFIN	(S*	eilet	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	stolz	ADJD	*))	stolz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Nicht	PTKNEG	(S(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	verächtlich	ADJD	(AP*	verächtlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	einem	ART	(PP*	ein	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Mann	NN	*	mann	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	vorüber	APPO	*)))	vorüber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Den	NE	(S*	der	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Ihr	PPER	*	ihr	sg	fem	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	auf	APPR	(VP(PP*	auf	-	-	-	(416
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	ewig	ADJD	*)	ewig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	verbunden	VVPP	*)	verbinden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	habt	VAFIN	*))	haben	pl	-	-	416)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(416)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	fast	ADV	*	fast	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	errat	VVFIN	*	errat	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ichs	PTKVZ	*	ichs	-	-	-	(417)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	*	ihr	pl	*	-	(417|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	417)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	heiße	VVFIN	*	heiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nathan	NE	*	nathan	*	*	-	(21)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	des	ART	*	der	sg	masc	-	(418|(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Mädchens	NN	*	mädchen	sg	masc	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Vater	NN	*	vater	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	418)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Das	ART	*	der	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Eure	ADJA	*	euer	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Großmut	NN	*	großmut	sg	neut	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	aus	APPR	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	dem	ART	*	der	sg	neut	-	(62
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Feu	NN	*	feu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	r	PPER	*	--	-	-	-	62)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	gerettet	VVPP	*	retten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	komme	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	zu	PTKZU	(VZ*	zu	-	-	-	(419
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	danken	VVINF	*)	danken	-	-	-	419)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	PPER	(NP*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sparts	ADV	*))	sparts	-	-	-	(419)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hab	VAFIN	*	hab	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Um	APPR	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	diese	PDAT	*	dieser	pl	fem	-	(74
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Kleinigkeit	NN	*	kleinigkeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	des	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Dankes	NN	*	dank	sg	masc	-	74)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	viel	PIS	*	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	erdulden	VVINF	*	erdulden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	müssen	VMINF	*	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vollends	NN	*	vollends	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gar	ADV	(NP*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	schuldig	ADJD	*)	schuldig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wußt	VVIMP	*	wußt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dieses	PDAT	*	dieser	sg	masc	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Mädchen	NN	*	mädchen	sg	masc	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Eure	PPOSAT	*	euer	sg	fem	-	(34
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Tochter	NN	*	tochter	sg	fem	-	34)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(420)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(269|(121
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Tempelherren	NN	*	tempelherr	-	-	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Pflicht	NE	*	pflicht	sg	fem	-	269)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dem	ART	(VP(NP*	der	sg	masc	-	(1046
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ersten	ADJA	*	erster	sg	masc	-	1046)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Dem	NN	*)	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	besten	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	beizuspringen	VVIZU	*))	beizpringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	dessen	PRELAT	(NP*	der	sg	masc	-	(147|(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Not	NN	*)	not	sg	-	-	147)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Sie	PPER	(NP*	sie	sg	fem	-	(121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(S(NP*	mein	sg	neut	-	(63|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Leben	NN	*)	leben	sg	neut	-	63)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	(AP*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ohnedem	ADV	(PP*	ohnedem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	In	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	diesem	PDAT	*	dieser	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Augenblicke	NN	*)	augenblick	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	lästig	ADJD	*))	lästig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gern	ADV	(VROOT(PSEUDO(S*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sehr	ADV	(AVP*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gern	ADV	*)	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ergriff	VVFIN	*	ergreifen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gelegenheit	NN	*	gelegenheit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Es	PPER	(S(VP(NP*	es	sg	neut	-	(63)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ein	ART	*	ein	sg	neut	-	(421
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	andres	ADJA	*	andr	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Leben	NN	*)	leben	sg	neut	-	421)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Schanze	NN	*))	schanze	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	schlagen	VVINF	*)	schlagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	ein	ART	*	ein	sg	neut	-	(421
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	andres	ADJA	*	andres	sg	neut	-	421)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	–	NN	*))	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	wenns	ADV	*	wenns	sg	neut	-	(421)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	auch	ADV	(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Leben	NN	*	leben	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	einer	ART	(NP*	ein	sg	fem	-	(252
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Jüdin	NN	*))	jüdin	sg	fem	-	252)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	wäre	VAFIN	*)))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Groß	ADJD	(VROOT(PSEUDO*	groß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Groß	ADJD	(VROOT(PSEUDO(CAP*	groß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	abscheulich	ADJD	*)	abscheulich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	sg	fem	-	(422
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wendung	NN	*)	wendung	sg	fem	-	422)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	läßt	VVFIN	*)	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Sich	PRF	(VP*	sich	sg	-	-	(422)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	denken	VVINF	*)	denken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	(423
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bescheidne	ADJA	*	bescheidn	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Größe	NN	*)	größe	sg	-	-	423)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	flüchtet	VVFIN	*	flüchten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sich	PRF	*	sich	sg	-	-	(423)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hinter	APPR	(PP*	hinter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Abscheuliche	NN	*)	abscheulich	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	um	KOUI	(VP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	der	ART	(NP*	der	sg	fem	-	(424)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Bewundrung	NN	*)	bewundrung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	auszuweichen	VVIZU	*))	auuweichen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	(S*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sie	PPER	*	sie	sg	*	-	(423)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	(NP*	der	sg	neut	-	(424
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Opfer	NN	*	opfer	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Bewunderung	NN	*)))	bewunderung	sg	fem	-	424)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Verschmäht	NN	*	verschmäht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ein	ART	*	ein	sg	neut	-	(148
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Opfer	NN	*	opfer	sg	neut	-	148)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	denn	ADV	*)	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	verschmäht	VVFIN	*	verschmähen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Sie	PPER	*	sie	sg	fem	-	(423)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	minder	PTKVZ	*)	minder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ritter	NN	*	ritter	pl	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	*	ihr	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	fremd	ADJD	*	fremd	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gefangen	VVPP	*	fangen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wäret	VVFIN	*	wäret	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	würd	VAFIN	*	würd	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	dreist	ADV	*	dreist	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	fragen	VVINF	*	fragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sagt	VVFIN	(VROOT(PSEUDO(S*	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	befehlt	VVFIN	(S*	befehlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	womit	PWAV	(S*	womit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	man	PIS	*	man	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	(VP*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dienen	VVINF	*))))	dienen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	*	ihr	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mit	APPR	(VROOT(PSEUDO(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ein	ART	(NP*	ein	sg	masc	-	(295
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	reicher	ADJA	*	reich	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Mann	NN	*))	mann	sg	masc	-	295)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(425|(426
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	reichre	ADJA	*	reichr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Jude	NN	*)	jude	sg	masc	-	426)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Mir	NE	*	sich	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nie	ADV	*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	beßre	ADJA	*	beßren	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Jude	NN	*))))	jude	sg	masc	-	425)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dürft	VVFIN	(VROOT(PSEUDO(S*	dürft	-	-	-	(427
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	(VP*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Darum	PROAV	*	darum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nützen	VVINF	*	nützen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dem	ART	(NP*	der	sg	neut	-	(425)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ungeachtet	APPR	(PP*	ungeachtet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Er	PPER	*))	er	sg	masc	-	(426)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Beßres	NN	*))	beßr	sg	neut	-	(376)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	hat	VAFIN	*)	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nicht	PTKNEG	(VROOT(PSEUDO(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seinen	PPOSAT	(NP*	sein	sg	masc	-	(376|(426)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Reichtum	NN	*)	reichtum	sg	masc	-	376)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nützen	VVINF	*)))	nützen	-	-	-	427)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S(AP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gut	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	(S*	der	sg	neut	-	(427)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	(VP(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ganz	ADV	*)	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	verreden	VVINF	*)))	verreden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Um	APPR	(PP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	meines	PPOSAT	*	mein	sg	masc	-	(69|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Mantels	NN	*	mantel	sg	masc	-	69)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	willen	APZR	*)	willen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sobald	KOUS	*	sobald	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	*	der	sg	masc	-	(69)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	verschlissen	VVPP	*	verschlissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	weder	KON	*	weder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Stich	NN	*	stich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Noch	NE	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Fetze	NE	*	fetz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	länger	ADJD	*	lang	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	halten	VVINF	*	halten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	komm	VVIMP	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	borge	VVFIN	*	borgen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	einem	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	neuen	ADJA	*	neu	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Tuch	NN	*	tuch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Geld	NN	*	geld	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Seht	VVFIN	(S*	seht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	eins	CARD	*))	eins	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	(S(ISU*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	finster	ADJD	*))	finster	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(S*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sicher	ADJD	(AP*	sicher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	(AVP(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ists	ADV	*)	ist	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*))	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	weit	ADJD	*	weit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ihm	PPER	*)))	ihm	sg	masc	-	(69)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seht	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	(S*	er	sg	masc	-	(69)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ziemlich	ADV	*)	ziemlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Im	APPRART	(PP*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Stande	NN	*)))	stand	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	*	der	sg	fem	-	(428
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	eine	ART	(NP*	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Zipfel	NN	*))	zipfel	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	da	ADV	*	da	-	-	-	428)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	einen	ART	(NP*	ein	sg	masc	-	(429
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	garstgen	ADJA	*	garstg	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Fleck	NN	*)	fleck	sg	masc	-	429)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	er	PPER	(S*	er	sg	masc	-	(428)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	versengt	VVPP	*))	versengen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(429)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bekam	VVFIN	*	bekommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(69)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	als	KOUS	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Eure	PPOSAT	(NP*	euer	sg	-	-	(2|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Tochter	NN	*)	tochter	*	*	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Durchs	APPRART	(PP*	durch	sg	masc	-	(62
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Feuer	NN	*)	feuer	sg	neut	-	62)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	trug	VVFIN	*))	tragen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*))	nathan	-	-	-	(1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(CO(S*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nach	APPR	(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dem	ART	*	der	sg	neut	-	(428
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Zipfel	NN	*)	zipfel	sg	neut	-	428)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	greift	VVFIN	*)	greifen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ihn	PPER	(S*	ihn	sg	masc	-	(428)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	betrachtet	VVFIN	*))	betrachten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(AP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sonderbar	ADJD	*	sonderbar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	(429
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ein	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	böser	ADJA	*	böse	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Fleck	NN	*)	fleck	sg	masc	-	429)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	so	ADV	*	so	-	-	-	(429
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ein	ART	(NP*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Brandmal	NN	*	brandmal	sg	neut	-	429)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Dem	ART	(NP*	der	sg	neut	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Mann	NN	*))	mann	sg	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	ein	ART	(NP*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	beßres	ADJA	*	beßr	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Zeugnis	NN	*)	zeugnis	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	redet	VVFIN	*	reden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Sein	NN	*	sein	sg	masc	-	(430|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	eigner	ADJA	(NP*	eign	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Mund	NN	*))))))	mund	sg	masc	-	430)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CS(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	möcht	VMFIN	*	möchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(431|(429)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	küssen	VMFIN	*)	küssen	-	-	-	431)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gleich	ADV	(S*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	–	NN	(NP*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Den	ART	(NP*	der	pl	masc	-	(429
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Flecken	NN	*))))	flecken	pl	masc	-	429)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	(S*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	verzeiht	VVFIN	*)	verzeihen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	tat	VVFIN	*	taten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(431)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ungern	ADV	*)	ungern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Eine	ART	*	ein	sg	fem	-	(432
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Träne	NN	*	träne	sg	fem	-	432)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	fiel	VVFIN	*	fallen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	darauf	PROAV	*	darauf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Tut	XY	*	tut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	fem	-	(432
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Tropfen	NN	*	tropfen	pl	masc	-	432)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mehr	ADV	*))	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	(	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bald	ADV	*	bald	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	fängt	VVFIN	*	fangen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Mich	PPER	*	mich	sg	masc	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dieser	PDAT	*	dieser	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Jud	NN	*	jud	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	verwirren	VVINF	*	verwirren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	)	$(	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wär	XY	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	t	XY	*	T	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gut	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	schicktet	VVFIN	*	schickten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Euern	NN	*	euer	-	-	-	(69|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Mantel	NE	*	mantel	sg	fem	-	69)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	einmal	ADV	*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	meinem	PPOSAT	*	mein	sg	masc	-	(2|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Mädchen	NN	*	mädchen	sg	masc	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	damit	PROAV	*	damit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(VP(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihren	PPOSAT	*	ihr	sg	masc	-	(433|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mund	NN	*	mund	sg	masc	-	433)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	diesen	PDAT	*	dieser	sg	masc	-	(429
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Fleck	NN	*))	fleck	sg	masc	-	429)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	drücken	VVINF	*))	drücken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Eure	PPOSAT	(VP(NP*	euer	-	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Kniee	NN	*)	kniee	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	selber	ADV	*	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	umfassen	VVINF	*))	umfassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Wünscht	VVFIN	*	wünscht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	vergebens	ADV	*)	vergebens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	(VROOT(PSEUDO(NP*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Jude	NN	(NP*	jude	sg	fem	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	CARD	*))	–	pl	-	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	heißet	VVFIN	*	heißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nathan	NE	*)	nathan	-	-	-	(21)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*	nathan	-	-	(PER*)	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	CARD	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Setzt	VVFIN	*	setzen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Eure	PPOSAT	*	euer	pl	neut	-	(434|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Worte	NN	*	wort	pl	neut	-	434)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sehr	ADV	*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	ADJD	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sehr	ADV	*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	gut	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	–	ADJD	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	sehr	ADV	*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	spitz	ADJD	*	spitz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	betreten	VVPP	*	betreten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Allerdings	ADV	*	allerdings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	–	$(	*	–	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Stellt	NN	(VROOT(PSEUDO(S*	stellen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	verstellt	VVFIN	(S*	verstellen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wollt	VMFIN	*)))	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	find	VVFIN	*	find	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	aus	PTKVZ	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wart	VVFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKA	(AA*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gut	ADJD	*)	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bieder	ADJD	*)	bieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Um	KOUI	(VP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	höflicher	ADJD	*	höflich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sein	VAINF	*)))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	ART	(NP*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mädchen	NN	*	mädchen	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ganz	ADV	(S(CNP(NP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Gefühl	NN	*)	gefühl	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	(NP*	der	sg	masc	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	weibliche	ADJA	*	weiblich	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Gesandte	NN	*)	gesandter	pl	*	-	0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ganz	ADV	(NP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Dienstfertigkeit	NN	*))	dienstfertigkeit	sg	fem	-	(435)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	der	ART	(NP*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	weit	ADJD	*	weit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	entfernt	ADJD	*	entfernt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	–	$.	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Ihr	PPER	(S*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	trugt	VVFIN	*	trugen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	ihren	PPOSAT	*	ihr	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	guten	ADJA	*	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Namen	NN	*))))	name	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Sorge	NN	*	sorge	sg	fem	-	(230)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Floht	VVFIN	(CS(S*	floht	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	ihre	PPOSAT	(NP*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Prüfung	NN	*))	prüfung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	floht	VVFIN	(S*	flohen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	um	KOUI	(VP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	siegen	VVINF	*))))	siegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dafür	PROAV	*	dafür	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dank	APPR	*	dank	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	–	XY	*	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gestehn	VVPP	(VP*	gestehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wißt	VVFIN	*	wissen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Tempelherren	NN	*	tempelherr	pl	fem	-	(121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	denken	VVINF	*	denken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sollten	VMFIN	*))))	sollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherren	NN	*)	tempelherr	pl	fem	-	(121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	sollten	VMFIN	*	sollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bloß	ADV	*	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bloß	ADV	(AVP*	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Weil	KOUS	(S*	weil	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	die	ART	(NP*	der	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ordensregeln	NN	*)))	ordensregel	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gebieten	VVFIN	*)	gebieten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gute	ADJA	(NP*	gut	pl	masc	-	(211
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Menschen	NN	*)	mensch	pl	masc	-	211)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	denken	VVINF	*	denken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	weiß	VVFIN	(S*	weiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	alle	PIAT	(NP*	aller	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Länder	NN	*)	land	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	gute	ADJA	(VP(NP*	gut	pl	masc	-	(211
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Menschen	NN	*)	mensch	pl	masc	-	211)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	tragen	VVINF	*)))))	tragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mit	APPR	(VROOT(PSEUDO(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Unterschied	NN	*	unterschied	sg	-	-	(436)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	(AP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hoffentlich	ADJD	*))	hoffentlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	An	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Farb	NN	*	farb	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Kleidung	NN	*	kleidung	sg	fem	-	(437)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Gestalt	NN	*	gestalt	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	verschieden	VVPP	*	verschieden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(S(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hier	ADV	*)	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bald	ADV	*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	ADV	*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bald	ADV	(NP*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	weniger	PIS	*	weniger	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	als	KOKOM	(AVP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dort	ADV	*)))	dort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mit	APPR	(VROOT(PSEUDO(AP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	diesem	PDAT	*	dieser	sg	masc	-	(436
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Unterschied	NN	*	unterschied	sg	masc	-	436)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ists	ADV	*)	ists	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	weit	ADJD	*	weit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	her	ADV	*)	her	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(CS(S(NP*	der	sg	masc	-	(423
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	große	ADJA	*	groß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mann	NN	*)	mann	sg	masc	-	423)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	braucht	VVFIN	*	brauchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	überall	ADV	(NP(AP*	überall	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	viel	PIAT	*)	viel	*	*	-	(438
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Boden	NN	*	boden	sg	masc	-	438)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Und	KON	(VP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mehrere	PIAT	(AP*	mehrere	pl	neut	-	(423)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKA	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nah	ADJD	*)	nah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	gepflanzt	VVPP	*)))	pflanzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	zerschlagen	VVFIN	(S*	zerschlagen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Sich	PRF	*	sich	pl	-	-	(423)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	die	ART	(NP*	der	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Äste	NN	*)))	äst	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mittelgut	ADJD	(VROOT(PSEUDO(S(AP*	mittelgut	-	-	-	(439)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wir	PPER	*))	wir	pl	*	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Findt	VVFIN	*	findt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	*	sich	sg	-	-	(439)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hingegen	ADV	*	hingegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	überall	ADV	(PP*	überall	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Menge	NN	*))	menge	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(439
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	eine	PIS	*)	ein	sg	masc	-	439)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	den	ART	(VP(NP*	der	pl	masc	-	(439
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	andern	PIS	*)	anderer	-	-	-	439)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mäkeln	VVINF	*))	mäkeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(439
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Knorr	NN	*)	knorr	sg	masc	-	439)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	(VP(NP*	der	sg	masc	-	(439
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Knuppen	NN	*)	knuppe	sg	masc	-	439)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hübsch	ADJD	*	hübsch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	vertragen	VVINF	*))	vertragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	neut	-	(439
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gipfelchen	NN	*)	gipfelchen	sg	neut	-	439)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sich	PRF	*	sich	sg	-	-	(439)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	vermessen	VVINF	(VP*	vermessen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	es	PPER	*	es	sg	neut	-	(439)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	allein	ADV	(VP*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	der	ART	(NP*	der	sg	fem	-	(262
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Erde	NN	*)	erde	sg	fem	-	262)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	entschossen	VVPP	*))))	entschießen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sehr	ADV	(VROOT(PSEUDO(VP*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gesagt	VVPP	*)	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	sg	fem	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	(NP*	der	sg	neut	-	(293
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Volk	NN	*	volk	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	293)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Das	KOUS	(S*	der	sg	neut	-	(293)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	diese	PDAT	(NP*	dieser	sg	fem	-	(440
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Menschenmäkelei	NN	*)	menschenmäkelei	sg	fem	-	440)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	erst	ADV	(AP*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Getrieben	NN	*))))	getrieb	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wißt	VVFIN	(VROOT(PSEUDO(S*	wißen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	(NP*	ihr	pl	*	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	(NP*	nathan	-	-	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	welches	PWAT	(S(NP*	welcher	sg	neut	-	(441
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Volk	NN	*)	volk	sg	neut	-	441)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Zu	PPER	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	erst	ADV	(NP*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	auserwählte	ADJA	*	auserwählt	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Volk	NN	*)	volk	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sich	PRF	*	sich	sg	-	-	(441)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nannte	VVFIN	*))))	nennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dieses	PDAT	(NP*	dieser	sg	neut	-	(293
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Volk	NN	*)	volk	sg	neut	-	293)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	(AVP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zwar	ADV	*	zwar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	haßte	VVFIN	*	hassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Doch	KON	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wegen	APPR	(VP(PP*	wegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	seines	PPOSAT	*	sein	sg	masc	-	(442|(293)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Stolzes	NN	*)	stolz	sg	masc	-	442)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	verachten	VVINF	*))	verachten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Mich	PPER	(S*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	entbrechen	VVINF	*	entbrechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	könnte	VMFIN	*)))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Seines	PPOSAT	(VROOT(PSEUDO(DL(NP*	sein	sg	masc	-	(442|(293)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Stolzes	NN	*)	stolz	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	442)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Den	VAFIN	(S*	der	sg	masc	-	(442)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*	es	sg	neut	-	(293)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Christ	NE	(CNP*	christ	sg	masc	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Muselmann	NE	*))	muselmann	sg	*	-	(100)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	vererbte	VVFIN	*	vererben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Nur	ADV	(S(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sein	PPOSAT	*	sein	sg	masc	-	(24|(293)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Gott	NN	*)	gott	sg	masc	(PER*)	24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	rechte	ADJA	*	rechter	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Gott	NN	*))))	gott	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	stutzt	VVFIN	*)	stutzen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ein	ART	(NP*	ein	sg	masc	-	(443
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Christ	NN	*)	christ	sg	masc	-	443)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ein	ART	(NP*	ein	sg	masc	-	(239
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Tempelherr	NN	*)	tempelherr	sg	masc	-	239)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	rede	VVFIN	*)	reden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	(VP(NP*	der	sg	fem	-	(444
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	fromme	ADJA	*	fromm	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Raserei	NN	*	raserei	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	444)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Den	NE	*)	der	pl	masc	-	(445
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	bessern	VVINF	*)	bessern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Gott	NN	(VP*	gott	-	-	-	445)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	haben	VAINF	*))	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	diesen	PDS	(VP(S*	dieser	pl	masc	-	(445
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	bessern	VVFIN	*	bessern	-	-	-	445)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Der	ART	(NP*	der	sg	fem	-	(262
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	ganzen	ADJA	*	ganz	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Welt	NN	*)	welt	sg	fem	-	262)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	besten	ADJA	*))	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	aufzudringen	VVIZU	*	aufdringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	In	APPR	(S(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	ihrer	PPOSAT	*	ihr	sg	fem	-	(444)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	schwärzesten	ADJA	*	schwarz	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Gestalt	NN	*)	gestalt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	sich	PRF	*	sich	sg	-	-	(444)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	mehr	PIAT	(NP*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Gezeigt	NN	*)	gezeigt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	als	KOKOM	(AVP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	hier	ADV	*)	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	als	KOKOM	(AP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	itzt	ADJD	*)))))	itzt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wem	PWS	(VROOT(PSEUDO(S*	wem	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wem	PWS	*	wem	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	itzt	VVFIN	*	itzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Die	ART	(NP*	der	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Schuppen	NN	*)	schuppe	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	vom	APPRART	(VP(PP*	von	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Auge	NN	*)	auge	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	fallen	VVINF	*))	fallen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Doch	KON	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Sei	NN	*	sei	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	blind	ADJD	*	blind	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	wer	PWS	(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	will	VMFIN	*))	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vergeßt	VVPP	*	vergeßt	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gesagt	VVPP	*	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	laßt	VVIMP	*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mich	PRF	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Will	VMFIN	*	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gehen	VVINF	*	gehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ha	XY	*	ha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wißt	VVFIN	*	wissen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wie	PWAV	(S(AVP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	viel	ADV	*)	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	fester	ADJD	*))	fest	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ich	PPER	(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mich	PRF	(VP*	mich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Euch	PPER	*)	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	drängen	VVINF	*)	drängen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	werde	VAFIN	*)	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kommt	VVFIN	(S*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wir	PPER	*	wir	pl	*	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	müssen	VMFIN	*)	müssen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	müssen	VMFIN	(S*	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Freunde	NN	(VP*	freund	pl	masc	-	(446)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sein	VAINF	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Verachtet	VVFIN	*	verachten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mein	PPOSAT	(S(NP*	mein	sg	neut	-	(293|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Volk	NN	*)	volk	sg	neut	-	293)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sehr	ADV	*)	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wollt	VMFIN	*)	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wir	PPER	(VROOT(PSEUDO(S*	wir	pl	*	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	haben	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	beide	PIAT	(VP(NP*	beide	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Uns	NN	*)	uns	pl	*	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	unser	PPOSAT	(NP*	unser	sg	neut	-	(441
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Volk	NN	*)	volk	sg	neut	-	441)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	auserlesen	VVINF	*))	auserlesen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sind	VAFIN	(VROOT(PSEUDO(S*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wir	PPER	(NP*	wir	pl	*	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	unser	PPOSAT	*	unser	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Volk	NN	*))	volk	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	heißt	VVFIN	*	heißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Volk	NN	*)	volk	sg	neut	-	(441)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sind	NE	(VROOT(PSEUDO(NP*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Christ	NN	(CNP*	christ	sg	masc	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Jude	NN	*)	jude	sg	masc	-	(98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	eher	ADV	(NP*	eher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Christ	NN	(CNP*	christ	-	-	-	(331)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Jude	NN	*))	jude	sg	-	-	(304)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Mensch	NN	*))	mensch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	einen	PIS	(NP*	ein	sg	masc	-	(447|(448
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	ADV	*)	mehr	-	-	-	448)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	(NP(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*)	euch	pl	*	-	447)|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Gefunden	NN	*)	gefunde	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dem	PRELS	(S*	der	sg	masc	-	(448)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	es	PPER	*	es	sg	neut	-	(449)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gnügt	VVFIN	*	gnügen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ein	ART	(VP(NP*	ein	sg	masc	-	(449
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Mensch	NN	*)	mensch	sg	masc	-	449)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	heißen	VVINF	*))))	heißen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gott	NN	*))	gott	sg	masc	(PER*)	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	PDS	*	der	sg	neut	-	(447)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	habt	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ihr	PPER	(NP*	ihr	pl	*	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Nathan	NE	*	nathan	-	-	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	*	der	sg	neut	-	(447)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	habt	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Eure	PPOSAT	(NP*	euer	sg	fem	-	(450|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Hand	NN	*)	hand	sg	fem	-	450)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schäme	VVFIN	*	schämen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PRF	*	mich	sg	-	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	einen	ART	(VP(VP(NP*	ein	sg	masc	-	(451
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Augenblick	NN	*)	augenblick	sg	masc	-	451)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	verkannt	VVPP	*)	verkennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	haben	VAINF	*)))	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	stolz	ADJD	(AVP*	stolz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	darauf	PROAV	*))	darauf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(AP(NP(PP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gemeine	NN	*	gemein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Verkennt	NN	*)	verkennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	man	PIS	*)	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	selten	ADJD	*)	selten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(AP(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	ART	(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Seltene	NN	*)	seltener	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vergißt	VVFIN	*	vergissen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	man	PIS	*)	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schwerlich	ADJD	*)	schwerlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wir	PPER	(S*	wir	pl	*	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	müssen	VMFIN	*	müssen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	müssen	VMFIN	(S*	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Freunde	NN	(VP*	freund	pl	masc	-	(446)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	werden	VAINF	*)))	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sind	VAFIN	(VROOT(PSEUDO(S*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	*	es	sg	neut	-	(446)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schon	ADV	*)	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sich	PRF	(VP*	sich	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	meine	PPOSAT	(NP*	mein	sg	fem	-	(2|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Recha	NN	*)	recha	sg	fem	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	freuen	VVINF	*))	freuen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(CNP*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ah	XY	*)	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	welch	PWAT	(VROOT(PSEUDO(S(NP(AP*	welcher	-	-	-	(452
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eine	ART	*	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	heitre	ADJA	*)	heitr	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ferne	NN	*)	ferne	sg	fem	-	452)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schließt	VVFIN	*	schließen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Sich	PRF	*	sich	sg	-	-	(452)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	meinen	PPOSAT	(NP*	mein	pl	neut	-	(453|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Blicken	NN	*)	blick	pl	fem	-	453)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	auf	PTKVZ	*)	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kennt	VVFIN	(S*	kennt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	brenne	VVFIN	*	brennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vor	APPR	(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Verlangen	NN	*	verlangen	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	CARD	*)	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wer	PWS	(NP(AVP(S*	wer	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	stürzt	VVFIN	*)	stürzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dort	ADV	*	dort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Aus	APPR	(AP(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Euerm	NN	*)))	euerm	*	*	-	(19|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Hause	NN	*))	haus	sg	neut	-	19)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ists	ADV	(VROOT(PSEUDO(S*	ist	-	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihre	PPOSAT	(NP*	ihr	sg	fem	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Daja	NE	*	daja	sg	fem	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S(ISU*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ängstlich	ADJD	*))	ängstlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Unsrer	NE	(VROOT(PSEUDO(S(MPN*	unsrer	*	*	-	(2|(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Recha	NE	*)	recha	sg	neut	(PER*)	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Doch	NE	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	(VP*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	begegnet	VVPP	*))	begegnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(AP(NP*	der	pl	*	-	(411
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vorigen	NN	(CNP*	vorige	pl	*	-	411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Daja	NE	*))	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	eilig	ADJD	*)	eilig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(MPN*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(MPN*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Verzeihet	VVPP	(VROOT(PSEUDO(S(CVP*	verzeihet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	edler	ADJA	(VP(NP*	edel	pl	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ritter	NN	*	ritter	pl	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	*	euch	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Muß	VMFIN	*))	müssen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	unterbrechen	VVINF	*)))	unterbrechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ists	ADV	*	ists	-	-	-	(454)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ists	ADV	*	ist	-	-	-	(454)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sultan	NN	*)	sultan	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	geschickt	VVPP	*)	schicken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sultan	NN	*)	sultan	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	(VP*	euch	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sprechen	VVINF	*))	sprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gott	NN	(VROOT(PSEUDO(NP*	gott	sg	masc	(PER*)	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sultan	NN	*))	sultan	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sultan	NN	*)	sultan	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	begierig	ADJD	(VP*	begierig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	(VP(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sehen	VVINF	*)	sehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	was	PWS	(S*	was	sg	neut	-	(290)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Neues	NN	(VP*	neue	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	mitgebracht	VVPP	*)))))	mitbringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sag	XY	(VROOT(PSEUDO*	sag	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	(S*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(290)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Noch	ADV	(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wenig	ADV	*))	wenig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	oder	KON	(VP*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ausgepackt	VVPP	*)	auspacken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	(VROOT(PSEUDO(CS(S*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nein	PTKANT	(CO(S(CS(S*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	(S*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nichts	PIS	(VP*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sehen	VVINF	*)))	sehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	will	VMFIN	(S*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Euch	PPER	(VP*	euch	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sprechen	VVINF	*)))	sprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Person	NN	*)	person	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	bald	ADV	*))	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	sobald	ADV	(S*	sobald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	könnt	VVFIN	*))	können	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	werde	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kommen	VVINF	*	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	NN	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wieder	ADV	*)	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nehmt	VVFIN	(VROOT(PSEUDO(CO(S*	nehmt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	übel	ADJD	*	übel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auf	PTKVZ	*)	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gestrenger	ADJA	(NP*	gestreng	pl	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ritter	NN	*))	ritter	pl	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	(NP*	gott	sg	masc	(PER*)	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wir	PPER	(S*	wir	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	(VP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bekümmert	VVPP	*	bekümmern	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	(NP*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Sultan	NE	*	sultan	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Doch	NE	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	will	VMFIN	*))))	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(455)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	(VP*	sich	sg	-	-	(455)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zeigen	VVINF	*))	zeigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geh	XY	(VROOT(PSEUDO*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	(S*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(CNP*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	fem	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Tempelherr	NN	*))	tempelherr	sg	fem	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*	ihn	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	meine	VVFIN	*	mein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Person	NN	*))	person	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Den	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Saladin	NN	*)	saladin	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(CO(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihn	PPER	(VP*	ihn	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	vermieden	VVPP	*	vermeiden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(VP(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gesucht	VVPP	*)	suchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	kennen	VVINF	*))))	kennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(456
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	allgemeine	ADJA	*	allgemein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ruf	NN	*)	ruf	sg	masc	-	456)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sprach	VVFIN	*	sprechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	viel	ADV	(AP*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKA	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gut	ADJD	*)	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Von	APPR	(NP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihm	PPER	*)	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	lieber	ADV	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	glauben	VVINF	*	glauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	wollte	VMFIN	*))	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	sehn	CARD	*))	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(CS(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	KON	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	anders	ADV	*	anders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dem	PDS	*	der	sg	neut	-	(457)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	NN	(S*	–	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Hat	VAFIN	*	haben	sg	-	-	(457
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	durch	APPR	(PP*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Sparung	NN	*	sparung	sg	fem	-	(458
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Eures	NE	(MPN*	dein	sg	neut	-	(63|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Lebens	NE	*)))))	leben	sg	neut	-	458)|63)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	457)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Dem	PDS	(S*	der	sg	neut	-	(457)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	allerdings	ADV	*	allerdings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*))	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	*	der	sg	neut	-	(63
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Leben	NN	*	leben	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	PRELS	*	der	sg	neut	-	63)|(63)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	leb	VVFIN	*	leb	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sein	PPOSAT	*	sein	sg	neut	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Geschenk	NN	*	geschenk	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Durch	APPR	(VROOT(PSEUDO*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	ART	*	der	sg	neut	-	(458)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	(S*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ein	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	doppelt	ADJD	*	doppelt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dreifach	ADJD	*	dreifach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Leben	NN	*)	leben	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	schenkte	VVFIN	*)	schenken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dies	PDS	(VROOT(PSEUDO(CS(S*	dieser	sg	neut	-	(458)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	(VP*	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zwischen	APPR	(PP*	zwischen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	uns	PPER	*)	uns	pl	*	-	(459)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	verändert	VVPP	*))	verändern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hat	VAFIN	(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	eins	PIS	*	einer	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ein	ART	(NP*	ein	sg	masc	-	(460
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Seil	NN	*))	seil	sg	masc	-	460)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	umgeworfen	VVPP	*))	umgewerfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	das	ART	(S*	der	sg	neut	-	(460)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Mich	PPER	*	mich	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	seinem	PPOSAT	(NP*	sein	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Dienst	NN	*)	dienst	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	ewig	ADJD	*)	ewig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	fesselt	VVFIN	*))	fesseln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kaum	ADV	(VROOT(PSEUDO(AVP*	kaum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kaum	ADV	*	kaum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	es	PPER	(VP*	es	sg	neut	-	(461)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	erwarten	VVINF	*	erwarten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	was	PWS	(S*	was	sg	neut	-	(461)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Er	PPER	(VP*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zuerst	ADV	*	zuerst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	befehlen	VVINF	*)	befehlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	wird	VAFIN	*))))	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bereit	NN	(NP*	bereit	-	-	-	(462
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	allem	PIS	*)	alle	sg	neut	-	462)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*))	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	bereit	ADJD	*	bereit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Gestehn	NN	*)	gestehn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	es	PPER	*	es	sg	neut	-	(462)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Euertwegen	NN	*	euertwegen	pl	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	bin	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(S*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hab	VVFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	(NP*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	selber	ADV	*)	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	(VP(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	danken	VVINF	*)	danken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	können	VMINF	*	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	So	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	oft	ADV	*))	oft	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	(NP*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	auch	ADV	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ihm	PPER	(VP*	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	den	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Weg	NN	*)	weg	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	getreten	VVPP	*))	treten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(463
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Eindruck	NN	*	eindruck	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	den	PRELS	(S*	der	sg	masc	-	(463)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ihn	PPER	*)	ihn	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	machte	VVFIN	*))	machen	sg	-	-	463)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	kam	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	So	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	schnell	ADJD	*)	schnell	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	schnell	ADJD	*	schnell	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	er	PPER	(NP*	er	sg	masc	-	(463)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	wiederum	ADV	*)	wiederum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	verschwunden	VVPP	*))	verschwinden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S(AVP(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*)	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ob	KOUS	*)	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sich	PRF	(VP*	sich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	meiner	PIS	*	mein	sg	fem	-	(1038)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	erinnert	VVPP	*))	erinnern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dennoch	ADV	*	dennoch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	einmal	ADV	(AVP*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wenigstens	ADV	*)	wenigstens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Sich	PRF	(VP*	sich	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	meiner	PIS	*	mein	sg	fem	-	(1038)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	erinnern	VVINF	*	erinnern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	um	KOUI	(VP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	mein	PPOSAT	(NP*	mein	sg	neut	-	(464|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Schicksal	NN	*	schicksal	sg	neut	-	464)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Ganz	ADV	*)	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	entscheiden	VVINF	*))))	entscheiden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	genug	ADV	*	genug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Auf	APPR	*	auf	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sein	PPOSAT	*	sein	sg	neut	-	(465|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Geheiß	NN	*	geheiß	sg	neut	-	465)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	seinem	PPOSAT	*	sein	sg	masc	-	(466|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Willen	NN	*	wille	sg	masc	-	466)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	leb	VVFIN	*	leb	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	erwarten	VVFIN	*	erwarten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Nach	APPR	*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	wessen	PWAT	*	wessen	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Willen	NN	*	wille	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	leben	VVINF	*	leben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(S(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	anders	ADV	*)	anders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	um	KOUI	(AVP(AVP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	ADV	*)	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	säumen	VVINF	*)	säumen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	(S*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	fällt	VVFIN	*	fallen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	(NP*	ein	sg	neut	-	(467
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wort	NN	*	wort	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	das	PRELS	(S*	der	sg	neut	-	(467)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mir	PPER	(VP*	sich	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Euch	PPER	*)	euch	pl	*	-	467)|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	kommen	VVINF	*)))))	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Anlaß	NN	*	anlaß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	gibt	VVFIN	*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Erlaubt	VVFIN	*	erlauben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	verzeiht	VVFIN	*	verzeihen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	PPER	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	eile	PIS	*	eilen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sehn	CARD	*	sehn	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wir	PPER	*	wir	pl	*	-	(29)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Euch	PRF	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	uns	PPER	*	uns	pl	*	-	(29)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bald	ADV	*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	darf	VMFIN	*)	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bald	ADV	*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wollt	VMFIN	*)	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(S*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	heut	VVFIN	*	heuen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Euer	PPOSAT	(NP*	euer	sg	*	-	(468|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Name	NN	*))	name	sg	*	-	468)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	(S*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	(VP*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bitten	VVINF	*))	bitten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(CS(S(NP*	mein	sg	masc	-	(468|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Name	NN	*)	name	sg	masc	-	468)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	ADJD	*)	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Curd	NE	*	curd	sg	masc	-	(469
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Stauffen	NN	*)))	stauffen	pl	masc	-	469)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Curd	NE	*	curd	-	-	-	(469)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	(VROOT(PSEUDO(PP*	von	-	-	-	(468
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Stauffen	NN	*)	stauffen	pl	masc	-	468)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Stauffen	NN	*	stauffen	-	-	-	(468)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Stauffen	NN	*	stauffen	-	-	-	(468)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Warum	PWAV	(VROOT(PSEUDO(S*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fällt	VVFIN	*	fallen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*	der	sg	neut	-	(468)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auf	PTKVZ	*)	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	(VROOT(PSEUDO(PP*	von	-	-	-	(470
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Stauffen	NN	*)	stauffen	pl	masc	-	470)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Des	ART	(S(NP*	der	-	-	-	(470
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Geschlechts	NN	*)	geschlecht	-	-	-	470)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schon	ADV	*)	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mehrere	PIS	*	mehrere	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(AVP(S*)	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ja	ADV	*)	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	hier	ADV	(VROOT(PSEUDO(S*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	waren	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Hier	ADV	(S*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	faulen	VVFIN	*	faulen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	des	ART	(NP*	der	sg	masc	-	(470
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Geschlechts	NN	*)	geschlecht	sg	masc	-	470)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mehrere	VVFIN	*))	mehrere	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(S(NP*	mein	sg	neut	-	(471|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Oheim	NE	*	oheim	sg	neut	-	471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	NN	(NP*	–	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mein	PPOSAT	(NP*	mein	sg	masc	-	(471|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Vater	NN	*)))	vater	sg	masc	-	471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	(VP*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sagen	VVINF	*))	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Doch	NE	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	warum	PWAV	(S*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	schärft	VVFIN	*)	schärfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sich	PRF	(NP(AP*	sich	sg	-	-	(453)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Euer	ADJA	*)	euer	sg	*	-	(453|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Blick	NN	*	blick	-	-	-	453)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	mich	PPER	*))	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Je	ADV	(AVP*	je	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	mehr	ADV	*)	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	mehr	ADV	*)	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	XY	*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	o	XY	*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	(VP*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sehn	CARD	*)	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ermüden	VVINF	*))	ermüden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Drum	ADV	(VROOT(PSEUDO(S*	drum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	verlaß	VVFIN	*	verlaß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zuerst	ADV	*)	zuerst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Blick	NN	*	blick	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	des	ART	(NP*	der	sg	masc	-	(472
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Forschers	NN	*))	forscher	sg	masc	-	472)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	fand	VVFIN	*	finden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nicht	NN	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	selten	ADJD	(NP*	selten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mehr	PIS	*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	als	KOKOM	(VP(NP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	er	PPER	*)	er	sg	masc	-	(472)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	finden	VVINF	*)))	finden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wünschte	VVFIN	*)	wünschen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fürcht	VVFIN	*	fürchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*	ihn	sg	masc	-	(453)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nathan	NE	*	nathan	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laßt	VVIMP	(VROOT(PSEUDO(CS(S*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	(NP*	der	sg	fem	-	(473
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Zeit	NN	*)	zeit	sg	fem	-	473)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	allmählig	ADJD	*)	allmählig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	(NP*	der	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Neugier	NN	*)	neugier	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	unsre	ADJA	(NP*	unsr	sg	fem	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Kundschaft	NN	*)	kundschaft	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	machen	VVINF	*)))	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geht	VVFIN	*)	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*))	nathan	-	-	-	(1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(S*	der	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Erstaunen	NN	*)	erstaunen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nachsieht	VVFIN	*)	nachsehen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	»	XY	(VROOT(PSEUDO*	»	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	(PP*	der	sg	masc	-	(472
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Forscher	NN	*	forscher	sg	masc	-	472)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	fand	VVFIN	(NP(S*	finden	sg	-	-	(474)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	selten	ADJD	*))	selten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mehr	ADV	(PP*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	er	PPER	(VP*	er	sg	masc	-	(472)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	finden	VVINF	*))	finden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wünschte	VVFIN	*))	wünschen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	«	XY	*))	«	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(475)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	als	KOKOM	*	als	-	-	-	(475
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ob	KOUS	*	ob	-	-	-	475)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	In	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	meiner	PPOSAT	*	mein	sg	fem	-	(396|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Seel	NN	*	seel	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	396)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	lese	VVFIN	*	lesen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wahrlich	NN	(NP*	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*)	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Das	PDS	(S*	der	sg	neut	-	(474)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	könnt	VVFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	begegnen	VVFIN	*)	begegnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nicht	PTKNEG	(NP(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	allein	ADV	*)	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wolfs	NE	(MPN*	wolf	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Wuchs	NE	*)	wuchs	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Wolfs	NE	*)	wolf	sg	masc	(PER*)	(413|(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gang	NN	*	gang	sg	masc	-	413)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	auch	ADV	(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	seine	PPOSAT	*	sein	sg	fem	-	(477|(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Stimme	NN	*)	stimme	sg	fem	-	477)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Vollkommen	NN	*	vollkommen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	warf	VVFIN	*	werfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Wolf	NE	*	wolf	sg	*	(PER*)	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sogar	ADV	*	sogar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	den	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Kopf	NN	*	kopf	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Trug	NN	*	trug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Wolf	NE	*	wolf	-	-	(PER*)	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sogar	ADV	*	sogar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Schwerd	NN	*	schwerd	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	im	APPRART	*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Arm	NN	*	arm	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	strich	VVFIN	*	streichen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Wolf	NE	*	wolf	-	-	(PER*)	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Sogar	NE	*	sogar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	die	ART	*	der	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Augenbraunen	NN	*	augenbraune	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	der	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Hand	NN	*	hand	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Gleichsam	NN	*	gleichsam	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Feuer	NN	*	feuer	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	seines	PPOSAT	*	sein	sg	neut	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Blicks	NN	*	blick	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	bergen	VVINF	*	bergen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	solche	PIAT	(NP*	solcher	sg	fem	-	(135
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	tiefgeprägte	ADJA	*	tiefgeprägt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bilder	NN	*)	bild	pl	neut	-	135)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Zeiten	NN	*)	zeit	pl	fem	-	(158)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	in	APPR	(VP(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	uns	PPER	*)	uns	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	schlafen	VVINF	*)	schlafen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	können	VMFIN	*)	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	bis	APPR	*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Ein	ART	(NP*	ein	sg	neut	-	(128
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Wort	NN	*	wort	sg	neut	-	128)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	ein	ART	(S(NP*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Laut	NN	*)	laut	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	sie	PPER	*	sie	sg	fem	-	(135)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	weckt	VVFIN	*))	wecken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Von	APPR	*	von	-	-	-	(470
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Stauffen	NN	*	stauffen	pl	masc	-	470)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ganz	NN	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	recht	ADJD	(CS*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ganz	ADV	(S(NP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	recht	NN	*)	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Filneck	NN	(CNP*	filneck	-	-	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Stauffen	NN	*)))	stauffen	-	-	-	(478)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	(VP(AP(AVP*	der	sg	neut	-	(479)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bald	ADV	*)	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	genauer	ADJD	*)	genau	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wissen	VVINF	*))	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	bald	ADV	*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(PP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zum	APPRART	*	zu	-	-	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Saladin	NN	*)	saladin	-	-	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	lauscht	VVFIN	(VROOT(PSEUDO(S*	lauschen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dort	ADV	*	dort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Daja	NE	*	daja	-	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(AVP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	komm	VVIMP	(S*	komm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	näher	ADJD	*)	nah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Daja	NE	*	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daja	NE	(VROOT(PSEUDO*	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gilts	ADV	*	gilt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nun	ADV	*	nun	-	-	-	(480
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	drückts	ADV	*	drückt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	euch	PPER	*	euch	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	beiden	PIS	*	beide	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Herz	NN	*	herz	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	480)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	was	PIS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	anders	ADV	*	anders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	erfahren	VVINF	*	erfahren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Was	PWS	*	was	sg	neut	-	(455
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Saladin	NN	*	saladin	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	will	VMFIN	*	wollen	sg	-	-	455)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Verdenkt	NN	*	verdenken	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihrs	NE	*	ihr	pl	-	-	(1052)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fingt	VVFIN	*	fingen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	an	PTKVZ	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	vertraulicher	ADJA	(NP*	vertraulich	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Mit	NN	*)	mit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihm	PPER	(VP*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sprechen	VVINF	*)	sprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	des	ART	*	der	sg	neut	-	(481|(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Sultans	NE	(MPN*	sultan	sg	neut	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Botschaft	NE	*	botschaft	sg	neut	-	481)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Uns	NE	*)))	uns	sg	neut	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	dem	ART	*	der	sg	neut	-	(410
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Fenster	NN	*)	fenster	sg	neut	-	410)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	scheuchte	VVFIN	*)	scheuchen	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S(AVP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sag	VVFIN	*	sag	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	(NP*	ihr	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sie	PPER	*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	jeden	PIAT	(VP(NP*	jeder	sg	masc	-	(482
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Augenblick	NN	*)	augenblick	sg	masc	-	482)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Erwarten	VVINF	*)	erwarten	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	darf	VMFIN	*)))	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gewiß	ADV	(VROOT(PSEUDO(S*)	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	gewiß	ADV	(VROOT(PSEUDO(S*)	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(483|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mich	PRF	*	mich	sg	fem	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dich	PPER	*	dich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	verlassen	VVFIN	*	verlassen	-	-	-	483)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	deiner	PPOSAT	*	dein	sg	fem	-	(221|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Hut	NN	*	hut	-	-	-	221)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	bitte	ADV	*	bitte	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	dich	PRF	*	dich	sg	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(483)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Dich	PPER	*	dich	sg	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gereuen	VVINF	*)	gereuen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dein	PPOSAT	(VROOT(PSEUDO(S(NP*	dein	sg	masc	-	(42|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gewissen	NN	*	gewissen	sg	masc	-	42)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	seine	PPOSAT	(NP*	sein	sg	fem	-	(42)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Rechnung	NN	*)	rechnung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dabei	PROAV	(VP*	dabei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	finden	VVINF	*))	finden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Verdirb	VVFIN	*	verdirb	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	meinem	PPOSAT	*	mein	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Plane	NN	*))	plane	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(CS(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Erzähl	NN	*)	erzähl	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	frage	VVFIN	(S*	fragen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Bescheidenheit	NN	*)	bescheidenheit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Rückhalt	NN	*)))	rückhalt	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	*	was	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Erinnern	NN	*	erinnern	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	könnt	VVFIN	*))	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	geht	VVFIN	(S*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	auch	ADV	*))	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seht	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	glaube	VVFIN	*	glauben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	vom	APPRART	*	von	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Sultan	NN	*	sultan	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ein	ART	*	ein	sg	masc	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zweiter	ADJA	*	zweiter	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Bot	NN	*	bot	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Al-Hafi	NE	*	al-hafi	-	-	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Euer	NE	*	euer	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Derwisch	NE	*	derwisch	sg	*	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	(VROOT(PSEUDO(S*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ab	PTKVZ	*)	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ha	XY	*	ha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ha	XY	*	ha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	zu	APPR	(VROOT(PSEUDO(S(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*)	euch	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wollt	VMFIN	*	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	*)	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ists	NE	(VROOT(PSEUDO(S*	ist	-	-	-	(481)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	denn	ADV	(AP*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	eilig	ADJD	*))	eilig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	verlangt	VVFIN	*	verlangen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*))	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO*	saladin	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	komm	VVIMP	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	komme	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wem	PWS	*	wem	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zum	APPRART	(VROOT(PSEUDO(PP*	zu	-	-	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Saladin	NN	*)	saladin	sg	*	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Schickt	NN	(VROOT(PSEUDO(S*	schicken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Saladin	NE	(NP*	saladin	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Dich	NE	*)	dich	sg	fem	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mich	PPER	*	mich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nein	PTKANT	*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hat	VAFIN	(VROOT(PSEUDO(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	(VP*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	geschickt	VVPP	*))	schicken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*	es	sg	neut	-	(484)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	richtig	ADJD	*)	richtig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	richtig	ADJD	*)	richtig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Schuld	NN	*	schuld	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Gott	NN	(S*	gott	sg	masc	-	(209)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ich	PPER	*	ich	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	bin	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Schuld	NN	*	schuld	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hab	VAFIN	*	hab	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Euch	PPER	*	euch	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gesagt	VVPP	*	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gelogen	VVPP	*	gelogen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	um	KOUI	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	es	PPER	*	es	sg	neut	-	(484)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	abzuwenden	VVIZU	*	abwenden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	abzuwenden	VVIZU	*	abwenden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	richtig	ADJD	*)	richtig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	*	daß	-	-	-	(484
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sein	PPOSAT	*	sein	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Defterdar	NN	*	defterdar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	geworden	VAPP	*	werden	-	-	-	484)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Betaur	NN	*	betaur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ansehn	NE	*	ansehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ichs	NE	*	ichs	-	-	-	(484)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geh	XY	*	gehn	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Stund	NN	*	stund	sg	masc	-	(482)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	an	PTKVZ	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	habt	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	es	PPER	*	es	sg	neut	-	(485)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Gehört	VVPP	*	hören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	wohin	PWAV	*	wohin	-	-	-	(485)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	wißt	VVFIN	*	wissen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	den	ART	*	der	sg	masc	-	(486
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Weg	NN	*	weg	sg	masc	-	486)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Habt	VAFIN	(S*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPOSAT	(NP*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Des	ART	(NP*	der	sg	masc	-	(486
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Wegs	NN	*	weg	sg	masc	-	486)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	was	PIS	(VP*	was	sg	neut	-	(487
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	bestellen	VVINF	*)))	bestellen	-	-	-	487)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sagt	VVFIN	(S*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	(S*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Diensten	NN	*)))))	dienst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Freilich	ADV	(VROOT(PSEUDO(S*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(487)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	PIS	(VP*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Als	KOUS	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	was	PIS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ein	ART	(VP(NP*	ein	sg	masc	-	(488
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Nackter	NN	*)	nackter	sg	masc	-	488)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	mit	APPR	(PP*	mit	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sich	PRF	*)	sich	sg	-	-	(488)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	schleppen	VVINF	*)	schleppen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	kann	VMFIN	*)))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geh	XY	*	gehn	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bald	ADV	*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Besinn	NN	(VROOT(PSEUDO(NP*	besinn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PPER	(NP*	dich	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Al-Hafi	NE	*))	al-hafi	sg	masc	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Besinn	NN	(VROOT(PSEUDO(S*	besinn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PPER	*	dich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gar	ADV	(AP*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nichts	PIS	*))	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	weiß	VVFIN	*))	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	plauderst	VVFIN	*	plauderst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	da	PTKVZ	*)	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S(S*	ihr	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bringt	VVFIN	*	bringen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Gleich	ADV	*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mit	PTKVZ	*)	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	(NP*	der	pl	*	-	(489
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Beutel	NN	*))	beutel	pl	*	-	489)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Beutel	NN	(VROOT(PSEUDO*	beutel	-	-	-	(489)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(NP*	der	sg	neut	-	(489
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Geld	NN	*	geld	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	489)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Das	KOUS	(S*	der	sg	neut	-	(489)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dem	ART	(VP(NP*	der	sg	neut	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Saladin	NN	*)	saladin	sg	neut	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	vorschießen	VVINF	*)	vorschießen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sollt	VMFIN	*)))	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiter	ADV	*	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(481)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sollt	VVFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(490)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Mit	APPR	(CPP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ansehn	CARD	*	ansehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wie	PWAV	(S*	wie	-	-	-	(490
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Euch	PPER	*	euch	pl	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Tag	NN	*)	tag	sg	masc	-	(179)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Tag	NN	*	tag	sg	masc	-	490)|(179)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Aushöhlen	NN	*)	aushöhlen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	wird	VAFIN	*))	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	bis	APPR	(PP*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	die	ART	*	der	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Zehen	NN	*)))	zehe	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sollt	VMFIN	*	sollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Es	PPER	*	es	sg	neut	-	(491)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ansehn	CARD	*	ansehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	*	daß	-	-	-	(491
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Verschwendung	NN	*	verschwendung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	aus	APPR	*	aus	-	-	-	491)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Der	ART	*	der	sg	fem	-	(39
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	weisen	ADJA	*	weisen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Milde	NN	*	milde	sg	*	-	39)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	nie	ADV	*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	leeren	ADJA	*	leer	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Scheuern	NN	*	scheuer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	lange	ADV	*	lange	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	borgt	VVFIN	*	borgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	borgt	VVFIN	*	borgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	borgt	VVFIN	*	borgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	bis	APPR	*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Die	ART	*	der	pl	masc	-	(67
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	armen	ADJA	*	arm	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	eingebornen	ADJA	*	eingeborn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	Mäuschen	NN	*	mäusch	pl	masc	-	67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	drin	ADV	*	drin	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	Verhungern	NN	*	verhunger	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bildet	VVFIN	*	bilden	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(S(NP(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ein	PTKVZ	*	ein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Wer	PWS	(S*	wer	sg	masc	-	(382
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Euers	NN	(AP(NP*	euer	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Gelds	NE	*)	geld	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	bedürftig	ADJD	*)	bedürftig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sei	VAFIN	*))	sein	sg	-	-	382)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	der	PDS	*)	der	sg	masc	-	(382)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	werde	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Doch	NE	(NP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Euerm	NN	*))	euerm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Rate	NN	(S*	rate	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	wohl	ADV	(VP*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	folgen	VVINF	*))	folgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ja	XY	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Er	PPER	(S(VP*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Rate	NN	*	rate	pl	neut	-	(492)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	folgen	VVINF	*))	folgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Saladin	NN	*	saladin	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sich	PRF	(VP(VP*	sich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	raten	VVINF	*)	raten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	lassen	VVINF	*))	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denkt	VVFIN	(S*	denkt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Mir	PPER	*	sich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	itzt	ADV	*	itzt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ihm	PPER	*)))	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	begegnet	VVFIN	*	begegnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	komm	VVIMP	(CS(S*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*))	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Schach	NE	*	schach	sg	neut	-	(195)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Gespielt	VVFIN	*	gespielt	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	seiner	PPOSAT	*	sein	sg	fem	-	(307|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Schwester	NN	*)))	schwester	sg	fem	-	307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sittah	NE	(VROOT(PSEUDO(CS(CS(S*	sittah	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	spielt	VVFIN	*	spielen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nicht	NN	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	übel	PTKVZ	*)	übel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	das	ART	(S(VP(NP*	der	sg	neut	-	(308
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Spiel	NN	*	spiel	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	das	PRELS	(S*	der	sg	neut	-	(308)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Saladin	NE	(NP*	saladin	sg	neut	-	308)|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Verloren	NN	*)	verlor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	glaubte	VVFIN	*))	glauben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	gegeben	VVPP	*)	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	hatte	VAFIN	*))	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Das	PDS	(S*	der	sg	neut	-	(308)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	stand	VVFIN	*	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	noch	ADV	(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	ganz	ADV	*)	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	da	PTKVZ	*))	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S(AVP(S*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seh	VVFIN	*	seh	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PRF	*	euch	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hin	PTKVZ	*)	hin	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Und	KON	*)	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sehe	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	das	ART	(NP*	der	sg	neut	-	(308
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Spiel	NN	*)	spiel	sg	neut	-	308)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	noch	ADV	(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	lange	ADV	*)	lange	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Verloren	NN	*	verloren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	*	ei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	für	APPR	(NP(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dich	PPER	*)	dich	-	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	*	ein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Fund	NN	*))	Fund	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(1048|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	durfte	VMFIN	*	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	König	NN	*	könig	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	den	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Bauer	NN	*	bauer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Nur	ADV	*))	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	rücken	VVINF	*))	rücken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	auf	APPR	(S(VP(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ihr	PPOSAT	*	ihr	sg	neut	-	(318|(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Schach	NN	*)	schach	sg	neut	-	1048)|318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	zeigen	VVINF	*)	zeigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	könnte	VMFIN	*))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	KON	(VROOT(PSEUDO(S*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	traue	VVFIN	*	trauen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dir	PPER	*)	dir	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bekam	VVFIN	*	bekommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Roche	NN	*	roche	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Feld	NN	(S*	feld	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sie	PPER	*	sie	pl	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	War	VAFIN	*)))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	hin	PTKVZ	*)	hin	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	*	der	sg	neut	-	(494
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	*	alle	sg	neut	-	494)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	weisen	VVINF	*	weisen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ruf	FM	*	ruf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ihn	PPER	*	ihn	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denkt	VVIMP	*	denkt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	deiner	PPOSAT	(NP*	dein	sg	fem	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Meinung	NN	*))	meinung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(495|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hört	VVFIN	*	hören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gar	ADV	(AVP*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	an	PTKVZ	*)	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wirft	VVFIN	(S*	werfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	verächtlich	ADJD	*	verächtlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Das	ART	(NP*	der	sg	neut	-	(318
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ganze	ADJA	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Spiel	NN	*	spiel	sg	neut	-	318)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Klumpen	NE	*))))))	klumpen	sg	neut	-	495)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(495)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	möglich	ADJD	*	möglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	(S*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wolle	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	matt	ADJD	(VP(AP*	matt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	einmal	ADV	*)	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sein	VAINF	*)	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wolle	VMFIN	*))	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Heißt	VVFIN	(VROOT(PSEUDO(S*	heißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(316)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	spielen	VVFIN	*)	spielen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Schwerlich	ADJD	(VROOT(PSEUDO(S*	schwerlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Heißt	NN	(VP*	heißt	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dem	ART	*	der	sg	neut	-	(195
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Spiele	NN	*)	spiel	sg	neut	-	195)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	spielen	VVINF	*))	spielen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gleichwohl	ADV	(VROOT(PSEUDO(S*	gleichwohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	galt	VVFIN	*	gelten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Es	PPER	(NP*	es	sg	neut	-	(308)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	keine	PIAT	(NP*	kein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	taube	ADJA	*	taub	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nuß	NN	*)))	nuß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geld	NN	(VROOT(PSEUDO(CNP(NP*	geld	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hin	ADV	*)	hin	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Geld	NN	*	geld	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	her	ADV	*)	her	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(496)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wenigste	ADJA	*))	wenig	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Allein	ADV	(VROOT(PSEUDO(VP(NP*	allein	-	-	-	(496
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PPER	*)	dich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gar	ADV	(NP*	gar	-	-	-	496)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nicht	NN	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	anzuhören	VVIZU	*)	anhören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	über	APPR	(VROOT(PSEUDO(VP(PP*	über	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	einen	ART	*	ein	sg	masc	-	(494
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Punkt	NN	*)	punkt	sg	masc	-	494)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	solcher	PIAT	*	solcher	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wichtigkeit	NN	*)	wichtigkeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dich	PRF	*	dich	sg	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	einmal	ADV	*)	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Zu	NN	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	hören	VVINF	*)	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	deinen	PPOSAT	(VROOT(PSEUDO(NP*	dein	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Adlerblick	NN	*	adlerblick	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	(PP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bewundern	NN	*))	bewundern	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	(VROOT(PSEUDO(NP*	der	sg	neut	-	(496)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PRELS	(S*	der	sg	neut	-	(496)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schreit	ADJD	*	schreit	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	um	APPR	(PP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Rache	NN	*	rache	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ach	ITJ	*	ach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sag	VVFIN	*	sögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*	der	sg	neut	-	(495)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	damit	KOUS	(S*	damit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sehen	VVINF	*	sehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	könnt	VVFIN	*	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Kopf	NN	*)	kopf	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	ist	VAFIN	*)))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kurz	ADJD	(VROOT(PSEUDO(S*	kurz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	halts	VVFIN	*	halts	sg	-	-	(186)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihm	PPER	*)	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	länger	ADJD	*	lang	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	aus	PTKVZ	*)	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO(CS(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	lauf	VVFIN	*	lauf	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	allen	PIAT	*	aller	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	schmutzgen	ADJA	*	schmutzg	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Mohren	NN	*	mohr	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Herum	NE	*))	herum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	frage	VVFIN	(S*	fragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wer	PWS	(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ihm	PPER	(VP*	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	borgen	VVINF	*)	borgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	will	VMFIN	*)))	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S(NP*	ich	sg	*	-	(3|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	PRELS	(S*	der	sg	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nie	ADV	(VP(AVP*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mich	PPER	*))	mich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gebettelt	VVPP	*)	betteln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	habe	VAFIN	*))	haben	sg	-	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	für	APPR	(VP(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	andre	ADJA	*)	andre	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	borgen	VVINF	*))	borgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Borgen	NN	*	borgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Viel	NN	*	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	besser	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	betteln	VVINF	*	betteln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wie	KOKOM	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	leihen	VVINF	*	leihen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Wucher	NN	*	wucher	pl	masc	-	(190)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	leihen	VVINF	*	leihen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	viel	ADV	*	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	besser	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	stehlen	VVINF	*	stehlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Unter	APPR	(VROOT(PSEUDO(S(PP*	unter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	meinen	PPOSAT	*	mein	pl	masc	-	(194|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ghebern	NN	*)	gheber	pl	masc	-	194)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Dem	NE	(MPN*	der	sg	masc	-	(193
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ganges	NE	*))	gange	sg	neut	-	193)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	brauch	VVFIN	*	brauch	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	(VP(VP*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	beides	PIS	*	beide	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	brauche	VVFIN	*	brauchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Das	ART	(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Werkzeug	NN	*	werkzeug	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	beider	ADV	*)	beide	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	sein	VAINF	*)))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Am	APPRART	(VROOT(PSEUDO(CO(PP*	an	-	-	-	(193
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ganges	NN	*)	gange	-	-	-	193)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Am	APPRART	(NP(PP*	an	-	-	-	(193
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ganges	NE	*)	gange	sg	*	-	193)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gibts	CARD	*	gibt	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Menschen	NN	*))	mensch	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Der	ART	*	der	sg	masc	-	(497
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	einzige	ADJA	*	einzig	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	PRELS	*	der	sg	masc	-	(497)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	würdig	ADJD	*	würdig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wäre	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	er	PPER	*	er	sg	masc	-	(497)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	am	APPRART	*	an	-	-	-	(193
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Ganges	NN	*	gange	sg	masc	-	193)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	lebte	VVFIN	*	leben	sg	-	-	497)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Laßt	VVIMP	*	lassen	pl	-	-	(499
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	eins	PIS	*	einer	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	den	ART	*	der	sg	masc	-	(489
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Plunder	NN	*	plunder	sg	masc	-	489)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	im	APPRART	*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Stiche	NN	*	stich	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Um	KOUI	*	um	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	den	ART	*	der	sg	masc	-	(489)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	es	PPER	*	es	sg	neut	-	(455)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	tun	VVINF	*	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	.	$.	*	--	-	-	-	499)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nach	APPR	*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(AP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	drum	ADV	*)	drum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	*	der	sg	fem	-	(370
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Plackerei	NN	*	plackerei	sg	fem	-	370)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	einmal	ADV	*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	aus	PTKVZ	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schaff	VVFIN	*	schaff	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	einen	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Delk	NN	*))	delk	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dächte	VVFIN	*	dächen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zwar	ADV	*	zwar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	(S*	der	sg	neut	-	(499)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	blieb	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	uns	PPER	*	uns	pl	*	-	(166)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Noch	ADV	(AP(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	immer	ADV	*)	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	übrig	ADJD	*)))	übrig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Al-Hafi	NE	*	al-hafi	sg	masc	(LOC*)	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ichs	NE	*	ichs	sg	*	-	(498)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	überlegen	VVINF	*	überlegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Warte	NN	(VROOT(PSEUDO*	warte	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Überlegen	NN	(VROOT(PSEUDO*	überlegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	(498
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	was	PIS	*	was	*	neut	-	498)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	überlegt	VVFIN	*	überlegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sich	PRF	*	sich	sg	-	-	(498)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bis	APPR	(PP*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	*)	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	*	der	sg	neut	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Sultan	NN	*)	sultan	sg	neut	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wiederkomme	VVFIN	*)	wiederkommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	bis	APPR	*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ich	PPER	(NP*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Abschied	NN	*	abschied	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	erst	ADV	*)	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	(500
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	überlegt	VVPP	*	überlegen	sg	-	-	500)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	*	der	sg	masc	-	(500)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sucht	PTKNEG	*	suchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Bewegungsgründe	NN	*	bewegungsgrund	pl	masc	-	(226)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dürfen	VMINF	*	dürfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(CS(S*	wer	sg	masc	-	(501)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sich	PRF	*	sich	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Knall	NN	(NP(CNP*	knall	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Fall	NN	*)	fall	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ihm	PPER	(VP(NP*	ihm	sg	masc	-	(501)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	leben	VVINF	*)))	leben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Entschließen	VVINF	*	entschließen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	kann	VMFIN	*)	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	der	ART	(S(NP*	der	sg	masc	-	(501)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	lebet	ADJD	(AP*	lebet	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	andrer	ADJA	*)	andr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Sklav	NN	*)	sklav	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	immer	ADV	*)))	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wollt	VMFIN	*)	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(CNP*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Lebt	NE	*	leben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wies	VVFIN	(VROOT(PSEUDO(S*	weisen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wohl	ADV	(AP*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dünkt	ADJD	*))	dünken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mein	PPOSAT	*	mein	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Weg	NN	*	weg	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	liegt	VVFIN	*	liegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dort	ADV	*	dort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Eurer	PPOSAT	*	eurer	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	(VROOT(PSEUDO(MPN*	al-hafi	-	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(502|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wirst	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	erst	ADV	(NP*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	*	der	sg	neut	-	(186
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Deine	ADJA	*	dein	sg	neut	-	502)|186)|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Berichtigen	NN	*))	berichtig	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ach	ITJ	(VROOT(PSEUDO(S*)	ach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Possen	NE	*	posse	-	-	-	(502)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bestand	NN	*	bestand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	meiner	PPOSAT	*	mein	sg	fem	-	(172|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Kaß	NN	*	kaß	sg	fem	-	172)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	des	ART	*	der	sg	masc	-	(186
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Zählens	NN	*	zählen	sg	masc	-	186)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wert	ADJD	*	wert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	meine	PPOSAT	*	mein	sg	fem	-	(369|(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Rechnung	NN	*	rechnung	sg	fem	-	369)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	bürgt	VVFIN	*	bürgen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	–	$.	*	–	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Sittah	NE	*	sittah	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Lebt	VVPP	(VROOT(PSEUDO(VP*	leben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	(S*))	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ab	NN	(VROOT(PSEUDO*	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*))	nathan	-	-	-	(1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ihm	PPER	(VROOT(PSEUDO(AP*	ihm	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nachsehend	ADJD	*)	nachsehend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	*	der	sg	fem	-	(369)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bürg	NE	*	bürg	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wilder	NN	*	wild	pl	neut	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	guter	ADJA	*	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	edler	ADJA	*	edel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	–	NN	*	–	-	-	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Wie	KOKOM	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nenn	ADV	*	nenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ihn	PPER	*	ihn	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	(S(NP*	der	sg	masc	-	(163
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wahre	ADJA	*	wahr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bettler	NN	*)	bettler	sg	masc	-	163)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Doch	NE	(CO*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	einzig	ADJD	*	einzig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	allein	ADV	*))	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wahre	ADJA	*	wahr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	König	NN	*)	könig	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	(VROOT(PSEUDO(S*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	einer	ART	(NP*	ein	sg	masc	-	(503
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	andern	ADJA	*	anderer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Seite	NN	*)	seite	sg	fem	-	503)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ab	PTKVZ	*)	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Szene	NN	(VROOT(PSEUDO*	szene	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathans	NE	*	nathan	sg	*	-	(19|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Hause	NN	*)	haus	sg	neut	-	19)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Recha	NE	(VROOT(PSEUDO(CNP*	recha	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*)	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	drückte	VVFIN	*	drücken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sich	PRF	*	sich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mein	PPOSAT	(NP*	mein	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	aus	PTKVZ	*)	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	»	XY	*	»	-	-	-	(504
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dürf	VMFIN	*	dürf	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	jeden	PIAT	*	jeder	sg	masc	-	(482
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Augenblick	NN	*	augenblick	sg	masc	-	482)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	erwarten	VVINF	*	erwarten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	«	XY	*	«	-	-	-	504)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(504)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	klingt	VVFIN	*	klingen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	–	NE	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wahr	PTKVZ	*)	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bald	ADV	(S*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Erscheinen	NN	*	erscheinen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	werde	VAFIN	*)	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	viel	PIAT	(NP*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Augenblicke	NN	*)	augenblick	*	*	-	(451)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sind	VAFIN	*)	sein	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	aber	ADV	(AVP*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	schon	ADV	*)	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	vorbei	ADV	*	vorbei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	*	ah	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wer	PWS	(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	denkt	VVFIN	*))	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	An	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	(NP*	der	pl	fem	-	(136
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	verflossenen	ADJA	*)	verflossen	pl	fem	-	136)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	allein	ADV	(VP(PP*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	In	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	jedem	PIAT	*	jeder	sg	masc	-	(137
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nächsten	ADJA	*	nächster	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Augenblicke	NN	*)	augenblick	pl	*	-	137)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	leben	VVINF	*))	leben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(505)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(VP(AVP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	einmal	ADV	*)	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	kommen	VVINF	*	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	PRELS	(S*	der	sg	masc	-	(505)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	bringt	VVFIN	*)))	bringen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	KON	(VROOT(PSEUDO(S*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	(NP*	der	sg	fem	-	(481
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	verwünschten	ADJA	*	verwünscht	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Botschaft	NN	*)	botschaft	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dem	ART	*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Sultan	NE	*))	sultan	sg	masc	-	481)|7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*	nathan	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sicher	ADJD	*	sicher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ohne	APPR	(PP*	ohne	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sie	PPER	*)	sie	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gleich	ADV	*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	hergebracht	VVPP	*))	herbringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(505)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Gekommen	NN	*	gekommen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dieser	PDAT	*	dieser	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Augenblick	NN	*	augenblick	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	meiner	PIAT	*	mein	pl	masc	-	(506|(407|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Wünsche	NN	*	wunsch	pl	masc	-	407)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wärmster	ADJD	*	wärmster	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	innigster	ADJA	*	innig	sg	masc	-	506)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Erfüllet	NN	*	erfüllet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hoff	VVFIN	*	hoff	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	meiner	PPOSAT	*	mein	pl	masc	-	(507|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Wünsche	NN	*	wunsch	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wärmster	ADJA	*	wärmster	pl	masc	-	507)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Soll	NN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Erfüllung	NN	*	erfüllung	sg	fem	-	(508)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	gehen	VVINF	*	gehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(CS(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	In	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	meiner	PPOSAT	*	mein	sg	fem	-	(509|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Brust	NN	*	brust	sg	fem	-	509)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dessen	PDS	*))	der	sg	masc	-	(510|(506)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Stelle	NN	*	stelle	sg	fem	-	510)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	treten	VVFIN	*)	treten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Die	ART	(S*	der	sg	fem	-	(509)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	verlernt	VVPP	*	verlernen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ohn	PPER	(VP*	ohn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	einen	ART	(PP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	herrschenden	ADJA	*	herrschend	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Wunsch	NN	*	wunsch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	aller	PIAT	(NP*	aller	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Wünsche	NN	*))	wunsch	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	sich	PRF	*	sich	pl	-	-	(509)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	dehnen	VVINF	*))))	dehnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(DL*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	(S*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	erschrecke	VVFIN	*))	erschrecken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PTKANT	*	mein	sg	masc	-	(507
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mein	PPOSAT	*	mein	sg	masc	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wunsch	NN	*	wunsch	sg	masc	-	507)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	An	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	des	ART	*	der	sg	masc	-	(510|(506
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	erfüllten	ADJA	*	erfüllt	sg	masc	-	506)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Stelle	NN	*	stelle	sg	fem	-	510)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	treten	VVINF	*	treten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	meiner	PIS	*	mein	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	*	mein	sg	masc	-	(507|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wunsch	NN	*	wunsch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dich	PRF	*	dich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Europa	NE	*	europa	sg	neut	(LOC*)	(511)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dich	PRF	*	dich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Händen	NN	*	hand	pl	fem	-	(512)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wissen	VVINF	*	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	welche	PWAT	*	welcher	sg	fem	-	(512)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	deiner	PPOSAT	*	dein	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	würdig	ADJD	*	würdig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	sind	VAFIN	*	sein	pl	-	-	507)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	irrst	VVFIN	*)	irrst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	diesen	PDAT	(NP*	dieser	sg	masc	-	(507
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wunsch	NN	*)	wunsch	sg	masc	-	507)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	deinem	ADJD	*))	dein	sg	masc	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	macht	VVFIN	(S*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Das	ART	(VP(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nämliche	ADJA	*)	nämlich	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	verhindert	VVPP	*	verhindern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	er	PPER	*	er	sg	masc	-	(507)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	meiner	PPOSAT	(VP(NP*	mein	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Je	NN	*)	je	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	werden	VAINF	*)	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	kann	VMFIN	*)))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dich	PPER	*	dich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	zieht	VVFIN	*	ziehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dein	PPOSAT	*	dein	sg	neut	-	(513|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vaterland	NN	*	vaterland	sg	neut	-	513)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	meines	PIS	*	mein	sg	masc	-	(1028)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	meines	PPOSS	*	mein	sg	masc	-	(1028)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sollte	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mich	PPER	*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	halten	VVINF	*	halten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	neut	-	(514
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bild	NN	*	bild	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Deinen	NN	*)	dein	pl	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	PRELS	(S*	der	sg	neut	-	(514)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	deiner	PPOSAT	*	dein	sg	fem	-	(515|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Seele	NN	*)	seele	sg	fem	-	515)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Noch	ADV	(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	verloschen	ADJA	(NP*	verlosch	-	-	-	514)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Als	NN	*)	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	die	ART	(S*	der	sg	fem	-	(516
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	greifen	VVINF	*	greifen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	kann	VMFIN	*))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	hören	VVINF	*	hören	-	-	-	516)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Die	ART	(NP*	der	pl	neut	-	(516
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Meinen	NN	*))))	meinen	pl	neut	-	516)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sperre	VVFIN	(VROOT(PSEUDO(S*	sperre	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PPER	*	dich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	(NP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	viel	PIS	*)	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	du	PPER	*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	willst	VMFIN	*)	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Des	ART	(VROOT(PSEUDO(S(NP*	der	-	-	-	(517|(22
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Himmels	NN	*	himmel	pl	masc	-	22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wege	NN	*)	weg	pl	masc	-	517)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	des	ART	(NP*	der	sg	masc	-	(22
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Himmels	NN	*	himmel	sg	masc	-	22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Wege	NN	*))	weg	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(518)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dein	PIAT	(NP*	dein	sg	masc	-	(61|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Retter	NN	*	retter	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	selber	ADV	*)	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wäre	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Durch	NN	*	durch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	(NP*	der	sg	masc	-	(518)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sein	PPOSAT	*	sein	sg	masc	-	(22|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Gott	NN	*)	gott	sg	masc	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	für	APPR	(S(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	den	PRELS	*)	der	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	kämpft	VVFIN	*	kämpfen	sg	-	-	22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	dich	PPER	*	dich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Das	ART	(NP*	der	sg	neut	-	(519
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Land	NN	*))	land	sg	neut	-	519)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	dich	PPER	(VP*	dich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	dem	ART	*	der	sg	neut	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Volke	NN	*)	volk	sg	neut	-	99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	führen	VVINF	*)	führen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	wollte	VMFIN	*)	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Für	APPR	(S(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	welche	PRELS	*)	welcher	pl	masc	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	du	PPER	*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	geboren	VVPP	*	gebären	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	wurdest	VAFIN	*))	wurdest	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daja	NE	(VROOT(PSEUDO(MPN*	daja	-	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S(S*	was	sg	neut	-	(520
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sprichst	ADV	*	sprichen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wieder	ADV	*)	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	liebe	VVFIN	*	lieben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Daja	NE	*)	daja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hast	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wahrlich	ADJD	*	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	deine	PPOSAT	(NP*	dein	-	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sonderbaren	ADJA	*	sonderbar	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Begriffe	NN	*))	begreifen	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	»	XY	(VROOT(PSEUDO*	»	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sein	NN	*	sein	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sein	PPOSAT	(NP*	sein	sg	masc	-	(22|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Gott	NN	*)	gott	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	den	ART	*	der	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kämpft	VVFIN	*	kämpfen	sg	-	-	22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	«	XY	*	«	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wem	PWS	(VROOT(PSEUDO(S*	wem	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eignet	VVFIN	*	eignen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gott	NN	*)	gott	sg	masc	-	(445)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	für	APPR	(VP(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	*	ein	sg	neut	-	(1019
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Gott	NN	*	gott	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	1019)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Der	PRELS	(S*	der	sg	masc	-	(521)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	einem	ART	(NP*	ein	sg	neut	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Menschen	NN	*)	mensch	sg	neut	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	eignet	VVFIN	*))	eignen	sg	-	-	520)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Muß	NN	(VP*	müssen	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	kämpfen	VVINF	*)	kämpfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	lassen	VVINF	*))	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(S*	und	-	-	-	(523
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	weiß	VVFIN	*	weiß	sg	-	-	523)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Man	PIS	(AVP*	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	*)	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	für	APPR	(S(PP*	für	-	-	-	(524
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	welchen	PWAT	*	welcher	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Erdkloß	NN	*)	erdkloß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	man	PIS	*	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	geboren	VVPP	*	gebären	-	-	-	524)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	mans	PIS	(S*	man	sg	*	-	(1037)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	für	APPR	(AVP(AVP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	den	ART	*)	der	sg	masc	-	(525)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	ist	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	auf	APPR	(NP(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	welchem	PRELS	*)	welcher	sg	masc	-	(525)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	man	PIS	*))))	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Geboren	NN	*	gebären	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mein	PPOSAT	(NP*	mein	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dich	PPER	*	dich	sg	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hörte	VVFIN	*)	hören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	tat	VVFIN	*	taten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*	dir	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	immer	ADV	(AVP*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	*))	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mein	PPOSAT	(NP*	mein	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Glück	NN	*	glück	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	So	ADV	(VP(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	weit	ADJD	*)	weit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ihm	PPER	*)	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	möglich	ADJD	*)	möglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	vorzuspiegeln	VVIZU	*))	vorspiegeln	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	tat	VVFIN	*	taten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dir	PPER	*	dir	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	den	ART	(NP*	der	sg	masc	-	(51
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Samen	NN	*	samen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Vernunft	NN	*))	vernunft	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	51)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Den	NE	(S*	der	sg	masc	-	(51)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	rein	ADJD	*	rein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	meine	PPOSAT	*	mein	sg	fem	-	(60|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Seele	NN	*))	seele	sg	fem	-	60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	streute	VVFIN	*	streuen	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Mit	APPR	(VP(PP*	mit	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	deines	PPOSAT	*	dein	sg	neut	-	(513|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Landes	NN	*)	land	sg	neut	-	513)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Unkraut	NN	(CNP*	unkraut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Blumen	NN	*)	blume	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	mischen	VVINF	*))))	mischen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Liebe	NN	(NP*	liebe	pl	*	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	liebe	VVFIN	(S*	lieben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Daja	NE	*	daja	-	-	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Er	PPER	(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	deine	PPOSAT	(NP*	dein	pl	*	-	(333|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	bunten	ADJA	*	bunt	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Blumen	NN	*)	blume	pl	fem	-	333)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*)))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	meinem	PPOSAT	(NP*	mein	sg	masc	-	(60|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Boden	NN	*)	boden	sg	masc	-	60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*	dir	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sagen	VVINF	(VP*	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ich	PPER	(VP(AVP(S(NP*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	selber	ADV	*)	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	fühle	VVFIN	*	fühlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	meinen	PPOSAT	(NP*	meinen	sg	masc	-	(60|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Boden	NN	*)	boden	sg	masc	-	60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Sie	PPER	*	sie	sg	*	-	(333)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	noch	ADV	(AP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	schön	ADJD	*)	schön	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	ihn	PPER	*	ihn	sg	masc	-	(60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	kleiden	VVFIN	*))	kleiden	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	entkräftet	VVPP	*	entkräften	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	So	ADV	(VP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	ausgezehrt	VVPP	*	auszehren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	durch	APPR	(PP*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	deine	PPOSAT	*	dein	pl	masc	-	(333|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Blumen	NN	*)))))	blume	pl	masc	-	333)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	fühle	VVFIN	(S*	fühlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	In	APPR	(NP(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	ihrem	PPOSAT	*	ihr	sg	masc	-	(330|(330)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Dufte	NN	*)	dufte	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	sauersüßem	ADJA	*	sauersüß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	Dufte	NN	*)	dufte	sg	masc	-	330)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	Mich	PPER	*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	betäubt	VVFIN	*	betäuben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	schwindelnd	ADJD	*))	schwindelnd	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Dein	PPOSAT	(S(NP*	dein	-	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gehirn	NN	*)	gehirn	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dessen	PDS	(VP*	der	sg	neut	-	(330)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	ADV	*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gewohnt	VVPP	*))	wohnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	tadle	VVFIN	*	tadlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	drum	ADV	*	drum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Die	ART	(NP*	der	pl	*	-	(526
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	stärkern	TRUNC	*	stärkern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nerven	NN	*)	nerv	pl	masc	-	526)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	die	PRELS	(S*	der	pl	masc	-	(526)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ihn	PPER	*	ihn	sg	masc	-	(330)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	vertragen	VVFIN	*))	vertragen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(CS(S*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schlägt	VVFIN	*	schlagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(330)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKVZ	*)	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	schon	ADV	(S(NP*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dein	PPOSAT	*	dein	-	-	-	(94|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Engel	NN	*	engel	sg	*	-	94)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wenig	PIS	*	wenig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	fehlte	VVFIN	*	fehlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	er	PPER	*	er	sg	masc	-	(94)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	mich	PPER	(NP*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	zur	APPRART	(PP*	zu	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Närrin	NN	*)))))	närrin	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Gemacht	VVPP	*))	gemacht	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schäm	VVFIN	*	schäm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mich	PRF	*	mich	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	vor	APPR	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	meinem	PPOSAT	*	mein	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Vater	NN	*	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Der	ART	*	der	sg	masc	-	(93
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Posse	NN	*	posse	sg	masc	-	93)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Posse	NN	(VROOT(PSEUDO*	posse	-	-	-	(93)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	*	der	sg	masc	-	(51
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Verstand	NN	*	verstand	sg	masc	-	51)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Hause	NN	*	haus	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wäre	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Posse	NN	(VROOT(PSEUDO*	posse	-	-	-	(523)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Posse	NN	(VROOT(PSEUDO*	posse	-	-	-	(523)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	reden	VVINF	*	reden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dürfte	VMFIN	*)	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Darfst	VVFIN	(VROOT(PSEUDO(S*	darfst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S(AVP(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ohr	NN	*)	ohr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	oft	ADV	*)	oft	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	es	PPER	*	es	sg	neut	-	(527)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	dir	PPER	*	dir	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Gefiel	NN	*	gefiel	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	von	APPR	(S(PP*	von	-	-	-	(527
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	deinen	PPOSAT	*	dein	pl	masc	-	(528|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Glaubenshelden	NN	*)	glaubensheld	pl	masc	-	528)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	mich	PPER	*	mich	sg	*	-	527)|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	unterhalten	ADJA	*)))	unterhalten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hab	XY	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihren	PPOSAT	*	ihr	sg	masc	-	(528)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Taten	NN	*	tat	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	stets	ADV	*	stets	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Bewunderung	NN	*	bewunderung	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ihren	PPOSAT	*	ihr	pl	neut	-	(528)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Leiden	NN	*	leid	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Nicht	PTKNEG	*	nicht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	immer	ADV	*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Tränen	NN	*	träne	pl	fem	-	(529)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	gezollt	VVPP	*	zollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPOSAT	(VROOT(PSEUDO(S(NP*	ihr	sg	masc	-	(333|(528)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Glaube	NN	*	glaube	sg	masc	-	333)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Schien	NE	*)	schien	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Heldenmäßigste	NN	*)	heldenmäßigster	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	An	APPR	(S(PP*	an	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihnen	PPER	*)	ihnen	pl	*	-	(528)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nie	ADV	*))	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	viel	PIAT	(NP*	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	tröstender	ADJA	*	tröstend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	War	NN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	(NP*	der	sg	fem	-	(530
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Lehre	NN	*)	lehre	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ergebenheit	NN	*	ergebenheit	sg	fem	-	530)|(208)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	In	APPR	(VP(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Gott	NN	*)	gott	sg	masc	-	(445)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	unserm	PPOSAT	*	unser	sg	masc	-	(531|(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Wähnen	NN	*	wähnen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	über	APPR	(PP*	über	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Gott	NN	*))	gott	sg	neut	-	531)|(445)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	So	ADV	(CAVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	gar	ADV	(AVP*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	abhängt	VVPP	*)))	abhängen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Liebe	NN	(NP*	liebe	sg	fem	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*	daja	sg	fem	(PER*)	0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Das	PDS	(CO(S*	der	sg	neut	-	(530)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mein	PPOSAT	(VP(NP*	mein	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	uns	PPER	*	uns	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	oft	ADV	*)	oft	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gesagt	VVPP	*))	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Darüber	PROAV	(S*	darüber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	hast	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	du	PPER	(NP*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	ihm	PPER	*)	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	oft	ADV	*	oft	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Dich	PPER	*	dich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	einverstanden	ADJD	*)))	einverstanden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	warum	PWAV	(S(S*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	untergräbst	ADV	*	untergräbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Du	PPER	*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	denn	ADV	(AVP*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	allein	ADV	*))	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	du	PPER	*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	ihm	PPER	*)	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	zugleich	ADV	*	zugleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	Gebauet	NN	*)	gebauet	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Liebe	NN	*	liebe	sg	fem	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*	daja	sg	fem	(PER*)	0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	*	der	sg	neut	-	(520)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	kein	PIAT	*	kein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gespräch	NN	*	gespräch	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	womit	PWAV	*	womit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wir	PPER	*	wir	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	unserm	PPOSAT	*	unser	sg	masc	-	(61|(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Freund	NN	*	freund	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	'	$(	*	--	-	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	am	PTKA	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	besten	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Entgegen	APPR	*	entgegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Für	APPR	(VROOT(PSEUDO(S(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*)	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zwar	ADV	(NP*	zwar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*))	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S(AVP(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mir	PPER	*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	liegt	VVFIN	*	liegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	daran	PROAV	(AP*	daran	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	unendlich	ADJD	*))	unendlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ob	KOUS	*)	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	auch	ADV	(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	er	PPER	*))	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Horch	NE	(NP*	horch	-	-	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Daja	NE	*)	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kommt	VVFIN	(S*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	unsre	ADJA	(NP*	unsr	-	-	-	(59|(29)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Türe	NN	*)	türe	-	-	-	59)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	*	er	sg	masc	-	(532)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wäre	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	horch	PTKVZ	*	horch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Recha	NE	(VROOT(PSEUDO*	recha	-	-	(PER*)	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daja	NE	(VROOT(PSEUDO(S(CNP*	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Tempelherr	NN	*	tempelherr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dem	ART	(NP*	der	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	jemand	PIS	*	jemand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	außen	ADV	(AP*	außen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	die	ART	*)	der	pl	neut	-	(59
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Türe	NN	*))))	türe	pl	neut	-	59)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	öffnet	VVFIN	*	öffnen	sg	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	den	ART	*	der	pl	neut	-	(533
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Worten	NN	*))	wort	pl	neut	-	533)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*))	recha	-	-	-	(2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	fährt	VVFIN	(VROOT(PSEUDO(CS(S*	fahren	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	zusammen	PTKVZ	*	zusammen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	faßt	VVFIN	(S*	fassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sich	PRF	*))	sich	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	will	VMFIN	(S*	wollen	sg	-	-	(534
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihm	PPER	(VP*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Füßen	NN	*)	fuß	pl	masc	-	(65)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	fallen	VVINF	*)))	fallen	-	-	-	534)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(NP*	er	sg	masc	-	(532)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ists	ADV	*)	ist	-	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mein	PPOSAT	(NP*	mein	sg	masc	-	(61|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Retter	NN	*	retter	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ah	NE	*	ah	-	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dies	PDS	*	dieser	sg	neut	-	(534)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vermeiden	VVINF	*	vermeiden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Erschien	VVFIN	*	erschien	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bloß	ADV	*	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	spät	ADJD	*	spät	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	–	XY	*	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CS(S*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ja	NN	(VP*	ja	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	*	der	pl	fem	-	(65
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Füßen	NN	*	fuß	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dieses	PDAT	(NP*	dieser	sg	neut	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	stolzen	ADJA	*	stolz	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Mannes	NN	*	mann	sg	neut	-	65)|61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Gott	NN	*)))	gott	sg	masc	(PER*)	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	noch	ADV	(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	einmal	ADV	*)	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	danken	VVINF	*))	danken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	(S(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	dem	ART	*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Manne	NN	*)))	manne	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mann	NN	*)	mann	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	keinen	PIAT	(NP*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Dank	NN	*)	dank	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	will	VMFIN	(S*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihn	PPER	*	ihn	sg	masc	-	(79)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wenig	PIAT	*)))	wenig	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Als	KOUS	(CS(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ihn	PPER	*	ihn	sg	masc	-	(79)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	der	ART	(NP*	der	sg	masc	-	(535
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Wassereimer	NN	*)	wassereimer	sg	masc	-	535)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	will	VMFIN	*)	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	der	PRELS	(S*	der	sg	masc	-	(535)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Dem	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Löschen	NN	*)	löschen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	so	ADV	(VP(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	geschäftig	ADJD	*)	geschäftig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	sich	PRF	*	sich	sg	-	-	(535)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	erwiesen	VVPP	*)))	erweisen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	PDS	(VROOT(PSEUDO(DL(S*	der	sg	masc	-	(535)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ließ	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	(VP*	sich	sg	-	-	(535)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	füllen	VVINF	*))	füllen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ließ	VVFIN	(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	(VP*	sich	sg	-	-	(535)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	leeren	VVINF	*)	leer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mir	PPER	*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Nichts	PIS	(NP*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	dir	PPER	(S(NP*	dir	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	also	ADV	*	also	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	auch	ADV	(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	der	ART	*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Mann	NN	*)))))	mann	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(CS(S(VP(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	*	der	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ward	NN	*)	ward	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	*	der	sg	fem	-	(62
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Glut	NN	*)	glut	sg	fem	-	62)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	hineingestoßen	VVPP	*)	hineinstoßen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Da	ADV	(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	fiel	VVFIN	*	fallen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ungefähr	ADJD	*	ungefähr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	den	ART	*	der	sg	masc	-	(73
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Arm	NN	*)	arm	sg	masc	-	73)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Da	ADV	(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	blieb	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	ungefähr	ADJD	*	ungefähr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	so	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Funken	NN	*	funken	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Auf	APPR	(PP*	auf	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	seinem	PPOSAT	*	sein	sg	masc	-	(69|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Mantel	NN	*)))	mantel	sg	masc	-	69)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	seinen	PPOSAT	*	sein	pl	masc	-	(73|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	Armen	NN	*)	arm	pl	masc	-	73)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	Bis	APPR	(S(PP*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	wiederum	ADV	*)	wiederum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	nicht	PTKNEG	*))))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	uns	PPER	*	uns	pl	*	-	(536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	beide	PIAT	(NP*	beide	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	Herausschmiß	NN	*)	herausschmiß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	der	ART	*	der	sg	fem	-	(62
Nathan.xml.rkpt.0.CoNLL2012.conll	000	50	Glut	NN	*)))	glut	sg	fem	-	62)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	51	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gibt	VVFIN	*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	da	ADV	(VP(NP*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Zu	NN	*)	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	danken	VVINF	*))	danken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	In	APPR	(S(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Europa	NE	*)	europa	sg	neut	(LOC*)	(511)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	treibt	VVFIN	*	treiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wein	NN	*)	wein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Zu	APPR	(VP(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	weit	ADJD	*	weit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	andern	VVINF	*))	anderer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Taten	NN	*	tat	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherren	NN	(NP*	tempelherr	pl	fem	-	(121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Die	PDS	(VP(AVP(CS(S*	der	pl	fem	-	(121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	müssen	VMFIN	*	müssen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	einmal	ADV	(VP*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	handeln	VVINF	*))	handeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	müssen	VMFIN	(S*	müssen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Wie	KOKOM	(NP(AP(AP(AVP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	etwas	ADV	*)	etwas	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	besser	ADJD	*)	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zugelernte	ADJA	*)	zugelernt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Hunde	NN	*)	hund	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Sowohl	KON	*	sowohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Feuer	NN	*)))	feuer	sg	neut	-	(253)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	als	KOUS	*)	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Wasser	NN	*)	wasser	sg	neut	-	(108)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	holen	VVINF	*))	holen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(S*	der	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Erstaunen	NN	(CNP*	erstaunen	sg	neut	-	(537)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Unruhe	NN	*)	unruhe	sg	fem	-	(538)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Zeit	NN	*))	zeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	über	APPR	(PP*	über	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	betrachtet	ADJD	*))	betrachten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	NE	(VROOT(PSEUDO(NP(MPN*	O	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Daja	NE	*)	daja	-	-	(PER*)	0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Daja	NE	*)	daja	-	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Augenblicken	NN	*	augenblick	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Des	ART	*	der	sg	masc	-	(539
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Kummers	NN	*	kummer	sg	masc	-	539)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	*	der	sg	masc	-	(286
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Galle	NN	*	galle	sg	masc	-	286)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	meine	PPOSAT	*	mein	sg	fem	-	(288|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Laune	NN	*	laune	sg	fem	-	288)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Dich	PPER	*	dich	sg	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	übel	ADV	*	übel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	anließ	VVFIN	*	anlassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	warum	PWAV	*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	jede	PIAT	*	jeder	sg	fem	-	(1057
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Torheit	NN	*	torheit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	1057)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Die	NN	*	der	sg	fem	-	(81)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	meiner	PPOSAT	*	mein	sg	fem	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Zung	NN	*	zung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	entfuhr	VVFIN	*	entfahren	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	hinterbringen	VVFIN	*	hinterbringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(540)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hieß	VVFIN	*	heißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	(VP*	sich	sg	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	empfindlich	ADJD	*)	empfindlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	rächen	VVINF	*))	rächen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Daja	NE	*	daja	-	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	(PP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	an	APZR	*)	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	besser	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Bei	APPR	(VP(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ihr	PPER	*)	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	vertreten	VVINF	*)	vertreten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	willst	VMFIN	*)	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	denke	VVFIN	*	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ritter	NN	*	ritter	*	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ich	PPER	(S*	ich	sg	masc	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	denke	VVFIN	*	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	diese	PDAT	(NP*	dieser	pl	neut	-	(81
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	kleinen	ADJA	*	klein	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Stacheln	NN	*	stachel	pl	neut	-	81)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Ihr	PPER	(VP*	ihr	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	das	ART	*	der	sg	neut	-	(60
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Herz	NN	*)	herz	sg	neut	-	60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	geworfen	VVPP	*))	werfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Euch	PPER	(VP*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	sehr	ADV	*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Geschadet	VVPP	*)	schaden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	haben	VAINF	*)))	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hattet	VVFIN	*	hatten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Kummer	NN	*)	kummer	sg	fem	-	(539)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wart	VVFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(NP(AP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euerm	NN	*	euerm	sg	masc	-	(539|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Kummer	NN	*)	kummer	sg	masc	-	539)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	geiziger	ADJA	*))	geizig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Euerm	PPOSAT	*	euerm	sg	masc	-	(63|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Leben	NN	*))	leben	*	neut	-	63)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gutes	ADJA	(VROOT(PSEUDO(NP*	gut	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	holdes	ADJA	*	hold	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Kind	NN	*)	kind	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	meine	PPOSAT	(S(NP*	mein	sg	fem	-	(282|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Seele	NN	*	seele	sg	fem	-	282)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zwischen	APPR	(PP*	zwischen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Auge	NN	(CNP*	auge	sg	masc	-	(541)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ohr	NN	*)))	ohr	-	-	-	(68)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	geteilt	VVPP	*)	teilen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Mädchen	NN	*)	mädchen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	(PP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Nein	NN	*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nein	PTKANT	(S*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	das	PDS	*	der	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	das	ART	(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	dem	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Feuer	NN	*))))	feuer	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Ich	PPER	(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	holte	VVFIN	*)	holen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	die	PDS	(VP*	der	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gekannt	VVPP	*))	kennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	aus	APPR	(VP(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dem	ART	*	der	sg	neut	-	(62
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Feuer	NN	*)	feuer	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	62)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	geholt	VVPP	*))	holen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Auf	APPR	(VP(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*)	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gewartet	VVPP	*))	warten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zwar	ADV	*	zwar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	verstellt	VVPP	*	verstellen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	NN	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	(NP*	der	sg	masc	-	(542
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Schreck	NN	*)))	schreck	sg	masc	-	542)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Pause	NN	*	pause	-	-	-	(543
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	unter	APPR	*	unter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	PRELS	*	der	sg	fem	-	(543)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Anschauung	NN	*	anschauung	sg	fem	-	(541)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihrer	PPOSAT	*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sich	PRF	*	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	verliert	VVPP	*	verlieren	sg	-	-	543)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	find	VAFIN	*	find	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	-	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	den	ART	(NP*	der	sg	masc	-	(115
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nämlichen	ADJA	*))	nämlich	-	-	-	115)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Dergleichen	NN	*	dergleichen	-	-	-	(114)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bis	KOUS	*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	fortfährt	VVFIN	*	fortfahren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	um	KOUI	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	seinem	PPOSAT	*	sein	sg	masc	-	(537|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Anstaunen	NN	*	anstaune	sg	masc	-	537)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	unterbrechen	VVINF	*	unterbrechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Ritter	NN	*	ritter	-	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	uns	PPER	*	uns	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	lange	ADJA	*	lang	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Gewesen	NN	*	gewesen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dergleichen	NN	(VROOT(PSEUDO(S*	dergleichen	-	-	-	(114)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bis	KOUS	*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	fortfährt	VVFIN	*	fortfahren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	um	KOUI	(VP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	seinem	PPOSAT	*	sein	sg	masc	-	(537|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Anstaunen	NN	*)	anstaune	sg	masc	-	537)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	unterbrechen	VVINF	*)))	unterbrechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Fast	ADV	*	fast	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dürft	VMFIN	*	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	fragen	VVINF	*	fragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	itzo	ADV	*	itzo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(544|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	NN	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sollte	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	544)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihr	PPER	*	ihr	sg	fem	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gewesen	VAPP	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	solltet	VMFIN	*	sollten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gewesen	VAPP	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(544)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gut	ADJD	*))	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auf	APPR	(VROOT(PSEUDO(S(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	–	NN	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	CARD	*))	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	heißt	VVFIN	*	heißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(NP*	der	sg	masc	-	(246
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Berg	NN	*))	berg	sg	masc	-	246)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auf	APPR	(VROOT(PSEUDO(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sinai	NE	*)	sinai	sg	masc	-	(246)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auf	APPR	(VROOT(PSEUDO(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sinai	NE	*)	sinai	sg	masc	-	(246)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schön	ADJD	*	schön	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S(AVP(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zuverlässig	ADJD	*	zuverlässig	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	einmal	ADV	*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Erfahren	NN	*)	erfahren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ob	KOUS	*)	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	es	PPER	*	es	sg	neut	-	(545)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wahr	ADJD	*)	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Obs	XY	*	obs	-	-	-	(546)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wahr	PTKVZ	*	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Daß	KOUS	*	daß	-	-	-	(546
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	daselbst	ADV	*	daselbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ort	NN	*	ort	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Moses	NE	*	moses	sg	*	-	(547)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Vor	APPR	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Gott	NN	*	gott	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	gestanden	VVPP	*	gestehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	546)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(AVP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	(S*	der	sg	neut	-	(546)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wo	PWAV	(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(547)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	stand	VVFIN	*)	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	stand	VVFIN	*	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(547)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	vor	APPR	(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Gott	NN	*))	gott	sg	masc	(PER*)	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	davon	PROAV	*	davon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zur	APPRART	(AP(PP*	zu	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Gnüge	NN	*)	gnüge	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	bekannt	ADJD	*))	bekannt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Obs	NN	*	obs	-	-	-	(545)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wahr	PTKVZ	*	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Möcht	NN	*	möcht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Euch	PPER	*	euch	-	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	erfahren	VVINF	*	erfahren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	–	PPER	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Daß	KOUS	*	daß	-	-	-	(545
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	es	PPER	*	es	sg	neut	-	(548)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	weitem	ADJA	*	weit	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	mühsam	ADJD	*	mühsam	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Auf	APPR	*	auf	-	-	-	(548
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	diesen	PDAT	*	dieser	sg	masc	-	(246
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Berg	NN	*	berg	sg	masc	-	246)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	hinauf	ADV	*	hinauf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	steigen	VVINF	*	steigen	-	-	-	548)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	Herab	NN	*	herab	sg	neut	-	545)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Gestiegen	VVPP	*	gestieg	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	wars	VVFIN	*	war	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	just	ADV	*	just	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	Gegenteil	NN	*	gegenteil	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ritter	NN	*	ritter	-	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	(S*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kehrt	VVFIN	*)	kehren	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	(S*	euch	pl	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*)	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ab	PTKVZ	*)	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wollt	VMFIN	(VROOT(PSEUDO(S*	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sehn	VVINF	*)	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Weil	KOUS	(VROOT(PSEUDO(S*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	(VP*	euch	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hören	VVINF	*)	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	will	VMFIN	*)	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Weil	KOUS	*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PRF	*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wollt	VMFIN	*	wollt	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	merken	VVINF	*	merken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	lassen	VVINF	*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	meiner	PPOSAT	*	mein	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Einfalt	NN	*	einfalt	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	lächelt	VVFIN	*	lächeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	lächelt	VVFIN	*	lächeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Euch	PPER	*	euch	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Wichtigers	NN	*	wichtiger	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	diesem	PDAT	*	dieser	sg	masc	-	(246
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	heiligen	ADJA	*	heilig	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Berg	NN	*	berg	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	aller	PIAT	*	aller	pl	masc	-	(103
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	Berge	NN	*	berg	pl	masc	-	246)|103)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	fragen	VVINF	*	fragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wahr	PTKVZ	*	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	ADV	*	euch	pl	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	*	der	pl	neut	-	(54
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Augen	NN	*	auge	pl	neut	-	54)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sehn	CARD	*))	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schlagt	VVFIN	*	schlagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	*	sie	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nieder	PTKVZ	*)	nieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	verbeißt	VVFIN	*	verbeißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Das	ART	*	der	sg	neut	-	(549
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Lächeln	NN	*	lächeln	sg	neut	-	549)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Mienen	NN	*	miene	pl	fem	-	(111)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	In	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zweifelhaften	ADJA	*	zweifelhaft	pl	*	-	(111
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Mienen	NN	*	miene	pl	*	-	111)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	lesen	VVINF	*	lesen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	deutlich	ADJD	*	deutlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	hör	ADJD	*	hör	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	vernehmlich	ADJD	*	vernehmlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	–	NN	*	–	-	-	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	verschweigt	VVFIN	*	verschweigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	(NP*	ah	-	-	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Recha	NE	*)	recha	-	-	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Recha	NE	(VROOT(PSEUDO(MPN*	recha	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wahr	ADJD	*	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gesagt	VVPP	*	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	»	XY	*	»	*	*	-	(550
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Kennt	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	«	XY	*	«	-	-	-	550)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wem	PWS	*	wem	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	(VP*	der	sg	neut	-	(550)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gesagt	VVPP	*))	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	»	XY	*	»	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kennt	VVFIN	*	kennt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	«	XY	*	«	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	hat	VAFIN	(VROOT(PSEUDO(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Euer	PPOSAT	(VP(NP*	euer	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gesagt	VVPP	*)	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Von	APPR	(VP(PP*	von	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	*)	euch	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gesagt	VVPP	*))	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	etwa	ADV	*	etwa	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*))	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Allein	ADV	(VROOT(PSEUDO(S*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*)	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	(VROOT(PSEUDO(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euer	ADJA	(NP*	euer	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Vater	NN	*))	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Beim	APPRART	(PP*	bei	*	*	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sultan	NN	*))	sultan	sg	*	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ohne	APPR	(VROOT(PSEUDO(PP*	ohne	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zweifel	NN	*)	zweifel	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(NP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	da	KOUS	*))	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	O	XY	*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(61|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vergeßlichen	NN	*	vergeßlichen	pl	*	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	(VROOT(PSEUDO(S*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nein	PTKANT	(AVP(S*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	da	ADV	(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	schwerlich	ADJD	*))	schwerlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mehr	ADV	*))	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dort	ADV	(VP*	dort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	unten	ADV	*	unten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Dem	ART	*	der	sg	neut	-	(227
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Kloster	NN	*	kloster	sg	neut	-	227)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	meiner	PIS	*)	mein	sg	fem	-	(1038)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	warten	VVINF	*	warten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ganz	ADV	(AVP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	gewiß	ADV	*)))	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	redten	VVFIN	*	reden	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mein	PPOSAT	*	mein	sg	-	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wir	PPER	*	wir	pl	*	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ab	PTKVZ	*	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Erlaubt	VVPP	*	erlauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geh	XY	*	gehn	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hol	VVFIN	*	hol	sg	-	-	(551
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ihn	PPER	*	ihn	sg	masc	-	551)|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(551)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	meine	PPOSAT	(NP*	mein	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sache	NN	*))	sache	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bleibt	VVFIN	(VROOT(PSEUDO(S*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ritter	NN	*	ritter	*	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bleibt	VVFIN	*)	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bring	VVFIN	*	bring	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	unverzüglich	ADJD	*)	unverzüglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(CO(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*)))	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sieht	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	entgegen	PTKVZ	*	entgegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	*	euch	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dazu	PROAV	(VROOT(PSEUDO(S*	dazu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	könnte	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	leicht	ADJD	*	leicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wer	PWS	(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	weiß	VVFIN	*))	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Er	PPER	(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	könnte	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dem	ART	*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Sultan	NN	*)	sultan	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	leicht	ADJD	*)	leicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Ihr	PPER	(S*	ihr	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Den	ART	(NP*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Sultan	NN	*)	sultan	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO(S(ISU*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	leicht	ADJD	(VP*	leicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Verlegenheit	NN	*)	verlegenheit	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Gekommen	NN	*	gekommen	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sein	VAINF	*)	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Glaubt	VVFIN	(S*	glauben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*)	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	(S*	es	sg	neut	-	(552)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Gefahr	NN	(NP*	gefahr	sg	fem	-	(147)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Wenn	KOUS	(S*	wenn	-	-	-	(552
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*)))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	geh	XY	*	geh	-	-	-	552)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gefahr	NN	(VROOT(PSEUDO*	gefahr	sg	fem	-	(147)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gefahr	NN	*	gefahr	sg	fem	-	(147)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gefahr	NN	(VROOT(PSEUDO(CS(S*	gefahr	sg	fem	-	(147
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*)	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*))	euch	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	für	APPR	(S(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihn	PPER	*)	ihn	sg	masc	-	147)|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	schleunig	ADJD	*)))	schleunig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	schleunig	ADJD	*	schleunig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	geh	XY	*	gehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ab	NN	(VROOT(PSEUDO*	ab	-	-	-	(553
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	553)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Recha	NE	(VROOT(PSEUDO(CNP*	recha	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*)	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	(NP*	der	sg	neut	-	(553)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Daja	NE	*))	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(S(ISU*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schnell	ADJD	*))	schnell	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	an	PTKVZ	*)	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fiel	VVFIN	*	fallen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auf	PTKVZ	*)	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	jagt	VVFIN	*	jagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*)	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laßt	VVIMP	*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	laßt	VVIMP	*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	denk	VVFIN	*	denk	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*	es	sg	neut	-	(553)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Kein	PIAT	*	kein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	schlimmes	ADJA	*	schlimm	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Zeichen	NN	*	zeichen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zeichen	NN	(VROOT(PSEUDO*	zeichen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wovon	PWAV	*	wovon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	etwas	PIS	*	etwas	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vorgeht	VVFIN	*)	vorgehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	innerhalb	APPR	*	innerhalb	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(554)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kocht	VVFIN	*	kochen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	überkochen	VVINF	*))	überkochen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laßt	VVIMP	(VROOT(PSEUDO(S*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(AVP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ists	ADV	*	ists	-	-	-	(555)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*))	euch	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*))	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wirst	VVFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	(AP*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	unbegreiflich	ADJD	*)))	unbegreiflich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bald	ADV	(VROOT(PSEUDO(S*	bald	-	-	-	(555
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	könnt	VVFIN	*	können	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	(NP*	der	sg	fem	-	(556
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Unruh	NN	*))	unruh	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	all	PIAT	*	all	*	*	-	556)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	vergelten	VVFIN	*	vergeln	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	die	ART	*	der	pl	neut	-	(556)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Er	PPER	(S*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Euch	PPER	(S(VP*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	gemacht	VVPP	*)	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	hat	VAFIN	*)	haben	sg	-	-	555)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	allzustreng	ADJD	*)	allzustreng	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	allzu	PTKA	*	allzu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	rachbegierig	ADJD	*))	rachbegierig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wovon	PWAV	(VROOT(PSEUDO(S*	wovon	-	-	-	(557
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	(NP*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sprichst	ADV	*)	sprichst	sg	-	-	557)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	(S*	der	sg	neut	-	(557)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	magst	VVFIN	*	magen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	du	PPER	(VP*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	selber	ADV	*	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wissen	VVINF	*)))	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bereits	ADV	(AP(AVP*	bereits	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ruhig	ADJD	*	ruhig	-	-	-	(558)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wieder	ADV	*))	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(558)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	(S(NP*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	PDS	*)	der	sg	neut	-	(558)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bin	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenigstens	ADV	*	wenigstens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gesteht	VVFIN	*	gesteht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	pl	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	seiner	PPOSAT	*	sein	sg	fem	-	(538|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Unruh	NN	*	unruh	sg	fem	-	538)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	freut	VVFIN	*	freuen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	seiner	PPOSAT	*	sein	sg	fem	-	(538|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Unruh	NN	*	unruh	sg	fem	-	538)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	danket	VVFIN	*	danket	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	was	PWS	*	was	sg	neut	-	(559
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	itzt	VVFIN	*	itzen	sg	-	-	559)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Ruh	NE	*	ruh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	genießt	VVFIN	*	genießen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mir	PPER	(VROOT(PSEUDO(AP*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	völlig	ADJD	*	völlig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	unbewußt	ADJD	*)	unbewußt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	(560
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	höchstens	ADV	*	höchstens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*	dir	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gestehen	VVINF	*	gestehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	könnte	VMFIN	*	können	sg	-	-	560)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Wär	NN	*	sein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	daß	KOUS	*	daß	-	-	-	(560
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	es	PPER	*	es	sg	neut	-	(561)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mich	PPER	*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	–	VVFIN	*	–	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	mich	PPER	*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	befremdet	VVFIN	*	befremdet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	wie	KOKOM	*	wie	-	-	-	560)|(561)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	einen	ART	*	ein	sg	masc	-	(556
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	solchen	PIAT	*	solcher	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Sturm	NN	*	sturm	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	meinem	PPOSAT	*	mein	sg	masc	-	(60|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Herzen	NN	*	herz	sg	masc	-	556)|60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	eine	ART	*	ein	sg	fem	-	(559
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Stille	NN	*	stille	sg	fem	-	559)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	plötzlich	ADJD	*	plötzlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	folgen	VVINF	*	folgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	können	VMINF	*	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sein	NN	(VROOT(PSEUDO(CS(S(NP*	sein	sg	masc	-	(414|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	voller	APPR	(PP*	voll	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Anblick	NN	*))	anblick	sg	masc	-	414)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sein	PPOSAT	(NP*	sein	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Gespräch	NN	*))	gespräch	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sein	PPOSAT	(S(NP*	sein	-	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Tun	NN	*)	tun	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Hat	VAFIN	*))	haben	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mich	PPER	*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gesättigt	VVPP	(VROOT(PSEUDO(VP*	gesättigt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schon	ADV	(S*))	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gesättigt	VVPP	*	gesättigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sagen	VVINF	*	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nein	PTKANT	*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	weitem	ADJA	*	weit	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	–	XY	*	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Den	NE	(VROOT(PSEUDO(S*	der	pl	masc	-	(562
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	heißen	VVFIN	*	heiß	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Hunger	NN	(VP*	hunger	pl	masc	-	562)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gestillt	VVPP	*))	stillen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ja	ADV	(VP*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*))	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	willst	VMFIN	*)	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mir	NE	(VP*	sich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ewig	ADJD	(AP*	ewig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wert	ADJD	*	wert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ewig	ADJD	*	ewig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	werter	ADJD	(AP*	wert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	als	KOKOM	(NP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Mein	PPOSAT	*	mein	sg	neut	-	(64|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Leben	NN	*)))	leben	sg	neut	-	64)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	bleiben	VVINF	*))	bleiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	wenn	ADV	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	mein	PPOSAT	(NP*	mein	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Puls	NN	*)	pul	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	mehr	ADV	*)	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	seinem	PPOSAT	*	sein	sg	masc	-	(468|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	bloßen	ADJA	*	bloß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Namen	NN	*)	name	sg	masc	-	468)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	wechselt	VVFIN	*)	wechseln	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Nicht	PTKNEG	(S(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	mehr	ADV	*)	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	mein	PPOSAT	(NP*	mein	-	-	-	(60|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Herz	NN	*)	herz	-	-	-	60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	so	ADV	(CS(S(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	oft	ADV	*)	oft	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	ihn	PPER	*)	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	denke	VVFIN	*)	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	Geschwinder	NN	(S*	geschwind	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	stärker	ADJD	*	stark	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	schlägt	VVFIN	*))))	schlagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schwatz	VVFIN	*	schwatz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Komm	NN	(VROOT(PSEUDO(S(CNP*	komm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Komm	NN	*	komm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	liebe	NN	(NP*	lieben	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Daja	NE	*))	daja	-	-	(PER*)	0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wieder	ADV	(PP*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	das	ART	*	der	sg	neut	-	(410
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Fenster	NN	*)	fenster	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	410)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Das	PRELS	(S*	der	sg	neut	-	(410)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	die	ART	*	der	pl	fem	-	(76
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Palmen	NN	*)	palme	pl	fem	-	76)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	sieht	VVFIN	*))	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Wohl	ADV	(AVP*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gestillt	VVPP	*)	stillen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	der	ART	(NP*	der	sg	masc	-	(562
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	heiße	ADJA	*	heiß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Hunger	NN	*))	hunger	sg	masc	-	562)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	werd	VVFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	die	ART	*	der	pl	fem	-	(76
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Palmen	NN	*	palme	pl	fem	-	76)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	bloß	ADV	*	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	untern	ADJD	*	untern	-	-	-	(76
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Palmen	NN	*	palme	-	-	-	76)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Diese	PDAT	(VROOT(PSEUDO(S(NP*	dieser	sg	fem	-	(559
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kälte	NN	*)	kälte	sg	fem	-	559)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Beginnt	VVFIN	*	beginnen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ein	ART	(NP*	ein	sg	neut	-	(562
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	neues	ADJA	*	neu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Fieber	NN	*)	fieber	sg	neut	-	562)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	(559
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kält	NN	*	kält	pl	-	-	559)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kalt	ADJD	*))	kalt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sehe	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wahrlich	ADJD	*	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nicht	PTKNEG	(AVP(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	minder	ADV	*)	minder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gern	ADV	*)	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ruhe	NN	*)	ruhe	sg	fem	-	(559)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sehe	VVFIN	*))	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Szene	NN	(VROOT(PSEUDO(S*	szene	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Audienzsaal	NN	*	audienzsaal	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dem	ART	*	der	sg	neut	-	(175
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Palaste	NN	*	palaste	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	des	ART	(NP*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Saladin	NN	*))))	saladin	sg	masc	-	175)|7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO(CNP*	saladin	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*)	sittah	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	im	APPRART	(VROOT(PSEUDO(CPP(PP*	in	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hereintreten	NN	*)	hereintreten	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gegen	APPR	(PP*	gegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	die	ART	*	der	sg	fem	-	(563
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Türe	NN	*))	türe	sg	fem	-	563)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hier	ADV	(VROOT(PSEUDO(S*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bringt	VVFIN	*	bringen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	(NP*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Juden	NN	*)	Jude	sg	masc	(MISC*)	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	her	PTKVZ	*	her	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	bald	ADV	*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	kömmt	VVFIN	*))	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	scheint	VVFIN	*	scheinen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	(VP*	sich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	eben	ADV	(AVP*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	übereilen	VVINF	*)))	übereilen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Hand	NN	*)	hand	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	gleich	ADV	*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	finden	VVINF	*)))	finden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Schwester	NN	(VROOT(PSEUDO*	schwester	sg	masc	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Schwester	NN	(VROOT(PSEUDO*	schwester	sg	masc	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Tust	VVFIN	(VROOT(PSEUDO(S*	tust	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Als	APPR	(S*	als	-	-	-	(564
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	stünde	VVFIN	*	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dir	PPER	*	dir	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	(NP*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Treffen	NN	*)	treffen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	vor	PTKVZ	*))	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	564)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	ART	(NP*	der	sg	neut	-	(564)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Waffen	NN	*)	waffe	pl	fem	-	(565
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	die	PRELS	(S*	der	sg	fem	-	(565)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	(VP(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gelernt	VVPP	*)	lernen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	führen	VVINF	*))))	führen	-	-	-	565)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CS(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PRF	(VP*	mich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	stellen	VVINF	*))	stellen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	soll	VMFIN	(S*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	besorgen	VVINF	(VP*	besorgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	lassen	VVINF	*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Soll	VMFIN	(S*	sollen	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Fallen	NN	(VP*	falle	pl	fem	-	(566|(565)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	legen	VVINF	*)	legen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	566)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	soll	VMFIN	(S*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	auf	APPR	(VP(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Glatteis	NN	*)	glatteis	sg	masc	-	(565)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	führen	VVINF	*))))))	führen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hätt	VAFIN	*	hätt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	*	der	sg	neut	-	(566)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gekonnt	VVPP	*	gekonnt	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hätt	VAFIN	*	hätt	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	*	der	sg	neut	-	(566)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Gelernt	NN	*	gelernt	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*	der	sg	neut	-	(566)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	alles	PIS	*	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ah	VVFIN	*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wozu	PWAV	*	wozu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wozu	PWAV	(VROOT(PSEUDO*	wozu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Um	KOUI	(NP(VP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Geld	NN	*	geld	sg	neut	-	(346)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	fischen	VVINF	*))	fischen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Geld	NN	*)	geld	sg	neut	-	(346)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Um	APPR	(PP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Geld	NN	*	geld	sg	neut	-	(346)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Geld	NN	(VP*	geld	sg	neut	-	(489)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	einem	ART	(NP*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Juden	NN	*)	Jude	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	abzubangen	VVIZU	*))	abbangen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Geld	NN	*	geld	sg	neut	-	(346)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	solchen	PIAT	*	solcher	pl	fem	-	(566
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kleinen	ADJA	*	klein	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Listen	NN	*	liste	pl	fem	-	566)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	endlich	ADV	*	endlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Gebracht	NN	*	gebracht	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	der	ART	*	der	sg	masc	-	(346
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Kleinigkeiten	NN	*	kleinigkeit	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	kleinste	ADJA	*	klein	sg	fem	-	346)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Zu	NN	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	schaffen	VVINF	*	schaffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Jede	PIAT	(VROOT(PSEUDO(S(CNP(NP*	jeder	sg	fem	-	(567
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kleinigkeit	NN	*)	kleinigkeit	sg	fem	-	567)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(NP(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sehr	ADV	(AP*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Verschmäht	ADJD	*))	verschmäht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	die	PDS	*))	der	sg	fem	-	(567)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	rächt	VVFIN	*	rächen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sich	PRF	*	sich	sg	-	-	(567)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Bruder	NN	*)	bruder	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Leider	ADV	(VROOT(PSEUDO(AP*	leider	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wahr	ADJD	*)	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dieser	PDAT	(NP*	dieser	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Jude	NN	*))	jude	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gar	ADV	(NP*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gute	ADJA	*	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Vernünftge	ADJA	(S(NP*	vernünftg	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Mann	NN	*)	mann	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	der	ART	(NP*	der	sg	masc	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Derwisch	NN	*)	derwisch	sg	masc	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	dir	PPER	*	dir	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Ihn	PPER	(VP*	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	ehedem	ADV	*	ehedem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	beschrieben	VVPP	*))))	beschreiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(S*)	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dann	ADV	*)	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(566)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Not	NN	*))	not	-	-	-	(147)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	(566
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Schlinge	NN	*)	schling	sg	fem	-	566)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	liegt	VVFIN	*)	liegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ja	PTKANT	(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dem	ART	*	der	sg	masc	-	(387
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	geizigen	ADJA	*	geizig	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	besorglichen	ADJA	*	besorglichen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	387)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Furchtsamen	ADJA	*	furchtsam	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Juden	NN	*)	Jude	pl	masc	(MISC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	dem	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	guten	ADJA	*	gut	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Dem	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	weisen	ADJA	*	weisen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Manne	NN	*)))	manne	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dieser	PDS	(VROOT(PSEUDO(S*	dieser	sg	masc	-	(568)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	(AP*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Schon	ADV	*)	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	unser	ADJD	*	unser	sg	neut	-	(317)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ohne	APPR	(PP*	ohne	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Schlinge	NN	*)))	schling	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	*	der	sg	neut	-	(569
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vergnügen	NN	*	vergnügen	sg	neut	-	569)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hören	VVINF	*	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wie	KOKOM	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	*	ein	sg	masc	-	(568
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	solcher	PIAT	*	solcher	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Mann	NN	*	mann	sg	masc	-	568)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sich	PRF	*	sich	sg	-	-	(568)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ausredt	VVFIN	*	ausredt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	welcher	PWAT	*	welcher	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	dreisten	ADJA	*	dreist	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Stärk	NN	*	stärk	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	entweder	KON	*	entweder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	er	PPER	*	er	sg	masc	-	(568)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Die	ART	*	der	sg	fem	-	(566
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Stricke	NN	*	strick	sg	fem	-	566)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	kurz	ADJD	*	kurz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	zerreißet	VVPP	*	zerreißet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	welcher	PWAT	*	welcher	sg	fem	-	(570
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	schlauen	ADJA	*	schlau	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Vorsicht	NN	*	vorsicht	sg	-	-	570)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	er	PPER	*	er	sg	masc	-	(568)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	die	ART	*	der	sg	fem	-	(566
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Netze	NN	*	netz	sg	fem	-	566)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	Vorbei	VVFIN	*	vorbei	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	sich	PRF	*	sich	sg	-	-	(568)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	windet	VVFIN	*	winden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	dies	PDS	*	dieser	sg	neut	-	(569
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	Vergnügen	NN	*	vergnügen	sg	neut	-	569)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	hast	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	Du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	obendrein	ADV	*	obendrein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wahr	ADJD	*)	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gewiß	ADV	*	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	freue	VVFIN	*	freuen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PRF	*	mich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	darauf	PROAV	*	darauf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PRF	*	dich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Auch	ADV	(VP(VP(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	weiter	ADV	*	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	verlegen	VVINF	*)	verlegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	machen	VVINF	*))	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ists	NE	*	ist	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	einer	PIS	*	ein	sg	masc	-	(46
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	*	der	sg	fem	-	(98
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Menge	NN	*)	menge	sg	fem	-	98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bloß	PTKVZ	*	bloß	-	-	-	46)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ists	ADV	(S*	ists	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	bloß	ADV	(S(PP*	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ein	ART	*	ein	sg	neut	-	(46
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Jude	NN	*	jude	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ein	ART	(NP*	ein	sg	neut	-	(98
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Jude	NN	*	jude	sg	neut	-	46)|98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	gegen	APPR	(PP*	gegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	den	ART	*	der	sg	masc	-	(98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Wirst	NN	*))	wirst	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	dich	PRF	*	dich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	schämen	VVINF	*	schämen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	so	ADV	(VP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	scheinen	VVINF	*)	scheinen	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Wie	KOKOM	(NP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	er	PPER	*))))	er	sg	masc	-	(98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	die	ART	(AP(NP*	der	pl	masc	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	Menschen	NN	*)	mensch	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	all	PIAT	*))	all	*	*	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	sich	PRF	*	sich	sg	-	-	(98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	denkt	VVFIN	*))	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Vielmehr	ADV	(VROOT(PSEUDO(S*	vielmehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wer	PWS	(NP(S*	wer	sg	masc	-	(571
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sich	PRF	*	sich	sg	-	-	(571)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*	ihm	sg	masc	-	(98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	besser	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zeigt	VVFIN	*)	zeigen	sg	-	-	571)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	der	PDS	*)	der	sg	masc	-	(571)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zeigt	VVFIN	*	zeigen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sich	PRF	*	sich	sg	-	-	(571)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ihm	PPER	*	ihm	sg	masc	-	(98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Geck	NN	*)	geck	sg	masc	-	(572)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Narr	NN	*))	narr	sg	masc	-	(572)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gar	ADV	(NP*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Schlecht	NN	*)	schlecht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	handeln	VVFIN	*	handeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	mir	PPER	*)	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	der	ART	(NP*	der	sg	masc	-	(210
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Schlechte	NN	*)	schlecht	pl	neut	-	210)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Schlecht	ADJD	*	schlecht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	denke	VVFIN	*))	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Traun	NE	(VROOT(PSEUDO(MPN*	traun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wenn	KOUS	(VROOT(PSEUDO(S(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schlecht	ADJD	*	schlecht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	handeln	VVFIN	*)	handeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nennst	ADV	*	nennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ein	ART	(VP(NP*	ein	sg	neut	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	jedes	PIAT	(NP*	jeder	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ding	NN	*))	ding	sg	neut	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nach	APPR	(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	seiner	PPOSAT	*	sein	sg	fem	-	(573|(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Art	NN	*)	Art	sg	fem	-	573)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	brauchen	VVINF	*)))	brauchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	(574
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hätt	VAFIN	*	hätt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ein	ART	*	ein	sg	masc	-	(575
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Weiberkopf	NN	*	weiberkopf	sg	masc	-	575)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	erdacht	VVPP	*	erdachen	-	-	-	574)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	das	PRELS	*	der	sg	neut	-	(574)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(575)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Nicht	PTKNEG	*	nicht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	beschönen	VVINF	*	beschönen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wüßte	VMFIN	*	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	beschönen	VVINF	*	beschönen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(566
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	feine	ADJA	*	fein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	spitze	ADJA	*	spitz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ding	NN	*	ding	sg	neut	-	566)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	besorg	ADJD	(S*	besorg	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	In	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	meiner	PPOSAT	*	mein	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	plumpen	ADJA	*	plump	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Hand	NN	*)))	hand	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zerbricht	VVFIN	*)	zerbrechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(NP(CS(S*	so	-	-	-	(565
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	*	was	*	neut	-	565)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Will	VMFIN	*	wollen	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ausgeführt	VVPP	(VP*	ausführen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wies	VVFIN	(S*	weisen	sg	-	-	(565)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	erfunden	VVPP	*	erfinden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ist	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Mit	APPR	(NP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	aller	PIAT	*	aller	sg	fem	-	(576
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Pfiffigkeit	NN	*)	pfiffigkeit	sg	fem	-	576)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Gewandtheit	NN	*))	gewandtheit	sg	fem	-	(576)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(NP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mags	NN	*)	mag	-	-	-	(577)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	(AVP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mags	ADV	(S*)	mags	-	-	-	(577)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	tanze	VVFIN	*	tanzen	sg	-	-	(578)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	könnt	VVFIN	*	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	es	PPER	*	es	-	-	-	(578)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	lieber	ADV	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	–	CARD	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	schlechter	ADJD	*	schlecht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	besser	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Trau	NN	(VROOT(PSEUDO(S*	trau	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dir	PPER	*	dir	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKA	(AP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wenig	PIS	*))	wenig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	stehe	VVFIN	*	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dir	PPER	*	dir	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dich	PPER	*))	dich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	(NP*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	willst	VMFIN	*)	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	uns	PPER	*	uns	pl	*	-	(289)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	(NP*	der	pl	masc	-	(579
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Männer	NN	*))	mann	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	deines	PPOSAT	(NP*	dein	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gleichen	ADJA	*	gleich	pl	-	-	579)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	doch	ADV	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	So	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gern	ADV	*)	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	bereden	VVINF	*	bereden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	möchten	VMFIN	*)	möchten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ihr	PPOSAT	*	ihr	sg	fem	-	(270|(579)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Schwert	NN	*	schwert	pl	-	-	270)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Ihr	PPOSAT	(S(NP*	ihr	pl	*	-	(270|(579)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Schwert	NN	*)	schwert	pl	-	-	270)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	sie	PPER	(VP*	sie	sg	fem	-	(579)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	weit	ADJD	*)	weit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	gebracht	VVPP	*)))	bringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Löwe	NN	*)	löwe	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schämt	VVFIN	*	schämen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sich	PRF	*	sich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Dem	ART	*	der	sg	neut	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Fuchse	NN	*)	fuchse	-	-	-	307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	jagt	VVFIN	*	jagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	–	NN	(CNP(NP*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	des	ART	(NP*	der	sg	masc	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Fuchses	NN	*))	fuchs	sg	masc	-	307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	List	NN	*))))	list	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	pl	neut	-	(289
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Weiber	NN	*)	weiber	pl	neut	-	289)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	(AVP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	den	ART	(NP*	der	sg	masc	-	(339
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Mann	NN	*	mann	sg	masc	-	339)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sich	PRF	(NP*	sich	sg	-	-	(289)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	herunter	ADV	*)))	herunter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	hätten	VAFIN	*)	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(S*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	glaube	VVFIN	*	glauben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	meine	PPOSAT	(VP(NP*	mein	sg	fem	-	(566|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Lektion	NN	*)	lektion	sg	fem	-	566)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	können	VMINF	*)))	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gehn	CARD	*	gehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wolltest	VVFIN	*	wolltest	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(VP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bleiben	VVINF	*))	bleiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auch	ADV	(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bleiben	VVINF	*)	bleiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	(S(ISU*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	im	APPRART	(PP*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Gesicht	NN	*)	gesicht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	euch	PPER	(VP*	euch	pl	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	bleiben	VVINF	*)	bleiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	–	VAFIN	*)	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Doch	KON	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	hier	ADV	*)	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	im	APPRART	(PP*	in	sg	neut	-	(580
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Nebenzimmer	NN	*)	nebenzimmer	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	–	XY	*))	–	-	-	-	580)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Da	KOUS	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	horchen	VVINF	*	horchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(S*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Schwester	NN	*	schwester	sg	neut	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	soll	VMFIN	*))	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	bestehn	VVFIN	*	bestehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Fort	NN	(S*	fort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	fort	PTKVZ	*)	fort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vorhang	NN	*)	vorhang	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	rauscht	VVFIN	*	rauschen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kömmt	VVFIN	*)	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	(AVP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	daß	KOUS	*)	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Du	PPER	(S*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	da	ADV	(VP*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	verweilst	VVPP	*))	verweilen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sehe	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nach	PTKVZ	*)	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Indem	KOUS	(VROOT(PSEUDO(S(S*	indem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	pl	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	*	sich	pl	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	durch	APPR	(AP(PP*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	eine	ART	(NP*	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Türe	NN	*))	türe	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	entfernt	ADJD	*)	entfernt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	tritt	VVFIN	(S*	treten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Nathan	NE	*	nathan	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	der	ART	*	der	sg	fem	-	(563
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	andern	PIS	*)	anderer	-	-	-	563)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	herein	PTKVZ	*))	herein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Saladin	NE	*	saladin	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	sich	PRF	(VP*	sich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	gesetzt	VVPP	*)))	setzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO(CNP*	saladin	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nathan	NE	*)	nathan	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Tritt	VVFIN	(VROOT(PSEUDO(S*	treten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	näher	ADJD	*	nah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Jude	NN	*)	jude	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Näher	ADJD	*	nah	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	(S*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	her	PTKVZ	*)	her	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ohne	APPR	*	ohne	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Furcht	NN	*	furcht	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(NP*	der	sg	fem	-	(542)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bleibe	FM	(MPN*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	deinem	FM	*	dein	sg	masc	-	(121|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Feinde	FM	*))	feind	sg	-	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nennst	VVFIN	*	nennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PRF	*)	dich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*	nathan	-	-	-	(21)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Den	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(21
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weisen	ADJA	*	weisen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nathan	NN	*)	nathan	sg	-	-	21)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wohl	ADV	(VROOT(PSEUDO(S*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nennst	VVFIN	(VROOT(PSEUDO(S*	nennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PRF	*	dich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nennt	VVFIN	(S*	nennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dich	PPER	*	dich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	das	ART	(NP*	der	sg	neut	-	(75
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Volk	NN	*)))	volk	sg	neut	-	75)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	*	der	sg	neut	-	(75
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Volk	NN	*	volk	sg	neut	-	75)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(CS(S*	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	glaubst	VVFIN	*	glauben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Verächtlich	ADJD	*	verächtlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	des	ART	(NP*	der	sg	neut	-	(75
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Volkes	NN	*)	volk	sg	neut	-	75)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Stimme	NN	*)	stimme	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	denke	VVFIN	*))	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	längst	ADV	(VP*	längst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gewünscht	VVPP	*	wünschen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	den	ART	(S(VP(NP*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Mann	NN	*)	mann	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	kennen	VVINF	*))	kennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Den	NE	*	der	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	es	PPER	*	es	sg	neut	-	(75)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	den	ART	(NP*	der	sg	masc	-	(294
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Weisen	NN	*))))	weise	sg	masc	-	294)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nennt	VVFIN	*	nennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(75)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Zum	APPRART	(PP*	zu	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Spott	NN	*)	spott	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nennte	VVFIN	*)	nennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dem	ART	*	der	sg	neut	-	(75
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Volke	NN	*	volk	sg	neut	-	75)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	weise	VVFIN	*	weise	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	weiter	ADV	*	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wär	ADJD	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	klug	ADJD	*	klug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	klug	VVFIN	*	klug	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	PDS	*	der	sg	masc	-	(581
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	581)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Der	PRELS	(S*	der	sg	masc	-	(581)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	*	sich	sg	-	-	(581)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	seinen	PPOSAT	*	sein	sg	masc	-	(582|(581)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Vorteil	NN	*)	vorteil	sg	masc	-	582)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	gut	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	versteht	VVFIN	*)))	verstehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auf	APPR	(VROOT(PSEUDO(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seinen	PPOSAT	*	sein	sg	masc	-	(582|(581)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wahren	ADJA	*	wahr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vorteil	NN	*	vorteil	sg	masc	-	582)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	meinst	ADV	(S*	meinst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	du	PPER	*	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	doch	ADV	*))	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wär	VAFIN	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Eigennützigste	NN	*	eigennützigst	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Klügste	NN	*	klügste	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	klug	ADJD	*	klug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	weise	VVFIN	*	weise	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	eins	PIS	*	eins	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	höre	VVFIN	*	hören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PRF	(VP*	dich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	erweisen	VVINF	*	erweisen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Du	PPER	*	du	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	widersprechen	VVINF	*	widersprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	willst	VMFIN	*)))	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Des	ART	(NP*	der	sg	*	-	(1016
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Menschen	NN	*)	mensch	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wahre	ADJA	*	wahr	pl	masc	-	1016)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Vorteile	NN	(NP*	vorteil	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	die	PRELS	(S*	der	pl	masc	-	(583)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	das	ART	(NP*	der	sg	neut	-	(75
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Volk	NN	*)	volk	sg	neut	-	75)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	kennst	VVFIN	(S*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	du	PPER	*)))	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hast	VAFIN	(VROOT(PSEUDO(CS(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kennen	VVINF	*)	kennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wenigstens	ADV	*	wenigstens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gesucht	VVPP	*	suchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Hast	NN	(S*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	drüber	PROAV	(VP*	drüber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nachgedacht	VVPP	*)))	nachdenken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	das	ART	(NP*	der	sg	neut	-	(584)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	auch	ADV	(AP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	allein	ADV	(AP*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Macht	NN	*))	macht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	schon	ADV	(AP*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	den	ART	*)	der	sg	masc	-	(585
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Weisen	NN	*))	weise	sg	masc	-	585)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(585)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sich	PRF	*	sich	sg	-	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	jeder	PIS	*	jeder	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dünkt	ADJD	*	dünken	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	(NP*	der	sg	fem	-	(586
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bescheidenheit	NN	*	bescheidenheit	sg	fem	-	586)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	genug	ADV	*))	genug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	(VP*	sie	*	*	-	(586)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	immerdar	ADV	*)	immerdar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hören	VVINF	*)	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wo	PWAV	(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Man	NE	(NP*	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	trockene	ADJA	*	trocken	sg	-	-	(87
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Vernunft	NN	*)	vernunft	sg	fem	-	87)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	erwartet	VVPP	*))	erwarten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ekelt	VVFIN	*)	ekeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	springt	VVFIN	*	springen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auf	PTKVZ	*)	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	VVIMP	(VROOT(PSEUDO(S*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	uns	PPER	*	uns	pl	*	-	(459)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zur	APPRART	(VP(PP*	zu	sg	fem	-	(455
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sache	NN	*)	sache	sg	fem	-	455)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	kommen	VVINF	*))	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	aber	KON	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Aufrichtig	ADJD	*	aufrichtig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Jud	NE	*	jud	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	aufrichtig	ADJD	*	aufrichtig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sultan	NE	(VROOT(PSEUDO(S*	sultan	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sicherlich	ADV	*	sicherlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dich	PRF	(VP*	dich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	bedienen	VVINF	*)	bedienen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ich	PPER	(NP*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	deiner	PPOSAT	*	dein	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	fernern	ADV	*	fernern	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Kundschaft	NN	*	kundschaft	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	würdig	ADJD	*)	würdig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	bleibe	VVFIN	*))	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bedienen	NN	(VROOT(PSEUDO*	bediener	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(CS(S*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sollst	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(NP*	der	sg	neut	-	(587
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Beste	NN	*)	gut	sg	neut	-	587)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	haben	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	allem	PIS	*))	alle	sg	neut	-	(379)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sollst	VMFIN	(S*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	es	PPER	*	es	sg	neut	-	(587)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	um	APPR	(VP(PP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	den	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	billigsten	ADJA	*	billig	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Preis	NN	*)	preis	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	haben	VAINF	*)))	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wovon	PWAV	(VROOT(PSEUDO(S*	wovon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sprichst	ADV	(NP*	sprichen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*))	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	doch	ADV	(VROOT(PSEUDO(PP(AVP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	deinen	PPOSAT	*	dein	pl	fem	-	(35|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Waren	NN	*)	sein	pl	fem	-	35)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Schachern	NN	(S*	schach	sg	neut	-	(588
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*))	dir	sg	*	-	588)|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Schon	ADV	(NP*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	meine	PPOSAT	*	mein	sg	fem	-	(307|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Schwester	NN	*)	schwester	sg	fem	-	307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	(	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	*	der	sg	neut	-	(588)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	sg	fem	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Horcherin	NN	*	horcherin	sg	fem	-	307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	)	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	dem	ART	*	der	sg	neut	-	(589
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Kaufmann	NN	*	kaufmann	sg	neut	-	589)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	tun	VVINF	*	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wirst	VVFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ohne	APPR	(VP(PP*	ohne	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Zweifel	NN	*)	zweifel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wissen	VVINF	*))	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wollen	VMFIN	*	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	meinem	PPOSAT	*	mein	sg	masc	-	(26|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Wege	NN	*)	weg	sg	masc	-	26)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	dem	ART	*	der	sg	neut	-	(121
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Feinde	NN	*	feind	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Der	PRELS	(S*	der	sg	masc	-	(121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	allerdings	ADV	*	allerdings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	sich	PRF	*	sich	sg	-	-	(121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	reget	VVFIN	*))	reget	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	etwa	ADV	(VP*	etwa	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Bemerkt	NN	*	bemerkt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	getroffen	VVPP	*)))	treffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	unverhohlen	ADJD	*)	unverhohlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(S(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	darauf	PROAV	*)	darauf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	(NP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dir	PPER	*)	dir	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Gesteuert	NN	*))	gesteuert	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Davon	PROAV	(VROOT(PSEUDO(S*	davon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	viel	PIS	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nötig	ADJD	*	nötig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	habe	VAFIN	*))	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kurz	NN	*	kurz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	XY	*	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gebiete	NN	(VROOT(PSEUDO(CNP*	gebiet	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sultan	NN	*)	sultan	pl	neut	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	heische	VVFIN	*	heisch	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	deinen	PPOSAT	(NP*	dein	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Unterricht	NN	*)	unterricht	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ganz	ADV	*))	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	anderm	PIS	*	ander	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ganz	ADV	(S*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	was	PIS	(NP*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	anderm	PIS	*)))	ander	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Da	KOUS	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	weise	ADJD	*	weise	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sage	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	einmal	ADV	*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Was	PWS	*	was	sg	neut	-	(531
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ein	ART	*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Glaube	NN	*	glaube	sg	neut	-	531)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	was	PWS	*	was	sg	neut	-	(590
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	ein	ART	*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Gesetz	NN	*	gesetz	sg	neut	-	590)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	dir	PPER	*	dir	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	am	PTKA	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	meisten	PIS	*	meister	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	eingeleuchtet	VVPP	*	eingeuchten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sultan	NE	*	sultan	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	*	ein	sg	neut	-	(46
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Jud	NN	*	jud	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	46)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Muselmann	NN	*))	muselmann	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Christ	NN	*)	christ	sg	masc	-	99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zwischen	APPR	(PP*	zwischen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	uns	PPER	*))	uns	pl	*	-	(459)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	diesen	PDAT	*	dieser	pl	fem	-	(591
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	drei	CARD	*	drei	-	-	-	591)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Religionen	NN	*)	religion	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kann	VMFIN	(S*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	eine	PIS	(VP(NP(AVP*	ein	sg	fem	-	(531)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Die	ART	*	der	sg	fem	-	(592
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wahre	NN	*)	wahr	sg	fem	-	592)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sein	VAINF	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ein	ART	(NP*	ein	sg	masc	-	(593
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mann	NN	*	mann	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wie	KOKOM	(CS(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	du	PPER	*	du	sg	*	-	593)|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	bleibt	VVFIN	(S*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	stehen	VVINF	*)))	stehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wo	PWAV	(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Zufall	NN	*	zufall	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	der	ART	(NP*	der	sg	fem	-	(594
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Geburt	NN	*))	geburt	sg	fem	-	594)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Ihn	PPER	(VP*	ihn	sg	masc	-	(593)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	hingeworfen	VVPP	*	hinwerfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	:	$.	*))))	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	wenn	KOUS	(S(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	er	PPER	*	er	sg	masc	-	(593)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	bleibt	VVFIN	*)	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	er	PPER	*	er	sg	masc	-	(593)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Einsicht	NN	(CNP*	einsicht	sg	fem	-	(375)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Gründen	NN	*	grund	pl	masc	-	(226)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	Wahl	NN	*))	wahl	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	des	ART	(NP*	der	sg	masc	-	(582
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	Bessern	NN	*))	besser	sg	masc	-	582)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wohlan	NN	(VROOT(PSEUDO*	wohlan	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	so	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	teile	VVFIN	*	teilen	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	deine	PPOSAT	(NP*	dein	sg	fem	-	(378|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Einsicht	NN	*)	einsicht	sg	fem	-	378)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*	sich	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mit	PTKVZ	*)	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	KOUS	(VROOT(PSEUDO(CO(VP(NP(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(VP(NP*	der	sg	fem	-	(595
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gründe	NN	*)	grund	pl	masc	-	595)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hören	VVINF	*))	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	denen	PRELS	(S*	der	pl	masc	-	(595)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	selber	ADV	*))	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nachzugrübeln	VVIZU	*)	nachzugrübeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Zeit	NN	*	zeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Gehabt	NN	*))	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	KOUS	(VROOT(PSEUDO(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	sg	fem	-	(596
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wahl	NN	*	wahl	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	die	PRELS	(S*	der	sg	fem	-	(596)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	diese	PDAT	(NP*	dieser	pl	masc	-	(595
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gründe	NN	*)	grund	pl	masc	-	596)|595)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Bestimmt	VVFIN	*))	bestimmt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	PPER	(S*	–	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	versteht	VVFIN	*	verstehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sich	PRF	*	sich	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	im	APPRART	(VP(PP*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Vertrauen	NN	*	vertrauen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	–	NE	*)	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	wissen	VVINF	*	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Damit	KOUS	(S*	damit	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	sie	PPER	*	sie	*	*	-	(596)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	meiner	PIS	*)	mein	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	mache	VVFIN	*))))	machen	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	stutzest	VVFIN	*)	stutzesen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wägst	VVFIN	(VROOT(PSEUDO(S*	wägsen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	*	der	sg	masc	-	(161
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Auge	NN	*))	auge	sg	masc	-	161)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kann	VMFIN	(S*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wohl	ADV	(VP*	wohl	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	(NP*	der	sg	masc	-	(597
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	erste	ADJA	*	erster	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Sultan	NN	*)	sultan	sg	masc	-	597)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	bin	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Der	ART	(S*	der	sg	masc	-	(597)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	eine	ART	(NP*	ein	sg	fem	-	(598
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	solche	PIAT	(NP*	solcher	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Grille	NN	*))	grille	sg	fem	-	598)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	hat	VAFIN	*))	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	die	ART	(S*	der	sg	fem	-	(598)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	mich	PPER	*	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Doch	KON	(AP(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	eines	ART	(NP*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Sultans	NN	*))	sultan	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	ganz	ADV	*)	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Unwürdig	ADJD	*)	unwürdig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	dünkt	VVFIN	*)	dünken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wahr	PTKVZ	*	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	rede	VVFIN	*	reden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sprich	NE	(VROOT(PSEUDO(MPN*	sprich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Oder	NE	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	willst	VVFIN	(S*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	*)	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	einen	ART	(NP*	ein	sg	masc	-	(451
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Augenblick	NN	*	augenblick	sg	masc	-	451)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Dich	PPER	(VP*	dich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	bedenken	VVINF	*)))	bedenken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gut	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	geb	VVFIN	*	geb	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihn	PPER	*	ihn	sg	masc	-	(451)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dir	PPER	*	dir	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	(	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	*	sie	-	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	horcht	VVFIN	*	horchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(DL(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	(VP*	sie	pl	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	belauschen	VVINF	*))	belauschen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Will	VMFIN	(S*	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hören	VVINF	*	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ob	KOUS	(S*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ichs	NE	*	ich	sg	*	-	(566)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	recht	ADJD	(VP*	recht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	gemacht	VVPP	*))))	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	)	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Denk	NN	*	denk	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nach	PTKVZ	*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geschwind	NN	(VROOT(PSEUDO(S*	geschwind	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	denk	VVFIN	*	denk	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nach	PTKVZ	*)	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	säume	VVFIN	*	säumen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zurück	PTKVZ	*	zurück	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	kommen	VVINF	*	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	*	der	sg	neut	-	(580
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nebenzimmer	NN	*	nebenzimmer	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nach	APPR	(S(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	welchem	PRELS	*)	welcher	sg	neut	-	(580)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sich	PRF	*	sich	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Sittah	NE	*	sittah	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	begeben	VVFIN	*)))	begeben	-	-	-	580)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*))	nathan	-	-	-	(1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	allein	ADV	(VROOT(PSEUDO*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hm	XY	*	hm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	hm	XY	*	hm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wunderlich	ADJD	*	wunderlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*)	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*)	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(NP*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sultan	NN	*)	sultan	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Auf	APPR	(VP(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Geld	NN	*)	geld	sg	neut	-	(346)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gefaßt	VVPP	*))	fassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	ART	(NP*	–	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Wahrheit	NN	*))	wahrheit	sg	fem	-	(101)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wahrheit	NN	(VROOT(PSEUDO*	wahrheit	sg	fem	-	(101)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(101)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	(CAVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	–	KON	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	bar	ADJD	(CAP*	bar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	blank	ADJD	*))))	blank	-	-	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	–	$.	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Die	ART	(NP*	der	sg	fem	-	(101
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Wahrheit	NN	*)	wahrheit	sg	fem	-	101)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Münze	NN	*	münze	sg	-	-	(599)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	wäre	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ja	PTKANT	(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wenn	KOUS	*	wenn	-	-	-	(600
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	(NP*	noch	-	-	-	600)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Uralte	ADJA	*	uralt	pl	neut	-	(599
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Münze	NN	*)	münze	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	die	PRELS	(VP*	der	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gewogen	VVPP	*)	wiegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ward	VVFIN	*)	werden	-	-	-	599)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(600)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ginge	VVFIN	*)	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	neue	ADJA	*	neu	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Münze	NN	*	münze	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Die	PWS	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Stempel	NN	*	stempel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	macht	VVFIN	*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	die	PRELS	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	man	PIS	*	man	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	aufs	APPRART	*	auf	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Brett	NN	*	brett	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	zählen	VVINF	*	zählen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	darf	VMFIN	*	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	das	PDS	*	der	sg	neut	-	(599)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	sie	PPER	*	sie	sg	fem	-	(101)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geld	NN	(NP*	geld	sg	neut	-	(346)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sack	NE	*))	sack	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	striche	VVFIN	*	strich	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	man	PIS	*	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Kopf	NN	*)	kopf	sg	masc	-	(87)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Auch	ADV	(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Wahrheit	NN	*)	wahrheit	sg	fem	-	(101)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ein	PTKVZ	*))	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Jude	NN	*))	jude	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CNP*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*)	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sollt	VMFIN	*	sollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Die	ART	*	der	sg	fem	-	(101
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Wahrheit	NN	*	wahrheit	sg	fem	-	101)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Wahrheit	NN	*	wahrheit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	fodern	VVINF	*	fodern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zwar	ADV	*	zwar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Zwar	ADV	*	zwar	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Verdacht	NN	*	verdacht	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	die	ART	*	der	sg	fem	-	(101
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Wahrheit	NN	*	wahrheit	sg	fem	-	101)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Falle	NN	*	fall	sg	fem	-	(566)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	brauche	VVFIN	*	brauchen	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	zu	PTKA	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	klein	ADJD	*	klein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zu	APPR	(NP(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	klein	ADJD	*))	klein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	für	APPR	(AP(CPP(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	einen	ART	*	ein	sg	masc	-	(423
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Großen	NN	*)	groß	sg	masc	-	423)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Zu	NN	*)	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	klein	ADJD	*))	klein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gewiß	PTKANT	(S*	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gewiß	ADV	*	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	stürzte	VVFIN	*	stürzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Der	ART	*	der	sg	fem	-	(598
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Türe	NN	*))	türe	sg	fem	-	598)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	(PP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ins	APPRART	*	in	sg	neut	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Haus	NN	*)	haus	sg	neut	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Man	PIS	(VROOT(PSEUDO(S*	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	pocht	VVFIN	*	pochen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hört	VVFIN	(S*	hören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Doch	NE	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	man	PIS	(NP*	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Freund	NN	*))	freund	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sich	PRF	*	sich	sg	-	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	naht	VVFIN	*)))	nahen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Behutsam	NN	(NP*	behutsam	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gehn	CARD	*)	gehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ganz	ADV	*)	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Stockjude	NN	(S(VP(VP*	stockjude	-	-	-	(46)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sein	VAINF	*)	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wollen	VMINF	*))	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(NP(AVP(CAVP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gar	ADV	*)	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Jude	NN	*	jude	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	geht	VVFIN	(S*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	minder	ADV	*))	minder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kein	PIAT	(NP*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Jude	NN	*)	jude	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dürft	VVFIN	(S*	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mich	PRF	(VP*	mich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	fragen	VVINF	*))	fragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Warum	PWAV	(S*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	kein	PIAT	(NP*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Muselmann	NN	*)))	muselmann	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wars	FM	*	war	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(601)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mich	PPER	(VP*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	retten	VVINF	*))	retten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nicht	PTKNEG	(S*	nicht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(S(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Kinder	NN	*)	kind	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bloß	VVFIN	*)	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	speist	VVFIN	*	speisen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	man	PIS	*	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Märchen	NN	*)	märchen	sg	*	-	(602)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ab	PTKVZ	*)	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	(S*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kömmt	VVFIN	*)	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	komme	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO(CNP*	saladin	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nathan	NE	*)	nathan	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	(	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	*	der	sg	neut	-	(563
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Feld	NN	*	feld	sg	neut	-	563)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	rein	ADJD	*	rein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	)	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	komm	VVIMP	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	dir	PPER	*	dir	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	zu	PTKA	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	geschwind	ADJD	*	geschwind	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	zurück	PTKVZ	*	zurück	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Rande	NN	*	rand	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	deiner	PPOSAT	*	dein	sg	fem	-	(603|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Überlegung	NN	*)))	überlegung	sg	fem	-	603)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	rede	VVFIN	*)	reden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hört	VVFIN	*	hören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	uns	PPER	*	uns	pl	*	-	(459)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	keine	PIAT	(NP*	kein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Seele	NN	*))	seele	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Möcht	VVIMP	(VROOT(PSEUDO(S*	möcht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Die	ART	(NP*	der	sg	fem	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ganze	ADJA	*	ganz	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Welt	NN	*)	welt	sg	fem	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	uns	PPER	(VP*	uns	pl	*	-	(459)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hören	VVINF	*))	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gewiß	ADJD	*)	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	(NP*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	seiner	PPOSAT	(NP*	sein	sg	fem	-	(603|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Sache	NN	*)))	sache	sg	fem	-	603)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ha	XY	*	ha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	*	der	sg	neut	-	(604)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nenn	VVFIN	*	nenn	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	einen	ART	*	ein	sg	masc	-	(605
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Weisen	NN	*	weise	sg	masc	-	605)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nie	ADV	(VROOT(PSEUDO(NP*	nie	sg	fem	-	(604
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	*	der	sg	fem	-	(101
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wahrheit	NN	*	wahrheit	sg	fem	-	101)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(PP*	zu	-	-	-	604)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Verhehlen	NN	*))	verhehlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	für	APPR	(VROOT(PSEUDO(VP(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*)	sie	pl	*	-	(605)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	(NP*	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Spiel	NN	*))	spiel	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	setzen	VVINF	*))	setzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Leib	NN	(VROOT(PSEUDO(CNP*	leib	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Leben	NN	*)	leben	sg	neut	-	(606)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gut	ADJD	(VROOT(PSEUDO(S*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Blut	NN	*)	blut	-	-	-	(607)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ja	ADV	(VROOT(PSEUDO(S*)	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wanns	ADV	(VROOT(PSEUDO(CS(S(VP(AP*	wanns	-	-	-	(604)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nötig	ADJD	*))	nötig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nutzt	VVFIN	*)	nutzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	(VROOT(PSEUDO(S(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	An	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	darf	VMFIN	(CNP(NP(S*	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hoffen	VVINF	*	hoffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	einen	PIS	(NP*	ein	sg	masc	-	(608
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	meiner	PPOSAT	(NP*	mein	pl	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Titel	NN	*)))	titel	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	608)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Verbesserer	NN	(NP*	verbesserer	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	der	ART	(NP*	der	sg	fem	-	(262
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Welt	NN	*)))	welt	sg	fem	-	262)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	des	ART	(NP*	der	sg	masc	-	(590
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Gesetzes	NN	*)))	gesetz	sg	masc	-	590)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Mit	APPR	(VP(PP*	mit	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Recht	NN	*)	recht	sg	neut	-	(37)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	führen	VVINF	*)))	führen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Traun	NE	(VROOT(PSEUDO(NP*	traun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	(608
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schöner	ADJA	*	schön	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Titel	NN	*))	titel	sg	masc	-	608)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sultan	NE	*	sultan	sg	neut	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	eh	XY	*	eh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mich	PRF	*	mich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dir	PPER	*	dir	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	vertraue	VVFIN	*	vertrauen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Erlaubst	NN	*	erlaubst	sg	-	-	(609
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	dir	PPER	*	dir	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ein	ART	*	ein	sg	neut	-	(601
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Geschichtchen	NN	*	geschichtchen	sg	neut	-	601)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Erzählen	NN	*	erzählen	-	-	-	609)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Warum	PWAV	*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(609)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	stets	ADV	(VP*	stets	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ein	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Freund	NN	*)	freund	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gewesen	VAPP	*)	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Geschichtchen	NN	*)	geschichtchen	pl	neut	-	(602)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gut	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Erzählt	VVFIN	*)	erzählen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(CS(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gut	ADJD	(VP*	gut	-	-	-	(610
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	erzählen	VVINF	*))	erzählen	-	-	-	610)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	PDS	(S*	der	sg	neut	-	(610)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Wohl	ADV	(AVP*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	eben	ADV	*)	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	meine	PPOSAT	(NP*	mein	sg	fem	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Sache	NN	*)	sache	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Schon	ADV	(VROOT(PSEUDO(VP(AVP*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	So	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	stolz	ADJD	*	stolz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bescheiden	VVINF	*)	bescheiden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mach	NE	*	mach	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	erzähl	ADJD	*	erzähl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	erzähle	VVIMP	*	erzählen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Vor	APPR	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	grauen	ADJA	*	grau	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Jahren	NN	*	jahr	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	lebt	VVFIN	*	leben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ein	ART	*	ein	sg	masc	-	(611
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Mann	NN	*	mann	sg	masc	-	611)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Osten	NN	*	osten	sg	masc	-	(612)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Der	PRELS	*	der	sg	masc	-	(611)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	einen	ART	*	ein	sg	masc	-	(613
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Ring	NN	*	ring	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	unschätzbarem	ADJA	*	unschätzbar	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Wert	NN	*	wert	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	613)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Aus	APPR	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	lieber	ADJA	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Hand	NN	*	hand	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	besaß	VVFIN	*	besitzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(CS(S(NP*	der	sg	masc	-	(614
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Stein	NN	*)	stein	sg	masc	-	614)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ein	ART	(NP*	ein	sg	masc	-	(615)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Opal	NN	*))	opal	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(S(NP*	der	sg	masc	-	(615)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hundert	CARD	*	hundert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	schöne	ADJA	*	schön	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Farben	NN	*)	farbe	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	spielte	VVFIN	*	spielen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	hatte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	die	ART	(NP*	der	sg	fem	-	(616
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	geheime	ADJA	*	geheim	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Kraft	NN	*)	kraft	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	vor	APPR	(VP(PP*	vor	-	-	-	(617
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Gott	NN	(CNP*	gott	sg	masc	-	616)|617)|(445)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Menschen	NN	*))	mensch	sg	masc	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	angenehm	ADJD	*	angenehm	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	machen	VVINF	*))	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	wer	PWS	(S*	wer	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	In	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	dieser	PDAT	*	dieser	sg	fem	-	(617
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Zuversicht	NN	*)	zuversicht	sg	fem	-	617)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	ihn	PPER	*	ihn	sg	masc	-	(614)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	trug	VVFIN	*))))	tragen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wunder	NN	*	wunder	sg	neut	-	(117)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihn	PPER	*	ihn	sg	masc	-	(614)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	(NP*	der	sg	masc	-	(611
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Mann	NN	*)	mann	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Osten	NN	*)	osten	pl	masc	-	611)|(612)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	darum	PROAV	*	darum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nie	ADV	*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Vom	APPRART	(PP*	von	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Finger	NN	*)	finger	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ließ	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	die	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Verfügung	NN	*)	verfügung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	traf	VVFIN	*	treffen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Auf	APPR	(S*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	ewig	ADJD	*	ewig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	ihn	PPER	*	ihn	sg	masc	-	(614)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	seinem	PPOSAT	*	sein	sg	neut	-	(618|(611)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Hause	NN	*)	haus	sg	neut	-	618)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Erhalten	NN	*)))))	erhalten	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nämlich	ADV	(VROOT(PSEUDO(AVP*	nämlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(611)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ließ	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	*	der	sg	masc	-	(613
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ring	NN	*	ring	sg	masc	-	613)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	seinen	PPOSAT	*	sein	pl	fem	-	(619|(611)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Söhnen	NN	*	söhnen	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dem	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	geliebtesten	ADJA	*	geliebt	-	-	-	619)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	setzte	VVFIN	*	setzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	fest	PTKVZ	*	fest	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	dieser	PDS	*	dieser	sg	masc	-	(619)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	wiederum	ADV	*	wiederum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Den	ART	*	den	sg	masc	-	(613
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Ring	NN	*	ring	sg	masc	-	613)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	von	APPR	*	von	-	-	-	(620
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	seinen	PPOSAT	*	sein	pl	fem	-	(619)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Söhnen	NN	*	söhnen	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	dem	ART	*	der	sg	masc	-	620)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	vermache	ADJA	*	vermachen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Der	PRELS	*	der	sg	masc	-	(620)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	ihm	PPER	*	ihm	sg	masc	-	(619)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	der	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	liebste	ADJA	*	lieb	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	stets	ADV	*	stets	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	der	ART	*	der	sg	masc	-	(621
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	liebste	ADJA	*	lieb	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	,	$,	*	--	-	-	-	621)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	Ohn	NE	*	ohn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	Ansehn	NN	*	ansehn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	der	ART	*	der	sg	masc	-	(594
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	Geburt	NN	*	geburt	sg	-	-	594)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	Kraft	NN	*	kraft	sg	fem	-	(622
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	allein	ADV	*	allein	-	-	-	622)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	Des	ART	*	der	-	-	-	(614
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	Rings	NN	*	ring	-	-	-	614)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	das	ART	*	der	sg	neut	-	(623
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	Haupt	NN	*	haupt	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	50	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	51	der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	52	Fürst	NN	*	fürst	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	53	des	ART	*	der	sg	neut	-	(618
Nathan.xml.rkpt.0.CoNLL2012.conll	000	54	Hauses	NN	*	haus	sg	neut	-	623)|618)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	55	werde	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	56	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Versteh	NE	*	versteh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sultan	NN	*	sultan	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	versteh	VVFIN	*	verstehn	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PRF	*)	dich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Weiter	ADV	(VROOT(PSEUDO(S*)	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kam	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dieser	PDAT	(NP*	dieser	sg	masc	-	(613
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ring	NN	*)	ring	sg	masc	-	613)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	(S(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Sohn	NN	*)	sohn	sg	masc	-	(621)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	APPR	(AP(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Sohn	NN	*	sohn	sg	masc	-	(621)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Auf	APPR	(S(PP*	auf	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	einen	ART	*	ein	sg	masc	-	(624
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Vater	NN	*)	vater	sg	masc	-	624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	endlich	ADV	*	endlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	drei	CARD	(AP(NP*	drei	-	-	-	(625
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Söhnen	NN	*	söhne	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	;	$.	*)	--	-	-	-	625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Die	ART	*	der	-	-	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	alle	PIAT	(NM*	aller	pl	*	-	(625
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	drei	CARD	*)))	drei	-	-	-	625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	ihm	PPER	*	ihm	sg	masc	-	(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	gleich	ADV	(AP*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	gehorsam	ADJD	*)	gehorsam	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	waren	VAFIN	*))	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Die	ART	*	der	pl	*	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	alle	PIAT	(NM*	aller	pl	*	-	(625
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	drei	CARD	*)))	drei	-	-	-	625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	er	PPER	*	er	sg	masc	-	(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	folglich	ADV	(VP*	folglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	gleich	ADV	*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	lieben	VVINF	*))	lieben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	Sich	PRF	(VP*	sich	sg	-	-	(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	entbrechen	VVINF	*)	entbrechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	konnte	VMFIN	*)	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S(PP*	nur	-	-	-	(626
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Zeit	NN	*	zeit	sg	fem	-	626)|(158)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Zu	APPR	(PP*	zu	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Zeit	NN	*))	zeit	sg	fem	-	(158)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schien	VVFIN	*	scheinen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ihm	PPER	*	ihm	sg	masc	-	(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	bald	ADV	*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	der	PDS	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	bald	ADV	(AP(S*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	dieser	PDS	(NP*	dieser	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	bald	ADV	(CS(S*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	dritte	ADJA	*))	dritter	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	–	KON	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	so	ADV	(CS(S(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	jeder	PIS	*))	jeder	sg	masc	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	sich	PRF	*	sich	sg	-	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	ihm	PPER	*)	ihm	sg	masc	-	(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	befand	VVFIN	*)	befinden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	sein	PPOSAT	(S(NP*	sein	-	-	-	(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	ergießend	ADJD	*	ergießend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Herz	NN	*)	herz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Die	ART	(NP*	der	pl	masc	-	(627
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	andern	PIS	*))))))	anderer	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	zwei	CARD	*))	zwei	-	-	-	627)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	teilten	VVFIN	*)	teilen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	würdiger	ADJA	*	würdig	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	Des	ART	(NP*	der	sg	masc	-	(613
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	Ringes	NN	*	ring	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	;	$.	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	den	ART	*	der	sg	masc	-	(613)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	er	PPER	(S(VP*	er	sg	masc	-	(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	denn	ADV	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	auch	ADV	(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	einem	ART	*	ein	sg	neut	-	(625
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	jeden	PIAT	(AP*	jeder	sg	masc	-	625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	Die	ART	(AP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	fromme	ADJA	*))	fromm	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	50	Schwachheit	NN	*)	schwachheit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	51	hatte	VAFIN	*)	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	52	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	53	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	54	versprechen	VVINF	*))	versprechen	-	-	-	613)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	55	Das	PDS	(AP(AVP(S*	der	sg	neut	-	(626)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	56	ging	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	57	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	58	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	59	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	60	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	61	lang	ADJD	*)	lang	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	62	es	PPER	*	es	sg	neut	-	(626)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	63	ging	VVFIN	*)	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	64	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Allein	ADV	(S*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Es	PPER	*	es	sg	neut	-	(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kam	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zum	APPRART	(PP*	zu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Sterben	NN	*))	sterben	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	der	ART	(NP*	der	sg	masc	-	(624
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gute	ADJA	*	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Vater	NN	*	vater	sg	masc	-	624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Kömmt	NE	*	kömmt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Verlegenheit	NN	*))	verlegenheit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(628)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schmerzt	VVFIN	*	schmerzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zwei	CARD	(AP*	zwei	-	-	-	(1054)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	seinen	PPOSAT	*	sein	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Söhnen	NN	*	söhnen	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	die	PRELS	(S*	der	pl	fem	-	(627)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sich	PRF	*	sich	pl	-	-	(627)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sein	PPOSAT	*	sein	sg	neut	-	(629
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Wort	NN	*)	wort	sg	neut	-	629)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Verlassen	NN	*	verlassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	so	ADV	(VP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	kränken	VVINF	*))))))	kränken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	tun	VVINF	*	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	*	er	sg	masc	-	(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sendet	VVFIN	*	senden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	geheim	ADJD	*	geheim	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	einem	ART	*	ein	sg	masc	-	(630
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Künstler	NN	*	künstler	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	630)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	dem	PRELS	*	der	sg	masc	-	(630)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	er	PPER	*	er	sg	masc	-	(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nach	APPR	*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	dem	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Muster	NN	*	muster	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	seines	PPOSAT	*	sein	sg	neut	-	(613|(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Ringes	NN	*	ring	sg	neut	-	613)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Zwei	CARD	*	zwei	-	-	-	(631
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	andere	PIS	*	anderer	pl	*	-	631)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	bestellt	VVFIN	*	bestellen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	weder	KON	*	weder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Kosten	NN	*	kosten	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Noch	KON	*	noch	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Mühe	NN	*	mühe	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	sparen	VVINF	*	sparen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	heißt	VVFIN	*	heißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	sie	PPER	*	sie	sg	fem	-	(632|(631)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	jenem	PDAT	*	jener	sg	masc	-	(613)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	gleich	ADV	*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	,	$,	*	--	-	-	-	632)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	Vollkommen	NN	*	vollkommen	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	gleich	ADV	*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	machen	VVINF	*	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(632)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gelingt	VVFIN	*	gelingen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Dem	ART	(NP*	der	sg	neut	-	(630
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Künstler	NN	*))	künstler	*	*	-	630)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Da	KOUS	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(630)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	masc	-	(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	*	der	sg	fem	-	(633
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ringe	NN	*	ring	sg	fem	-	633)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bringt	VVFIN	*	bringen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Kann	NE	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	*	der	sg	masc	-	(624
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Vater	NN	*	vater	sg	masc	-	624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	seinen	PPOSAT	*	sein	sg	masc	-	(613|(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Musterring	NN	*	musterring	sg	masc	-	613)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	unterscheiden	VVINF	*	unterscheiden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Froh	ADJD	(VROOT(PSEUDO(S(CAP*	froh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	freudig	ADJD	*)	freudig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ruft	VVFIN	*	rufen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Er	PPER	(NP*	er	sg	masc	-	(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	seine	PPOSAT	(NP*	sein	sg	fem	-	(625|(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Söhne	NN	*))	sohn	sg	fem	-	625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	jeden	PIAT	(S(NP*	jeder	sg	masc	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ins	APPRART	(AP(PP*)	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	besondre	ADJA	*))	besondre	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Gibt	NE	(NP*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	jedem	PIAT	(NP*	jeder	sg	masc	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ins	APPRART	(AP(PP*)	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	besondre	ADJA	*)	besondre	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	seinen	PPOSAT	(NP*	sein	sg	masc	-	(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Segen	NN	*)))	segen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	–	$.	*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Und	KON	(CS(CO(NP*	und	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	seinen	PPOSAT	*	sein	sg	masc	-	(633|(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Ring	NN	*)	ring	sg	masc	-	633)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	–	NN	*)	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	stirbt	VVFIN	*)))	sterben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	(NP*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hörst	ADV	*	hörst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Sultan	NN	*)	sultan	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(S*	der	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sich	PRF	*	sich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	betroffen	ADJD	*	betreffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(VP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*)	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gewandt	VVPP	*))	wenden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hör	VVFIN	*	hör	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	höre	VVFIN	*))	hören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Komm	NN	(NP*	komm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	deinem	PPOSAT	*	dein	sg	masc	-	(601|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Märchen	NN	*))	märchen	sg	masc	-	601)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nur	ADV	(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bald	ADV	*)	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ende	NN	*)	ende	sg	neut	-	(634)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wirds	NN	*	wird	-	-	-	(634)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ende	NN	*))	ende	sg	neut	-	(634)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	folgt	VVFIN	*)	folgen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	versteht	VVFIN	*	verstehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	*	sich	sg	-	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ja	ADV	(PP*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	selbst	ADV	*))	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kaum	ADV	*	kaum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	*	der	sg	masc	-	(624
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Vater	NN	*	vater	sg	masc	-	624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	tot	ADJD	*	tot	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ein	ART	*	ein	sg	masc	-	(625
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	jeder	PIAT	*	jeder	sg	masc	-	625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Mit	APPR	*	mit	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	seinem	PPOSAT	*	sein	sg	masc	-	(633|(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Ring	NN	*	ring	sg	masc	-	633)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	jeder	PIS	*	jeder	sg	masc	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	der	ART	*	der	sg	masc	-	(623
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Fürst	NN	*	fürst	sg	masc	-	623)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Des	NE	*	der	sg	neut	-	(618
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Hauses	NE	*	haus	sg	neut	-	618)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Man	PIS	(VROOT(PSEUDO(S*	man	sg	*	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	untersucht	VVFIN	*	untersuchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	man	PIS	(S*	man	sg	*	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zankt	VVFIN	*	zanken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Man	PIS	*	man	sg	*	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	klagt	VVFIN	*))	klagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Umsonst	ADV	*	umsonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	sg	masc	-	(613
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	rechte	ADJA	*	rechter	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ring	NN	*	ring	sg	masc	-	613)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Erweislich	ADJD	*	erweislich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Nach	APPR	*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	einer	ART	*	ein	sg	fem	-	(635
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Pause	NN	*	pause	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	welcher	PRELS	*	welcher	sg	fem	-	(635)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	des	ART	*	der	sg	neut	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Sultans	NN	*	sultan	sg	neut	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Antwort	NN	*	antwort	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	erwartet	VVPP	*	erwarten	-	-	-	635)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Fast	ADV	*	fast	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	unerweislich	ADJD	*	unerweislich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Uns	NN	*	uns	pl	*	-	(459)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	itzt	VVFIN	*	itzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	–	NN	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	der	ART	*	der	sg	fem	-	(531
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	rechte	ADJA	*	rechter	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	Glaube	NN	*	glaube	sg	*	-	531)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nach	APPR	(VROOT(PSEUDO(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	einer	ART	*	ein	sg	fem	-	(635
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Pause	NN	*	pause	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	(S(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	welcher	PRELS	*)	welcher	sg	fem	-	(635)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	des	ART	(NP*	der	sg	neut	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Sultans	NN	*	sultan	sg	neut	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Antwort	NN	*)	antwort	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	erwartet	VVPP	*))	erwarten	-	-	-	635)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(601)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Die	ART	(VP(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Antwort	NN	*)	antwort	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	meine	PPOSAT	*	mein	sg	fem	-	(598|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Frage	NN	*)))	frage	sg	fem	-	598)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Soll	VMFIN	(VROOT(PSEUDO(S*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bloß	ADV	(VP*	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	entschuldigen	VVINF	*	entschuldigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	(NP*	der	sg	fem	-	(531
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ringe	NN	*	ring	sg	fem	-	531)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Mir	NE	*)	sich	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	getrau	ADJD	*	getrau	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	zu	PTKZU	(VP(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	unterscheiden	VVINF	*)	unterscheiden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	die	PRELS	(S*	der	sg	fem	-	(531)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Der	ART	(VP(NP*	der	sg	masc	-	(445
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Vater	NN	*)	vater	sg	masc	-	445)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	der	ART	*	der	sg	fem	-	(636
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Absicht	NN	*)	absicht	sg	fem	-	636)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	machen	VVINF	*)	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	ließ	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Damit	KOUS	(S*	damit	sg	-	-	(636
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	sie	PPER	(VP*	sie	sg	fem	-	(531)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	unterscheiden	VVINF	*))	unterscheiden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	wären	VAFIN	*))))))	sein	pl	-	-	636)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(NP*	der	sg	fem	-	(531
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ringe	NN	*)	ring	sg	fem	-	531)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Spiele	NN	(NP*	spiel	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	(PP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*))	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dächte	VVFIN	*	dächen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	(NP*	der	pl	fem	-	(591
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Religionen	NN	*	religion	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	die	PRELS	(S*	der	sg	fem	-	(591)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	dir	PPER	*	dir	sg	*	-	591)|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Genannt	NN	*))	nennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	doch	ADV	(VP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	unterscheiden	VVINF	*))	unterscheiden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	wären	VAFIN	*))	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bis	APPR	(VROOT(PSEUDO(PP*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	*	der	sg	fem	-	(437
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Kleidung	NN	*)	kleidung	sg	fem	-	437)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bis	APPR	(PP*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Speis	NN	(CNP*	speise	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Trank	NN	*))	trank	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Seiten	NN	*	seite	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihrer	PPOSAT	(NP*	ihr	sg	fem	-	(595|(591)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Gründe	NN	*))	grund	sg	-	-	595)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gründen	VVFIN	*	gründen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	alle	PIS	*)	alle	pl	*	-	(591)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sich	PRF	(S*	sich	pl	-	-	(591)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Geschichte	NN	*))	geschichte	sg	fem	-	(637)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geschrieben	VVPP	(VROOT(PSEUDO(S(CVP*	geschrieben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	überliefert	VVPP	*))	überliefern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Geschichte	NN	(S*	geschichte	sg	fem	-	(637)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	auf	APPR	(VP(VP(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Treu	NN	(CNP*	treu	-	-	-	(334)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Glauben	NN	*))	glaube	pl	fem	-	(531)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	angenommen	VVPP	*)	annehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	werden	VAINF	*))	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wessen	VVFIN	*	wessen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Treu	NN	*	treu	-	-	-	(638)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Glauben	NN	(S*	glaube	sg	masc	-	(531)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zieht	VVFIN	*	ziehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	man	PIS	*	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Am	APPRART	(CPP(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wenigsten	PIS	*)	wenig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Zweifel	NN	*)))	zweifel	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	*	der	sg	fem	-	(639
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Seinen	PPOSS	*	sein	sg	fem	-	639)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	deren	PRELAT	(NP*	der	*	*	-	(639
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Blut	NN	*)	blut	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wir	PPER	*	wir	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sind	VAFIN	*)	sein	pl	-	-	639)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	deren	PDS	(NP*	der	pl	masc	-	(639
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	die	PRELS	(S*	der	sg	fem	-	639)|(639)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Kindheit	NN	*)	kindheit	sg	-	-	(640)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	an	APPR	(NP(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	uns	PPER	*)	uns	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Proben	NN	*))))	probe	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ihrer	PPOSAT	(NP*	ihr	sg	fem	-	(639)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Liebe	NN	*	liebe	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Gegeben	NN	*)	gegeben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	die	ART	(VROOT(PSEUDO(S*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	uns	PPER	*	uns	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nie	ADV	*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	getäuscht	VVPP	*	täuschen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wo	PWAV	(VP*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Getäuscht	NN	*	getäuscht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	werden	VAINF	*))	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	uns	PPER	*	uns	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	heilsamer	ADJD	*	heilsam	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	war	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	*	wie	-	-	-	(641
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	meinen	PPOSAT	*	mein	pl	masc	-	(642|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Vätern	NN	*	Vater	pl	masc	-	642)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	weniger	ADV	*	weniger	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Als	KOUS	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	*	der	sg	masc	-	(643
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	deinen	PPOSAT	*	dein	sg	masc	-	643)|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	glauben	VVINF	*	glauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Oder	KON	(VROOT(PSEUDO(VP(AP*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	umgekehrt	ADJD	*))	umgekehrt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kann	VMFIN	(S*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(VP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*)	dir	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	verlangen	VVINF	*))	verlangen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	deine	PPOSAT	(VP(NP*	dein	pl	fem	-	(1013)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Vorfahren	NN	*)	vorfahr	pl	fem	-	641)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	widersprechen	VVINF	*)))	widersprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Oder	KON	(VROOT(PSEUDO(VP(AP*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	umgekehrt	ADJD	*))	umgekehrt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(641
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nämliche	ADJA	*)	nämlich	sg	neut	-	641)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gilt	VVFIN	*	gelten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	*	der	pl	*	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Christen	NN	*))	christ	pl	*	(MISC*)	99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	(	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dem	ART	*	der	sg	neut	-	(164
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Lebendigen	NN	*	lebendige	sg	neut	-	164)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mann	NN	*)	mann	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Recht	NN	*)	recht	sg	neut	-	(37)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	verstummen	VVINF	*	verstummen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	)	$(	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	NN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	unsre	ADJA	*	unsr	sg	fem	-	(633|(459)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ring	NN	*	ring	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	633)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Uns	NE	*	uns	-	-	-	(459)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	kommen	VVINF	*	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S(VP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gesagt	VVPP	*)	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	(NP*	der	sg	fem	-	(625
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Söhne	NN	*	sohn	sg	fem	-	625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Verklagten	NN	*)	verklagter	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	*	sich	sg	-	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	jeder	PIS	*	jeder	sg	fem	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	schwur	VVFIN	*	schwur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	dem	ART	(NP*	der	sg	masc	-	(644
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Richter	NN	*)	richter	sg	masc	-	644)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Unmittelbar	ADJD	(VP(AP*	unmittelbar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	seines	PPOSAT	*	sein	sg	masc	-	(624|(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Vaters	NN	*	vater	sg	masc	-	624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Hand	NN	(NP*	hand	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Den	NE	(MPN*	der	*	*	-	(633
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Ring	NE	*))))	ring	sg	*	-	633)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	haben	VAINF	*))))	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	NN	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wahr	PTKVZ	*)	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nachdem	KOUS	(S*	nachdem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Er	PPER	(NP*	er	sg	masc	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*)	ihm	sg	masc	-	(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	lange	ADV	*	lange	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	das	ART	*	der	sg	neut	-	(629
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Versprechen	NN	*)	versprechen	sg	neut	-	629)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	schon	ADV	(NP*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Gehabt	NN	*)	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	des	ART	(NP*	der	sg	masc	-	(622|(613
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Ringes	ADJA	*	ring	sg	masc	-	613)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Vorrecht	NN	*))	vorrecht	-	-	-	622)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	einmal	ADV	(S*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Genießen	NN	*))	genießen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	minder	ADV	(AP*	minder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wahr	ADJD	*))	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	*	der	sg	masc	-	(624
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Vater	NN	*	vater	sg	masc	-	624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Beteu	NN	*	beteu	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	rte	VVFIN	*	ren	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	jeder	PIS	*	jeder	sg	masc	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	könne	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	gegen	APPR	*	gegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ihn	PPER	*	ihn	sg	masc	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	falsch	ADJD	*	falsch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	gewesen	VAPP	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	eh	XY	*	eh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	er	PPER	*	er	sg	masc	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	dieses	PDAT	*	dieser	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Von	APPR	*	von	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	ihm	PPER	*	ihm	sg	masc	-	(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	einem	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	solchen	PIAT	*	solcher	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	lieben	ADJA	*	lieb	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Vater	NN	*	vater	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Argwohnen	NN	*	argwohnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	laß	VVFIN	*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	eh	XY	*	eh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	müß	VMFIN	*	müß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	er	PPER	*	er	sg	masc	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	seine	PPOSAT	*	sein	pl	neut	-	(627|(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	Brüder	NN	*	Bruder	pl	neut	-	627)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	er	PPER	*	er	sg	masc	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	ihnen	PPER	*	ihnen	pl	masc	-	(627)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	50	das	ART	*	der	sg	neut	-	(156
Nathan.xml.rkpt.0.CoNLL2012.conll	000	51	Beste	NN	*	gut	sg	neut	-	156)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	52	Bereit	ADJD	*	bereit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	53	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	54	glauben	VVINF	*	glauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	55	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	56	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	57	des	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	58	falschen	ADJA	*	falsch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	59	Spiels	NN	*	spiel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	60	Bezeihen	NN	*	bezeihen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	61	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	62	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	63	er	PPER	*	er	sg	masc	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	64	wolle	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	65	die	ART	*	der	pl	masc	-	(627
Nathan.xml.rkpt.0.CoNLL2012.conll	000	66	Verräter	NN	*	verräter	pl	masc	-	627)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	67	Schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	68	auszufinden	VVIZU	*	ausfinden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	69	wissen	VVINF	*	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	70	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	71	sich	PRF	*	sich	sg	-	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	72	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	73	rächen	VVINF	*	rächen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	74	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(NP*	der	sg	masc	-	(644
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Richter	NN	*))	richter	sg	masc	-	644)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mich	PPER	(S*	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	verlangt	VVFIN	*	verlangen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	PTKZU	(VP(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hören	VVINF	*)	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	den	ART	(VP(NP*	der	sg	masc	-	(644
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Richter	NN	*)	richter	sg	masc	-	644)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sagen	VVINF	*))))	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	lässest	VVFIN	*	lässest	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sprich	NE	(VROOT(PSEUDO(MPN*	sprich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(644
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Richter	NN	*	richter	sg	masc	-	644)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sprach	VVFIN	*	sprechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihr	PPER	*	ihr	sg	fem	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(1009)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	den	ART	*	der	sg	masc	-	(624
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Vater	NN	*	vater	sg	masc	-	624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	bald	ADV	*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zur	APPRART	*	zu	sg	fem	-	(645
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Stelle	NN	*	stelle	sg	fem	-	645)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	schafft	VVFIN	*	schaffen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	weis	ADJD	*	weis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	ich	PPER	*	ich	sg	*	-	(1009)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	euch	PRF	*	euch	pl	*	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	meinem	PPOSAT	*	mein	sg	masc	-	(645|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Stuhle	NN	*	stuhle	sg	masc	-	645)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denkt	VVFIN	(VROOT(PSEUDO(S*	denken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihr	PPER	(NP*	ihr	sg	fem	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1009)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Rätsel	NN	*	rätsel	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Zu	NN	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	lösen	VVFIN	*))	lösen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	bin	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Oder	KON	(VROOT(PSEUDO(S*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	harret	VVFIN	*	harret	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPER	*	ihr	pl	*	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bis	KOUS	(S*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(NP*	der	sg	masc	-	(613
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	rechte	ADJA	*	rechter	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ring	NN	*)	ring	sg	masc	-	613)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	den	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Mund	NN	*)	mund	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	eröffne	VVFIN	*))	eröffnen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	halt	ADV	*	halt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1009)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	höre	VVFIN	*	hören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	(NP*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(S(NP*	der	sg	masc	-	(613
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	rechte	ADJA	*	rechter	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ring	NN	*)	ring	sg	masc	-	613)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Besitzt	VVFIN	*	besitzt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	die	ART	(VP(NP*	der	sg	fem	-	(616
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Wunderkraft	NN	*)	wunderkraft	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	beliebt	ADJD	*	beliebt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	machen	VVINF	*))	machen	-	-	-	616)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Vor	APPR	(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Gott	NN	(CNP*	gott	sg	masc	-	(445)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Menschen	NN	*))))	mensch	sg	masc	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	angenehm	ADJD	*)	angenehm	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	*	der	sg	neut	-	(616)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Entscheiden	NN	*	entscheiden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	*	der	pl	fem	-	(631
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	falschen	ADJA	*	falsch	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ringe	NN	*	ring	pl	masc	-	631)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	werden	VAFIN	*	werden	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	das	PDS	*	der	sg	neut	-	(616)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	können	VMFIN	*	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wen	PWS	*	wen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	lieben	VVFIN	*	lieben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zwei	CARD	*	zwei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	euch	PPER	*	euch	pl	*	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	am	PTKA	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	meisten	PIS	*	meister	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Macht	NN	(NP*	macht	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sagt	VVFIN	(S*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	an	PTKVZ	*))	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schweigt	VVFIN	*)	schweigen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	(633
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ringe	NN	*)	ring	sg	fem	-	633)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wirken	VVFIN	*	wirken	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zurück	PTKVZ	*)	zurück	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nach	APPR	(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	außen	ADV	*))	außen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Jeder	PIS	(VROOT(PSEUDO(S*	jeder	sg	masc	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	liebt	VVFIN	*	lieben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	(VP*	sich	sg	-	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	selber	ADV	(AP*	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Am	NN	*)	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	meisten	VVINF	*))	meister	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	O	XY	*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	seid	VAFIN	(S*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihr	PPER	*	ihr	sg	fem	-	(625
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	alle	PIAT	(NP*	aller	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	drei	CARD	*	drei	-	-	-	625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Betrogene	NN	*))	betrogener	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Betrieger	NN	*	betrieger	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Eure	PPOSAT	(VROOT(PSEUDO(S(NP*	euer	pl	masc	-	(633|(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ringe	NN	*)	ring	pl	masc	-	633)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	alle	PIAT	(AP(NM*	aller	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	drei	CARD	*)	drei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	echt	ADJD	*))	echt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(VP(S(NP*	der	sg	masc	-	(613
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	echte	ADJA	*	echt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ring	NN	*)	ring	sg	*	-	613)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vermutlich	ADV	*	vermutlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ging	VVFIN	*)	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	verloren	VVPP	*	verlieren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Den	ART	(VROOT(PSEUDO(VP(NP*	der	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Verlust	NN	*)	verlust	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bergen	VVINF	*)	bergen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	(VP(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ersetzen	VVINF	*)	ersetzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ließ	VVFIN	(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	(NP*	der	sg	masc	-	(624
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Vater	NN	*	vater	sg	masc	-	624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Die	ART	(NP*	der	pl	*	-	(633
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	drei	CARD	*))	drei	-	-	-	633)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	für	APPR	(VP(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	einen	PIS	*)	ein	sg	masc	-	(613)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	machen	VVINF	*))))	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Herrlich	ADJD	(VROOT(PSEUDO*	herrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	herrlich	ADJD	(VROOT(PSEUDO*	herrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	also	ADV	*	also	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	fuhr	VVFIN	(S(S*	fahren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(NP*	der	pl	masc	-	(644
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Richter	NN	*)	richter	pl	masc	-	644)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	fort	PTKVZ	*	fort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ihr	PPOSAT	(NP*	ihr	sg	fem	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Nicht	NN	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	meinen	VVFIN	*	meinen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Rat	NN	*	Rat	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	statt	APPR	(PP*	statt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	meines	PPOSAT	*	mein	sg	neut	-	(1009)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Spruches	NN	*)))	spruch	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	wollt	VMFIN	*	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Geht	NN	(NP*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	nur	ADV	*)))	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mein	PPOSAT	(S(NP*	mein	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Rat	NN	*)	Rat	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	(S*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihr	PPER	(S*	ihr	sg	fem	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nehmt	VVFIN	*	nehmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Die	ART	(NP*	der	sg	fem	-	(646
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Sache	NN	*)	sache	sg	fem	-	646)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	völlig	ADJD	*)))	völlig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wie	KOKOM	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sie	PPER	*	sie	sg	fem	-	(646)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	liegt	VVFIN	*)	liegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hat	VAFIN	(VROOT(PSEUDO(S*	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*)	euch	pl	*	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	jeder	PIS	*	jeder	sg	fem	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	seinen	PPOSAT	(NP*	sein	sg	masc	-	(633|(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ring	NN	*)	ring	sg	masc	-	633)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	seinem	PPOSAT	*	sein	sg	masc	-	(624|(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Vater	NN	*)	vater	sg	masc	-	624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	So	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	glaube	VVFIN	*	glauben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	jeder	PIS	*	jeder	sg	masc	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sicher	ADJD	(VP*	sicher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	seinen	PPOSAT	(NP*	sein	sg	masc	-	(633|(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Ring	NN	*	ring	-	-	-	633)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Den	NE	*)	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	echten	VVINF	*)))	echt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Möglich	ADJD	*	möglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(NP*	der	sg	masc	-	(624
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Vater	NN	*)	vater	sg	masc	-	624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Die	ART	(NP*	der	sg	fem	-	(622
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Tyrannei	NN	*	tyrannei	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	des	ART	(NP*	der	sg	masc	-	(613
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Einen	NN	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Rings	NE	*))	ring	sg	masc	-	622)|613)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	länger	ADJD	(VP*	lang	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	In	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	seinem	PPOSAT	*	sein	sg	neut	-	(618|(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Hause	NN	*)	haus	sg	neut	-	618)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	dulden	VVINF	*)	dulden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	wollen	VMFIN	*)	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gewiß	ADV	*	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Daß	KOUS	(CS(VP(AP(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	*	er	sg	masc	-	(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	euch	PPER	*	euch	pl	*	-	(625
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	alle	PIS	*)	aller	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	drei	CARD	*)	drei	-	-	-	625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	geliebt	VVPP	*)	lieben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	gleich	ADV	(S*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Geliebt	NN	*)))	geliebt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	indem	PIS	(S*	indem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	er	PPER	*	er	sg	masc	-	(624)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	zwei	CARD	(VP*	zwei	-	-	-	(627)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	drücken	VVINF	*)	drücken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	mögen	VMFIN	*	mögen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Um	KOUI	(VP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	einen	PIS	*	ein	sg	masc	-	(621)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	begünstigen	VVINF	*)))	begünstigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wohlan	NN	*	wohlan	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eifre	VVFIN	*	eifren	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	jeder	PIS	(NP*	jeder	sg	masc	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	seiner	PPOSAT	(NP*	sein	pl	fem	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	unbestochnen	ADJA	*	unbestochnen	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Von	APPR	(AP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Vorurteilen	NN	*)	vorurteil	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	freien	ADJA	*)	frei	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Liebe	NN	*))	liebe	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nach	PTKVZ	*)	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	strebe	VVFIN	*	streben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	*	von	-	-	-	(625
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	euch	PPER	*	euch	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	jeder	PIS	*	jeder	sg	masc	-	625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	um	APPR	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Wette	NN	*	wette	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Die	ART	*	der	sg	fem	-	(616
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Kraft	NN	*	kraft	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	des	ART	*	der	sg	masc	-	(647
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Steins	NE	*	stein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	seinem	PPOSAT	*	sein	sg	masc	-	(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Ring	NN	*	ring	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	616)|647)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Tag	NN	*	tag	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	legen	VVINF	*	legen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	komme	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dieser	PDAT	*	dieser	sg	masc	-	(616
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Kraft	NN	*	kraft	sg	masc	-	616)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sanftmut	NN	*	sanftmut	sg	-	-	(40)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	herzlicher	ADJA	*	herzlich	sg	fem	-	(40
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Verträglichkeit	NN	*	verträglichkeit	sg	fem	-	40)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Wohltun	NN	*	wohltun	sg	neut	-	(156)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	innigster	ADJA	*	innig	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Ergebenheit	NN	*	ergebenheit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Gott	NN	*	gott	sg	masc	(PER*)	(445)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Hülf	NE	*	hülf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	*	sich	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	*	der	sg	masc	-	(616|(647
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Steine	ADJA	*	stein	sg	masc	-	647)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Kräfte	NN	*	kraft	pl	fem	-	616)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	euern	PPOSAT	*	euern	pl	neut	-	(648|(625)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Kindes-Kindeskindern	NN	*	kindes-kindeskind	pl	neut	-	648)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	äußern	VVINF	*	äußern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	lad	ADJD	*	lad	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	über	ADV	*	über	-	-	-	(649
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	tausend	CARD	*	tausend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	tausend	CARD	*	tausend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Jahre	NN	*	jahr	pl	neut	-	649)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Sie	PPER	*	sie	pl	fem	-	(648)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	wiederum	ADV	*	wiederum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	vor	APPR	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	diesen	PDAT	*	dieser	pl	fem	-	(645
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Stuhl	NN	*	stuhl	pl	fem	-	645)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ein	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	weisrer	ADJA	*	weisr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Mann	NN	*)	mann	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auf	APPR	(VP(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	diesem	PDAT	*	dieser	sg	masc	-	(645
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Stuhle	NN	*)	stuhle	sg	masc	-	645)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sitzen	VVINF	*)	sitzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Als	KOUS	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(1009)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	(CNP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	sprechen	VVINF	*	sprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*)))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sagte	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(NP*	der	sg	masc	-	(644)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bescheidne	ADJA	*	bescheidne	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Richter	NN	*)	richter	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gott	NN	(VROOT(PSEUDO*	gott	-	-	-	(209)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gott	NN	(VROOT(PSEUDO*	gott	-	-	-	(209)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO(NP*	saladin	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	*	du	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dich	PRF	*	dich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	fühlest	VVFIN	*	fühlest	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dieser	PDAT	(NP*	dieser	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	weisere	ADJA	*	weis	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Versprochne	NN	*)	versprochn	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Mann	NN	(VP*	mann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sein	VAINF	*))))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(S(CS(S(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*))	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zustürzt	VVFIN	*)	stürzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	seine	PPOSAT	(S(NP*	sein	sg	fem	-	(450|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Hand	NN	*)	hand	sg	fem	-	450)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ergreift	VVFIN	*))	ergreifen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	die	PRELS	(S*	der	sg	fem	-	(450)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	bis	APPR	(PP*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Ende	NN	*)	ende	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	wieder	ADV	(VP*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	fahren	VVINF	*)	fahren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	läßt	VVFIN	*))	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Staub	VVFIN	*)	staub	sg	-	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(7|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nichts	PIS	*	nichts	*	neut	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(S*)	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*	gott	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dir	PPER	(NP*	dir	sg	*	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sultan	NN	*))	sultan	-	-	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(DL*	nathan	-	-	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	lieber	ADV	(S*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*))	nathan	-	-	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	(S(NP*	der	pl	fem	-	(649
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	tausend	CARD	*	tausend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	tausend	CARD	*	tausend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Jahre	NN	*	jahr	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	deines	PPOSAT	(NP*	dein	sg	masc	-	(644|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Richters	NN	*))	richter	sg	masc	-	649)|644)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	noch	ADV	(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	um	PTKVZ	*)	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sein	PPOSAT	*	sein	sg	neut	-	(645|(644)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Richterstuhl	NN	*	richterstuhl	sg	neut	-	645)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	meine	PPOSAT	*	mein	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	(S*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mein	PPOSAT	(NP*	mein	sg	masc	-	(650|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Freund	NN	*))	freund	sg	masc	-	650)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiter	ADV	*	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Saladin	NE	*	saladin	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nichts	PIS	(VP*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Zu	NN	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sagen	VVINF	*))	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gar	ADV	(VROOT(PSEUDO(NP*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	warum	PWAV	*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	(VP(NP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gelegenheit	NN	*)	gelegenheit	sg	fem	-	(651)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gewünscht	VVPP	*	wünschen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Dir	PPER	(VP*	dir	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	eine	ART	(NP*	ein	sg	fem	-	(652
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Bitte	NN	*)	bitte	sg	fem	-	652)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	vorzutragen	VVIZU	*)))	vortragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Brauchts	APPR	(VROOT(PSEUDO(PP*	braucht	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gelegenheit	NN	*	gelegenheit	sg	fem	-	(651)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	einer	ART	*	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bitte	NN	*))	bitte	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Rede	NN	*	rede	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	komm	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	einer	ART	*	ein	sg	fem	-	(20
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	weiten	ADJA	*	weit	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Reis	NN	*	reis	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	welcher	PRELS	*	welcher	sg	fem	-	20)|(20)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Schulden	NN	*	schuld	pl	fem	-	(27)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	eingetrieben	VVPP	*	eintreiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Fast	NN	*	fast	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hab	VAFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Des	ART	*	der	sg	-	-	(35
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	baren	ADJA	*	bar	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gelds	NN	*	geld	-	-	-	35)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKA	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	viel	PIS	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	*	der	sg	fem	-	(261
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Zeit	NN	*	zeit	sg	fem	-	261)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	beginnt	VVFIN	*	beginnen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bedenklich	ADJD	*	bedenklich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wiederum	ADV	*	wiederum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	werden	VAINF	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	recht	ADV	*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	sicher	ADJD	*	sicher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	damit	PROAV	*	damit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	hin	PTKVZ	*	hin	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Da	ADV	(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dacht	VVFIN	*	dacht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ob	KOUS	(S*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	NN	(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	weil	KOUS	*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Ein	ART	(NP*	ein	sg	masc	-	(264
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	naher	ADJA	*	nah	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Krieg	NN	*	krieg	sg	masc	-	264)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	des	ART	(NP*	der	sg	masc	-	(346
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Geldes	NN	*)))))	geld	sg	masc	-	346)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	immer	ADV	(S(NP(AP*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	mehr	PIAT	*)	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Erfodert	NN	*)	erfodert	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	–	$.	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	etwas	PIS	(VP*	etwas	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	brauchen	VVINF	*)	brauchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	könntest	VMFIN	*)	könntest	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ihm	PPER	(VROOT(PSEUDO(S*	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	steif	VVFIN	*	steif	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(AP(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	*	der	pl	neut	-	(161
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Augen	NN	*)	auge	pl	neut	-	161)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sehend	ADJD	*))	sehend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(MPN*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(VP(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	fragen	VVINF	*	fragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ob	KOUS	(S*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Al-Hafi	NE	*	al-hafi	sg	*	(MISC*)	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Bei	APPR	(AP(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	dir	PPER	*))))	dir	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gewesen	VAPP	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	will	VMFIN	(S*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	untersuchen	VVINF	(VP*	untersuchen	-	-	-	(653)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Ob	KOUS	(S*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	dich	PPER	*	dich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	ein	ART	*	ein	sg	masc	-	(226
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Argwohn	NN	*)	argwohn	sg	masc	-	226)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	treibt	VVFIN	*	treiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	mir	PPER	(VP*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	dieses	PDAT	(NP*	dieser	sg	neut	-	(652)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Erbieten	NN	*	erbiet	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	freier	ADJA	(NP*	frei	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Dings	NN	*))	ding	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	tun	VVINF	*)))))	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	masc	-	(226
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Argwohn	NN	*)	argwohn	sg	masc	-	226)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	(AP*	ihn	sg	masc	-	(226)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wert	ADJD	*))	wert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Verzeih	NN	*	verzeih	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	KON	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PIS	(NP*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hilfts	ADV	*))	hilft	-	-	-	(653)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dir	PPER	*	dir	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gestehen	VVINF	*	gestehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	–	PWAV	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	im	APPRART	*	in	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Begriffe	NN	*	begreifen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	–	XY	*	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	(VP(NP*	der	sg	neut	-	(652
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nämliche	ADJA	*	nämlich	sg	neut	-	652)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	An	NN	*)	an	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	suchen	VVINF	*)))	suchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Allerdings	ADV	(VROOT(PSEUDO(S*)	allerdings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Uns	NN	*	uns	pl	*	-	(459)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	beiden	PIS	*	beide	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	geholfen	VVPP	*	helfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Dir	PPER	*	dir	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	alle	PIS	*	aller	sg	-	-	(1030
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	meine	PPOSAT	(NP*	mein	sg	fem	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Barschaft	NN	*))	barschaft	sg	fem	-	1030)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	(S*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	schicken	VVINF	*)	schicken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Das	PDS	(S*	der	sg	neut	-	(654)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	macht	VVFIN	*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	der	ART	(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	junge	ADJA	*	jung	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Tempelherr	NN	*))	tempelherr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	(S*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kennst	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*)	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hab	VAFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	eine	ART	*	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	große	ADJA	*	groß	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Post	NN	*	post	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Vorher	ADV	*	vorher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	bezahlen	VVINF	*	bezahlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Tempelherr	NN	(VROOT(PSEUDO*	tempelherr	-	-	-	(121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	*	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wirst	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	meine	PPOSAT	*	mein	pl	masc	-	(121|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schlimmsten	ADJA	*	schlimm	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Feinde	NN	*	feind	pl	masc	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	deinem	PPOSAT	*	dein	sg	neut	-	(35|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Geld	NN	*	geld	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	35)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	unterstützen	VVINF	*	unterstützen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wollen	VMINF	*	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	spreche	VVFIN	*	sprechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	einen	PIS	*	ein	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*)))	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dem	ART	*	der	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	du	PPER	(S*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Das	ART	(NP*	der	sg	neut	-	(63
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Leben	NN	*)	leben	sg	neut	-	63)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	spartest	VVFIN	*)	spartesen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	woran	PWAV	*	woran	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	erinnerst	VVPP	*	erinnerst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Du	PPER	*	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hab	XY	*	hab	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	diesen	PDAT	*	dieser	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Jüngling	NN	*	jüngling	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Vergessen	VVPP	*	vergessen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kennst	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weißt	VVFIN	*	weißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	viel	PIS	(NP*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	deiner	PPOSAT	*	dein	sg	fem	-	(458|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Gnade	NN	*))	gnade	sg	fem	-	458)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ihn	PPER	*)	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	durch	APPR	(VP(PP*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ihn	PPER	*)	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	mich	PPER	*)	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	geflossen	VVPP	*)))	fließen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Gefahr	NN	*	gefahr	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	des	ART	*	der	sg	masc	-	(63
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	neu	ADJD	*	neu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	erhaltnen	ADJA	*	erhaltnen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Lebens	NN	*	leben	sg	masc	-	63)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	meine	PPOSAT	*	mein	sg	fem	-	(655|(2|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Tochter	NN	*	tochter	sg	fem	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	aus	APPR	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	dem	ART	*	der	sg	neut	-	(62
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Feu	NN	*	feu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	r	PPER	*	--	-	-	-	62)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	gerettet	VVPP	*	retten	-	-	-	655)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(655)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ha	NE	*	ha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	darnach	PROAV	(VROOT(PSEUDO(S*	darnach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sah	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aus	PTKVZ	*)	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	*	der	sg	neut	-	(655)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	traun	VVFIN	*	traun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mein	PPOSAT	*	mein	sg	masc	-	(131|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bruder	NN	*	bruder	sg	masc	-	131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	getan	VVPP	*	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Dem	PWS	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ähnelt	VVFIN	*	ähneln	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bring	VVFIN	*	bring	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	her	PTKVZ	*)	her	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	meiner	PPOSAT	(NP*	mein	pl	masc	-	(307|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Schwester	NN	*))	schwester	pl	masc	-	307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	diesem	PDAT	*	dieser	sg	masc	-	(131
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihren	PPOSAT	(NP*	ihr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Bruder	NN	*)	bruder	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	den	PRELS	(S*	der	sg	masc	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	pl	masc	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*	nicht	-	-	-	131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Gekannt	NN	(VP(VP(NP*	gekannt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	so	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	viel	PIS	*	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	erzählet	VVPP	(CVP*	erzählet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	sie	PPER	*	sie	sg	fem	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Sein	PPOSAT	(NP*	sein	sg	neut	-	(61|(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Ebenbild	NN	*)	ebenbild	sg	neut	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	auch	ADV	*))	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	muß	VMFIN	*))	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	sehen	VVINF	*)	sehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	lassen	VVINF	*)))	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hol	XY	*	hol	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Einer	ART	(CO(NP*	einer	sg	fem	-	(458
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	guten	ADJA	*	gut	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Tat	NN	*)	tat	sg	fem	-	458)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gebar	NN	*))	gebar	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sie	PPER	*	sie	sg	fem	-	(458)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	schon	ADV	*)	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	bloße	ADJA	(NP*	bloß	sg	fem	-	(463
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Leidenschaft	NN	*)	leidenschaft	sg	fem	-	463)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Doch	KON	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	so	ADV	(VP*	so	-	-	-	(156
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	viel	PIAT	(NP*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	andre	ADJA	*	andre	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	gute	ADJA	*	gut	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Taten	NN	*)	tat	pl	fem	-	156)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	fließen	VVINF	*))	fließen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hol	VAFIN	*	hol	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*))	nathan	-	-	-	(1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	indem	KOUS	(VROOT(PSEUDO(S*	indem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Saladins	NE	(VP(NP*	saladin	sg	*	-	(656|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Hand	NN	*)	hand	sg	fem	-	656)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	fahren	VVINF	*)	fahren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	läßt	VVFIN	*)	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Augenblicks	NN	(VROOT(PSEUDO*	augenblick	-	-	-	(451)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dem	ART	*	der	sg	neut	-	(652
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	andern	ADJA	*	anderer	sg	neut	-	652)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bleibt	NN	*)	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	auch	ADV	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ab	NN	(VROOT(PSEUDO*	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	meine	PPOSAT	(NP*	mein	sg	-	-	(307|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Schwester	NN	*)	schwester	sg	neut	-	307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nicht	PTKNEG	(VP(VP*	nicht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	horchen	VVINF	*)	horchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	lassen	VVINF	*))	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zu	APPR	(NP(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPER	*))	ihr	sg	fem	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	zu	APPR	(VROOT(PSEUDO(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihr	PPER	*)	ihr	-	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	alles	PIS	*	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	das	PDS	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihr	PPOSAT	*	ihr	sg	neut	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	erzählen	VVINF	*	erzählen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ab	APPR	(VROOT(PSEUDO(PP*	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	sg	fem	-	(503
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	andern	ADJA	*	anderer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Seite	NN	*)	seite	sg	fem	-	503)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	(223
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Szene	NN	*	szene	sg	fem	-	223)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	unter	APPR	(CPP(PP*	unter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	*	der	pl	*	-	(76
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Palmen	NN	*)	palme	pl	*	-	76)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	der	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Nähe	NN	*	nähe	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	des	ART	(NP*	der	sg	masc	-	(227
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Klosters	NN	*))))	kloster	sg	masc	-	227)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wo	PWAV	(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	der	ART	(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Tempelherr	NN	*)	tempelherr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Nathans	NE	*	nathan	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	wartet	VVFIN	*))	warten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DER	NE	(VROOT(PSEUDO(MPN*	der	-	-	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	TEMPELHERR	NE	*)))	tempelherr	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	geht	VVFIN	(VROOT(PSEUDO(S*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(PP*	mit	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sich	PRF	*	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kämpfend	ADJD	*	kämpfend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	auf	PTKVZ	(CAVP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ab	PTKVZ	*)	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	bis	KON	*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	losbricht	VVFIN	*)	losbrechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hier	ADV	(S*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hält	VVFIN	*	halten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	(NP*	der	sg	neut	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Opfertier	NN	*))	opfertier	sg	neut	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ermüdet	VVFIN	(S*	ermüden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	still	PTKVZ	*)	still	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(S(ISU*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gut	ADJD	*))	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CS(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mag	VMFIN	*	mögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mag	VMFIN	(S*	mögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	näher	ADJD	(VP*	nah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wissen	VVINF	*	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	mir	PPER	*)	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	vorgeht	VVFIN	*))))	vorgehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	mag	VMFIN	(S*	mögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	voraus	ADV	(VP*	voraus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	wittern	VVINF	*	wittern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Was	PWS	(S*	was	sg	neut	-	(464
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	vorgehn	VVPP	*	vorgehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	wird	VAFIN	*))))	werden	sg	-	-	464)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Genug	NN	(NP*	genug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	umsonst	ADV	*))	umsonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Geflohn	NN	*	geflohn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	umsonst	ADV	(VROOT(PSEUDO*	umsonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	weiter	ADV	*	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	konnt	ADJD	*	konnen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	fem	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	fliehn	CARD	*	fliehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	komm	VVIMP	*	komm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	kommen	VVINF	*	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihm	PPER	(S(VP*	ihm	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auszubeugen	VVIZU	*	ausbeugen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	war	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	(AP(NP*	der	sg	masc	-	(657
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Streich	NN	*)	streich	sg	masc	-	657)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKA	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	schnell	ADJD	*))))	schnell	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Gefallen	NN	*	gefallen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	unter	APPR	(CS(VP(AVP*	unter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	den	ART	*)	der	pl	*	-	(657)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	kommen	VVINF	*)	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ich	PPER	(AP*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	lang	ADJD	*))	lang	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	viel	ADV	(S*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	weigerte	VVFIN	*))	weigern	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sie	PPER	*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Die	KOUS	*	der	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wenig	PIS	*	wenig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	lüstern	VVINF	*	lüstern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	–	KOUS	*	–	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Entschluß	NN	*	entschluß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	sie	PPER	*	sie	*	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	aus	APPR	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Den	ART	*	der	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Augen	NN	*	auge	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	nie	ADV	*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	lassen	VVINF	*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	–	$.	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Entschluß	NN	*	entschluß	sg	neut	-	(140)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Entschluß	NN	*	entschluß	sg	masc	-	(140)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Vorsatz	NN	*	vorsatz	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Tat	NN	*	tat	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	litt	VVFIN	*	leiden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	litte	VVFIN	*	litten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	bloß	PTKVZ	*	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sie	PPER	*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	*	der	sg	neut	-	(658
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Gefühl	NN	*	gefühl	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	658)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	An	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	verstrickt	VVPP	*	verstricken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	verwebt	VVPP	*	verweben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	War	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	eins	PIS	*	eins	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	eins	PIS	*)	eins	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	getrennt	VVPP	*	trennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	leben	VVINF	*	leben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	undenkbar	ADJD	*	undenkbar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Mein	PPOSAT	*	mein	sg	masc	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Tod	NN	*	tod	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	–	NN	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	wir	PPER	*	wir	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	immer	ADV	*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	nach	APPR	*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	dem	ART	*	der	sg	masc	-	(659
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Tode	NN	*	tod	sg	masc	-	659)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	mein	PPOSAT	*	mein	sg	masc	-	(154|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Tod	NN	*	tod	sg	masc	-	154)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(658)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Liebe	NN	*	liebe	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	So	ADV	(S(AVP*	so	-	-	-	(660
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	–	ADJD	*)	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	liebt	VVFIN	*	lieben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Tempelritter	NN	*)	tempelritter	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	–	PPER	(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	liebt	VVFIN	*	lieben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Der	ART	(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Christ	NN	*))))	christ	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	das	ART	(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Judenmädchen	NN	*	judenmädchen	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	freilich	ADV	*)	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	660)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	tuts	FM	*	tut	-	-	-	(660)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hab	VAFIN	*	hab	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dem	ART	*	der	sg	neut	-	(14
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gelobten	ADJA	*	gelobt	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Lande	NN	*	land	sg	neut	-	14)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	$.	*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	drum	ADV	*	drum	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	gelobt	VVPP	*	loben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	immerdar	ADV	*	immerdar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	(NP*	der	sg	masc	-	(440
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Vorurteile	NN	*	vorurteil	sg	masc	-	440)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	ADV	(VP*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	abgelegt	VVPP	*))	ablegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*)	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mein	PPOSAT	(NP*	mein	sg	neut	-	(267|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Orden	NN	*	orden	sg	neut	-	267)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CS(S*	ich	sg	*	-	(61|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherr	NN	*	tempelherr	sg	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	tot	ADJD	*	tot	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	war	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dem	ART	*	der	sg	masc	-	(661
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Augenblick	NN	*)	augenblick	sg	masc	-	661)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	tot	ADJD	*))	tot	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Der	KOUS	(S*	der	sg	masc	-	(661)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Saladins	NE	*	saladin	sg	*	-	(240|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Gefangnen	NN	*)	gefangnen	sg	*	-	240)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	machte	VVFIN	*))	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(662|(663
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kopf	NN	*	kopf	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	den	ART	*	der	sg	masc	-	(663)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Saladin	NN	*	saladin	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	schenkte	VVFIN	*	schenken	sg	-	-	663)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Mein	PPOSAT	*	mein	sg	masc	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	alter	ADJA	*	alt	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	*	ein	sg	masc	-	(664
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	neuer	ADJA	*	neu	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	*	der	sg	masc	-	(664)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	allem	PIS	*	alle	sg	neut	-	664)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	was	PRELS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	jenem	PDAT	*	jener	sg	masc	-	(665)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	eingeplaudert	VVPP	*	einplaudern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ward	VVFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	jenen	PDS	*	jener	sg	*	-	(665)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	band	VVFIN	*	binden	*	*	-	662)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Den	ART	*	der	sg	masc	-	(254
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	väterlichen	ADJA	*	väterlich	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Himmel	NN	*	himmel	sg	masc	-	254)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	mehr	ADV	*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	gemacht	VVPP	*	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	*	der	sg	neut	-	(662)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	spür	FM	*	spüren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihm	PPER	*	ihm	sg	masc	-	(663)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	beginn	VVFIN	*	beginn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	denken	VVINF	*	denken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wie	KOKOM	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mein	PPOSAT	*	mein	sg	masc	-	(471|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Vater	NN	*	vater	sg	masc	-	471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Gedacht	NN	*	gedacht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	haben	VAFIN	*	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	man	PIS	*	man	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Märchen	NN	*	märchen	sg	*	-	(666)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	ihm	PPER	*	ihm	sg	masc	-	(471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	vorgelogen	VVPP	*	voeliegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Märchen	NN	*	märchen	pl	fem	-	(666)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	(NP(AP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ganz	ADV	*	ganz	-	-	-	(666
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	glaubliche	ADJA	*))	glaublich	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	(S(NP*	der	sg	fem	-	(666)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	glaublicher	ADJA	*)	glaublich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nie	ADV	(VP*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Als	APPR	(NP(AP(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	itzt	ADJD	*)	itzt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	geschienen	ADJA	*)	geschien	-	-	-	666)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Zu	NN	*)	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	straucheln	VVINF	*)	straucheln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	laufe	VVFIN	*	laufen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	wo	PWAV	(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	er	PPER	*	er	sg	masc	-	(471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	fiel	VVFIN	*))	fallen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	(S*	er	sg	masc	-	(471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	fiel	VVFIN	*)	fallen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Männern	NN	*)	mann	pl	masc	-	(276)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	lieber	ADV	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	fallen	VVINF	*	fallen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Kindern	NN	*)	kind	pl	neut	-	(124)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	stehn	VVFIN	*)))	stehn	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sein	PPOSAT	(S(NP*	sein	sg	neut	-	(471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Beispiel	NN	*)	beispiel	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bürget	VVFIN	*	bürgen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*)	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Für	APPR	(NP(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	seinen	PPOSAT	*	sein	sg	masc	-	(471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Beifall	NN	*))	beifall	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wessen	PWAT	*	wessen	sg	masc	-	(424
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Beifall	NN	*)	beifall	sg	masc	-	424)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Liegt	VVFIN	*	liegen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sonst	ADV	*)	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	An	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nathans	NN	*	nathan	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	O	NE	(NP*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dessen	PRELAT	*	der	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ermuntrung	NN	*))	ermuntrung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	ADV	(NP*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Beifall	NN	*)	beifall	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	kann	VMFIN	(S*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mir	PPER	(VP*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Noch	ADV	(AP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	weniger	PIS	*)	weniger	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	gebrechen	VVINF	*)))	gebrechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Welch	NN	*	welch	sg	*	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	neut	-	(98
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Jude	NN	*)	jude	sg	neut	-	1)|98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(S*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ganz	ADV	*)	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	(VP(AP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Jude	NN	*)	jude	-	-	-	(46)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	scheinen	VVINF	*)	scheinen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	will	VMFIN	*)	wollen	sg	-	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kömmt	VVFIN	(S(S*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	kömmt	VVFIN	(S*	kömmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Hast	NN	*)))	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	glüht	VVFIN	(S*	glühen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	heitre	ADJA	(NP*	heitr	-	-	-	(667
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Freude	NN	*)))	freude	sg	-	-	667)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Wer	PWS	(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	kam	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	vom	APPRART	(PP*	von	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Saladin	NN	*)	saladin	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	je	ADV	(AVP*	je	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	anders	ADV	*))	anders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	He	XY	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	He	XY	(VROOT(PSEUDO*	--	-	-	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nathan	NE	*	nathan	-	-	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(CNP*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	fem	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Tempelherr	NN	*))	tempelherr	sg	fem	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihrs	NN	*	ihr	sg	*	-	(532)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	habt	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sehr	ADV	*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	lang	ADJD	*	lang	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dem	ART	*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Sultan	NN	*	sultan	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	aufgehalten	VVPP	*	aufhalten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	lange	ADV	*	lange	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ward	VVFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	im	APPRART	(PP*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Hingehn	NN	*)	hingehn	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	viel	PIS	*)	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	verweilt	VVFIN	*)	verweilen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wahrlich	ADV	(NP*	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Curd	NE	*	curd	-	-	(PER*)	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(NP*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Mann	NN	*	mann	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Steht	NN	*))	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	seinen	PPOSAT	(NP*	sein	sg	masc	-	(456|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ruhm	NN	*)	ruhm	sg	masc	-	456)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sein	PPOSAT	(VROOT(PSEUDO(S(NP*	sein	sg	neut	-	(456|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ruhm	NN	*)	ruhm	sg	neut	-	456)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bloß	ADV	*	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sein	PPOSAT	(NP*	sein	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Schatten	NN	*))	schatten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	laßt	VVIMP	*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vor	APPR	(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	allen	PIAT	*	aller	pl	masc	-	(43
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Dingen	NN	*)	ding	pl	masc	-	43)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	geschwind	ADJD	*	geschwind	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sagen	VVINF	*)	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S(S*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	(VP*	euch	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sprechen	VVINF	*))	sprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ungesäumt	ADJD	*	ungesäumen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ihm	PPER	*)	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	kommt	VVFIN	*))	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Begleitet	VVFIN	*	begleiten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nach	APPR	*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Hause	NN	*	haus	sg	neut	-	(19
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ihn	PPER	*	ihn	sg	masc	-	19)|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	etwas	ADV	*	etwas	-	-	-	(489
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	anders	ADV	*	anders	-	-	-	489)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	verfügen	VVINF	*	verfügen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	gehn	ADJD	*	gehn	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	wir	PPER	*	wir	pl	*	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euer	ADJA	*	euer	-	-	-	(19|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Haus	NN	*	haus	-	-	-	19)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Betret	NN	*	betret	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	eher	ADV	*	eher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(VP*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	indes	ADV	*	indes	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gewesen	VAPP	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	habt	VAFIN	(VROOT(PSEUDO(S*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Indes	NE	*	indes	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	(VP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gesprochen	VVPP	*))	sprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(S*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sagt	NN	*	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Gefällt	NN	*	gefallen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	(NP*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Recha	NE	*	recha	*	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Über	APPR	(VROOT(PSEUDO(PP*	über	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	allen	PIAT	*	aller	sg	masc	-	(128
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ausdruck	NN	*)	ausdruck	sg	masc	-	128)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Allein	ADV	(NP*	allein	-	-	-	(668
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	KOUS	(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	sg	fem	-	(669|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wiedersehn	ADV	*	wiedersehn	-	-	-	669)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	–	VVFIN	*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	das	PDS	(S*	der	sg	neut	-	(669)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	werd	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nie	ADV	*)))	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nie	ADV	(VROOT(PSEUDO(S*)	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nie	ADV	(VROOT(PSEUDO(S*)	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	müßtet	VMFIN	*	müßten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zur	APPRART	*	zu	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Stelle	NN	*	stelle	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Versprechen	NN	*	versprechen	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	immer	ADV	*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	immer	ADV	*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Soll	VMFIN	*	sollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	können	VMFIN	*	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*	--	-	-	-	668)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wollt	VMFIN	*	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	das	ART	*	der	sg	neut	-	(668)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Versteh	NN	*	versteh	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nach	APPR	(VROOT(PSEUDO(AP(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	einer	ART	*	ein	sg	fem	-	(543
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kurzen	ADJA	*	kurz	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Pause	NN	*)	pause	sg	fem	-	543)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	plötzlich	ADJD	*	plötzlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	um	APPR	(AP(PP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	den	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Hals	NN	*)	hals	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	fallend	ADJD	*))	fallend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(1|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Junger	ADJA	*	junger	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mann	NN	*	mann	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ihn	PPER	(VROOT(PSEUDO(AP*	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eben	ADV	(AVP*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	plötzlich	ADJD	*	plötzlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wieder	ADV	(AP*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	lassend	ADJD	*))	lassend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sohn	NN	*	sohn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bitt	VVFIN	*	bitt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	pl	*	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nathan	NE	*	nathan	-	-	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Lieber	ADV	(VROOT(PSEUDO(NP*	lieb	-	-	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	junger	ADJA	*	jung	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mann	NN	*)	mann	*	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sohn	NN	*	sohn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bitt	VVFIN	*	bitt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	pl	*	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nathan	NE	*	nathan	-	-	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	beschwör	VVFIN	*	beschwör	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	den	ART	*	der	pl	masc	-	(670
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ersten	ADJA	*	erster	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Banden	NN	*	bande	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	*	der	sg	masc	-	(38
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Natur	NN	*	natur	-	-	-	670)|38)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zieht	VVFIN	(S*	ziehen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihnen	PPER	*)	ihnen	pl	*	-	(670)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	spätre	ADJA	(NP*	spätr	-	-	-	(279
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Fesseln	NN	*	fessel	pl	fem	-	279)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	doch	ADV	(AVP(AVP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	vor	PTKVZ	*))	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Begnügt	VVFIN	(S*	begnügen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	(VP(NP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Mensch	NN	*)	mensch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sein	VAINF	*)))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Stoßt	NE	*	stoßen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Lieber	NN	(VROOT(PSEUDO*	lieb	-	-	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	lieber	ADJA	(NP*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Freund	NN	*)	freund	-	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sohn	NN	*	sohn	sg	masc	-	(671)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sohn	NN	*	sohn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Auch	ADV	(AVP(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dann	ADV	*)	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dann	ADV	(S(AVP*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	einmal	ADV	*)	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Erkenntlichkeit	NN	(NP*	erkenntlichkeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zum	APPRART	(PP*	zu	sg	neut	-	(60
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Herzen	NN	*))	herz	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Eurer	PPOSAT	(VP(NP*	eurer	*	*	-	(2|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Tochter	NN	*	tochter	*	*	-	60)|2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Der	ART	(NP*	der	sg	masc	-	(658
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Liebe	NN	*))	liebe	sg	masc	-	658)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	den	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Weg	NN	*)	weg	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	gebahnet	VVPP	*)	bahnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	hätte	VAFIN	*)	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(S(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	einmal	ADV	*)	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	in	APPR	(NP(VP(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	eins	PIS	*)	eins	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	schmelzen	VVINF	*)	schmelz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Euern	NN	*	euer	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Wink	NE	*))	wink	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	beide	PIS	*)	beide	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	warteten	VVFIN	*)	warten	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schweigt	VVFIN	*)	schweigen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	überrascht	VVFIN	*	überraschen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	(NP*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	junger	ADJA	(NP*	jung	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ritter	NN	*)))	ritter	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	überrasch	VVFIN	*	überrasch	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	überrasch	ADJD	*	überrasch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nathan	NE	*	nathan	-	-	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Euern	NN	*	euer	pl	masc	-	(672|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	eigenen	ADJA	*	eigen	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Gedanken	NN	*	gedanke	pl	masc	-	672)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPOSAT	(NP*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Verkennt	NN	*	verkennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	(S*	sie	sg	fem	-	(672)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	(AVP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	in	APPR	*)	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	meinem	PPOSAT	(NP*	mein	sg	neut	-	(430|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Munde	NN	*)	mund	sg	neut	-	430)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	überrasch	ADJD	*	überrasch	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Eh	XY	(VROOT(PSEUDO*	eh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	(S(NP*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	einmal	ADV	*)	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ein	ART	*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Stauffen	NN	*)	stauff	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Euer	ADJA	(NP*	euer	*	*	-	(471|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Vater	NN	*)))	vater	sg	masc	-	471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	denn	KON	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Gewesen	NN	*	gewesen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ist	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(NP*	ihr	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nathan	NE	*	nathan	sg	masc	(PER*)	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	In	APPR	(S(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	diesem	PDAT	*	dieser	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Augenblicke	NN	*)	augenblick	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	fühlt	VVFIN	*	fühlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	(NP*	ihr	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nichts	PIS	*))	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Neubegier	NN	*	neubegier	sg	neut	-	(673)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seht	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	selbst	ADV	(NP*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wohl	NN	*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	einen	ART	(VP(NP*	ein	sg	masc	-	(471
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Stauffen	NN	*)	stauffen	sg	masc	-	471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ehedem	PIS	*	ehedem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gekannt	VVPP	*	kennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Der	ART	(S(NP*	der	sg	masc	-	(471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Conrad	NE	*)	conrad	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	hieß	VVFIN	*)))	heißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mein	PPOSAT	(NP*	mein	sg	masc	-	(471|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Vater	NN	*)	vater	sg	masc	-	471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nun	ADV	*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	eben	ADV	(S(VP*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	geheißen	VVPP	*)	heißen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	hätte	VAFIN	*)	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wahrlich	ADJD	(VROOT(PSEUDO*	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	heiße	VVFIN	*	heißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	selber	ADV	*	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nach	APPR	(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	meinem	PPOSAT	*	mein	sg	masc	-	(471|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Vater	NN	*	vater	sg	masc	-	471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Curd	NE	(NP*	curd	-	-	-	(468)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ist	NE	(MPN*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Conrad	NE	*))))	conrad	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mein	PPOSAT	(NP*	mein	sg	masc	-	(471|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Conrad	NE	*))	conrad	sg	masc	(PER*)	471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	doch	ADV	(NP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Euer	ADJA	*)	euer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Vater	NN	*)	vater	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(CS(CS(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mein	PPOSAT	(NP*	mein	sg	masc	-	(471|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Conrad	NE	*)	conrad	sg	masc	(PER*)	471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	war	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	*	ihr	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Tempelherr	NN	*))	tempelherr	sg	masc	-	(674)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	war	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nie	ADV	(VP*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	vermählt	VVPP	*)))	vermählen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	darum	PROAV	*	darum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	KON	*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	darum	PROAV	*	darum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	könnt	VVFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Mein	PPOSAT	*	mein	sg	masc	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Vater	NN	*	vater	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gewesen	VAPP	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	scherzt	VVFIN	*)	scherzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nehmts	ADV	*	nehmts	-	-	-	(675)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wahrlich	ADV	(AP*	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKA	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	genau	ADJD	*))	genau	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wärs	VAFIN	*	wär	-	-	-	(675)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Denn	KON	(AVP*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	*))	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bastard	NN	*)	bastard	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Bankert	NN	*)	bankert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Schlag	NN	*)	schlag	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	(VP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	verachten	VVINF	*)))	verachten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Entlaßt	VVFIN	*	entlassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	-	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	immer	ADV	*)	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	meiner	PPOSAT	(NP*	mein	pl	masc	-	(676|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ahnenprobe	NN	*)	ahnenprobe	pl	masc	-	676)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PRF	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Eurer	NN	*	eurer	sg	*	-	(1026)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wiederum	ADV	(VP*	wiederum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	entlassen	VVPP	*))	entlassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(S(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	zwar	ADV	*)	zwar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	den	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	geringsten	ADJA	*	gering	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Zweifel	NN	*	zweifel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	In	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Euern	NN	*	euer	-	-	-	(677|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Stammbaum	NN	*))	stammbaum	sg	masc	-	677)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	setzte	VVFIN	*))	setzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gott	NN	(VROOT(PSEUDO(S*	gott	sg	masc	(PER*)	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	behüte	VVFIN	*)	behüten	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	könnt	VVFIN	*	können	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(677)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Blatt	NN	(NP*	blatt	sg	neut	-	(642)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	vor	APPR	(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Blatt	NN	*	blatt	sg	neut	-	(642)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bis	APPR	(PP*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Abraham	NE	*)))	abraham	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Hinauf	NN	(VP*	hinauf	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	belegen	VVINF	*))	belegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(CS(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	da	ADV	*)	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	weiter	ADV	*))	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Weiß	NN	(S*	weiße	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihn	PPER	(NP*	ihn	sg	masc	-	(675)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	will	VMFIN	(S*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ihn	PPER	*	ihn	sg	masc	-	(675)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	beschwören	VVFIN	*)))	beschwören	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(678|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	werdet	VAFIN	*	werden	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bitter	ADJD	*)	bitter	-	-	-	678)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	verdien	VVFIN	*	verdien	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ichs	PTKVZ	*	ichs	-	-	-	(678)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Schlug	NN	(NP*	schlug	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	(NP*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*))	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	(S*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	was	PIS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ab	PTKVZ	*)	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	(AVP*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nur	ADV	*))	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bei	APPR	(VP(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dem	ART	*	der	sg	neut	-	(679
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Worte	NN	*)	wort	sg	neut	-	679)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Augenblick	NN	*)	augenblick	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	fassen	VVINF	*)	fassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Weiter	ADV	(AP*	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gewiß	ADV	(VROOT(PSEUDO(S*)	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nichts	PIS	(CO(AVP*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	weiter	ADV	*))	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(CS(S*)	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	(S(VP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vergebt	VVPP	*)))	vergeben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(S*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	kommt	VVFIN	*))	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wohin	PWAV	(VROOT(PSEUDO*	wohin	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mit	APPR	*	mit	-	-	-	(680
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euer	ADJA	(NP*	euer	sg	neut	-	(19|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Haus	NN	*)	haus	sg	neut	-	680)|19)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	*	der	sg	neut	-	(680)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	*	der	sg	neut	-	(680)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Da	KOUS	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	brennts	NE	*	brennt	-	-	-	(658)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	(VP*	euch	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	erwarten	VVINF	*))	erwarten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Soll	VMFIN	(S*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	(VP*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wiedersehn	VVINF	*))	wiedersehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	seh	VVFIN	*	seh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Noch	ADV	(AVP*	noch	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	oft	ADV	*	oft	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	genug	ADV	*))	genug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	(VROOT(PSEUDO(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sah	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sie	PPER	*	sie	*	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Schon	ADV	(AP(AVP*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	viel	ADV	*)	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zu	PTKA	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	viel	PIS	*)))	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PRF	(VP*	mich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	möglichst	ADV	*	möglichst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	eilen	VVINF	*))	eilen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherr	NN	*)	tempelherr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bald	ADV	(S(AVP*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	darauf	PROAV	*)	darauf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Daja	NE	*)	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Schon	ADV	(VROOT(PSEUDO(S*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mehr	PIS	*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	als	KOKOM	(AP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gnug	ADJD	*))	gnug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Des	ART	(NP*	der	sg	*	-	(87|(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Menschen	ADJA	*	mensch	pl	masc	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Hirn	NN	*)	hirn	-	-	-	87)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	faßt	VVFIN	*	fassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	(NP(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Unendlich	ADJD	*)	unendlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	viel	PIS	*)	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	manchmal	ADV	(AP*	manchmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	So	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	plötzlich	ADJD	*)	plötzlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	voll	ADJD	*))	voll	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	von	APPR	(VROOT(PSEUDO(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	einer	ART	*	ein	sg	fem	-	(658
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Kleinigkeit	NN	*	kleinigkeit	sg	fem	-	658)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	So	ADV	(AP(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	plötzlich	ADJD	*)	plötzlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	voll	ADJD	*))	voll	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Taugt	VVFIN	*	taugt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nichts	PIS	(S(S*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	taugt	VVFIN	*	taugen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	es	PPER	*	es	sg	neut	-	(663)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Auch	ADV	(AP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	voll	ADJD	*))	voll	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wovon	PWAV	(S*	wovon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	es	PPER	*	es	sg	neut	-	(663)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	will	VMFIN	*)	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(NP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Geduld	NN	*)	geduld	-	-	-	(681)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(CS(S(NP*	der	sg	fem	-	(282
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Seele	NN	*)	seele	sg	fem	-	282)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wirkt	VVFIN	*	wirken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	den	ART	(NP*	der	sg	masc	-	(658
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	aufgedunsnen	ADJA	*	aufgedunsn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Stoff	NN	*	stoff	sg	masc	-	658)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Bald	ADV	*	bald	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	einander	PRF	*)	einander	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	schafft	VVFIN	(S*	schaffen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sich	PRF	*))	sich	sg	-	-	(282)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Raum	NN	*)	raum	sg	*	-	(438)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Licht	NN	(S(MPN*	licht	sg	neut	-	(682)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Ordnung	NN	*)	ordnung	sg	fem	-	(682)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	kommen	VVFIN	*	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	wieder	PTKVZ	*))	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Lieb	NE	*	lieb	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Zum	APPRART	*	zu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	erstenmale	ADJA	*	erstenmal	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Oder	NE	(S*	oder	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	was	PRELS	(S*	was	sg	neut	-	(338
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	338)|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Als	APPR	(NP(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Liebe	NN	*	liebe	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	kenne	VVFIN	*)	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Liebe	NN	*)	liebe	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Liebe	NN	*	liebe	sg	fem	-	(338)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	itzt	VVFIN	*	itzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	empfinde	VVFIN	*	empfinden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*))	daja	-	-	-	(0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	die	ART	(VROOT(PSEUDO(VP(NP*	der	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sich	PRF	(AP*	sich	sg	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	*)	der	sg	fem	-	(224
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Seite	NN	*)	seite	sg	fem	-	224)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	herbeigeschlichen	VVIZU	*)	herbeigeschlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ritter	NN	(VROOT(PSEUDO*	ritter	-	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ritter	NN	(VROOT(PSEUDO*	ritter	-	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ruft	VVFIN	*)	rufen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ha	NE	*	ha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Daja	NE	*	daja	-	-	(PER*)	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	pl	*	-	0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PRF	(VP*	mich	sg	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*)	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	vorbei	ADV	*	vorbei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	geschlichen	VVPP	*))	schleichen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Könnt	NE	*	könnt	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	uns	PPER	*	uns	pl	*	-	(683)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	steht	VVFIN	*	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Drum	NN	*	drum	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Doch	NN	(NP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	näher	ADJD	(AP*	nah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*))	sich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	hinter	APPR	(PP*	hinter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	diesen	PDAT	*	dieser	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Baum	NN	*))	baum	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gibts	ADV	*	gibt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*)	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(S(ISU*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	geheimnisvoll	ADJD	*))	geheimnisvoll	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ists	FM	*	ist	-	-	-	(684)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(CS(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	betrifft	VVFIN	*	betreffen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	(NP*	es	sg	neut	-	(684)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	(NP*	ein	sg	neut	-	(685
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Geheimnis	NN	*))	geheimnis	sg	neut	-	685)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	(S*	was	sg	neut	-	(684)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Mich	PPER	*	mich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Euch	PPER	*)	euch	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	bringt	VVFIN	*))	bringen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zwar	ADV	(S*	zwar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ein	ART	(NP*	ein	sg	neut	-	(685
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	doppeltes	ADJA	*)))	doppelt	sg	neut	-	685)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(CS(S(NP*	der	sg	neut	-	(686
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eine	PIS	*)	ein	sg	fem	-	686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*))	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	das	ART	(S(NP*	der	sg	neut	-	(687
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	andre	ADJA	*)	andre	sg	neut	-	687)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wißt	VVFIN	*	wissen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ihr	PPER	*)))	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(688)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wenn	KOUS	(S*	wenn	-	-	-	(688
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wir	PPER	*	wir	pl	*	-	(683)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	tauschten	VVFIN	*))	tauschen	pl	-	-	688)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Vertraut	ADJD	*	vertraut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	*	sich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euers	NE	*	euer	sg	masc	-	(1056)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	vertrau	ADJD	*	vertrau	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Euch	PPER	*	euch	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Das	PDS	*	der	sg	neut	-	(686
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	meine	VVFIN	*	mein	sg	-	-	686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mit	APPR	(VROOT(PSEUDO(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vergnügen	NN	*)	vergnügen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Erst	ADV	(S*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	(S*	was	sg	neut	-	(689
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ihr	PPER	*	ihr	sg	neut	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	meines	PIS	*)	mein	sg	neut	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	achtet	VVFIN	*))	achten	-	-	-	689)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(689)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aus	APPR	(VP(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euerm	NE	*)	euerm	-	-	-	(1029)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	erhellen	VVINF	*))	erhellen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Fangt	VVFIN	*	fangen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nur	ADV	(S*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	immer	ADV	*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	an	PTKVZ	*)	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	PPER	(VROOT(PSEUDO(S*	ei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	denkt	VVFIN	*	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nein	PTKANT	(S*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Herr	NN	(NP*	herr	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ritter	NE	*)	ritter	sg	masc	(PER*)	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Erst	ADV	(S*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ihr	PPER	*	ihr	-	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	folge	VVFIN	*))	folgen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	versichert	VVFIN	*	versichern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mein	PPOSAT	(NP*	mein	sg	neut	-	(1029)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Geheimnis	NN	*))	geheimnis	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	kann	VMFIN	(CS(S*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nichts	PIS	(VP*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nutzen	VVINF	*))	nutzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	zuvor	ADV	*)	zuvor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	das	ART	(NP*	der	sg	neut	-	(687
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Eure	NN	*)	euer	-	-	-	687)|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	habe	VAFIN	*))	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Geschwind	NN	*)	geschwind	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	frag	VVFIN	*	frag	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ichs	APPRART	*	ichs	-	-	-	(687)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ab	PTKVZ	*	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	habt	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	vertrauet	VVPP	*	vertrauen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(CS(S(NP*	mein	sg	neut	-	(686|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geheimnis	NN	*	geheimnis	sg	neut	-	686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dann	ADV	*)	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mein	PPOSAT	(NP*	mein	sg	neut	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Geheimnis	NN	*))	geheimnis	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	das	ART	(S(NP*	der	sg	neut	-	(687
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Eure	NN	*)	euer	sg	neut	-	687)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	seid	VAFIN	*	sein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Ihr	PPER	*	ihr	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	los	PTKVZ	*))	los	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(NP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	armer	ADJA	*	arm	-	-	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ritter	NN	*)	ritter	-	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Daß	KOUS	(S(PP*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPOSAT	*	ihr	sg	fem	-	(690
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Männer	NN	*)	mann	*	*	-	690)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ein	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	solch	PIAT	(NP*	solch	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Geheimnis	NN	*	geheimnis	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	vor	APPR	(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	uns	PPER	*))))	uns	pl	*	-	(289
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Weibern	NN	(S*	weiber	pl	masc	-	289)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	haben	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Zu	NN	(VP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	können	VMINF	*	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	auch	ADV	(VP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	glaubt	VVPP	*)))	glauben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(VP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wir	PPER	*	wir	pl	*	-	(690)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	haben	VAINF	*)	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Oft	NN	*	oft	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	selbst	ADV	*	selbst	-	-	-	(690)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wissen	VVINF	*)	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	ADV	(VROOT(PSEUDO(VP*	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sein	VAINF	*)	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Drum	ADV	(VROOT(PSEUDO(S*	drum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	(VP(CNP(NP*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Euch	PPER	(VP*	euch	-	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	damit	PROAV	(AP*	damit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	bekannt	ADJD	*)	bekannt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	machen	VVINF	*)))	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	schon	ADV	(NP*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Freundschaft	NN	*))	freundschaft	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	haben	VAINF	*))	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sagt	NN	*	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hieß	VVFIN	*	heißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	das	PDS	(NP*	der	sg	neut	-	(691)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	daß	KOUS	(S*	daß	-	-	-	(691
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ihr	PPER	(CNP(NP*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Knall	NN	*	knall	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Fall	NN	*)	fall	pl	-	-	691)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	dem	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Staube	NN	*)	staube	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	machtet	VVFIN	*)))	machten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	uns	PPER	(VP*	uns	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sitzen	VVINF	*)	sitzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ließet	VVFIN	*)	ließen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nathan	NN	*	nathan	sg	neut	(PER*)	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nicht	PTKNEG	*	nicht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wiederkommt	VVFIN	*	wiederkommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hat	VAFIN	(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Recha	NE	*	recha	sg	masc	(PER*)	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wenig	PIAT	(NP*	wenig	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Auf	NN	*	auf	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	(VP*	euch	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gewirkt	VVPP	*))	wirken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	oder	KON	(VROOT(PSEUDO(S*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	(NP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	viel	PIS	*))	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(NP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	viel	PIS	*)	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	so	ADV	(VROOT(PSEUDO(NP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	viel	PIS	*)	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Lehrt	VVFIN	*	lehrt	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(NP*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	des	ART	(NP*	der	sg	masc	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	armen	ADJA	*	arm	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Vogels	NN	*)	vogel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Der	PRELS	(S*	der	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	*	der	sg	fem	-	(562
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Rute	NN	*)	rute	sg	fem	-	562)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	klebt	VVFIN	*))	kleben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Geflattre	NN	(S*	geflattre	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	mich	PPER	(VP*	mich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Doch	NN	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	kennen	VVINF	*))	kennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kurz	NN	*	kurz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gesteht	VVFIN	*	gestehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*	es	sg	neut	-	(692)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gleich	ADV	*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Daß	KOUS	*	daß	-	-	-	(692
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	liebt	VVFIN	*	lieben	sg	-	-	692)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	liebt	VVFIN	*	lieben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	bis	APPR	*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	zum	APPRART	*	zu	sg	masc	-	(693
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Unsinn	NN	*	unsinn	sg	masc	-	693)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	sag	VVFIN	*	sögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	was	PIS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zum	APPRART	(VROOT(PSEUDO(PP*	zu	sg	masc	-	(693
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Unsinn	NN	*)	unsinn	sg	masc	-	693)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wahrlich	ADJD	(VROOT(PSEUDO(S*	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(S*	ihr	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Versteht	VVFIN	*	verstehen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	trefflich	ADJD	*	trefflich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	drauf	PTKVZ	*))	drauf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(CS(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gebt	VVFIN	*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Die	ART	*	der	sg	fem	-	(658
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Liebe	NN	*)	liebe	sg	fem	-	658)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKVZ	*)	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	den	ART	(S(NP*	der	sg	masc	-	(693
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Unsinn	NN	*)	unsinn	sg	masc	-	693)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Euch	PRF	(VP*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Erlassen	VVINF	*)))	erlaß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Weil	KOUS	(VROOT(PSEUDO(S*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(693)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	*	sich	sg	-	-	(693)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	versteht	VVFIN	*)	verstehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ein	ART	(NP*	ein	sg	masc	-	(121
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Tempelherr	NN	*	tempelherr	sg	masc	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ein	ART	(VP(NP*	ein	sg	neut	-	(252
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Judenmädchen	NN	*)	judenmädchen	sg	neut	-	252)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	lieben	VVINF	*))	lieben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Scheint	VVFIN	(VROOT(PSEUDO(S*	scheint	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wenig	PIAT	(VP(VP(NP*	wenig	*	*	-	(694
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sinn	NN	*))	sinn	sg	masc	-	694)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	haben	VAINF	*)))	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Zuweilen	NN	*	zuweilen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	des	ART	(NP*	der	sg	neut	-	(694
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Sinns	NN	*	sinn	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	einer	ART	*	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Sache	NN	*)))	sache	sg	fem	-	694)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Auch	ADV	(NP(AP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mehr	ADV	(AP*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wir	PPER	*	wir	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	vermuten	VVFIN	*	vermuten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	wäre	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	So	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	unerhört	ADJD	*)	unerhört	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	doch	ADV	(AVP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	uns	PPER	*	uns	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	der	ART	(NP*	der	sg	masc	-	(22
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Heiland	NE	*)	heiland	sg	neut	-	22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Auf	APPR	(PP*	auf	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Wegen	NN	*	wegen	-	-	-	(517)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	sich	PRF	*)))))))	sich	pl	-	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	zöge	FM	*	zögen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	die	PRELS	(S*	der	sg	fem	-	(517)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	der	ART	(VP(NP*	der	sg	masc	-	(123
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	Kluge	NN	*)	kluge	sg	masc	-	123)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	Von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	leicht	ADJD	*	leicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	betreten	VVINF	*)	betreten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	würde	VAFIN	*))	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S(VP(AP(AVP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	feierlich	ADJD	*)))	feierlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	(	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	setz	FM	*	setz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	statt	APPR	*	statt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	des	ART	*	der	sg	neut	-	(22
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Heilands	NE	*	heiland	sg	neut	-	22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Vorsicht	NN	*	vorsicht	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sie	PPER	*	sie	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Recht	NN	*	recht	-	-	-	(37)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	)	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	macht	VVFIN	*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Mich	PPER	*	mich	sg	masc	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	neubegieriger	ADJD	*	neubegierig	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	als	KOUS	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Zu	NN	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	sein	PPOSAT	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	gewohnt	VVPP	*	wohnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	$.	*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(138)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Land	NN	*	land	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Der	ART	*	der	sg	masc	-	(133
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Wunder	NN	*	wunder	sg	masc	-	133)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	(	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	KON	(VROOT(PSEUDO(PP*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	des	ART	*	der	sg	masc	-	(133
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wunderbaren	NN	*)	wunderbare	sg	masc	-	133)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	VMFIN	(VROOT(PSEUDO(VP(S*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	anders	ADV	*	anders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*)	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	*	der	sg	fem	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ganze	ADJA	*	ganz	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Welt	NN	*	welt	sg	fem	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Drängt	VVFIN	*	drängen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sich	PRF	*	sich	sg	-	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zusammen	PTKVZ	*	zusammen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	)	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	ADJA	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Liebe	NN	*	liebe	sg	fem	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Daja	NE	*	daja	sg	fem	(PER*)	0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Nehmt	NN	*	nehmt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	gestanden	ADJD	*	gestehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	an	PTKVZ	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	was	PWS	*	was	sg	neut	-	(687
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	verlangt	VVFIN	*	verlangen	-	-	-	687)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	liebe	VVFIN	*	lieben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	begreife	VVFIN	*	begreifen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	ohne	APPR	*	ohne	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	sie	PPER	*	sie	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	leben	VVINF	*	leben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	werde	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gewiß	ADV	(VROOT(PSEUDO(S*)	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	gewiß	ADV	(VROOT(PSEUDO(S*)	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schwört	VVFIN	*	schwören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	(NP*	sich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ritter	NN	*)	ritter	*	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sie	PPER	*	sie	sg	fem	-	(1034)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Zur	APPRART	(PP*	zu	sg	fem	-	(696
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Eurigen	NN	*)	eurige	sg	fem	-	696)|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	machen	VVINF	*)	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sie	PPER	(VP*	sie	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	retten	VVINF	*)))	retten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Sie	PPER	(S*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	zeitlich	ADJD	(AP*	zeitlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	hier	ADV	*)	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	sie	PPER	(VP*	sie	pl	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	ewig	ADJD	*	ewig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	dort	ADV	*	dort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	retten	VVINF	*)))	retten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kann	VMFIN	(S*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schwören	VVINF	*	schwören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	was	PWS	(S*	was	sg	neut	-	(695)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	In	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	meiner	PPOSAT	*	mein	sg	fem	-	(697|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Macht	NN	*)	macht	sg	fem	-	697)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	steht	VVFIN	*))	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	In	APPR	(VROOT(PSEUDO(S(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Eurer	PPOSAT	*	eurer	sg	fem	-	(697|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Macht	NN	*)	macht	sg	fem	-	697)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Steht	VVFIN	*	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*)	es	sg	neut	-	(695)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bring	VVFIN	*	bring	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	-	-	-	(695)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	durch	APPR	*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ein	ART	*	ein	sg	neut	-	(686
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	einzig	ADJD	*	einzig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Wort	NN	*	wort	-	-	-	686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	In	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Eure	PPOSAT	*	euer	sg	fem	-	(697|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Macht	NN	*	macht	sg	fem	-	697)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	selbst	ADV	(NP*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Dawider	NN	*	dawider	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hätte	VAFIN	*)	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	*	ei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vater	NN	*	vater	sg	masc	-	(698)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Vater	NN	(VROOT(PSEUDO*	vater	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vater	NN	*	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	müssen	VMFIN	*	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Müssen	NE	(VROOT(PSEUDO(CNP*	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*)	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Noch	ADV	(S*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	unter	APPR	(VP(PP*	unter	-	-	-	(699
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Räuber	NN	*)	räuber	-	-	-	699)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gefallen	VVPP	*))	fallen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	müssen	VMFIN	*	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(CS(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wollen	VMFIN	*)	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Muß	NN	(S*	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gern	ADV	(PP*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	am	APPRART	*	an	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ende	NN	*)	ende	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wollen	VMFIN	*))	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Muß	NN	(VROOT(PSEUDO*	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	NE	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Daja	NE	*	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PRF	*	euch	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sage	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	selber	ADV	*	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	diese	PDAT	*	dieser	sg	fem	-	(679
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Sait	NN	*	sait	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	679)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	anzuschlagen	VVIZU	*	anschlagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Bereits	ADV	*	bereits	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	versucht	VVPP	*	versuchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	fiel	VVFIN	*	fallen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ein	PTKVZ	*)	ein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fiel	VVFIN	*	fallen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	einem	ART	*	ein	sg	neut	-	(700
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Mißlaut	NN	*)	mißlaut	sg	neut	-	700)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ein	PTKVZ	*	ein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	der	PRELS	(S*	der	sg	masc	-	(700)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	APPR	(PP*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Beleidigte	NN	*)))	beleidigter	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*)	ihr	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	*	ihr	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hättet	VVFIN	*	hätten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Den	ART	*	der	pl	masc	-	(679
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Schatten	NN	*	schatten	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	eines	ART	*	ein	sg	masc	-	(701
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wunsches	NN	*	wunsch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nach	APPR	*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Recha	NE	*	recha	sg	neut	-	679)|701)|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ihm	PPER	*	ihm	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	blicken	VVINF	*	blicken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	lassen	VVINF	*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	vor	APPR	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Freuden	NN	*	freud	pl	masc	-	(667)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	aufgesprungen	VVPP	*	aufgpringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	hätte	VAFIN	(VROOT(PSEUDO(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	frostig	ADJD	*	frostig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	(VP*	sich	pl	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Zurückgezogen	VVPP	*))	zurückgezogen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	hätte	VAFIN	(VROOT(PSEUDO(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Schwierigkeiten	NN	(VP*	schwierigkeit	pl	fem	-	(700)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gemacht	VVPP	*))	gemacht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ungefähr	ADJD	*)	ungefähr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Mich	PRF	*	mich	sg	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	länger	ADJD	*	lang	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	keinen	PIAT	(VP(NP*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Augenblick	NN	*)	augenblick	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	bedenken	VVINF	*))	bedenken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	$.	*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Pause	NN	(VROOT(PSEUDO*	pause	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bedenkt	VVFIN	*	bedenken	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mann	NN	*)	mann	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sonst	ADV	(AP*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gut	ADJD	*))	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S(NP*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	selber	ADV	*)	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bin	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	viel	PIS	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ihm	PPER	(AP*	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	schuldig	ADJD	*))	schuldig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gar	ADV	(S(AVP*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hören	VVINF	*	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	will	VMFIN	*)	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*	gott	sg	masc	(PER*)	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	weiß	VVFIN	(S*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Das	ART	(S(NP*	der	sg	neut	-	(515
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Herze	NN	*)	herze	sg	neut	-	515)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	blutet	VVFIN	*	bluten	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mir	PPER	*	sich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ihn	PPER	(VP*	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zwingen	VVINF	*))))	zwingen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(702|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bitt	VVFIN	*	bitt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Daja	NE	*	daja	-	-	(PER*)	0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	setzt	VVFIN	*	setzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	kurz	ADJD	*	kurz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gut	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Aus	NN	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	dieser	PDAT	*	dieser	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Ungewißheit	NN	*	ungewißheit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Seid	VAFIN	(VROOT(PSEUDO(CS(S*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	selber	ADV	(AP*	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ungewiß	ADJD	*)	ungewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ob	KOUS	(S*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	was	PWS	(S*	was	sg	neut	-	(703
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	vorhabt	VVFIN	*)))	vorhaben	-	-	-	703)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Gut	ADJD	(S(CAP*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	böse	ADJD	*)	böse	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	schändlich	ADJD	(CAP*	schändlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	löblich	ADJD	*)	löblich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Zu	NN	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	nennen	VVFIN	*	nennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	–	PPER	(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	schweigt	VVFIN	*)))	schweigen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vergessen	VVINF	(VP*	vergessen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	etwas	PIS	(VP*	etwas	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	verschweigen	VVINF	*))	verschweigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	habt	VAFIN	*)))	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	702)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(702)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	spornt	VVFIN	*	spornen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Anstatt	NE	(VP*	anstatt	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	halten	VVINF	*)))	halten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wißt	VVFIN	*	wissen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Recha	NE	(S(MPN*	recha	sg	neut	-	(1039)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ist	NE	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	keine	PIAT	(NP*	kein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Jüdin	NN	*)	jüdin	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	–	PPER	(S*	–	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	eine	ART	(NP*	ein	sg	fem	-	(705
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Christin	NN	*))))	christin	sg	fem	-	705)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	kalt	ADJD	(VROOT(PSEUDO*	kalt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wünsch	NN	*	wünsch	sg	masc	-	(706
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	sg	neut	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Glück	NN	*	glück	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hats	NE	(VROOT(PSEUDO(S*	hat	-	-	-	(704)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schwer	ADJD	(VP*	schwer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gehalten	VVPP	*))	halten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laßt	VVIMP	(VROOT(PSEUDO(S*	lassen	pl	-	-	706)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*	euch	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	(VP(NP*	der	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Wehen	NN	*)	wehe	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schrecken	VVINF	*))	schrecken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Fahret	NN	*	fahret	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Eifer	NN	*)	eifer	sg	neut	-	(435)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	fort	PTKVZ	*	fort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	den	ART	(VP(NP*	der	sg	masc	-	(254
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Himmel	NN	*)	himmel	sg	masc	-	254)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	bevölkern	VVINF	*)))	bevölkern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Ihr	PPER	(NP*	ihr	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	die	ART	*	der	sg	fem	-	(262
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Erde	NN	*)	erde	sg	fem	-	262)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	mehr	ADV	*)	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	könnt	VVFIN	*)	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ritter	NN	*)	ritter	-	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Verdienet	VVFIN	(VROOT(PSEUDO(S*	verdienet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	meine	PPOSAT	(NP*	mein	sg	fem	-	(704|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nachricht	NN	*)	nachricht	sg	fem	-	704)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	diesen	PDAT	(NP*	dieser	sg	masc	-	(706
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Spott	NN	*))	spott	sg	masc	-	706)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S(NP(S*	daß	-	-	-	(704
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Recha	NE	*	recha	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	eine	ART	(NP*	ein	sg	fem	-	(705
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Christin	NN	*)	christin	sg	fem	-	705)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*)	sein	sg	-	-	704)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	das	PDS	*)	der	sg	neut	-	(704)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	freuet	VVFIN	*	freuet	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Euch	PPER	*	euch	pl	*	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	einen	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Christen	NN	*)	christ	sg	masc	(MISC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	einen	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Tempelherrn	NN	*	tempelherr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Der	PRELS	(S*	der	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Ihr	PPER	*	ihr	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	sie	PPER	*	sie	pl	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	liebt	VVFIN	*)))))	lieben	sg	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Besonders	ADV	(VROOT(PSEUDO(S*	besonders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	da	KOUS	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	eine	ART	(NP*	ein	sg	fem	-	(705
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Christin	NN	*)	christin	sg	fem	-	705)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Eurer	PPOSAT	*	eurer	sg	fem	-	(435|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Mache	NN	*))	mache	sg	fem	-	435)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	so	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	versteht	VVFIN	*	verstehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihrs	NN	*)	ihr	sg	*	-	(1064)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(VP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mags	ADV	*	mags	-	-	-	(706)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gelten	VVINF	*)	gelten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nein	PTKANT	*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Den	NE	*	der	-	-	-	(707)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	PRELS	*	der	sg	masc	-	(707)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	*	der	pl	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	bekehren	VVINF	*	bekehren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPOSAT	*	ihr	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Glück	NN	*	glück	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	längst	ADV	*	längst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	was	PWS	*	was	sg	neut	-	(705
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	werden	VAINF	*	werden	-	-	-	705)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Verdorben	NN	*	verdorbe	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Erklärt	VVFIN	(VROOT(PSEUDO(S*	erklären	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*	euch	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	oder	KON	(S*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	PPER	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	geht	VVFIN	*))	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(DL(S*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	(708
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Christenkind	NN	*)	christenkind	sg	masc	-	708)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	von	APPR	(VP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Christeneltern	NN	*)	christenelter	pl	masc	(MISC*)	(709)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Geboren	VVPP	*))	gebor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ist	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	getauft	VVPP	*))	taufen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	hastig	ADJD	(VROOT(PSEUDO*	hastig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPOSAT	*	ihr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Vater	NN	*)	vater	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(S*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPOSAT	*	ihr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vater	NN	*))	vater	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wißt	VVFIN	*	wissen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(NP*	ihr	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	was	PWS	(S*	was	-	-	-	(686
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sagt	VVFIN	*))	sagen	sg	-	-	686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	(686
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wahrheit	NN	*	wahrheit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	die	PRELS	(S*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	oft	ADV	*)	oft	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Mich	PPER	(VP*	mich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	blutge	ADJA	(NP*	blutg	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Tränen	NN	*)	träne	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	weinen	VVINF	*)	weinen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	machen	VVFIN	*))	machen	pl	-	-	686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ihr	PPOSAT	(NP*	ihr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Vater	NN	*)	vater	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Als	APPR	(VP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	seine	PPOSAT	(NP*	sein	sg	fem	-	(34|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Tochter	NN	*)	tochter	sg	fem	-	34)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	erzogen	VVPP	*))	erziehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	hätte	VAFIN	(VROOT(PSEUDO(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	ART	(NP*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Christenkind	NN	*)	christenkind	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	eine	ART	*	ein	sg	fem	-	(710
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Jüdin	NN	*))	jüdin	sg	fem	-	710)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	*	sich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Erzogen	NN	*	erzogen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ganz	ADV	(VROOT(PSEUDO(AP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gewiß	ADJD	*)	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wüßte	VVFIN	*	wissen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sie	PPER	*	sie	pl	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	geboren	VVPP	*	gebären	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sei	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sie	PPER	*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hätt	VAFIN	*	hätt	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*	es	sg	neut	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nie	ADV	*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	erfahren	VVINF	*	erfahren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	daß	KOUS	*	daß	-	-	-	(686
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	eine	ART	*	ein	sg	fem	-	(705
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Christin	NN	*	christin	sg	fem	-	686)|705)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Geboren	VVPP	*	gebären	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	keine	PIAT	*	kein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Jüdin	NN	*	jüdin	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nie	ADV	(VROOT(PSEUDO(S*)	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hätt	VVFIN	*	hätt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	diesem	PDAT	*	dieser	sg	masc	-	(711
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wahne	NN	*	wahne	sg	masc	-	711)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	das	ART	*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Kind	NN	*	kind	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Bloß	ADV	*	bloß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	auferzogen	VVPP	*	auferehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ließ	VVFIN	(VROOT(PSEUDO(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	ART	(NP*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mädchen	NN	*)	mädchen	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	noch	ADV	(PP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	In	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	diesem	PDAT	*	dieser	sg	masc	-	(711
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Wahne	NN	*))	wahne	sg	masc	-	711)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Leider	ADV	(VROOT(PSEUDO(S*)	leider	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(NP*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	–	CARD	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wie	NN	*)	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	(S(NP*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	weise	ADV	(AP*	weise	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gute	ADJA	*)	gut	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nathan	NN	*)	nathan	-	-	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	(VP*	sich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Erlaubt	VVPP	*))	erlauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	die	ART	(CNP(NP*	der	sg	fem	-	(60
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Stimme	NN	*	stimme	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	der	ART	(NP*	der	sg	fem	-	(38
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Natur	NN	*)	natur	sg	fem	-	60)|38)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Verfälschen	NN	*)	verfälschen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	(NP*	der	sg	fem	-	(712
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ergießung	NN	*)	ergießung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	eines	ART	(NP*	ein	sg	masc	-	(60
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Herzens	NN	*	Herz	sg	masc	-	712)|60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	So	ADV	(S(CVP(VP(NP(VP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	verlenken	VVINF	*))	verlenken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	die	PDS	*)	der	sg	fem	-	(712)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sich	PRF	(NP*	sich	sg	-	-	(712)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	gelassen	VVPP	*)	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Ganz	ADV	(VP*	ganz	-	-	-	(517
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	andre	ADJA	(NP*	andr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Wege	NN	*)	weg	-	-	-	517)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	nehmen	VVINF	*))	nehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	würde	VAFIN	*))	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Daja	NE	*	daja	-	-	(PER*)	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	habt	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	allerdings	ADV	*	allerdings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	etwas	ADV	*	etwas	*	neut	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	vertraut	ADJD	*	vertraut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Wichtigkeit	NN	*	wichtigkeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	–	NN	*	–	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	was	APPR	*	was	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Folgen	NN	*	folge	pl	fem	-	(48)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	haben	VAINF	*	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	–	XY	*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Was	PWS	*	was	sg	neut	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	verwirrt	VVFIN	*	verwirrt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	worauf	PROAV	*	worauf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	gleich	ADV	*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	tun	VVINF	*	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Drum	NN	*	drum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	laßt	VVFIN	(S*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*)	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Zeit	NN	*	zeit	sg	fem	-	(473)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Drum	NN	(S*	drum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	geht	VVFIN	*)	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wiederum	ADV	*	wiederum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	vorbei	PTKVZ	*)	vorbei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	möcht	VMFIN	*	möchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Uns	NN	*	uns	pl	*	-	(683)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	überfallen	VVPP	*	überfallen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	des	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Todes	NN	*	tod	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	(VP*	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	itzt	ADJD	*	itzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sprechen	VVINF	*))	sprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	fähig	ADJD	*))	fähig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	begegnet	VVFIN	*)	begegnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihm	PPER	(NP*	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wir	PPER	*	wir	pl	*	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	einander	PRF	(VP*	einander	-	-	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	dem	ART	*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Sultan	NN	*)	sultan	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	finden	VVINF	*)	finden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	würden	VAFIN	*)))	werden	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	(VROOT(PSEUDO(S*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	laßt	VVIMP	*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nichts	PIS	(VP*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	merken	VVINF	*	merken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gegen	APPR	(PP*	gegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihn	PPER	*)))	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(CS(S*	der	sg	neut	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Den	ART	(VP(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	letzten	ADJA	*	letzter	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Druck	NN	*)	druck	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dem	ART	(NP*	der	sg	neut	-	(508
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Dinge	NN	*)	ding	sg	neut	-	508)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	geben	VVINF	*))	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	soll	VMFIN	(S*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Rechas	NE	(PP*	rechas	-	-	(LOC*)	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	wegen	APPO	*)	wegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	alle	PIAT	(NP*	aller	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Skrupel	NN	*)))	skrupel	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Benehmen	NN	*)	benehmen	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	(AVP*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dann	ADV	*)	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nach	APPR	(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Europa	NE	*)	europa	sg	neut	(LOC*)	(511)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	führt	VVFIN	*)	führen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	so	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	laßt	VVIMP	*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	doch	ADV	(NP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	mich	PPER	*)	mich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Zurück	PTKVZ	*)	zurück	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(713)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	(VP*	sich	sg	-	-	(713)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	finden	VVINF	*))	finden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	(VROOT(PSEUDO(S*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	geht	VVFIN	*)	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Szene	NN	(VROOT(PSEUDO*	szene	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	den	ART	*	der	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Kreuzgängen	NN	*	kreuzgang	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	des	ART	(NP*	der	sg	masc	-	(227
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Klosters	NN	*))	kloster	sg	masc	-	227)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(CNP(NP*	der	sg	masc	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Klosterbruder	NN	*)	klosterbruder	sg	masc	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bald	ADV	(NP(AVP*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	darauf	PROAV	*)	darauf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	*	der	sg	fem	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Tempelherr	NN	*))	tempelherr	sg	fem	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*)	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schon	ADV	(NP*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Recht	NN	*	recht	-	-	-	(37)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Patriarch	NN	*)))	patriarch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(714)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	alle	PIS	*)	alle	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dem	ART	(NP*	der	sg	masc	-	(714)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Nicht	NN	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	viel	PIS	(S(VP*	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	gelingen	VVINF	*)	gelingen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wollen	VMFIN	*)	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	er	PPER	*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	mir	PPER	(NP*	sich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	So	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	aufgetragen	VVPP	*))	auftragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Warum	PWAV	(S*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	trägt	VVFIN	*	tragen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*	sich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Auch	ADV	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	lauter	ADJD	(S*	lauter	-	-	-	(715
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	solche	PIAT	(NP*	solcher	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Sachen	NN	*)	sache	pl	fem	-	715)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	auf	PTKVZ	*)	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mag	VMFIN	*	mögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nicht	PTKNEG	(VP(AP*	nicht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	fein	ADJD	*)	fein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*)	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mag	VMFIN	(S*	mögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	überreden	VVINF	*))	überreden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	mag	VMFIN	(S(S*	mögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Mein	PPOSAT	(VP(NP*	mein	sg	neut	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Näschen	NN	*)	näsche	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	alles	PIS	*)	alle	sg	neut	-	(261)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	stecken	VVINF	*))	stecken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	mag	VMFIN	*	mögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Mein	PPOSAT	(NP*	mein	sg	neut	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Händchen	NN	*)	händchen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	allem	PIS	*)	alle	sg	neut	-	(261)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	haben	VAFIN	*)	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bin	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	darum	PROAV	(VP*	darum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	*	der	sg	fem	-	(262
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Welt	NN	*)	welt	sg	fem	-	262)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	geschieden	VVPP	*)	scheiden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	mich	PPER	*))	mich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	um	APPR	(S(NP(PP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	mich	PPER	*)	mich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	andre	ADJA	*)	andre	sg	*	-	(716)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	der	ART	*	der	sg	fem	-	(262
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Welt	NN	*))	welt	sg	fem	-	262)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Noch	ADV	(VP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	erst	ADV	(AVP*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	recht	ADV	*)	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	verwickeln	VVINF	*)))	verwickeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	mit	APPR	(VROOT(PSEUDO(AP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hast	NN	*)	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*)	ihn	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zukommend	ADJD	*)	zukommend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Guter	ADJA	(VROOT(PSEUDO(NP*	gut	sg	masc	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bruder	NN	*)	bruder	sg	masc	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*)	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hab	VVFIN	*	hab	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	lange	ADV	*	lange	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Gesucht	NN	*	gesucht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mich	PPER	(VROOT(PSEUDO(NP*	mich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Herr	NN	*)	herr	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	sg	neut	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	(AVP*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	ADV	*))	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(CNP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	KON	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	glaubte	VVFIN	*	glauben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	daß	KOUS	(S*	daß	-	-	-	(717
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	den	ART	(NP*	der	pl	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Herrn	NN	*)	herr	pl	masc	-	717)|61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	In	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	meinem	PPOSAT	*	mein	sg	neut	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Leben	NN	*)	leben	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wieder	ADV	(AVP*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nie	ADV	*)	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Bekommen	NN	*)	bekommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	würde	VAFIN	*))	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hofft	VVFIN	*	hoffen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*	es	sg	neut	-	(717)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Dem	ART	*	der	sg	neut	-	(22
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	lieben	ADJA	*	lieb	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Gott	NN	*	gott	sg	masc	(PER*)	22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	(S(NP(NP*	der	sg	masc	-	(22
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	liebe	ADJA	*	liebe	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gott	NN	*)	gott	sg	masc	(PER*)	22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	PDS	*)	der	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Wie	NN	*)	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sauer	ADJD	(S*	sauer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mir	PPER	*	sich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	der	ART	(NP*	der	sg	masc	-	(714
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Antrag	NN	*)	antrag	sg	masc	-	714)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ward	VVFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	den	PRELS	(S*	der	sg	masc	-	(714)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Dem	ART	(VP(NP*	der	sg	neut	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Herrn	NN	*)	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	tun	VVINF	*))	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	verbunden	VVPP	*	verbinden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	war	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ob	KOUS	*	ob	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gewünscht	VVPP	*	wünschen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ein	ART	*	ein	sg	neut	-	(68
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	offnes	ADJA	*	offn	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ohr	NN	*	ohr	sg	neut	-	68)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Euch	PPER	*	euch	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Zu	NN	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	finden	VVINF	*	finden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	sehr	ADV	*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	mich	PPER	*	mich	sg	-	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	gefreut	VVPP	*	freuen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Im	APPRART	*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Innersten	NN	*	innersten	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	gefreut	VVPP	*	freuen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	rund	ADV	*	rund	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Das	PDS	*	der	sg	neut	-	(714
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	alles	PIS	*	alle	sg	neut	-	714)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	ohne	KOUI	*	ohne	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	viel	PIAT	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	Bedenken	NN	*	bedenken	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	wies	VVFIN	*	weisen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	t	PPER	*	T	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	was	PRELS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	einem	ART	*	ein	sg	masc	-	(121
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	Ritter	NN	*	ritter	sg	masc	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	geziemt	VVPP	*	ziemen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*)	ihr	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	(VP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hats	ADV	(AVP*	hats	-	-	-	(714)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nachgewirkt	VVPP	*	nachgewirken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wißt	VVFIN	*	wissen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(718)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	warum	PWAV	(S*	warum	-	-	-	(718
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	komme	VVFIN	*))	kommen	sg	-	-	718)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kaum	ADV	(VROOT(PSEUDO(S*	kaum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Weiß	VVFIN	*	weiße	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(718)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	habts	VAFIN	*	habts	pl	-	-	(714)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	überlegt	VVPP	*	überlegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Habt	VAFIN	*	haben	sg	-	-	(719
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gefunden	VVPP	*	finden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	der	ART	*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Patriarch	NN	*	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Unrecht	NN	*	unrecht	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Ehr	NN	*	ehr	-	-	-	(424)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Geld	NN	*	geld	sg	neut	-	(346)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Durch	APPR	*	durch	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	seinen	PPOSAT	*	sein	sg	masc	-	(271|(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Anschlag	NN	*	anschlag	sg	masc	-	271)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	gewinnen	VVINF	*	gewinnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Ein	ART	*	ein	sg	masc	-	(720
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Feind	NN	*	feind	sg	masc	-	720)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Feind	NN	*	feind	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	er	PPER	*	er	sg	masc	-	(720)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	unser	PPOSAT	*	unser	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	Engel	NN	*	engel	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	siebenmal	ADV	*	siebenmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	gewesen	VAPP	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	wäre	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	.	$.	*	--	-	-	-	719)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S(AVP(S*	der	sg	neut	-	(719)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	habt	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(VP*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Fleisch	NN	(CNP*	fleisch	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Blut	NN	*))	blut	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	erwogen	VVPP	*))	erwägen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Und	KON	*)	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	tragt	VVFIN	(S*	tragen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Euch	PPER	*	euch	pl	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	an	PTKVZ	*))	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ach	ITJ	(S*)	ach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gott	NN	(S*)	gott	-	-	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(5|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	frommer	ADJA	*	fromm	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	lieber	ADJA	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Mann	NN	*)	mann	sg	masc	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	gebt	VVPP	(VROOT(PSEUDO(S*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*	euch	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zufrieden	ADJD	*)	zufrieden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Deswegen	PROAV	*	deswegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	komm	VVIMP	*	komm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	deswegen	PROAV	*	deswegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Patriarchen	NN	*	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sprechen	VVINF	*	sprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denk	ADJD	*	denk	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	über	APPR	*	über	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	jenen	PDAT	*	jener	sg	masc	-	(714
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Punkt	NN	*	punkt	sg	masc	-	714)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wie	KOKOM	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Gedacht	NN	*	gedacht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	wollt	VMFIN	*	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	um	APPR	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	alles	PIS	*	alle	sg	neut	-	(377
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	der	ART	*	der	sg	fem	-	(262
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Welt	NN	*	welt	sg	fem	-	377)|262)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Die	ART	*	der	sg	fem	-	(721
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	gute	ADJA	*	gut	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Meinung	NN	*	meinung	sg	fem	-	721)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	verlieren	VVINF	*	verlieren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	deren	PRELAT	*	der	pl	masc	-	(721)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	ein	ART	*	ein	sg	masc	-	(232
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	grader	ADJD	*	grader	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	frommer	ADJD	*	fromm	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	lieber	ADJA	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	Mann	NN	*	mann	-	-	-	232)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	Einmal	ADV	*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	gewürdiget	VVPP	*	gerdigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	komme	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bloß	PTKVZ	*	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Den	ART	(VP(NP*	der	pl	*	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Patriarchen	NN	*)	patriarch	pl	*	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	über	APPR	(PP*	über	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	eine	ART	*	ein	sg	fem	-	(722
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Sache	NN	*)	sache	sg	fem	-	722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Um	APPR	(PP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Rat	NN	*)	Rat	sg	masc	-	(723)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	fragen	VVINF	*)))	fragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(NP*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	den	ART	(NP*	der	pl	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Patriarchen	NN	*))	patriarch	pl	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(CNP(NP*	ein	sg	masc	-	(121
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ritter	NN	*)	ritter	sg	masc	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	einen	ART	(NP*	ein	sg	masc	-	(724
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	ADJA	*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Pfaffen	NN	*))	pfaffe	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	724)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sich	PRF	(VROOT(PSEUDO(AP*	sich	sg	-	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schüchtern	ADJD	*	schüchtern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	umsehend	ADJD	*)	umsehend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	*	der	sg	fem	-	(722
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sach	NE	*	sach	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ist	NE	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ziemlich	ADV	*	ziemlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	pfäffisch	ADJD	*	pfäffisch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gleichwohl	ADV	(VROOT(PSEUDO(S*	gleichwohl	-	-	-	(725
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fragt	VVFIN	*	fragen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	fem	-	(724
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Pfaffe	NN	*	pfaff	sg	fem	-	724)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Den	NE	(MPN*	der	sg	masc	-	(121
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ritter	NE	*))	ritter	sg	masc	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nie	ADV	*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	die	ART	(S(NP*	der	sg	fem	-	(726
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Sache	NN	*)	sache	sg	fem	-	726)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	auch	ADV	(AP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ritterlich	ADJD	*)))	ritterlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	725)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Weil	KOUS	*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(724)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	*	der	sg	neut	-	(727
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vorrecht	NN	*	vorrecht	sg	neut	-	727)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Sich	PRF	*	sich	sg	-	-	(724)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	vergehn	VVINF	*	vergehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	das	PDS	*	der	sg	neut	-	(727)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	unser	PPOSAT	*	unser	sg	neut	-	(121
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	einer	PIS	*	ein	sg	masc	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ihm	PPER	*	ihm	sg	masc	-	(724)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sehr	ADV	*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	beneidet	VVFIN	*	beneiden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Für	APPR	*	für	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	handeln	VVINF	*	handeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Rechenschaft	NN	*	rechenschaft	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	geben	VVINF	*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	braucht	VVFIN	*	brauchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Euers	NE	*	euer	sg	masc	-	(8|(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Patriarchen	NN	*	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	(VROOT(PSEUDO*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gewisse	FM	*	gewiß	-	-	-	(726
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Dinge	NN	(NP*	ding	-	-	-	726)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	will	VMFIN	(CS(S*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	lieber	ADV	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	schlecht	ADJD	*)	schlecht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Nach	APPR	(VP(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	andrer	ADJA	*	andr	sg	fem	-	(226|(728)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Willen	NN	*)	wille	-	-	-	226)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	machen	VVINF	*	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	als	KOKOM	(AVP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	allein	ADV	*))))	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Nach	APPR	(AP(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	meinem	PIS	*)	mein	sg	masc	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	gut	ADJD	*)	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zudem	PROAV	*	zudem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	seh	VVFIN	*	seh	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Religion	NN	*	religion	sg	fem	-	(531)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Partei	NN	*	partei	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	wer	PWS	*	wer	sg	masc	-	(1031)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Sich	PRF	*	sich	sg	-	-	(730)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	drob	VVFIN	*	drob	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	unparteiisch	ADJD	*	unparteiisch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	glaubt	VVFIN	*	glauben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Hält	NN	*	halten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	ohn	PPER	*	ohn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	wissen	VVINF	*	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	seiner	PPOSAT	*	sein	sg	fem	-	(531)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	Die	ART	*	der	sg	fem	-	(638
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	Stange	NN	*	stange	-	-	-	638)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Weil	KOUS	(VROOT(PSEUDO(S(S*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	ART	*	der	sg	neut	-	(729)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	einmal	ADV	*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ist	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Wirds	NN	*	wird	-	-	-	(729)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	recht	ADJD	(VP*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sein	VAINF	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dazu	PROAV	*	dazu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schweig	VVFIN	*	schweig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	lieber	ADV	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	versteh	VVFIN	*	versteh	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	den	ART	(NP*	der	pl	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Herrn	NN	*	herr	pl	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	recht	ADV	*)))	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	(	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Laß	NN	*	lassen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	warum	PWAV	*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	eigentlich	ADV	*	eigentlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	tun	VVINF	*	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Um	KOUI	(VROOT(PSEUDO(PP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Machtspruch	NN	*	machtspruch	sg	masc	-	(731)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	oder	KON	(CNP*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Rat	NN	*	Rat	sg	masc	-	(492)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Um	KOUI	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	lautern	VVINF	*	lautern	pl	-	-	(731)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Gelehrten	ADJA	*	gelehrt	sg	masc	-	(492
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Rat	NN	*	Rat	sg	masc	-	492)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	)	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	dank	APPR	*	dank	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Euch	PPER	*	euch	pl	*	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Bruder	NN	*	bruder	*	*	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	dank	APPR	*	dank	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Euch	PPER	*	euch	pl	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	den	ART	*	der	sg	masc	-	(725
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	guten	ADJA	*	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Wink	NN	*	wink	sg	masc	-	725)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Patriarch	NN	*	patriarch	-	-	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Seid	VAFIN	(S*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mein	PPOSAT	(NP*	mein	sg	neut	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Patriarch	NN	*))	patriarch	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Den	NE	(VP(NP*	der	sg	masc	-	(259
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Christen	NN	*)	christ	sg	masc	(MISC*)	259)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mehr	ADV	*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	im	APPRART	(CPP(PP*	in	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Patriarchen	NN	*)	patriarchen	sg	neut	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Den	ART	*	der	pl	*	-	(285
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Patriarchen	NN	*	patriarch	pl	*	-	285)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	dem	ART	*	der	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Christen	NN	*)))	christ	sg	neut	(MISC*)	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	fragen	VVINF	*))	fragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	*	der	sg	fem	-	(722
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sach	NE	*	sach	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	die	PDS	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiter	ADV	*	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Herr	NN	(NP*	herr	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	(CO(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	weiter	ADV	*))))	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wozu	PWAV	(VROOT(PSEUDO*	wozu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	(S(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Herr	NN	*)	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	verkennt	VVFIN	*	verkennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	*)	mich	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wer	PWS	(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	viel	PIS	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Hat	VAFIN	(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	viel	ADV	(VP*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sorgen	VVINF	*))))	sorgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ja	ADV	(VP*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Mich	APPR	(PP*	mich	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Einer	ART	*	einer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Sorge	NN	*)	sorge	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	gelobt	VVPP	*))	loben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	O	NE	*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gut	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hört	VVIMP	*	hören	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	seht	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dort	ADV	(VROOT(PSEUDO(S*	dort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	meinem	PPOSAT	*	mein	sg	masc	-	(732|(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Glück	NN	*)	glück	sg	masc	-	732)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	er	PPER	(NP*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	selbst	ADV	*))	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bleibt	VVFIN	(VROOT(PSEUDO(S*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	stehn	CARD	*))	stehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	(VP*	euch	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	erblickt	VVPP	*))	erblicken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(CNP(NP*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Patriarch	NN	*	patriarch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	welcher	PRELS	(S*	welcher	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	allem	PIS	*)	alle	sg	neut	-	(733
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	geistlichen	ADJA	(NP*	geistlich	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Pomp	NN	*)	pomp	sg	neut	-	733)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	den	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	einen	ADJA	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Kreuzgang	NN	*)	kreuzgang	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	heraufkömmt	VVFIN	*))	heraufkömmen	sg	-	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	die	ART	(NP*	der	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Vorigen	NN	*))	vorige	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1038)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wich	VVFIN	*	weichen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	*	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	lieber	ADV	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	aus	PTKVZ	*)	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wär	VAFIN	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mein	PPOSAT	*	mein	-	-	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Mann	NN	*	mann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ein	ART	(NP*	ein	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dicker	ADJA	(CAP*	dick	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	roter	ADJA	*))	rot	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	freundlicher	ADJA	*	freundlich	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Prälat	NN	*	prälat	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	welcher	PWAT	(NP*	welcher	sg	masc	-	(733
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Prunk	NN	*))	prunk	sg	masc	-	733)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	solltet	VMFIN	*	sollten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	erst	ADV	(NP*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sehn	CARD	*)	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nach	APPR	(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Hofe	NN	*)	hof	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sich	PRF	(VP*	sich	sg	-	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	erheben	VVINF	*))	erheben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Itzo	NE	(VROOT(PSEUDO(S*	itzo	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Er	PPER	(NP*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	einem	ART	*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Kranken	NN	*)))	kranke	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sich	PRF	*	sich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nicht	PTKNEG	*	nicht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Saladin	NE	*	saladin	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	schämen	VVINF	*	schämen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	müssen	VMINF	*	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*))	patriarch	-	-	-	(8)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	indem	KOUS	(VROOT(PSEUDO(S(S*	indem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	näher	ADJD	*	nah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kömmt	VVFIN	*)	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	winkt	VVFIN	*	winken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dem	ART	(NP*	der	sg	masc	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Bruder	NN	*))	bruder	sg	masc	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hier	ADV	(VROOT(PSEUDO(S*)	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	(NP*	der	sg	fem	-	(532
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Tempelherr	NN	*))	tempelherr	sg	fem	-	532)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Weiß	NN	*	weiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*))	patriarch	-	-	-	(8)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	auf	APPR	(VROOT(PSEUDO(AP(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*)	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zugehend	ADJD	*	zugehend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	indem	KOUS	(S*	indem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	(NP*	der	sg	masc	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Bruder	NN	*)	bruder	sg	masc	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	das	ART	(VP(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Gefolge	NN	*)	gefolge	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zurücktreten	VVINF	*)))	zurücktreten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Herr	NN	(NP*	herr	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ritter	NE	*)	ritter	sg	masc	(PER*)	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sehr	ADV	(NP(AP*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	erfreut	ADJD	*)	erfreuen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Den	ART	*	der	pl	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	braven	ADJA	*)	brave	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	jungen	ADJA	(NP*	jung	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Mann	NN	*	mann	-	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sehn	CARD	*))	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ei	XY	*	ei	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	noch	ADV	(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	So	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gar	ADV	(S(ISU*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	jung	ADJD	*))	jung	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(VP(VP(AP(AVP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(NP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Gottes	NN	*	gott	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Hülfe	NN	*	hülfe	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	daraus	PROAV	*)	daraus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Kann	NE	*))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	etwas	PIS	*))	etwas	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	werden	VAINF	*)	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mehr	ADV	*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ehrwürd	NE	*	ehrwürd	-	-	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ger	ADJA	*	g	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Herr	NN	*	herr	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Wohl	NN	*	wohl	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	schwerlich	ADJD	*	schwerlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eher	ADV	*	eher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	weniger	ADV	*	weniger	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wünsche	VVFIN	*	wünschen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wenigstens	ADV	*	wenigstens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*	so	-	-	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	frommer	ADJA	*	fromm	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ritter	NN	*)	ritter	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	lange	ADV	(AVP*	lange	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Der	ART	(NP*	der	sg	masc	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	lieben	ADJA	*	lieben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Christenheit	NN	*	christenheit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	der	ART	(CS(S(NP*	der	sg	fem	-	(517
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Sache	NN	*)	sache	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Gottes	NN	(CNP(NP*	gott	sg	masc	(LOC*)	517)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Ehr	NN	*))	ehr	sg	fem	-	(424)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Frommen	NN	*)	fromme	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	blühn	VVFIN	*)	blühn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	grünen	VVFIN	*))	grün	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	möge	VMFIN	*))	mögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S(S*	der	sg	neut	-	(424)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	(VP*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	fehlen	VVINF	*))	fehlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	fein	ADJD	*	fein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Die	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	junge	ADJA	*	jung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Tapferkeit	NN	*)	tapferkeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	dem	ART	(VP(NP*	der	sg	masc	-	(734
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	reifen	ADJA	*	reifen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Rate	NN	*	rate	sg	fem	-	734)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Des	ART	(NP*	der	sg	masc	-	(735
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Alters	NN	*))	alter	sg	masc	-	735)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	folgen	VVINF	*)	folgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	will	VMFIN	*))	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Womit	NN	*	womit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wär	VAFIN	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Dem	ART	*	der	sg	neut	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Herrn	NN	*	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dienen	VVINF	*	dienen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mit	APPR	(VROOT(PSEUDO(S(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dem	ART	*	der	sg	masc	-	(734
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nämlichen	ADJA	*)	nämlich	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	734)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Woran	PWAV	(S*	woran	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	meiner	PPOSAT	(NP*	mein	sg	fem	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Jugend	NN	*)	jugend	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	fehlt	VVFIN	*	fehlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Rat	NN	*)))	Rat	-	-	-	(723)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Recht	NN	(VROOT(PSEUDO(NP*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gern	ADV	*)	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	(S*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(VP(NP*	der	sg	masc	-	(723
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Rat	NN	*)	Rat	sg	masc	-	723)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	anzunehmen	VVIZU	*))	annehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	(736
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	blindlings	ADV	*	blindlings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*)	nicht	-	-	-	736)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	(NP*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*))	der	sg	neut	-	(736)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ei	XY	*	ei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	freilich	ADV	(S*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Muß	NN	*	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	niemand	PIS	(VP*	niemand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	(NP*	der	sg	fem	-	(87
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Vernunft	NN	*	vernunft	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	die	ART	(S(NP*	der	sg	fem	-	(87)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Gott	NN	*)	gott	sg	fem	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ihm	PPER	*	ihm	sg	masc	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gab	VVFIN	*	geben	sg	-	-	87)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Zu	PPER	(S*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	brauchen	VVFIN	*)))	brauchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	unterlassen	VVINF	*))	unterlassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	wo	PWAV	(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	sie	PPER	*	sie	sg	fem	-	(87)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	hin	ADV	*	hin	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Gehört	VVFIN	*)	gehören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gehört	VVFIN	(S*	gehören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*)	sie	sg	fem	-	(87)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	(AVP*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	überall	ADV	*)	überall	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Denn	KON	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hin	ADV	*)	hin	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	O	XY	*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nein	PTKANT	*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zum	APPRART	(NP(PP*	zu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Beispiel	NN	*)	beispiel	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wenn	KOUS	(NP(CS(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	uns	PPER	*	uns	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Gott	NN	*	gott	sg	masc	(PER*)	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Durch	APPR	(PP*	durch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	einen	PIS	*	ein	sg	masc	-	(737
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	seiner	PPOSAT	(NP*	sein	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Engel	NN	*)))	engel	sg	-	-	737)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	–	NN	(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sagen	VVINF	*)	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Durch	APPR	(PP*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	einen	ART	*	ein	sg	masc	-	(737
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Diener	NN	*	diener	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	seines	PPOSAT	(NP*	sein	sg	neut	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Worts	NN	*))))	wort	sg	neut	-	737)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	–	KOUS	(S*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	ein	ART	(NP*	ein	sg	neut	-	(738
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Mittel	NN	*)	mittel	sg	neut	-	738)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Bekannt	NN	(VP*	bekannt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	machen	VVINF	*))	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	würdiget	VVFIN	*	würdiget	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	das	ART	(VP(NP*	der	sg	neut	-	(738)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	Wohl	NN	*	wohl	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	ganzen	ADJA	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	Christenheit	NN	*)	christenheit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	das	ART	(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	Heil	NN	*	heil	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	der	ART	(CNP(NP*	der	sg	masc	-	(739
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	Kirche	NN	*)	kirche	sg	masc	-	739)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	Auf	APPR	(AVP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	irgend	ADV	*)	irgend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	eine	ART	(NP*	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	ganz	ADV	(AP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	besondre	ADJA	*)	besondre	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	Weise	NN	*	weise	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	Zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	fördern	NN	*)))))	fördern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	50	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	51	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	52	befestigen	VVINF	*)))))	befestigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	53	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	54	wer	PWS	(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	55	darf	VMFIN	*	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	56	Sich	PRF	*	sich	sg	-	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	57	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	58	noch	ADV	(AP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	59	unterstehn	ADJD	*)	unterstehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	60	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	61	die	ART	(NP*	der	sg	fem	-	(517
Nathan.xml.rkpt.0.CoNLL2012.conll	000	62	Willkür	NN	*)	willkür	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	63	des	ART	(NP*	der	sg	masc	-	(22
Nathan.xml.rkpt.0.CoNLL2012.conll	000	64	,	$,	*	--	-	-	-	517)|22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	65	Der	PRELS	(S*	der	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	66	die	ART	(NP*	der	sg	fem	-	(87
Nathan.xml.rkpt.0.CoNLL2012.conll	000	67	Vernunft	NN	*)	vernunft	sg	fem	-	87)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	68	erschaffen	VVFIN	*))	erschaffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	69	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	70	nach	APPR	(VP(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	71	Vernunft	NN	*)	vernunft	sg	fem	-	(87)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	72	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	73	untersuchen	VVINF	*)))	untersuchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	74	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	ART	(NP*	der	sg	neut	-	(740
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ewige	ADJA	*	ewig	sg	neut	-	740)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gesetz	NN	*	gesetz	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(NP*	der	sg	fem	-	(22
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Herrlichkeit	NN	*	herrlichkeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	des	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Himmels	NN	*)	himmel	sg	masc	-	22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nach	APPR	(NP(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Den	NE	*	der	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	kleinen	ADJA	*	klein	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Regeln	NN	*)	regel	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	einer	PIS	*)))	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	eiteln	VVFIN	*	eiteln	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Ehre	NN	(VP*	ehre	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	prüfen	VVINF	*)))	prüfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(CO(AVP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hiervon	PROAV	*	hiervon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	genug	ADV	*))	genug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Es	PPER	(NP*	es	sg	neut	-	(722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	worüber	PWAV	(S*	worüber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	unsern	PPOSAT	(NP*	unsern	-	-	-	(723
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Rat	NN	*)	Rat	sg	masc	-	723)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	itzt	ADJD	*))))	itzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Der	ART	(S(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Herr	NN	*)	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	verlangt	VVFIN	*)	verlangen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gesetzt	VVPP	*	setzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ehrwürd	NE	*	ehrwürd	-	-	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ger	ADJA	*	g	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Vater	NN	*	vater	-	-	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ein	ART	*	ein	sg	neut	-	(741
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Jude	NN	*	jude	sg	neut	-	741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	hätt	VAFIN	*	hätt	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ein	ART	*	ein	sg	neut	-	(742
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	einzig	ADJD	*	einzig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Kind	NN	*	kind	sg	neut	-	742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	–	NN	*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	es	PPER	*	es	sg	neut	-	(742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Mädchen	NN	*	mädchen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	–	$.	*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	das	PDS	*	der	sg	neut	-	(742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	er	PPER	*	er	sg	masc	-	(741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	der	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	größten	ADJA	*	groß	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Sorgfalt	NN	*	sorgfalt	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	allem	PIS	*	alle	sg	neut	-	(156
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Guten	NN	*	gute	pl	*	-	156)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	auferzogen	VVPP	*	auferehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	das	ART	*	der	sg	neut	-	(742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	Er	NN	*	er	sg	masc	-	(741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	liebe	VVFIN	*	lieben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	mehr	PIS	*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	seine	PPOSAT	*	sein	sg	fem	-	(741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	Seele	NN	*	seele	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	das	PRELS	*	der	sg	neut	-	(742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	Ihn	PPER	*	ihn	sg	masc	-	(741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	der	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	frömmsten	ADJA	*	frömmst	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	Liebe	NN	*	liebe	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	liebe	VVFIN	*	lieben	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	würd	VAFIN	*	würd	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	unser	PPOSAT	*	unser	sg	masc	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	einem	PIS	*	ein	sg	masc	-	99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hinterbracht	VVPP	*	hintbringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Dies	APPRART	*	dieser	sg	neut	-	(742
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Mädchen	NN	*	mädchen	sg	neut	-	742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	des	ART	*	der	sg	masc	-	(741
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Juden	NN	*	Jude	sg	masc	(MISC*)	741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Tochter	NN	*	tochter	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Er	PPER	*	er	sg	masc	-	(741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	hab	VAFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	es	PPER	*	es	sg	neut	-	(742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	der	ART	*	der	sg	fem	-	(640
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Kindheit	NN	*	kindheit	sg	fem	-	640)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	aufgelesen	VVPP	*	auflesen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Gekauft	NN	*	gekauft	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	gestohlen	VVPP	*	stehlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	–	NN	*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Ihr	PPER	*	ihr	pl	*	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	wollt	VMFIN	*	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	man	PIS	*	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	wisse	VVFIN	*	wissen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	Das	ART	*	der	sg	neut	-	(742
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	Mädchen	NN	*	mädchen	sg	neut	-	742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	Christenkind	NN	*	christenkind	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	Getauft	NN	*	getauft	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	der	ART	*	der	sg	masc	-	(741
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	Jude	NN	*	jude	sg	masc	-	741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	hab	VAFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	50	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	51	es	PPER	*	es	sg	neut	-	(742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	52	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	53	als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	54	Jüdin	NN	*	jüdin	sg	fem	-	(743)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	55	Erzogen	VVPP	*	erziehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	56	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	57	laß	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	58	es	PPER	*	es	sg	neut	-	(742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	59	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	60	als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	61	Jüdin	NN	*	jüdin	sg	fem	-	(743)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	62	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	63	Als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	64	seine	PPOSAT	*	sein	sg	fem	-	(744|(741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	65	Tochter	NN	*	tochter	sg	fem	-	744)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	66	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	67	verharren	VVINF	*	verharren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	68	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	69	–	PPER	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	70	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	71	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	72	Ehrwürd	NE	*	ehrwürd	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	73	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	74	ger	ADJA	*	g	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	75	Vater	NN	*	vater	pl	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	76	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	77	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	78	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	79	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	80	hierbei	ADV	*	hierbei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	81	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	82	Zu	NN	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	83	tun	VVINF	*	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	84	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mich	PPER	(VROOT(PSEUDO(S*	mich	sg	*	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schaudert	VVFIN	*)	schaudern	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	allererst	ADV	*	allererst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Erkläre	NN	*	erkläre	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sich	PRF	*	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Herr	NN	*	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*	so	-	-	-	(722
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Fall	NN	*	fall	sg	masc	-	722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Ein	ART	*	ein	sg	neut	-	(745
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Faktum	NN	*	faktum	sg	neut	-	745)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	eine	ART	*	ein	sg	fem	-	(746
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Hypothes	NN	*	hypothes	-	-	-	746)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(747)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sagen	VVINF	*)	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ob	KOUS	(S(AVP(CS(S*	ob	-	-	-	(747
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Herr	NN	*)	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sich	PRF	*	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	das	ART	(NP*	der	sg	neut	-	747)|(722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Nur	NN	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	bloß	ADV	(AVP*	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	dichtet	VVFIN	*)	dichten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	obs	NN	(S*	ob	-	-	-	(722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	geschehn	VVPP	*))	geschehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Und	KON	*)	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	fortfährt	VVFIN	*	fortfahren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	zu	PTKA	(AP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	geschehn	ADJD	*)))	geschehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	glaubte	VVFIN	*	glauben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	(VP(NP*	der	sg	neut	-	(747)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sei	NN	*	sei	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	eins	CARD	*)	eins	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	um	KOUI	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Euer	PPOSAT	(NP*	euer	*	*	-	(723|(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Hochehrwürden	NN	*	hochehrwürd	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Meinung	NN	(NP*	meinung	sg	fem	-	723)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Bloß	NN	*))	bloß	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	vernehmen	VVINF	*)))	vernehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Eins	NN	(VROOT(PSEUDO*	eins	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Da	KOUS	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	seh	XY	*	seh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Herr	NN	*	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wie	PWAV	*	wie	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	*	sich	sg	-	-	(87)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	*	der	sg	fem	-	(87
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	stolze	ADJA	*	stolz	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	menschliche	ADJA	*	menschlich	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Vernunft	NN	*	vernunft	sg	fem	-	87)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Im	APPRART	*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Geistlichen	NN	*	geistliche	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	irren	VVINF	*	irren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nichten	VMFIN	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(722
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	vorgetragne	ADJA	*	vorgetragn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Fall	NN	*)	fall	sg	masc	-	722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ein	ART	(NP*	ein	sg	neut	-	(746
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Spiel	NN	*	spiel	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	des	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Witzes	NN	*))	witz	sg	masc	-	746)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	so	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	verlohnt	VVFIN	*	verlohnen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sich	PRF	*	sich	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Mühe	NN	*)	mühe	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	im	APPRART	(PP*	in	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Ernst	NN	*)))	ernst	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	ihn	PPER	(VP*	ihn	sg	masc	-	(722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	durchzudenken	VVIZU	*)	durchzudenken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	(VP(VP(NP*	der	pl	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Herrn	NN	*	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	damit	PROAV	(S(VP*	damit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Theater	NN	*)	theater	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Verwiesen	VVPP	*)	verweisen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	haben	VAFIN	*)	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wo	PWAV	(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	dergleichen	PIS	*	dergleichen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	pro	APPR	(PP*	pro	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Et	NN	*)	et	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	contra	VVFIN	*	contra	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	sich	PRF	*	sich	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	vielem	ADJA	*	vieler	sg	neut	-	(424
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Beifall	NN	*)	beifall	sg	neut	-	424)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	könnte	VMFIN	*))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Behandeln	VVINF	*)	behandeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	lassen	VVINF	*))	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Herr	NN	*	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	*	mich	sg	-	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	bloß	ADV	*	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	einer	ART	*	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	theatral	ADJD	*	theatral	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	schen	VVFIN	*	sch	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Schnurre	NE	*	schnurr	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Zum	APPRART	*	zu	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	besten	ADJA	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	der	ART	*	der	sg	masc	-	(722
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Fall	NN	*	fall	sg	masc	-	722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	ein	ART	*	ein	sg	neut	-	(745
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Faktum	NN	*	faktum	sg	neut	-	745)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	hätt	VAFIN	*	hätt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Er	PPER	*	er	sg	masc	-	(722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	sich	PRF	*	sich	sg	-	-	(722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	unsrer	ADJA	*	unsrer	sg	fem	-	(14|(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Diözes	NN	*	diöz	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	'	$(	*	--	-	-	-	14)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	In	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	unsrer	ADJD	*	unsrer	sg	masc	-	(14|(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	lieben	ADJA	*	lieb	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	Stadt	NN	*	stadt	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	Jerusalem	NE	*	jerusalem	sg	neut	(LOC*)	14)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	Eräugnet	NN	*	eräugnet	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	alsdann	ADV	*	alsdann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	–	CARD	*	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	alsdann	ADV	*	alsdann	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dann	ADV	(VROOT(PSEUDO(S*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wäre	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	*	der	sg	neut	-	(741
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Juden	NN	*)	Jude	sg	neut	-	741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	fördersamst	VVFIN	*	fördersamen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Die	ART	(NP*	der	sg	fem	-	(748
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Strafe	NN	*	strafe	sg	fem	-	748)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	vollziehn	NN	*)	vollziehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	die	ART	(NP*	der	sg	fem	-	(748)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	päpstliches	ADJA	*))	päpstlich	sg	neut	-	(749)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Und	KON	(NP*	und	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	kaiserliches	ADJA	*	kaiserlich	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Recht	NN	*)	recht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	so	ADV	(NP(AP*	so	-	-	-	(722
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	einem	ART	*)	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Frevel	NN	*)	frevel	sg	masc	-	722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	So	ADV	(VP*	so	-	-	-	(722
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	einer	ART	(NP*	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Lastertat	NN	*)	lastertat	sg	fem	-	722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	bestimmen	VVINF	*))	bestimmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	zwar	ADV	*	zwar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bestimmen	VVFIN	*	bestimmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	obbesagte	ADJA	(NP*	obbesagt	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Rechte	NN	*	recht	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Dem	ART	(NP*	der	sg	neut	-	(750
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Juden	NN	*)	Jude	pl	masc	(MISC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	welcher	PRELS	(S*	welcher	pl	masc	-	(750)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	einen	ART	(NP*	ein	sg	masc	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Christen	NN	*	christ	sg	masc	-	99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zur	APPRART	(PP*	zu	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Apostasie	NN	*))	apostasie	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	verführt	VVFIN	*))	verführen	sg	-	-	750)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Den	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Holzstoß	NN	*))	holzstoß	sg	masc	(MISC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	–	$.	*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vielmehr	ADV	*	vielmehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	(NP*	der	sg	neut	-	(751
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Juden	NN	*	Jude	sg	neut	(MISC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	751)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Der	PRELS	(S*	der	sg	masc	-	(751)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Gewalt	NN	*)	gewalt	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ein	ART	(NP*	ein	sg	neut	-	(742
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	armes	ADJA	*	arm	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Christenkind	NN	*	christenkind	sg	neut	-	742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Dem	ART	(NP*	der	sg	neut	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Bunde	NN	*	bunde	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	seiner	PPOSAT	(NP*	sein	pl	masc	-	(742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Tauf	NN	*)))	tauf	-	-	-	99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	entreißt	VVFIN	*)))	entreißen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nicht	PTKNEG	(CNP(NP*	nicht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	alles	PIS	*)	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	was	PRELS	(NP*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	man	PIS	*))	man	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Kindern	NN	*	kind	pl	neut	-	(124)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	tut	VVFIN	*	tun	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Gewalt	NN	*)	gewalt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zu	PTKZU	*	zu	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sagen	VVINF	*	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	PPER	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ausgenommen	VVPP	*	ausnehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	die	ART	*	der	sg	fem	-	(739
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Kirch	NE	*	kirch	sg	fem	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	739)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	An	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Kindern	NN	*	kind	pl	neut	-	(124)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	tut	VVFIN	*	tun	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	aber	ADV	(VP*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	(PP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	*	der	sg	neut	-	(742
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Kind	NN	(CNP*	kind	sg	neut	-	742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Erbarmte	NN	*)	erbarmte	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	seiner	PPOSAT	*	sein	pl	neut	-	(742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sich	PRF	(S*	sich	sg	-	-	(741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	(NP*	der	sg	masc	-	(741
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Jude	NN	*)	jude	sg	masc	-	741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Vielleicht	NN	*	vielleicht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	im	APPRART	(PP*	in	sg	neut	-	(147
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Elend	NN	*))	elend	sg	neut	-	147)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	umgekommen	VVPP	*)	umkommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	wäre	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Tut	XY	*	tut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(741
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Jude	NN	*)	jude	sg	masc	-	741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	verbrannt	VVPP	*)	verbrennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	besser	ADJD	*	gut	-	-	-	(752
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	752)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Es	PPER	*	es	sg	neut	-	(742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wäre	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hier	ADV	(VP*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	im	APPRART	(PP*	in	sg	neut	-	(147
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Elend	NN	*)	elend	-	-	-	147)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	umgekommen	VVPP	*))	umkommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Als	NE	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	zu	APPR	(VP(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	seinem	PPOSAT	*	sein	sg	masc	-	(753|(742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ewigen	ADJA	*	ewig	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Verderben	NN	*)	verderben	sg	neut	-	753)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Es	PPER	(NP*	es	sg	neut	-	(742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	gerettet	VVPP	*))	retten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	ward	VVFIN	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zu	APPR	(NP(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dem	PDS	*)	der	sg	neut	-	(752)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	was	PRELS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Der	ART	(VP(NP*	der	sg	masc	-	(741
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Jude	NN	*	jude	sg	masc	-	741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Gott	NN	*)	gott	sg	masc	(PER*)	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	vorzugreifen	VVIZU	*)))	vorgreifen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gott	NN	*	gott	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kann	NE	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wen	PWS	*	wen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	retten	VVINF	*	retten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ohn	PPER	*	ohn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ihn	PPER	*	ihn	sg	masc	-	(741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	retten	VVFIN	*	retten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Trotz	VVFIN	*	trotz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	masc	-	(741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sollt	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	meinen	VVFIN	*	meinen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	PPER	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	selig	ADJD	*	selig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	machen	VVINF	*	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Tut	XY	*	tut	-	-	-	(754
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(741
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Jude	NN	*)	jude	sg	masc	-	741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	verbrannt	VVPP	*)	verbrennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	754)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	*	der	sg	neut	-	(754)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nah	ADJD	*	nah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Besonders	ADV	(VROOT(PSEUDO(CS(S*	besonders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	da	KOUS	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	man	PIS	*	man	sg	*	-	(75)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	(S*	er	sg	masc	-	(755|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	habe	VAFIN	*	haben	sg	-	-	755)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Das	ART	(NP*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Mädchen	NN	*)	mädchen	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sowohl	KON	*	sowohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	in	APPR	(S(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	seinem	PPOSAT	*	sein	sg	neut	-	(1062)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	als	KOKOM	(AP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Vielmehr	ADV	*	vielmehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	keinem	PIAT	*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Glauben	NN	*)	glaube	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	auferzogen	VVPP	*	auferehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Gott	NN	*)	gott	sg	masc	(PER*)	(445)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	mehr	ADV	*)	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	weniger	ADV	*))	weniger	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Gelehrt	NN	*)	gelehrt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	der	ART	(NP*	der	sg	masc	-	(87
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	Vernunft	NN	*)	vernunft	sg	masc	-	87)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	genügt	VVFIN	*)))	genügen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Tut	XY	*	tut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(741
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Jude	NN	*	jude	sg	masc	-	741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	verbrannt	VVPP	*	verbrennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	dieserwegen	PDAT	*	dieserwegen	-	-	-	(755)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	wert	ADJD	*	wert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	dreimal	ADV	*	dreimal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	verbrannt	VVPP	*	verbrennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Zu	NN	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	werden	VAINF	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ein	ART	*	ein	sg	masc	-	(124
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kind	NN	*	kind	sg	masc	-	124)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ohn	PPER	*	ohn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	allen	PIAT	*	aller	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Glauben	NN	*	glaube	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Erwachsen	NN	*	erwachsen	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	lassen	VVINF	*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	große	ADJA	*	groß	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Pflicht	NN	*	pflicht	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Zu	NN	*)	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	glauben	VVFIN	*	glauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ganz	ADV	(VP(CAVP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gar	ADV	*)	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ein	ART	(NP*	ein	sg	neut	-	(124
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Kind	NN	*)	kind	sg	neut	-	124)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	lehren	VVINF	*))	lehren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKA	(AP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	arg	ADJD	*))	arg	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mich	PPER	(S*	mich	sg	*	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wundert	VVFIN	*	wundern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sehr	ADV	*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Herr	NN	(NP*	herr	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ritter	NE	*)	ritter	sg	masc	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Euch	PPER	(NP*	euch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	selbst	ADV	*))	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ehrwürd	NE	*	ehrwürd	-	-	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ger	ADJA	*	g	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Herr	NN	*	herr	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	*	der	sg	neut	-	(757
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	übrige	ADJA	*	übrig	sg	neut	-	757)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Wenn	KOUS	*	wenn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Gott	NN	*	gott	sg	masc	(PER*)	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	der	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Beichte	NN	*	beichte	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Will	VMFIN	*	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gehn	CARD	*	gehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	mir	PPER	(VROOT(PSEUDO(S*	sich	sg	*	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nicht	PTKNEG	(NP(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	einmal	ADV	*)	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Rede	NN	*)	rede	-	-	-	(757)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	stehn	VVFIN	*)	stehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Den	ART	(NP*	der	sg	masc	-	(741
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bösewicht	NN	*	bösewicht	sg	masc	-	741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Den	NE	(VP(NP*	der	sg	masc	-	(741
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Juden	NE	*)	Jude	pl	masc	-	741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nennen	VVINF	*))	nennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	*	sich	sg	*	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Zur	APPRART	(VP(PP*	zu	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Stelle	NN	*)	stelle	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	schaffen	VVINF	*))	schaffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	O	NE	*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	da	ADV	(S*)	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	weiß	VVFIN	(S*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Rat	NN	*)	Rat	sg	masc	-	(723)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geh	XY	*	geh	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sogleich	ADV	*	sogleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zum	APPRART	*	zu	-	-	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sultan	NN	*	sultan	sg	neut	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Saladin	NN	*	saladin	-	-	(PER*)	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vermöge	NN	(NP*	vermöge	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(NP*	der	sg	fem	-	(758
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Kapitulation	NN	*	kapitulation	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	758)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Die	NN	(CS(S*	der	sg	fem	-	(758)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	beschworen	VVFIN	*	beschwören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	muß	VMFIN	(S*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	uns	PPER	*	uns	pl	*	-	(75)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	muß	VMFIN	(S*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	uns	PPER	*	uns	pl	*	-	(75)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	schützen	VVINF	(VP*	schützen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Bei	APPR	(CO(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	allen	PIAT	*	aller	pl	*	-	(749
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Rechten	NN	*)	rechte	pl	*	-	749)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	allen	PIAT	(VP(NP*	aller	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Lehren	NN	*)	lehre	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	schützen	VVINF	*))))))	schützen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Die	PDS	(S*	der	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	wir	PPER	*	wir	pl	*	-	(75)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	unsrer	ADJD	(AP*	unsrer	sg	*	-	(333|(75)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	allerheiligsten	ADJA	*))	allerheiligster	pl	fem	-	333)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Religion	NN	*	religion	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	nur	ADV	(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	immer	ADV	*)	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	rechnen	VVINF	*	rechnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	dürfen	VMFIN	*))))	dürfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gottlob	NE	(VROOT(PSEUDO(MPN*	gottlob	-	-	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wir	PPER	(VROOT(PSEUDO(S*	wir	pl	*	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	haben	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(NP*	der	sg	neut	-	(22
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Original	NN	*))	original	sg	neut	-	22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wir	PPER	(VROOT(PSEUDO(S*	wir	pl	*	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	haben	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	seine	PPOSAT	(CNP(NP*	sein	sg	fem	-	(212|(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Hand	NN	*)	hand	sg	fem	-	212)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sein	PPOSAT	(NP*	sein	-	-	-	(740|(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Siegel	NN	*)))	siegel	sg	masc	-	740)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wir	PPER	*	wir	pl	*	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mach	VVFIN	*	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	leicht	ADJD	*	leicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	begreiflich	ADJD	*	begreiflich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wie	KOKOM	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Gefährlich	ADJD	*	gefährlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	selber	ADV	*	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	den	ART	*	der	sg	masc	-	(168
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Staat	NN	*	staat	sg	masc	-	168)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	es	PPER	*	es	sg	neut	-	(759)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Nichts	NN	*	nichts	*	neut	-	(759
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	glauben	VVINF	*	glauben	-	-	-	759)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Alle	PIAT	(VROOT(PSEUDO(S(S(NP*	aller	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bürgerliche	ADJA	*	bürgerlich	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bande	NN	*)	Bande	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sind	VAFIN	*	sein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	aufgelöset	VVPP	*)	auelösen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zerrissen	VVPP	*	zerreißen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Der	ART	(NP*	der	sg	masc	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Mensch	NN	*)	mensch	sg	masc	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nichts	PIS	(VP*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	glauben	VVINF	*)	glauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	darf	VMFIN	*))	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hinweg	NN	*	hinweg	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	hinweg	ADV	(VROOT(PSEUDO(PP*	hinweg	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	solchem	PIAT	*	solcher	sg	neut	-	(722
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Frevel	NN	*)	frevel	sg	neut	-	722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Schade	ADJD	(VROOT(PSEUDO(S*	schade	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Den	ART	(VP(NP*	der	sg	masc	-	(723
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	trefflichen	ADJA	*	trefflich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Sermon	NN	*	sermon	-	-	-	723)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	beßrer	ADJA	*	beßr	-	-	-	(288
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Muße	NN	*))	muße	-	-	-	288)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Genießen	VVINF	*)	genießen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	kann	VMFIN	*))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zum	APPRART	(VP(PP*	zu	sg	neut	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Saladin	NN	*)	saladin	sg	neut	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Gerufen	VVPP	*))	gerufen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(AVP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	CARD	(PP*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nun	ADV	(AP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	–	CARD	*)	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Dann	NN	*)	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	–	XY	*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	(VP(NP*	der	sg	masc	-	(760|(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sultan	NN	*)	sultan	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	vorbereiten	VVINF	*	vorbereiten	-	-	-	760)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Es	PPER	(NP*	es	sg	neut	-	(760)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Eurer	PPOSAT	(NP*	eurer	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Hochehrwürden	NN	*))	hochehrwürde	pl	fem	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gefällt	VVFIN	*)))	fällen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(S*)	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	oh	FM	*	oh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(S(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Herr	NN	*)	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gnade	NN	*	gnade	sg	fem	-	(458)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	funden	VVFIN	*))	fund	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Vor	APPR	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Saladin	NE	*	saladin	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(VP(VP(NP*	ich	sg	*	-	(761|(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bitte	ADV	*)	bitte	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	meiner	PIS	*	mein	sg	fem	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	761)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Im	APPRART	(PP*	in	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	besten	ADJA	*	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihm	PPER	*))	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	eingedenk	VVPP	*)	eingedenk	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sein	VAINF	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mich	PPER	(S*	mich	sg	*	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	treibt	VVFIN	*	treiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(NP*	der	sg	masc	-	(517
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Eifer	NN	*))	eifer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Gottes	NN	(NP*	gott	sg	masc	(LOC*)	517)|(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	lediglich	ADV	*)	lediglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKA	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	viel	PIS	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	tu	PPER	*	tu	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	tu	PPER	*	tu	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihm	PPER	*	ihm	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(761)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wolle	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Doch	NE	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	(VP(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Herr	NN	*)	herr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	erwägen	VVINF	*))	erwägen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wahr	PTKVZ	*)	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Herr	NN	*	herr	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ritter	NN	*	ritter	sg	masc	(PER*)	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(722
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	vorhin	ADV	(NP*	vorhin	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Erwähnte	NN	*)	erwähnt	sg	neut	-	722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Dem	ART	*	der	sg	masc	-	(741
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Juden	NN	*))	Jude	sg	masc	(MISC*)	741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ein	ART	*	ein	sg	neut	-	(746
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Problema	NN	*))	problema	sg	neut	-	746)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Zu	PPER	(VP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sagen	VVINF	*))	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	$.	*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	neut	-	(746
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Problema	NN	*)	problema	sg	neut	-	746)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	(VROOT(PSEUDO(S*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ab	PTKVZ	*)	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	(	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Dem	VVIMP	*	der	sg	neut	-	(746)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	tiefer	ADJD	*	tief	-	-	-	(762)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	den	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Grund	NN	*	grund	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	kommen	VVINF	*	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	suchen	VVINF	*	suchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	*	der	sg	neut	-	(762)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wiederum	ADV	*	wiederum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Auftrag	NN	*	auftrag	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Den	ART	*	der	sg	masc	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Bruder	NN	*	bruder	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Bonafides	NE	*	bonafide	sg	neut	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	)	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	mein	PPOSAT	*	mein	sg	masc	-	(5|(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Sohn	NN	*	sohn	sg	masc	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	spricht	VVFIN	*	sprechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	im	APPRART	(PP*	in	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Abgehn	NN	*	abgehn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dem	ART	*	der	sg	masc	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Klosterbruder	NN	*)))	klosterbruder	sg	masc	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Szene	NN	(VROOT(PSEUDO(S*	szene	sg	fem	-	(763)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	(764
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Zimmer	NN	*	zimmer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	im	APPRART	(PP*	in	sg	masc	-	(175
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Palaste	NN	*	palast	sg	masc	-	175)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	des	ART	(NP*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Saladin	NN	*	saladin	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	in	APPR	(VP(CVP(VP(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	welches	PRELS	*)	welcher	sg	neut	-	(764)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Sklaven	NN	*	sklave	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	eine	ART	(NP*	ein	sg	fem	-	(765
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Menge	NN	*	menge	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Beutel	NN	*))	beutel	-	-	-	765)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	getragen	VVPP	*)	tragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	auf	APPR	(VP(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	dem	ART	*	der	sg	neut	-	(766
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Boden	NN	*)	boden	sg	neut	-	766)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	neben	APPR	(PP*	neben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	einander	PPER	*)	einander	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	gestellt	VVPP	*))	stellen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	werden	VAINF	*)))))	werden	-	-	-	764)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO*	saladin	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bald	ADV	(S(AVP*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	darauf	PROAV	*)	darauf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sittah	NE	*)	sittah	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	*	der	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dazu	PROAV	*	dazu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kömmt	VVFIN	*	kömmen	sg	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S(ISU*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wahrlich	ADJD	*))	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(489)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	(NP(AP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kein	PIAT	*)	kein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ende	NN	*))	ende	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Des	ART	(NP*	der	sg	masc	-	(489
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Dings	NN	*)	dings	sg	masc	-	489)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	viel	PIS	*	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zurück	PTKVZ	*)	zurück	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	EIN	NE	(VROOT(PSEUDO(MPN*	ein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	SKLAVE	NE	*)	sklave	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wohl	ADV	(VROOT(PSEUDO(S*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	noch	ADV	(NP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	*	der	sg	fem	-	(767
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Hälfte	NN	*))	hälfte	sg	fem	-	767)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	(768
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	tragt	VVFIN	*	tragen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(NP*	der	sg	neut	-	(767
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	übrige	ADJA	*)	übrig	sg	neut	-	767)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Sittah	NE	*))	sittah	-	-	-	768)|(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wo	PWAV	(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Al-Hafi	NE	*)	al-hafi	sg	*	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(765)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hier	ADV	*)	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sogleich	ADV	(VP(NP*	sogleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Al-Hafi	NE	*)	al-hafi	-	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	*)	sich	sg	-	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nehmen	VVINF	*))	nehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Oder	NE	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ob	KOUS	(S*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ichs	NE	*	ich	-	-	-	(765)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	vielmehr	ADV	*))	vielmehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dem	ART	(S(NP*	der	sg	masc	-	(174
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Vater	NN	*)	vater	sg	masc	-	174)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	schicke	VVFIN	*)	schicken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hier	ADV	(VROOT(PSEUDO(S*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Fällt	VVFIN	*	fallen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(765)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	(PP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	durch	APPR	*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	*	der	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Finger	NN	*))	finger	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zwar	ADV	*	zwar	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Man	PIS	(NP(CS(S*	man	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	endlich	ADV	*	endlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hart	ADJD	*)	hart	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	(S(AVP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nun	ADV	*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	gewiß	ADV	*	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Solls	NN	*	soll	-	-	-	(769)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Künste	NN	(VP*	kunst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	kosten	VVINF	*)))	kosten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	mir	PPER	(VP*	sich	sg	*	-	(769|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	viel	PIS	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	abzuzwacken	VVIZU	*))	abzwacken	-	-	-	769)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bis	APPR	(VROOT(PSEUDO(S(S(PP*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wenigstens	ADV	*)	wenigstens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	pl	neut	-	(347
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gelder	NN	*	geld	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ägypten	NE	*)	ägypten	sg	neut	-	347)|(348)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Zur	APPRART	(PP*	zu	sg	fem	-	(175
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Stelle	NN	*))	stelle	sg	fem	-	175)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	kommen	VVFIN	*)	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mag	VMFIN	*	mögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	das	ART	(NP*	der	sg	neut	-	(382
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Armut	NN	*)	armut	sg	neut	-	382)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sehn	PPOSAT	(AP(NP*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Wies	NN	*)	wies	-	-	-	(382)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	fertig	ADJD	*)	fertig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	wird	VAFIN	*)	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	*	der	pl	masc	-	(770
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Spenden	NN	*	spende	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	*	der	sg	neut	-	(77
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Grabe	NN	*	grabe	sg	neut	-	770)|77)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	die	ART	*	der	sg	fem	-	(770)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	fortgehn	FM	*	fortgehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	(NP*	der	pl	masc	-	(247
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Christenpilger	NN	*	christenpilger	pl	masc	(MISC*)	247)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mit	APPR	(PP*	mit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	leeren	ADJA	*	leer	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Händen	NN	*))	hand	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	abziehn	VVINF	*	abziehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dürfen	VMFIN	*)	dürfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	–	NN	*)))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	(NP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*))	der	sg	neut	-	(768)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(PP*	der	sg	neut	-	(767
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Geld	NN	*	geld	sg	neut	-	767)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bei	APPR	(PP*	bei	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*)))	sich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mach	VVIMP	*	mach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PRF	*	dich	sg	*	-	(358)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	davon	PROAV	*	davon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bezahlt	VVPP	*	bezahlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	leg	VVFIN	*	leg	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Vorrat	NN	*	vorrat	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	was	PIS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	übrig	ADJD	*	übrig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	(MPN*	nathan	sg	fem	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Noch	NE	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	*	der	sg	neut	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Tempelherrn	NN	*)	tempelherr	sg	neut	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	da	PTKVZ	*)	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sucht	VVFIN	*	suchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aller	PIAT	(NP*	aller	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Orten	NN	*))	ort	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sieh	VVIMP	(VROOT(PSEUDO(S(S*	sieh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Indem	KOUS	(VP(S*	indem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mir	PPER	*	sich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mein	PPOSAT	(NP*	mein	sg	neut	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	alt	ADJD	*	alt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Geschmeide	NN	*)	geschmeide	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	durch	APPR	(PP*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Die	ART	*	der	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Hände	NN	*)	hand	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	geht	VVFIN	*)	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	gefunden	VVPP	*))	finden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihm	PPER	(VROOT(PSEUDO(AP(NP*	ihm	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ein	ART	*	ein	sg	masc	-	(771
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	klein	ADJD	*	klein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gemälde	NN	*)	gemälde	-	-	-	771)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zeigend	ADJD	*)	zeigend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ha	XY	*	ha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(131|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bruder	NN	*)	bruder	sg	masc	-	131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	*	der	sg	neut	-	(771)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(772)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	*	er	sg	masc	-	(772)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	War	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(772)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(772)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ah	XY	*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	*	ah	-	-	-	(131
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wackrer	ADJA	*	wackrer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	lieber	ADJA	(NP*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Junge	NN	*	junge	-	-	-	131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dich	PRF	*	dich	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	früh	ADJD	*	früh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	verlor	VVFIN	*))	verlieren	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hätt	VAFIN	*	hätt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dir	PPER	*	dir	sg	*	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	An	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	deiner	PPOSAT	*	dein	sg	fem	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Seit	NN	*	seit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	unternommen	VVPP	*	unternehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sittah	NE	*	sittah	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Laß	NN	(NP*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	(NP*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	*	der	sg	neut	-	(771
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Bild	NN	*))	bild	sg	neut	-	771)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kenn	KOUS	*	kenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ichs	ADJD	*	ichs	-	-	-	(1014)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gab	VVFIN	*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Es	PPER	*	es	sg	neut	-	(771)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	deiner	PPOSAT	*	dein	sg	fem	-	(773|(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ältern	NN	*	ältern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Schwester	NN	*	schwester	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	seiner	PPOSAT	*	sein	sg	fem	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Lilla	NN	*	lilla	sg	fem	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	773)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Die	NN	*	der	sg	fem	-	(773)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	eines	ART	*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Morgens	NN	*	morgen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	ihn	PPER	*	ihn	sg	masc	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	aus	APPR	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	den	ART	*	der	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Armen	NN	*	arme	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	lassen	VVINF	*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	wollt	VMFIN	*	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(774)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	letzte	ADJA	*	letzter	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	den	PRELS	(S*	der	sg	masc	-	(774
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ausritt	VVFIN	*)))	ausreten	sg	-	-	774)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	(NP*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ließ	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ihn	PPER	*))	ihn	sg	masc	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	reiten	VVFIN	*	reiten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Lilla	NE	*	lilla	-	-	(PER*)	(773)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	starb	VVFIN	(CS(S*	sterben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Vor	APPR	(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Gram	NN	*))	gram	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	hat	VAFIN	(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mirs	ADV	(VP(VP*	mir	-	-	-	(775)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nie	ADV	*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	vergeben	VVPP	*	vergeben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	daß	KOUS	(S*	daß	-	-	-	(775)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	so	ADV	*))	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	ihn	PPER	*	ihn	sg	masc	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	reiten	VVINF	*	reiten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	lassen	VVINF	*)))	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	(S*	er	sg	masc	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Blieb	VVFIN	*	blieb	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	weg	PTKVZ	*)	weg	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(131
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	arme	ADJA	*	arm	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bruder	NN	*)	bruder	sg	masc	-	131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	NN	(VROOT(PSEUDO(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gut	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sein	NN	*)	sein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Einmal	ADV	(S*)	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bleiben	VVFIN	(S*	bleiben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wir	PPER	*	wir	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	alle	PIS	*	alle	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	weg	PTKVZ	*)	weg	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zudem	PROAV	*	zudem	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	XY	*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(659
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Tod	NN	*)	tod	sg	masc	-	659)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ists	ADV	*	ist	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(PP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Der	PRELS	(S*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	einem	ART	(NP*	ein	sg	masc	-	(776
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Jüngling	NN	*	jüngling	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	seiner	PPOSAT	(NP*	sein	sg	fem	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Art	NN	*))	Art	sg	fem	-	776)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	das	ART	(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Ziel	NN	*)	ziel	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Verrückt	VVFIN	*)))	verrückt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(776)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP(CNP(NP*	der	sg	masc	-	(720
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Feinde	NN	*	feind	sg	masc	-	720)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mehr	ADV	*)	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	oft	ADV	(NP*	oft	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Erliegt	NN	*))	erliegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Stärkste	NN	*))	stärkst	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gleich	ADV	*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	dem	ART	(NP*	der	sg	masc	-	(567
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Schwächsten	NN	*))	schwache	sg	masc	-	567)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(NP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sei	NN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wie	KOKOM	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihm	PPER	*	ihm	sg	masc	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sei	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	(VP(NP*	der	sg	neut	-	(771
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bild	NN	*)	bild	sg	neut	-	771)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Dem	ART	*	der	sg	neut	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	jungen	ADJA	*	jung	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Tempelherrn	NN	*)	tempelherr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	vergleichen	VVINF	*)	vergleichen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	wie	KON	(S*	wie	-	-	-	(777
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	viel	ADV	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	mich	PPER	*	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	meine	PPOSAT	(NP*	mein	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Phantasie	NN	*)))	phantasie	sg	fem	-	777)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Getäuscht	NN	*	getäuscht	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	darum	PROAV	*	darum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bring	FM	*	bring	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ichs	APPRART	*	ichs	-	-	-	(771)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gib	VVIMP	*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gib	VVIMP	*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(DL(S*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dir	PPER	*	dir	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*	der	sg	neut	-	(777)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sagen	VVINF	*)	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	das	ART	(S(NP*	der	sg	neut	-	(777)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Versteht	NN	*)	verstehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ein	ART	(NP*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	weiblich	ADJD	*	weiblich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Aug	NN	*)	aug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	am	PTKA	(AP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	besten	ADJD	*)))	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	zu	APPR	(VROOT(PSEUDO(CO(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	einem	ART	*	ein	sg	neut	-	(778
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Türsteher	NN	*)	türsteher	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(NP*	der	sg	masc	-	(778)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hereintritt	NN	*))	hereintreten	sg	masc	-	778)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	da	ADV	*)	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Tempelherr	NN	*)	tempelherr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	komm	VVIMP	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Euch	ADV	*	euch	-	-	-	(779)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	stören	VVINF	*	stören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	meiner	PPOSAT	*	mein	sg	fem	-	(780|(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Neugier	NN	*	neugier	sg	fem	-	780)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	irren	VVINF	*	irren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	–	XY	*	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(CS(S*	sie	sg	fem	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	setzt	VVFIN	*	setzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	*	sich	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	seitwärts	ADV	*	seitwärts	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	einen	ART	*	ein	sg	masc	-	(781
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Sofa	NN	*))	sofa	sg	masc	-	781)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	läßt	VVFIN	(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	den	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Schleier	NN	*)	schleier	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	fallen	VVINF	*))	fallen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gut	ADJD	(VROOT(PSEUDO*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	(S*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	gut	ADJD	(VROOT(PSEUDO*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	(	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sein	PPOSAT	*	sein	-	-	-	(477|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ton	NN	*	ton	-	-	-	477)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	(VP(AVP*	der	sg	masc	-	(477)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*)	wohl	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sein	VAINF	*)	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wird	VAFIN	*)	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Assads	NE	*	assad	-	-	(LOC*)	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ton	NE	*	ton	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Schläft	NE	*	schläft	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	meiner	PPOSAT	*	mein	sg	fem	-	(367|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Seele	NN	*	seele	sg	fem	-	367)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	)	$(	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(CNP(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherr	NN	*)	tempelherr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Saladin	NN	*)	saladin	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(61|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dein	PPOSAT	(NP*	dein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gefangner	NN	*	gefangner	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Sultan	NN	*))	sultan	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(61|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gefangner	NN	*)	gefangner	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wem	PWS	*	wem	sg	-	-	(782
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	*	der	sg	neut	-	(606
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Leben	NN	*	leben	sg	neut	-	606)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schenke	VVFIN	*	schenken	sg	-	-	782)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	werd	VVFIN	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dem	ART	*	der	sg	neut	-	(782)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Nicht	NN	*	nicht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	die	ART	*	der	sg	fem	-	(126
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Freiheit	NN	*	freiheit	sg	fem	-	126)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	schenken	VVINF	*	schenken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dir	PPER	*	dir	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ziemt	VVFIN	*)	ziemen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Zu	NN	(VP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	tun	VVINF	*)	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ziemt	VVFIN	*	ziemen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mir	PPER	(NP(VP*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	vernehmen	VVINF	*))	vernehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Vorauszusetzen	NN	*	vorauszusetzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sultan	NE	*	sultan	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	XY	*	–	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Dank	NN	*	dank	sg	*	-	(783)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Besondern	NN	*	besond	*	*	-	(783
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Dank	APPR	*	dank	sg	*	-	783)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dir	PPER	*	dir	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	mein	PPOSAT	*	mein	sg	neut	-	(63|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Leben	NN	*	leben	sg	neut	-	63)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Beteuern	NN	*	beteuer	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	stimmt	VVFIN	*	stimmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	meinem	PPOSAT	*	mein	sg	masc	-	(152|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Stand	NN	*	stand	sg	masc	-	152)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	meinem	PPOSAT	*	mein	sg	masc	-	(1023)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Charakter	NN	*	charakter	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	(S*	es	sg	neut	-	(63)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	steht	VVFIN	*	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	allen	PIAT	*	aller	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Fällen	NN	*))	fall	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	deinen	PPOSAT	(NP*	dein	pl	neut	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Diensten	NN	*	dienst	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wieder	ADV	*)	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Brauch	VVFIN	(VROOT(PSEUDO(S*	brauch	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	es	PPER	*	es	sg	neut	-	(63)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nicht	NN	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wider	APPR	(PP*	wider	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mich	PPER	*))	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zwar	ADV	*	zwar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	*	ein	*	*	-	(784
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Paar	NN	*	paar	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Hände	NN	*	hand	pl	fem	-	784)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	ADV	*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Die	ART	*	der	pl	masc	-	(784)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gönnt	VVFIN	*	gönnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	meinem	PPOSAT	*	mein	sg	masc	-	(121|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Feinde	NN	*	feind	sg	-	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Allein	ADV	(VROOT(PSEUDO(AP(S*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihm	PPER	*	ihm	sg	*	-	(121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	(AVP*	so	-	-	-	(282
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ein	ART	(S(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Herz	NN	*)	herz	sg	masc	-	282)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	(VP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mehr	ADV	*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gönnen	VVINF	*))))	gönnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	fällt	VVFIN	*	fallen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Mir	NE	*)	sich	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	schwer	ADJD	*)	schwer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PRF	*	mich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dir	PPER	*)	dir	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nichts	PIS	*))	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Betrogen	NN	*	betroge	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	braver	ADJA	*	brav	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	junger	ADJA	(NP*	jung	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Mann	NN	*)	mann	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mit	APPR	(PP*	mit	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Seel	NN	(CNP*	seel	sg	*	(PER*)	(282)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Leib	NN	*)))	leib	sg	*	-	(785)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mein	PPOSAT	(NP*	mein	sg	neut	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Assad	NN	*)	assad	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sieh	NE	(VROOT(PSEUDO*	sieh	-	-	-	(786
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ich	PPER	(VROOT(PSEUDO(DL(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	könnte	VMFIN	*	können	sg	-	-	786)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Dich	PPER	(VP*	dich	sg	neut	-	(787)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	fragen	VVINF	*))	fragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wo	PWAV	(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	du	PPER	*	du	sg	*	-	(787)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	denn	ADV	(VP(NP*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ganze	ADJA	*	ganz	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Zeit	NN	*)	zeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Gesteckt	VVPP	*)))	gesteckt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	in	APPR	(VROOT(PSEUDO(VP(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	welcher	PWAT	*	welcher	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Höhle	NN	*)	höhle	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	*	du	sg	*	-	(787)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	geschlafen	VVPP	*)	schlafen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	In	APPR	(VROOT(PSEUDO(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	welchem	PWAT	*	welcher	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ginnistan	NE	*	ginnistan	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	von	APPR	(VP(VP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	welcher	PWAT	*	welcher	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	guten	ADJA	*	gut	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Div	NN	*	div	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	diese	PDAT	(NP*	dieser	pl	neut	-	(787
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Blume	NN	*))	blume	pl	neut	-	787)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	fort	PTKVZ	(CAVP*	fort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	fort	PTKVZ	*)	fort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	frisch	ADJD	*	frisch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Erhalten	VVPP	*)	erhalten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	worden	VAPP	*))	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sieh	NE	(VROOT(PSEUDO*	sieh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ich	PPER	(VROOT(PSEUDO(S(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	könnte	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PRF	(VP*	dich	sg	-	-	(787)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Erinnern	VVINF	*))	erinnern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wollen	VMFIN	*	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wir	PPER	*	wir	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dort	ADV	*	dort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	dort	ADV	(VP*	dort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Zusammen	NN	*	zusammen	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ausgeführt	VVPP	*)))	ausführen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CS(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	könnte	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Dir	PPER	*)	dir	sg	*	-	(787)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zanken	VVINF	*))	zanken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*	du	sg	*	-	(787)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ein	ART	(NP*	ein	sg	neut	-	(788
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Geheimnis	NN	*)	geheimnis	sg	neut	-	788)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	doch	ADV	(VP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Vor	APPR	(AP(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mir	PPER	*))	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	gehabt	VAPP	*)))	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	*	ein	sg	masc	-	(788
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Abenteuer	NN	*	abenteuer	sg	masc	-	788)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	unterschlagen	VVINF	*	untschlagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	das	PDS	*	der	sg	neut	-	(786)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	könnt	VVFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	dich	PRF	*	dich	sg	-	-	(787)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	säh	NE	*	säh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	mich	PPER	*	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(NP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mags	ADV	*)	mags	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	(VROOT(PSEUDO(S(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dieser	PDAT	*	dieser	sg	masc	-	(789
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	süßen	ADJA	*	süß	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Träumerei	NN	*)	träumerei	-	-	-	789)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	immer	ADV	*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	(NP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	viel	PIS	*)	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wahr	PTKVZ	*	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	meinem	PPOSAT	*	mein	sg	masc	-	(790|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Herbst	NN	*)	herbst	sg	masc	-	790)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Ein	ART	(NP*	ein	sg	masc	-	(463
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Assad	NN	*)	assad	sg	masc	-	463)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	wieder	ADV	(VP*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	blühen	VVINF	*)	blühen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	soll	VMFIN	*))	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	(S*	du	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Es	PPER	(AP*	es	sg	neut	-	(789)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zufrieden	ADJD	*))	zufrieden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ritter	NN	*	ritter	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Alles	PIS	(VROOT(PSEUDO(NP*	alle	sg	neut	-	(791|(466
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PRELS	(CS*	was	sg	neut	-	(466)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Von	APPR	(S(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*)	dir	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	kömmt	VVFIN	*)	kömmen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	–	PPER	(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	will	VMFIN	*	wollen	sg	-	-	466)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Als	APPR	(PP*	als	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Wunsch	NN	*	wunsch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	meiner	PPOSAT	*	mein	sg	fem	-	(282|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Seele	NN	*))))))	seele	sg	fem	-	282)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	791)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	VVIMP	(VROOT(PSEUDO(S*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	uns	PPER	*	uns	pl	*	-	(779)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(NP*	der	sg	neut	-	(791)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sogleich	NN	*)	sogleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	versuchen	VVINF	*)	versuchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bliebst	VVFIN	(S*	bliebst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bei	APPR	(NP(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*))	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Um	KOUI	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Als	APPR	(NP(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Christ	NN	*)	christ	sg	masc	(PER*)	(443)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Muselmann	NN	*	muselmann	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gleich	ADV	(NP*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	viel	PIS	*)))	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Im	APPRART	(VROOT(PSEUDO(CS(PP*	in	sg	neut	-	(238
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weißen	ADJA	*	weiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mantel	NN	*)	mantel	sg	*	-	238)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Jamerlonk	NE	(S*	jamerlonk	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Im	APPRART	(PP*	in	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Tulban	NE	*))	tulban	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	deinem	PPOSAT	(S(NP*	dein	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Filze	NN	*)	filz	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	wie	KOKOM	(VP(NP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Du	PPER	*))	du	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	willst	VMFIN	*))	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gleich	ADV	(VROOT(PSEUDO(NP*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	viel	PIS	*)	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nie	ADV	(VP*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	verlangt	VVPP	*	verlangen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	allen	PIAT	(NP*	aller	pl	*	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Bäumen	NN	*	baum	pl	*	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Eine	ART	(NP*	ein	sg	fem	-	(209
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Rinde	NN	*))	rinde	sg	fem	-	209)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wachse	VVFIN	*)))	wachsen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sonst	ADV	(VROOT(PSEUDO(CS(S*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wärst	VVFIN	*	wären	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schwerlich	ADJD	*)	schwerlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	(S*	der	sg	masc	-	(792
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	bist	VAFIN	*	sein	sg	-	-	792)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Der	ART	(NP*	der	sg	masc	-	(792
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Held	NN	*	held	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	der	PRELS	(S*	der	sg	masc	-	(792)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	lieber	ADV	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Gottes	ADJA	(NP*	gott	sg	masc	-	(209)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Gärtner	NN	*)	gärtner	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	wäre	VAFIN	*))))	sein	sg	-	-	792)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(DL(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	schlechter	ADJD	*)	schlecht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mir	PPER	*)	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	denkst	VVFIN	*)	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	So	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wären	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wir	PPER	*	wir	pl	*	-	(779)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	halb	ADJD	*	halb	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	schon	ADV	(AP*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	richtig	ADJD	*)))	richtig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ganz	ADV	(VROOT(PSEUDO(S*)	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ihm	PPER	(VROOT(PSEUDO(AP*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	(NP*	der	sg	fem	-	(656
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Hand	NN	*)	hand	sg	fem	-	656)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bietend	ADJD	*)	bietend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wort	NN	*)	wort	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	einschlagend	ADJD	(VROOT(PSEUDO*	einschlagend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mann	NN	*)	mann	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hiermit	PROAV	*	hiermit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	empfange	VVFIN	*	empfangen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	PIAT	*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nehmen	VVINF	*	nehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	konntest	VMFIN	*	konntest	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ganz	ADV	(VROOT(PSEUDO(NP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Deine	NN	*)	dein	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zu	APPR	(VROOT(PSEUDO(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	viel	PIAT	(NP*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gewinn	NN	*)	gewinn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	einen	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Tag	NN	*)	tag	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	zu	PTKA	(VROOT(PSEUDO(AP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	viel	PIS	*)	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kam	NE	*	kam	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mit	PTKVZ	*)	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	frostig	ADJD	(VROOT(PSEUDO*	frostig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kam	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Allein	ADV	*)	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Welch	PWAT	(VROOT(PSEUDO(NP*	welch	sg	fem	-	(113
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eine	ART	(NP*	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Tat	NN	*)	tat	sg	fem	-	113)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*)	dir	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	welch	PWAT	(NP*	welcher	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ein	ART	(NP*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	weises	ADJA	*	weis	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Glück	NN	*)	glück	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	eine	ART	(NP*	ein	sg	fem	-	(144
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	solche	PIAT	(NP*	solcher	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Tat	NN	*))	tat	sg	fem	-	144)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Zum	APPRART	(PP*	zu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Besten	NN	*)	gut	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	eines	ART	(NP*	ein	sg	masc	-	(568
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	solchen	PIAT	(NP*	solcher	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Mannes	NN	*))	mann	sg	masc	-	568)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ausschlug	VVFIN	*)))	ausschlagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*)	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S(ISU*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kalt	ADJD	*))	kalt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nein	PTKANT	(S*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	junger	ADJA	(NP*	jung	pl	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Mann	NN	*))	mann	*	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*	gott	sg	masc	-	(445)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Was	PIAT	*	was	sg	neut	-	(156
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gutes	NN	*	gute	sg	neut	-	156)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	durch	APPR	*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	uns	PPER	*	uns	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	tut	VVFIN	*	tun	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	man	PIS	*	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	kalt	ADJD	*	kalt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	aus	APPR	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bescheidenheit	NN	*	bescheidenheit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kalt	ADJD	*	kalt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	scheinen	VVINF	*	scheinen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wollen	VMFIN	*	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	*	der	sg	fem	-	(262
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Welt	NN	*)	welt	sg	fem	-	262)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ein	ART	(NP*	ein	sg	neut	-	(43
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	jedes	PIAT	(NP*	jeder	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ding	NN	*))	ding	sg	neut	-	43)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	manche	PIAT	(NP*	mancher	pl	*	-	(793
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Seiten	NN	*)	seite	pl	fem	-	793)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	hat	VAFIN	*)	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Von	APPR	(AVP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denen	PDS	*)	der	pl	fem	-	(793)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	oft	ADV	*)	oft	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sich	PRF	(S(VP*	sich	sg	-	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gar	ADV	(AVP*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	denken	VVINF	*)	denken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	läßt	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Wie	PWAV	(VP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	pl	*	-	(793)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zusammenpassen	VVPP	*))	zusammenpassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Halte	VVFIN	*	halten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PPER	*	dich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	immer	ADV	*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	*	der	sg	fem	-	(445
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	best	FM	*	Best	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	445)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	preise	ADJA	*	preis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Gott	NN	*	gott	-	-	-	(445)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	PDS	(VROOT(PSEUDO(S*	der	sg	masc	-	(445)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	pl	fem	-	(793)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zusammenpassen	VVFIN	*))	zusammenpassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	schwierig	ADJD	*	schwierig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	willst	VAFIN	*	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	junger	ADJA	*	jung	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Mann	NN	*	mann	*	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	So	ADV	*	so	-	-	-	(794
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	werd	ADJD	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	meiner	PPOSAT	*	mein	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Hut	NN	*	hut	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Mich	PPER	*	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	dir	PPER	*	dir	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	halten	VVINF	*	halten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	müssen	VMFIN	*	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Leider	ADV	(VROOT(PSEUDO(S*	leider	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Auch	ADV	(VP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	(NP*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	(NP*	ein	sg	neut	-	(795
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ding	NN	*)	ding	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	vielen	PIAT	*	vieler	pl	fem	-	(793
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Seiten	NN	*))	seite	pl	fem	-	793)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	die	ART	(S(NP*	der	sg	fem	-	795)|(795)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Oft	NN	*)	oft	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	(VP(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	recht	ADJD	*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	passen	VVINF	*))	passen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	scheinen	VVFIN	*))	scheinen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	mögen	VMFIN	*)))	mögen	-	-	-	794)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(794)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schmerzt	VVFIN	*)	schmerzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Argwohn	NN	*	argwohn	sg	masc	-	(796)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	(NP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wenig	PIS	*))	wenig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sonst	ADV	(PP*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Mein	PPOSAT	*	mein	sg	masc	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Fehler	NN	*)	fehler	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	XY	*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sage	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	(S*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wem	PWS	*	wem	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Dus	NN	*	dus	sg	masc	-	(1047)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	hast	VVFIN	*))	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	(S*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schien	VVFIN	*	scheinen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Nathan	NE	*))	nathan	sg	*	(PER*)	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auf	APPR	(VROOT(PSEUDO(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	(MPN*	nathan	*	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Argwohn	NE	*))	argwohn	sg	*	-	(796)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	du	PPER	*	du	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Erklär	NN	*	erklär	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dich	PPER	*	dich	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	sprich	ADV	(VROOT(PSEUDO(S*)	sprich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Komm	NN	(VROOT(PSEUDO(CS*	komm	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gib	VVIMP	(S*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	deines	PPOSAT	(NP*	dein	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Zutrauns	NN	*)	zutraun	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	erste	ADJA	(NP*	erster	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Probe	NN	*)))	probe	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wider	APPR	(NP(PP*	wider	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*)	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	*))	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	zürn	VVFIN	*	zürn	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	–	XY	*	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	über	APPR	(PP*	über	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PIS	*))	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Geträumt	NN	*	geträumt	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	*	ein	sg	masc	-	(797|(98
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Jude	NN	*	jude	sg	masc	-	98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	könn	VMFIN	*	könn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ein	ART	*	ein	sg	masc	-	(304
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Jude	NN	*	jude	sg	masc	-	797)|304)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Zu	NN	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	verlernen	VVINF	*	verlernen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	wachend	ADJD	*	wachend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Geträumt	VVPP	*	geträumt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Heraus	NN	(VROOT(PSEUDO(NP*	heraus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	diesem	PDAT	*	dieser	sg	masc	-	(797
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wachen	ADJA	*	wach	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Traume	NN	*))	traume	-	-	-	797)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weißt	VVFIN	*	weißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	(NP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathans	NE	*)	nathan	sg	*	(PER*)	(2|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Tochter	NN	(CNP*	tochter	sg	fem	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Sultan	NN	*)))	sultan	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	(113)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	tat	VVFIN	*	taten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	das	PDS	*	der	sg	neut	-	(113)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	tat	VVFIN	*	taten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	weil	KOUS	*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ichs	CARD	*	ich	-	-	-	(113)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	tat	VVFIN	*	taten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zu	PTKA	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	stolz	ADJD	*	stolz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Dank	NN	*	dank	-	-	-	(74)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	einzuernten	VVIZU	*	einzuernen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihn	PPER	*	ihn	sg	masc	-	(74)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	säete	VVFIN	*	säen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	verschmäht	VVFIN	*	verschmähen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Tag	NN	*	tag	sg	masc	-	(798)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Tag	NN	*	tag	sg	neut	-	(798)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Das	ART	*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Mädchen	NN	*	mädchen	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	einmal	ADV	*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	sehn	VAINF	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	War	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	fern	ADJD	(VP(NP(CS*	fern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	hört	VVFIN	*	hören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	er	PPER	(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sucht	VVFIN	*	suchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mich	PRF	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	auf	PTKVZ	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Er	PPER	(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	dankt	VVFIN	*	danken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	wünscht	VVFIN	*)))))	wünschen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	seine	PPOSAT	(NP*	sein	sg	fem	-	(2|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Tochter	NN	*	tochter	sg	fem	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	mir	PPER	(S(NP*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Gefallen	NN	*)	gefallen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	möge	VMFIN	*	mögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	spricht	VVFIN	(S*	sprechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Aussicht	NN	*))))	aussicht	sg	fem	-	(799)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	spricht	VVFIN	*))	sprechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	Von	APPR	(VZ*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	heitern	VVINF	*)))	heitern	-	-	-	(452
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	Fernen	NN	*	fernen	-	-	-	452)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(S(AVP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	lasse	VVFIN	*))	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Beschwatzen	NN	*	beschwatze	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	komme	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sehe	VVFIN	(S*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	finde	VVFIN	(S*	finden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wirklich	ADJD	*	wirklich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Ein	ART	(NP*	ein	sg	masc	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Mädchen	NN	*))))	mädchen	sg	masc	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Ah	NE	(S*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	mich	PPER	(VP*	mich	sg	-	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	schämen	VVINF	*))	schämen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Sultan	NE	*	sultan	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dich	PPER	(VROOT(PSEUDO(S*	dich	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schämen	VVFIN	*)	schämen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	neut	-	(252
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Judenmädchen	NN	*)	judenmädchen	sg	neut	-	252)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Dich	PDAT	*	dich	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Eindruck	NN	*)	eindruck	sg	masc	-	(658)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	machte	VVFIN	*)	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nimmermehr	ADV	*	nimmermehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(CS(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	diesem	PDAT	(NP*	dieser	sg	masc	-	(658
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Eindruck	NN	*)	eindruck	sg	masc	-	658)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	*	der	sg	neut	-	(434
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	liebliche	ADJA	*	lieblich	sg	neut	-	434)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Geschwätz	NN	*	geschwätz	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	des	ART	(NP*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Vaters	NN	*))	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	hin	PTKVZ	*)	hin	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mein	PPOSAT	(S(NP*	mein	sg	neut	-	(282|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	rasches	ADJA	*	rasch	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Herz	NN	*)	herz	sg	neut	-	282)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	So	ADV	(AP(NP(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	wenig	PIAT	*)	wenig	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Widerstand	NN	*)	widerstand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	entgegen	APPO	*)	entgegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	setzte	VVFIN	*))	setzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(61|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Tropf	NN	*	tropf	sg	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sprang	VVFIN	*	springen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zum	APPRART	(PP*)	zu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zweitenmal	ADV	(PP*	zweitenmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ins	APPRART	*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Feuer	NN	*))	feuer	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	warb	VVFIN	*	werben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ward	VVFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	verschmäht	VVFIN	*))	verschmähen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Verschmäht	VVFIN	*	verschmähen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weise	ADJA	*	weise	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schlägt	VVFIN	*	schlagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	platterdings	ADV	*	platterdings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	aus	PTKVZ	*)	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(CO(VP(NP*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weise	ADJA	*	weise	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Vater	NN	*	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Muß	NN	*)	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	*	sich	sg	-	-	(800|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	erkunden	VVINF	*)	erkunden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	erst	ADV	(NP*	erst	-	-	-	800)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Besinnen	NN	*))	besin	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Allerdings	ADV	(VROOT(PSEUDO(S*)	allerdings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Tat	VVFIN	(VROOT(PSEUDO(S*	tat	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	(NP*	der	sg	neut	-	(800)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nicht	NN	*)	nicht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Erkundete	NN	(VROOT(PSEUDO(S*	erkundet	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	besann	VVFIN	*	besann	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	erst	ADV	(AVP*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	auch	ADV	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	im	APPRART	(PP*	in	sg	neut	-	(62
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Feuer	NN	*)	feuer	sg	neut	-	62)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	schrie	VVFIN	*))	schreien	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Fürwahr	NN	*	fürwahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	bei	APPR	(VROOT(PSEUDO(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*)	gott	-	-	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(801)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(VP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	was	PIS	(NP*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Schönes	NE	*	schöne	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	So	ADV	(S(AVP*	so	-	-	-	(801
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	weise	ADV	*	weise	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	bedächtig	ADJD	*))	bedächtig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sein	VAINF	*))	sein	-	-	-	801)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sieh	VVIMP	(S*	sieh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	einem	ART	(NP*	ein	sg	masc	-	(735
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Alten	NN	*)	alt	sg	masc	-	735)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	etwas	PIS	*	etwas	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nach	PTKVZ	*)	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(CS(S(AVP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	lange	ADV	*)	lange	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	können	VMFIN	*	können	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	seine	PPOSAT	(NP*	sein	pl	fem	-	(62|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Weigerungen	NN	*))	weigerung	pl	fem	-	62)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dauern	VVINF	*)	dauern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wird	VAFIN	(VROOT(PSEUDO(S*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(VP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*)	dir	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	verlangen	VVINF	*)	verlangen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	du	PPER	*	du	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	erst	ADV	(VP*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Jude	NN	*	jude	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	werden	VAINF	*)	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sollst	VMFIN	*))	sollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*)	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*)	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	diesen	PDAT	(S(NP*	dieser	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NN	*)	nathan	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	besser	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kennt	VVFIN	*)	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(531
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Aberglaub	NN	*	aberglaub	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dem	PRELS	*	der	sg	neut	-	(531)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wir	PPER	*	wir	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	aufgewachsen	VVPP	*	aufwachsen	-	-	-	531)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Verliert	VVPP	*	verlieren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wir	PPER	*	wir	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ihn	PPER	*	ihn	sg	masc	-	(531)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	erkennen	VVFIN	*	erkennen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	darum	PROAV	*	darum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Doch	PPER	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	seine	PPOSAT	*	sein	sg	fem	-	(531)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Macht	NN	*	macht	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	über	APPR	*	über	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	uns	PPER	*	uns	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	(NP(S*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	alle	PIS	*)	aller	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	frei	ADJD	*)	frei	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	die	PRELS	(S*	der	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihrer	PPOSAT	(NP*	ihr	sg	fem	-	(531|(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ketten	NN	*)	kette	pl	fem	-	531)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	spotten	VVFIN	*))	spotten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sehr	ADV	(VROOT(PSEUDO(VP*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	reif	ADJD	*	reif	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bemerkt	VVPP	*)	bemerken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*	nathan	pl	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wahrlich	ADJD	*	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(802
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Aberglauben	NN	*	aberglauben	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schlimmster	ADJD	*	schlimmster	sg	masc	-	802)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	den	ART	*	der	sg	masc	-	(531
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	seinen	PPOSAT	*	sein	sg	masc	-	531)|(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	den	ART	*	der	sg	masc	-	(592
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	erträglichern	NN	*	erträglichern	-	-	-	592)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	halten	VVINF	*	halten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mag	VMFIN	(VROOT(PSEUDO(S*	mögen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wohl	NN	(VP*	wohl	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sein	VAINF	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dem	KOUS	(VROOT(PSEUDO(S*	der	sg	neut	-	(531)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Die	ART	(VP(NP*	der	sg	fem	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	blöde	ADJA	*	blöd	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Menschheit	NN	*)	menschheit	sg	fem	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	vertrauen	VVINF	*))	vertrauen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	bis	KOUS	(S*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Sie	PPER	*	sie	pl	masc	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	hellern	VVFIN	*	hellern	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Wahrheitstag	NN	*))	wahrheitstag	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	gewöhne	PTKVZ	*	gewöhnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	dem	ART	*	der	sg	masc	-	(531)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gut	ADJD	(VROOT(PSEUDO*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	(VROOT(PSEUDO*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathans	NN	*	nathan	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Los	NE	(S(MPN*	los	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ist	NE	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	diese	PDAT	(NP*	dieser	sg	fem	-	(802
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Schwachheit	NN	*)	schwachheit	sg	fem	-	802)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dacht	VVFIN	*	dacht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gleichwohl	ADV	*	gleichwohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dieser	PDAT	*	dieser	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ausbund	NN	*	ausbund	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	aller	PIAT	*	aller	pl	masc	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Menschen	NN	*	mensch	pl	masc	-	1)|52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	So	ADV	*	so	-	-	-	(46
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gemeiner	ADJA	*	gemein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Jude	NN	*	jude	sg	masc	-	46)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wäre	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Christenkinder	NN	*	christenkind	pl	neut	(MISC*)	(742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	bekommen	VVINF	*	bekommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	suche	VVFIN	*	suchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Um	KOUI	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	sie	PPER	*	sie	pl	masc	-	(742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Juden	NN	*	Jude	pl	masc	-	(743)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	aufzuziehn	VVIZU	*	aufziehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	wie	KOKOM	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	(722
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	was	PWS	*	was	sg	neut	-	722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nach	PTKVZ	*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mädchen	NN	*	mädchen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	selbst	ADV	(PP*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Mit	APPR	(S(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	welcher	PRELS	(S*	welcher	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	körnt	VVFIN	*)	körnen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mit	APPR	(S(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	deren	PRELAT	*	der	sg	fem	-	(799|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Hoffnung	NN	*)	hoffnung	sg	fem	-	799)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Er	PPER	(NP*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	gern	ADV	*)	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	mir	PPER	(VP*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	bezahlen	VVINF	*))	bezahlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	schiene	VVFIN	*	schien	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	was	PWS	(S*	was	sg	neut	-	(113)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	umsonst	ADV	*)	umsonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	für	APPR	(VP(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	sie	PPER	*)	sie	pl	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	getan	VVPP	*)	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	soll	VMFIN	*)))	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	haben	VAFIN	*	haben	pl	-	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Dies	PDS	(NP*	dieser	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Mädchen	NN	*	mädchen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	selbst	ADV	*	selbst	-	-	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	ist	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	seine	PPOSAT	(AP(NP*	sein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	Tochter	NN	*)	tochter	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	–	APPO	*)))	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	;	$.	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	Ist	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	ein	ART	*	ein	sg	neut	-	(708
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	verzettelt	VVPP	*	verzetteln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	Christenkind	NN	*	christenkind	-	-	(PER*)	708)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Dem	PDS	*	der	sg	neut	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ungeachtet	APPR	(PP*	ungeachtet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*)	dir	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	geben	VVINF	*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wollte	VMFIN	*)	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	heftig	ADJD	(VROOT(PSEUDO*	heftig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Woll	VMFIN	*	woll	-	-	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wolle	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	entdeckt	VVPP	*)	entdecken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	tolerante	ADJA	*	tolerant	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Schwätzer	NN	*)	schwätzer	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	entdeckt	VVPP	*)	entdecken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	werde	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hinter	APPR	*	hinter	-	-	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	diesen	PDAT	*	dieser	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	jüd	NN	*	jüd	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	schen	VVFIN	*	sch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Wolf	NE	*	wolf	sg	masc	(PER*)	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Im	APPRART	*	in	sg	masc	-	(128
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	philosoph	NN	*	philosoph	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	schen	ADJA	*	schen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Schafpelz	NN	*	schafpelz	-	-	-	128)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Hunde	NN	*	hund	-	-	-	(803)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Zu	NN	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	bringen	VVINF	*	bringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	wissen	VVINF	*	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	die	PRELS	*	der	pl	masc	-	(803)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	zausen	VVINF	*	zausen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	sollen	VMFIN	*	sollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ernst	ADJD	(VROOT(PSEUDO*	ernst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sei	VAIMP	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ruhig	ADJD	*	ruhig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Christ	NE	*	christ	-	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ruhig	ADJD	(VROOT(PSEUDO(NP*	ruhig	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Christ	NN	*)	christ	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Jud	NE	*	jud	-	-	-	(98)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Und	NE	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Muselmann	NE	*	muselmann	sg	*	-	(100)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Jud	NE	*	jud	-	-	-	(304)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Muselmann	NE	*	muselmann	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Bestehen	NN	*	bestehen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	der	ART	*	der	sg	masc	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Christ	NN	*	christ	sg	masc	-	99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	den	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Christen	NN	*	christ	sg	masc	(MISC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	machen	VVINF	*	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	dürfen	VMINF	*	dürfen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	noch	ADV	(VROOT(PSEUDO(AP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ernster	ADJD	*)	ernst	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ruhig	ADJD	(VROOT(PSEUDO(NP*	ruhig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Christ	NE	*	christ	pl	-	-	(1053)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	gelassen	VVPP	*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fühle	VVFIN	*	fühlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Des	ART	(NP*	der	sg	masc	-	(805
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vorwurfs	NN	*)	vorwurf	sg	masc	-	805)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ganze	ADJA	(NP*	ganz	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Last	NN	*)	last	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	–	KOUS	(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	die	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Saladin	NN	*)	saladin	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	In	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	diese	PDAT	*	dieser	sg	fem	-	(804
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Silbe	NN	*)	silbe	sg	fem	-	804)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	preßt	VVFIN	*))	pressen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	ITJ	(VROOT(PSEUDO(S*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wüßte	VVFIN	*	wissen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Assad	NE	(NP*	assad	sg	*	(PER*)	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	NE	(MPN*	–	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Assad	NE	*))	assad	sg	*	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sich	PRF	*	sich	sg	-	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	meiner	PPOSAT	*	mein	sg	fem	-	(806|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Stelle	NN	*)	stelle	sg	fem	-	806)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Hierbei	PROAV	(VP*	hierbei	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	genommen	VVPP	*)	nehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	hätte	VAFIN	*))	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(VP(AP(CO(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	viel	ADV	*))	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	besser	ADJD	*))	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vermutlich	ADV	(NP*	vermutlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ganz	ADV	(AP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	brausend	ADJD	*))	brausend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(NP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wer	PWS	(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Denn	KON	(VP*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dich	PRF	*	dich	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	auch	ADV	(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	schon	ADV	*)	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gelehrt	VVPP	*)	lehren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	mich	PRF	(VP*	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	so	ADV	(PP(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	er	PPER	*))	er	sg	masc	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Mit	APPR	*	mit	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Einem	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Worte	NN	*)	wort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	bestechen	VVINF	*))))	bestechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Freilich	ADV	(VROOT(PSEUDO(DL*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	*	alle	sg	neut	-	(711)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sich	PRF	*	sich	sg	-	-	(711)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	verhält	VVFIN	*	verhalten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wie	KOKOM	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*	du	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sagest	VVFIN	*))	sagest	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Kann	VMFIN	(S*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mich	PRF	(VP(NP*	mich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	selber	ADV	*)	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	kaum	ADV	(PP*	kaum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Nathan	NE	*)	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	finden	VVINF	*)))	finden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Indes	NN	(NP*	indes	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mein	PPOSAT	(NP*	mein	sg	masc	-	(650|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Freund	NN	*)))	freund	sg	masc	-	650)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	meiner	PPOSAT	(S(NP*	mein	pl	masc	-	(329|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Freunde	NN	*)	freund	pl	masc	-	329)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Muß	NN	(VP*	müssen	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	keiner	PIS	*	keiner	sg	masc	-	(329)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	dem	ART	*	der	sg	neut	-	(329
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	andern	PIS	*)	anderer	-	-	-	329)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	hadern	VVINF	*))	hadern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Laß	NN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Dich	PPER	(VP*	dich	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	weisen	VVINF	*))	weisen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	behutsam	ADJD	*	behutsam	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gib	VVIMP	(VROOT(PSEUDO(S*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sofort	ADV	*))	sofort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	(NP*	der	pl	masc	-	(807
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Schwärmern	NN	*	schwärmer	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	deines	PPOSAT	(NP*	dein	sg	neut	-	(121|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Pöbels	NN	*	pöbel	sg	neut	-	807)|121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Preis	NN	*))	preis	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Verschweig	ADJD	(VROOT(PSEUDO(S*	verschweig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	deine	PPOSAT	(CVP(VP(NP*	dein	sg	fem	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Geistlichkeit	NN	*)	geistlichkeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihm	PPER	*)	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	rächen	VVINF	*))	rächen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	mir	PPER	(VP*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nahe	ADJD	*)	nahe	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	legen	VVINF	*))	legen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	würde	VAFIN	*)	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sei	APPR	(VROOT(PSEUDO(PP*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	keinem	PIAT	*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Juden	NN	*	Jude	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	keinem	PIAT	(S(NP*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Muselmanne	NN	*)	muselmann	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Zum	APPRART	(NP(PP*	zu	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Trotz	NN	*)	trotz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ein	ART	*	ein	-	-	-	(443
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Christ	NN	*)))	christ	-	-	-	443)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bald	ADV	(VROOT(PSEUDO(AP*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wärs	ADJD	*	wär	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	damit	PROAV	*	damit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	PTKA	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	spät	ADJD	*)	spät	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Dank	APPR	*	dank	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	sg	masc	-	(808
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Blutbegier	NN	*	blutbegier	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	des	ART	*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Patriarchen	NN	*	patriarch	sg	masc	-	808)|8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Des	ART	*	der	sg	masc	-	(277|(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Werkzeug	NN	*	werkzeug	sg	masc	-	277)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	werden	VAINF	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	graute	ADJA	*	grauen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(809|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kamst	VVFIN	*	kamsen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zum	APPRART	(PP*	zu	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Patriarchen	NN	*)	patriarchen	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	eher	ADV	*	eher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	als	KOKOM	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mir	PPER	*))))	sich	sg	*	-	809)|(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Im	APPRART	(VROOT(PSEUDO(PP*	in	-	-	-	(810
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sturm	NN	*	sturm	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(554
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Leidenschaft	NN	*	leidenschaft	sg	masc	-	810)|554)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	im	APPRART	(PP*	in	sg	masc	-	(810
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Wirbel	NN	*	wirbel	sg	masc	-	810)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Unentschlossenheit	NN	*))))	unentschlossenheit	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Verzeih	NE	*	verzeih	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	*	du	sg	*	-	(811|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wirst	VAFIN	*	werden	sg	-	-	811)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	deinem	PPOSAT	*	dein	sg	masc	-	(131|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Assad	NN	*	assad	sg	masc	-	131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	fürcht	VVFIN	*	fürchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ferner	ADV	*	ferner	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	mehr	ADV	*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	erkennen	VVINF	*	erkennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	wollen	VMFIN	*	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wär	XY	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Es	PPER	*	es	sg	neut	-	(809)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	diese	PDAT	*	dieser	sg	fem	-	(811
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Furcht	NN	*	furcht	sg	fem	-	811)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mich	PPER	(VROOT(PSEUDO(S*	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dünkt	VVFIN	*	dünken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	(CS(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	weiß	VVFIN	*)	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Aus	APPR	(S(NP(AP(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	welchen	PWAT	*	welcher	pl	masc	-	(812
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Fehlern	NN	*)	fehler	pl	masc	-	812)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	unsre	ADJA	*)	unsr	sg	-	-	(397|(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Tugend	NN	*)	tugend	-	-	-	397)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	keimt	VVFIN	*)))	keimen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Pfleg	NE	*	pfleg	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	diese	PDAT	*	dieser	sg	fem	-	(412)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ferner	ADV	*	ferner	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	jene	PDS	*	jener	pl	fem	-	(811)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sollen	VMFIN	*	sollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	dir	PPER	*	dir	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wenig	PIS	*	wenig	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	schaden	VVINF	*	schaden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Such	KON	*	such	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dich	PPER	*	dich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gesucht	VVPP	*	suchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	bring	VVFIN	*	bring	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	her	PTKVZ	*	her	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	euch	PRF	*	euch	pl	*	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zusammen	ADV	*	zusammen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Verständigen	NN	*)	verständigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wär	NN	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	um	APPR	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Mädchen	NN	*	mädchen	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dir	PPER	*	dir	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Im	APPRART	*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ernst	NN	*	ernst	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	tun	VVINF	*	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ruhig	ADJD	*	ruhig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dein	ADJD	*)	dein	-	-	-	(1061)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(S*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(813)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*	nathan	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	empfinden	VVINF	(VP*	empfinden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	(S*	daß	-	-	-	(813)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Er	PPER	(NP*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ohne	APPR	(PP*	ohne	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Schweinefleisch	NN	*)	schweinefleisch	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ein	ART	*	ein	sg	neut	-	(742
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Christenkind	NN	*)	christenkind	sg	neut	(MISC*)	742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Erziehen	VVINF	*	erziehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	dürfen	VMFIN	*)))	dürfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(CS(S(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherr	NN	*)	tempelherr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ab	PTKVZ	*)	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Sittah	NE	(S*	sittah	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	verläßt	VVFIN	*	verlassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	den	ART	(NP*	der	sg	masc	-	(781
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Sofa	NN	*)))	sofa	sg	masc	-	781)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO(CNP*	saladin	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*)	sittah	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ganz	ADV	(VROOT(PSEUDO(S(ISU*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sonderbar	ADJD	*))	sonderbar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gelt	NN	(VROOT(PSEUDO(NP*	gelt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*)	sittah	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Muß	VMFIN	(VROOT(PSEUDO(S*	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mein	PPOSAT	(NP*	mein	-	-	-	(131|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Assad	NN	*)	assad	-	-	-	131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(VP(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	(NP*	ein	sg	masc	-	(814
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	braver	ADJD	*	brav	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	814)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ein	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	schöner	ADJA	*	schön	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	junger	ADJA	*	jung	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Mann	NN	*))	mann	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gewesen	VAPP	*)	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sein	VAINF	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	diesem	PDAT	*	dieser	sg	masc	-	(771
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Bilde	NN	*)	bild	sg	masc	-	771)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Der	ART	(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Tempelherr	NN	*)	tempelherr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	vielmehr	ADV	(VP*	vielmehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	gesessen	VVPP	*)))	sitzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	(S*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hast	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	vergessen	VVINF	(S*	vergessen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	können	VMFIN	*	können	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dich	PRF	(VP*	dich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Nach	APPR	(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	seinen	PPOSAT	*	sein	pl	neut	-	(709|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Eltern	NN	*)	eltern	pl	neut	-	709)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	erkundigen	VVINF	*)))	erkundigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	(815
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ins	APPRART	(PP*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	besondre	ADJA	*)	besondre	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nach	APPR	(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	seiner	PPOSAT	*	sein	sg	fem	-	(478|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Mutter	NN	*))	mutter	sg	fem	-	478)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ob	KOUS	(VROOT(PSEUDO(S*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seine	PPOSAT	(NP*	sein	pl	masc	-	(478|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mutter	NN	*)	mutter	pl	masc	-	478)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	APPR	(PP*	zu	-	-	-	(168
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Lande	NN	*	land	sg	neut	-	168)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nie	ADV	*)	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gewesen	NN	*	gewesen	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sei	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wahr	PTKVZ	*	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	815)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(815)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	machst	VVFIN	*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gut	ADJD	*)	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	möglicher	ADJD	*	möglich	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wär	VAFIN	*	sein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(CS(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Assad	NE	*	assad	sg	masc	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bei	APPR	(AP(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hübschen	ADJA	*	hübsch	pl	masc	-	(816
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Christendamen	NN	*)	christendam	pl	masc	-	816)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	willkommen	ADJD	*))	willkommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Auf	APPR	(VP(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	hübsche	ADJA	*	hübsch	pl	masc	-	(816
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Christendamen	NN	*)	christendame	pl	masc	-	816)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	erpicht	VVPP	*	erpichen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	einmal	ADV	*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	gar	ADV	(NP*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Rede	NN	*)	rede	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	ging	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	–	$.	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Nun	ADV	(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Man	PIS	(S*	man	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	spricht	VVFIN	*	sprechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	davon	PTKVZ	*)))))	davon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Genug	NN	*	genug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hab	VAFIN	*	heben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ihn	PPER	*	ihn	sg	masc	-	(787)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	*)	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	allen	PIS	*	aller	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	seinen	PPOSAT	(NP*	sein	pl	*	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Fehlern	NN	*	fehler	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Mit	APPR	(VP(PP*	mit	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	allen	PIAT	*	aller	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Launen	NN	*	laune	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	seines	PPOSAT	(NP*	sein	sg	neut	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	weichen	ADJA	*	weich	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Herzens	NN	*))	Herz	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Ihn	PPER	*	ihn	sg	masc	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	haben	VAINF	*))	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Oh	NE	*	oh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mädchen	NN	*)	mädchen	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nathan	NE	(CNP*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	geben	VVINF	*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Meinst	ADV	(VROOT(PSEUDO(S*	meinst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihm	PPER	(VROOT(PSEUDO(S*	ihm	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geben	VVFIN	*)	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihm	PPER	(VROOT(PSEUDO(S*	ihm	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	lassen	VVFIN	*)	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Allerdings	ADV	(VROOT(PSEUDO(S*)	allerdings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	So	ADV	(S(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bald	ADV	*)	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihr	PPOSAT	(NP*	ihr	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Vater	NN	*)	vater	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ist	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Recht	NN	*	recht	sg	neut	-	(36)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Auf	APPR	(PP*	auf	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sie	PPER	*)))	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	*	der	sg	neut	-	(64
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Leben	NN	*	leben	sg	neut	-	64)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	erhielt	VVFIN	*	erhalten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Tritt	VVFIN	*	treten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	einzig	ADJD	*	einzig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	die	ART	*	der	pl	neut	-	(817
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Rechte	NN	*	recht	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	des	ART	*	der	sg	masc	-	(709
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	der	PRELS	*	der	sg	masc	-	(709)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ihr	PPOSAT	*	ihr	sg	masc	-	817)|709)|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Es	PPER	*	es	sg	neut	-	(64)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	gab	VVFIN	*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	also	ADV	*	also	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Saladin	NN	*)	saladin	sg	*	(PER*)	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	(818
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	818)|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gleich	ADV	*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	(NP*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Mädchen	NN	*)	mädchen	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dir	PPER	*)	dir	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nähmst	VVFIN	*)	nähmsen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Dem	ART	(NP*	der	sg	neut	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	unrechtmäßigen	ADJA	*	unrechtmäßig	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Besitzer	NN	*)	besitzer	pl	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gleich	ADV	*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Entzögest	NN	*)	entzögest	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Täte	VVFIN	(VROOT(PSEUDO(S*	täte	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(818)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Not	NN	*)	not	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Not	NN	(VROOT(PSEUDO(S*	not	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	(NP*	der	sg	fem	-	(780
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	liebe	ADJA	*)	lieb	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Neubegier	NN	*	neubegier	*	*	-	780)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Treibt	VVFIN	*	treiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mich	PPER	(VP*	mich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dir	PPER	*	dir	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	diesen	PDAT	(NP*	dieser	sg	masc	-	(818
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Rat	NN	*)	Rat	sg	masc	-	818)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	geben	VVINF	*))	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gewissen	ADJA	*	gewiß	pl	masc	-	(819
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Männern	NN	*)	mann	pl	masc	-	819)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mag	VMFIN	*	mögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	masc	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Zu	NN	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	bald	ADV	*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wie	KOKOM	(AP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	möglich	ADJD	*))	möglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	wissen	VVFIN	*	wissen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	was	PWS	(S*	was	sg	neut	-	(289)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Sie	PPER	*	sie	pl	*	-	(819)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	für	APPR	(VP(VP(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	ein	ART	*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Mädchen	NN	*)	mädchen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	lieben	VVINF	*)	lieben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	können	VMINF	*)))	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schick	ADJD	*	schick	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	laß	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	holen	VVINF	*	holen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Darf	VMFIN	(VROOT(PSEUDO(S*	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bruder	NN	*)	bruder	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schone	VVFIN	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nathans	NE	*)	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(S*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	durchaus	ADV	*	durchaus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	glauben	VVINF	*)	glauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	man	PIS	(NP*	man	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Gewalt	NN	*))	gewalt	sg	fem	-	(400)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	von	APPR	(VP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Ihr	PPER	*)	ihr	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	trennen	VVINF	*)	trennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	wolle	VMFIN	*))	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sorge	NN	*	sorge	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	selbst	ADV	(AP*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sehn	CARD	*)	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wo	PWAV	(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Al-Hafi	NE	*	al-hafi	-	-	(LOC*)	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	bleibt	VVFIN	*))	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Szene	NN	(VROOT(PSEUDO(S*	szene	sg	-	-	(17)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	sg	fem	-	(18
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	offne	ADJA	*	offn	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Flur	NN	*	flur	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nathans	NE	*	nathan	sg	*	-	(19|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Hause	NN	*))	haus	sg	neut	-	18)|19)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gegen	APPR	(PP*	gegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	die	ART	*	der	pl	fem	-	(76
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Palmen	NN	*)	palme	pl	fem	-	76)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKVZ	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	wie	KOKOM	(PP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	im	APPRART	*	in	sg	masc	-	(16
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ersten	ADJA	*	erster	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Auftritte	NN	*	auftritt	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	des	ART	(NP*	der	sg	masc	-	(15
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	ersten	ADJA	*	erster	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Aufzuges	NN	*)))	aufzug	sg	masc	-	16)|15)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	*	ein	sg	masc	-	(820
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Teil	NN	*	teil	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	pl	fem	-	(489
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Waren	NN	*	sein	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Kostbarkeiten	NN	*	kostbarkeit	pl	fem	-	820)|489)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	liegt	VVFIN	*	liegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ausgekramt	VVPP	*	ausgekramt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	deren	PRELAT	*	der	pl	masc	-	(820)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	daselbst	ADV	*	daselbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	gedacht	VVPP	*	denken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(CNP*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*)	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	*	O	-	-	-	(820
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	*	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	herrlich	ADJD	*	herrlich	-	-	-	820)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	alles	PIS	*	alle	sg	neut	-	(820
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auserlesen	VVFIN	*	auserlesen	-	-	-	820)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	*	O	-	-	-	(820
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	*	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	PPER	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wie	KOKOM	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPOSAT	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	es	PPER	*	es	sg	neut	-	(820)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	geben	VVINF	*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	könnt	VVFIN	*	können	-	-	-	820)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	(VROOT(PSEUDO(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(821
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Silberstoff	NN	*)	silberstoff	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	goldnen	ADJA	*	goldn	pl	*	-	(822
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ranken	NN	*)	rank	pl	*	-	821)|822)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gemacht	NN	*)	gemacht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kostet	VVFIN	*	kosten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*)	er	sg	masc	-	(821)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	*	der	sg	neut	-	(821)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nenn	ADV	*	nenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ein	ART	*	ein	sg	neut	-	(823
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Brautkleid	NN	*	brautkleid	sg	neut	-	823)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Keine	PIAT	(VROOT(PSEUDO(S(NP*	kein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Königin	NN	*)	königin	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	verlangt	VVFIN	*	verlangen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Es	PPER	*	es	sg	neut	-	(824)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	besser	ADJD	*)	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Brautkleid	NN	(VROOT(PSEUDO*	brautkleid	-	-	-	(824)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Warum	PWAV	(VROOT(PSEUDO(S*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Brautkleid	NE	(NP*	brautkleid	-	-	-	(824)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	eben	ADV	*))	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Je	ADV	(VROOT(PSEUDO*	je	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dachtet	VVFIN	*	dachten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	daran	PROAV	*	daran	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Als	KOUS	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihn	PPER	*	ihn	sg	masc	-	(821)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	kauftet	VVFIN	*))	kauften	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wahrlich	ADV	*	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nathan	NE	*	nathan	-	-	(PER*)	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Der	NE	*	der	sg	masc	-	(821
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	kein	PIAT	*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	andrer	ADJA	*	andrer	sg	masc	-	821)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	es	PPER	*	es	sg	neut	-	(823)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(821)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Zum	APPRART	(PP*	zu	-	-	-	(823
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Brautkleid	NN	*))	brautkleid	-	-	-	823)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wie	KOKOM	(VP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bestellt	VVPP	*)	bestellen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(CS(S(NP*	der	sg	masc	-	(825
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiße	ADJA	*	weiß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Grund	NN	*)	grund	sg	masc	-	825)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ein	ART	(NP*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Bild	NN	*	bild	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Unschuld	NN	*)))	unschuld	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	die	ART	(S(NP*	der	pl	*	-	(822
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	goldnen	ADJA	*	goldn	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Ströme	NN	*	strom	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	822)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Die	NN	(VP(NP*	der	pl	masc	-	(822)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	aller	PIAT	(NP*	aller	pl	masc	-	(821
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Orten	NN	*	ort	pl	masc	-	821)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	diesen	PDAT	(NP*	dieser	sg	masc	-	(825
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Grund	NN	*)))	grund	sg	masc	-	825)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	durchschlängeln	VVINF	*))	durchschlängeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Ein	ART	(NP*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Bild	NN	*	bild	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	des	ART	(NP*	der	sg	neut	-	(376
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Reichtums	NN	*))))	reichtum	sg	neut	-	376)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Seht	VVFIN	(VROOT(PSEUDO(S*	sehen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*)	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Allerliebst	ADV	(VROOT(PSEUDO(S*)	allerliebst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	witzelst	VVFIN	*	witzelen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	da	PTKVZ	*)	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	(VROOT(PSEUDO(S(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wessen	PWAT	*	wessen	-	-	-	(824
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Brautkleid	NE	*	brautkleid	-	-	-	824)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sinnbilderst	NN	*)	sinnbilderst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	(VP*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gelehrt	VVPP	*))	lehren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bist	NN	(NP*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	(NP*	du	*	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Denn	NE	*	denn	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Braut	NE	*))	braut	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	(22
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	lieber	ADJA	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gott	NN	*	gott	-	-	-	22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	(VROOT(PSEUDO(S(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wessen	PWAT	*	wessen	-	-	-	(824
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Brautkleid	NE	*	brautkleid	-	-	-	824)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sprichst	ADV	*)	sprichen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	*)	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(826
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	*	alle	sg	neut	-	826)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	(AP*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dein	ADJD	*	dein	-	-	-	(1035)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	(VP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	keiner	PIS	*	keiner	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	andern	VVINF	*)))	anderer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mein	PPOSAT	*	mein	sg	neut	-	(1035)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mein	PPOSAT	*	mein	sg	masc	-	(1035)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Recha	NE	*)	recha	sg	*	(PER*)	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	(828
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	(VP(NP*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Recha	NE	*))	recha	sg	neut	(PER*)	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mitgebracht	VVPP	*)	mitbringen	-	-	-	828)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	das	PDS	*	der	sg	neut	-	(828)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	liegt	VVFIN	*	liegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	In	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	einem	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	andern	ADJA	*	anderer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Ballen	NN	*))	ballen	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mach	VVIMP	*	mach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nimm	XY	*	nimm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weg	PTKVZ	*	weg	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Trag	NE	(VROOT(PSEUDO(S*	trag	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	deine	PPOSAT	(NP*	dein	pl	fem	-	(826|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Siebensachen	NN	*)	siebensachen	pl	fem	-	826)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	fort	PTKVZ	*)	fort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Versucher	NN	(VROOT(PSEUDO*	versucher	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	(VROOT(PSEUDO(S*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wären	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(826)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	die	ART	(NP*	der	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Kostbarkeiten	NN	*)	kostbarkeit	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	auch	ADV	(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Der	ART	*	der	sg	masc	-	(262
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ganzen	ADJA	*	ganz	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Welt	NN	*))	welt	-	-	-	262)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	rühr	ADV	*	rühr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	an	PTKVZ	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wenn	KOUS	(VROOT(PSEUDO(CS(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PRF	*	sich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vorher	ADV	*	vorher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schwört	VVFIN	*)	schwören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	von	APPR	(S(VP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dieser	PDAT	*	dieser	sg	fem	-	(799
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	einzigen	ADJA	*	einzig	sg	fem	-	799)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Gelegenheit	NN	*	gelegenheit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	dergleichen	ADJA	*	dergleich	pl	-	-	(829)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Euch	NN	*)	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	der	ART	(NP*	der	sg	masc	-	(22
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Himmel	NN	*	himmel	sg	masc	-	22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	zweimal	ADV	*))	zweimal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	schicken	VVINF	*)	schicken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Gebrauch	NN	(VP*	gebrauch	sg	masc	-	(830)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	machen	VVINF	*))))	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gebrauch	NN	(VROOT(PSEUDO*	gebrauch	-	-	-	(830)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gelegenheit	NN	*	gelegenheit	pl	-	-	(829)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wozu	PWAV	(VROOT(PSEUDO*	wozu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(S*	O	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	stellt	VVFIN	*	stellen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	fremd	ADJD	*))	fremd	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kurzen	ADJA	(NP*	kurz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Worten	NN	*)	wort	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherr	NN	*)	tempelherr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	liebt	VVFIN	*	lieben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Recha	NE	*	recha	sg	neut	(PER*)	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gebt	VVFIN	(S*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sie	PPER	*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	So	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	doch	ADV	(AVP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	einmal	ADV	*)	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Eure	PPOSAT	(NP*	euer	-	-	-	(711|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Sünde	NN	*	sünde	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	die	ART	(S(NP*	der	sg	fem	-	711)|(711)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Ich	NN	*)	ich	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	länger	ADJD	*	lang	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	verschweigen	VVINF	*	verschweigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	kann	VMFIN	*))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	ein	ART	(NP*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Ende	NN	*))))	ende	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mädchen	NN	*	mädchen	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	unter	APPR	*	unter	-	-	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Christen	NN	*	christ	pl	masc	-	99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Wird	NN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	was	PWS	*	was	sg	neut	-	(705
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ist	VAFIN	*	sein	sg	-	-	705)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	was	PWS	*	was	sg	neut	-	(708)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Sie	PPER	*	sie	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	ward	VVFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	habt	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	all	PIAT	*	all	*	*	-	(39
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	dem	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Guten	NN	*	gute	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	,	$,	*	--	-	-	-	39)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	Das	KOUS	*	der	sg	neut	-	(39)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	wir	PPER	*	wir	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	Euch	PRF	*	euch	pl	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	genug	ADV	*	genug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	verdanken	VVINF	*	verdanken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	können	VMINF	*	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	Feuerkohlen	NN	*	feuerkohle	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	bloß	ADV	*	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	Euer	ADJA	*	euer	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	Haupt	NN	*	haupt	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	Gesammelt	VVPP	*	gesammelt	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	alte	ADJA	*	alt	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Leier	NN	*	leier	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	-	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	einer	ART	*	ein	sg	fem	-	(831
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	neuen	ADJA	*	neu	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Saite	NN	*	saite	sg	fem	-	831)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	bezogen	VVPP	*	beziehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Die	NN	*	der	sg	fem	-	(831)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	fürcht	VVFIN	*	fürchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	weder	KON	*	weder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	stimmt	VVFIN	*	stimmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	hält	VVFIN	*	halten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mir	NE	*	sich	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Tempelherr	NN	*	tempelherr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	recht	NN	*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihm	PPER	*	ihm	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gönnt	VVFIN	*	gönnen	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Recha	NE	*	recha	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	PIS	*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	einem	ART	*	ein	sg	masc	-	(728
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	*	der	sg	fem	-	(262
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Welt	NN	*	welt	sg	fem	-	728)|262)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Allein	ADV	(VROOT(PSEUDO(CS(S(ISU*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nun	ADV	(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Geduld	NN	*)))	geduld	sg	neut	-	(832)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geduld	NN	(VROOT(PSEUDO*	geduld	-	-	-	(832)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geduld	NN	(VROOT(PSEUDO(S*	geduld	sg	fem	-	(832)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Eure	PPOSAT	(NP*	euer	sg	fem	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	alte	ADJA	*	alt	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Leier	NN	*)	leier	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	(AVP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(NP(AP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wenig	PIAT	*)	wenig	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Tage	NN	*)	tag	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	noch	ADV	(NP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Geduld	NN	*)	geduld	sg	fem	-	(832)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sieh	VVIMP	(S*	sieh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wer	PWS	(S*	wer	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*)	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dort	ADV	*	dort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	masc	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Klosterbruder	NN	*)	klosterbruder	sg	masc	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	frag	VVFIN	*	frag	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihn	PPER	*	ihn	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	was	PWS	*	was	sg	neut	-	(833
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	will	VMFIN	*	wollen	sg	-	-	833)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wollen	VMFIN	*)	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(CS(S*	sie	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*)	ihn	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKVZ	*)	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	fragt	VVFIN	*)	fragen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gib	VVIMP	*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	eh	XY	*	eh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bittet	VVFIN	*	bitten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	(	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wüßt	VVIMP	*	wüßt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Dem	ART	*	der	sg	neut	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Tempelherrn	NN	*	tempelherr	sg	neut	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	beizukommen	VVPP	*	beizukmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ohne	KOUI	*	ohne	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Die	ART	*	der	sg	fem	-	(479
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Ursach	NN	*	ursach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	meiner	PPOSAT	*	mein	pl	masc	-	(673|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Neugier	NN	*	neugier	pl	masc	-	479)|673)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	sagen	VVINF	*	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	*	sie	sg	fem	-	(479)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sag	VVFIN	*	sag	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	*	der	sg	fem	-	(479
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Verdacht	NN	*	verdacht	sg	fem	-	479)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ohne	APPR	*	ohne	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Grund	NN	*	grund	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	hab	VAFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	umsonst	ADV	*	umsonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Den	ART	*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Vater	NN	*	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	das	ART	*	der	sg	neut	-	(147
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Spiel	NN	*	spiel	sg	neut	-	147)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	gesetzt	VVPP	*	setzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	)	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	–	$.	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	ists	ADV	*	ist	-	-	-	(833)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	(VP*	euch	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sprechen	VVINF	*))	sprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	laß	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihn	PPER	(VP*	ihn	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kommen	VVINF	*))	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	indes	ADV	(S*)	indes	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(CNP*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Klosterbruder	NN	*))	klosterbruder	sg	masc	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	(	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bliebe	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Rechas	NE	*	recha	sg	*	-	(418|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Vater	NN	*	vater	sg	masc	-	418)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zwar	ADV	*	zwar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ichs	ADV	*	ichs	-	-	-	(418)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bleiben	VVINF	*	bleiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Auch	NN	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	aufhör	VVFIN	*	aufhör	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	es	PPER	*	es	sg	neut	-	(418)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	heißen	VVINF	*	heißen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	werd	VVFIN	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ichs	PPER	*	ichs	-	-	-	(418)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	immer	ADV	*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	heißen	VVINF	*	heißen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	erkennt	VVFIN	*	erkennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	ichs	ADJD	*	ichs	-	-	-	(418)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	wäre	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	)	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	–	$.	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Geh	NE	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euern	NN	*	euer	pl	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Diensten	NN	*))	dienst	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	frommer	ADJA	(NP*	fromm	sg	masc	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Bruder	NN	*)	bruder	sg	masc	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	viel	PIS	*)	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	freue	VVFIN	*	freuen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	-	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Herr	NN	(VP(NP*	herr	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nathan	NE	*	nathan	sg	masc	(PER*)	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Euch	PPER	(S(NP*	euch	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	annoch	ADV	*)	annoch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wohl	ADV	*))	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sehn	VAINF	*)))	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Je	ADV	(VROOT(PSEUDO*	je	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nu	XY	*	nu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wer	PWS	(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	habt	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	(VP(NP(AP*	so	-	-	-	(382
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	manchem	PIAT	*)	mancher	sg	masc	-	382)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ja	NN	*)	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Euern	NN	*	euer	pl	fem	-	(834|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Namen	NN	(NP*	name	pl	fem	-	834)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Hand	NN	*))	hand	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	gedrückt	VVPP	*))	drücken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(834)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	steht	VVFIN	*	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	meiner	PIS	*)	mein	sg	fem	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	seit	APPR	(PP*	seit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	vielen	PIAT	*	vieler	pl	neut	-	(835
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Jahren	NN	*))	jahr	pl	neut	-	835)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*))	nathan	-	-	-	(1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nach	APPR	(VROOT(PSEUDO(AP(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seinem	PPOSAT	*	sein	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Beutel	NN	*)	beutel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	langend	ADJD	*)	langend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bruder	NN	*	bruder	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	frisch	ADJD	*	frisch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ihn	PPER	*	ihn	sg	masc	-	(834)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	auf	PTKVZ	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Habt	VAFIN	*	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Dank	NN	*	dank	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	würd	VAFIN	*	würd	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(150)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ärmern	NN	*	ärmer	pl	-	-	(382)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	stehlen	VVINF	*	stehlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nehme	VVFIN	*	nehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	erlauben	VVINF	(S*	erlauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wollt	VMFIN	*	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ein	ART	(VP(NP*	ein	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wenig	PIAT	(NP*	wenig	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Euch	PPER	(AP*	euch	pl	*	-	(836|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	meinen	PPOSAT	*)	meinen	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Namen	NN	*))	name	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	aufzufrischen	VVIZU	*))	auffrischen	-	-	-	836)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	(VP*	mich	sg	-	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	rühmen	VVINF	*	rühmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	auch	ADV	(VP(VP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Eure	PPOSAT	*	euer	-	-	-	(450|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Hand	NN	*	hand	*	*	-	450)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Etwas	ADV	*)	etwas	*	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gelegt	VVPP	*)	legen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	haben	VAINF	*)	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	was	PWS	(S*	was	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Verachten	NN	*)	verachten	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	war	VAFIN	*))))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Verzeiht	VVPP	*	verzeihen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schäme	VVFIN	*	schämen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PRF	*	mich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	PPER	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Sagt	NN	*	sagt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nehmt	VVFIN	(S*	nehmt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zur	APPRART	(PP*	zu	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Buße	NN	*	buße	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	siebenfach	CARD	*)	siebenfach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Den	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Wert	NN	*)	wert	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	desselben	PDS	*	derselbe	sg	masc	-	(837)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mir	PPER	*)	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	an	PTKVZ	*)	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hört	VVIMP	(VROOT(PSEUDO(S*	hören	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Vor	APPR	(PP*	vor	-	-	-	(43
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	allen	PIAT	*	aller	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Dingen	NN	*)	ding	pl	*	-	43)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wie	KOKOM	(VP(NP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*)	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	selber	ADV	*	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nur	ADV	(VP(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Erst	ADV	*)	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	heut	ADV	*	heut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	dies	PDS	*	dieser	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	mein	PPOSAT	(NP*	mein	sg	neut	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Euch	PPER	(AP*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	vertrautes	ADJA	*)	vertraut	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Pfand	NN	*))	pfand	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Erinnert	VVPP	*)	erinnern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	worden	VAPP	*))	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mir	NE	(VROOT(PSEUDO(NP*	sich	sg	*	-	(837
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	vertrautes	ADJA	*	vertraut	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Pfand	NN	*)	pfand	sg	neut	-	837)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Vor	APPR	(VROOT(PSEUDO(S(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kurzem	ADJA	*)	kurz	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	saß	VVFIN	*	sitzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	als	APPR	(CPP(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Eremit	NN	*)	eremit	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Quarantana	NE	*)	quarantana	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	unweit	APPR	(PP*	unweit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Jericho	NE	*)))	jericho	sg	neut	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kam	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	arabisch	ADJD	*	arabisch	sg	masc	(MISC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Raubgesindel	NN	*	raubgesindel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	brach	VVFIN	*	brechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Mein	PPOSAT	*	mein	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gotteshäuschen	NN	*	gotteshäusche	sg	masc	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ab	PTKVZ	*	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	meine	PPOSAT	*	mein	sg	fem	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Zelle	NN	*	zelle	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	schleppte	VVFIN	*	schleppen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	mich	PPER	*	mich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	fort	PTKVZ	*	fort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zum	APPRART	(VROOT(PSEUDO(S(PP*	zu	sg	neut	-	(732
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Glück	NN	*)	glück	sg	neut	-	732)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	entkam	VVFIN	*	entkommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ich	PPER	(NP*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	(CS(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	floh	VVFIN	*	floh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	hierher	PROAV	*	hierher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zum	APPRART	(PP*	zu	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Patriarchen	NN	*)	patriarchen	sg	neut	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Um	KOUI	(VP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mir	PPER	*	sich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ein	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ander	ADJA	*	ander	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Plätzchen	NN	*)	plätzchen	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	auszubitten	VVIZU	*))	auszubeiten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Allwo	NE	(S*	allwo	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	ich	PPER	(VP*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	meinem	PPOSAT	(NP*	mein	sg	masc	-	(22|(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Gott	NN	*	gott	sg	masc	-	22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Einsamkeit	NN	*)	einsamkeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Bis	APPR	(PP*	bis	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	mein	PPOSAT	*	mein	sg	neut	-	(838|(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	selig	ADJD	*	selig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Ende	NN	*))	ende	sg	neut	-	838)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	dienen	VVINF	*)	dienen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	könne	VMFIN	*))))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	steh	VVFIN	*	steh	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Kohlen	NN	(CNP*	kohle	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	guter	ADJA	(NP*	gut	*	*	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Bruder	NN	*))))	bruder	*	*	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Macht	NN	(VROOT(PSEUDO*	macht	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	(AP*	es	sg	neut	-	(836)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kurz	ADJD	*)	kurz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(NP*	der	sg	neut	-	(837
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Pfand	NN	*)	pfand	sg	neut	-	837)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	das	ART	(VROOT(PSEUDO(NP*	der	sg	neut	-	(837
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	(AP*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vertraute	ADJA	*)	vertraut	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Pfand	NN	*)	pfand	sg	neut	-	837)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sogleich	ADV	(VROOT(PSEUDO*	sogleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Herr	NN	(NP*	herr	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*)	nathan	sg	masc	(PER*)	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(NP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(S(NP*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Patriarch	NN	*)	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Versprach	VVFIN	*	versprach	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	eine	ART	(NP*	ein	sg	fem	-	(839
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Siedelei	NN	*	siedelei	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	auf	APPR	(PP*	auf	-	-	-	(840
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Tabor	NN	*)	tabor	sg	-	(LOC*)	839)|840)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Sobald	NE	*)	sobald	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	eine	PIS	*)	ein	sg	fem	-	(839)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	leer	PTKVZ	*))	leer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	hieß	VVFIN	*	heißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	inzwischen	ADV	*	inzwischen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Im	APPRART	(PP*	in	sg	neut	-	(227
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Kloster	NN	*)	kloster	sg	neut	-	227)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	mich	PPER	(VP*	mich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Laienbruder	NN	*)	laienbruder	sg	masc	-	(225)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	bleiben	VVINF	*))	bleiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO(CS(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	itzt	ADJD	*	itzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Herr	NN	(NP*	herr	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nathan	NE	*	nathan	sg	masc	(PER*)	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*))	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	verlange	VVFIN	(S*	verlang	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Des	ART	(NP*	der	-	-	-	(179
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Tags	NN	*)	tags	-	-	-	179)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wohl	ADV	(AVP*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	hundertmal	ADV	*)	hundertmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Tabor	NN	*)))	tabor	-	-	(LOC*)	(840)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	(NP*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Patriarch	NN	*)	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	braucht	VVFIN	*	brauchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	*)	mich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	allerlei	PIAT	*	allerlei	*	*	-	(715
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	715)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Wovor	KOUS	(S*	wovor	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	großen	ADJA	(NP*	groß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Ekel	NN	*)	ekel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	habe	VAFIN	*)	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zum	APPRART	(VROOT(PSEUDO(PP*	zu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Exempel	NN	*)	exempel	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Macht	NN	*	macht	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bitt	VVFIN	*	bitt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(CS*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	(S*	es	sg	neut	-	(836)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kömmt	VVFIN	*))	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihm	PPER	*	ihm	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	jemand	PIS	*	jemand	sg	masc	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	heut	ADV	*	heut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ins	APPRART	*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ohr	NN	*	ohr	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gesetzt	VVPP	*	setzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	lebe	VVFIN	*	leben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	herum	ADV	*	herum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ein	ART	*	ein	sg	masc	-	(741
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Jude	NN	*	jude	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	der	PRELS	*	der	sg	masc	-	741)|(741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Ein	ART	*	ein	sg	masc	-	(742
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Christenkind	NE	*	christenkind	sg	masc	-	742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	seine	PPOSAT	*	sein	sg	fem	-	(744
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Tochter	NN	*	tochter	sg	fem	-	744)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	sich	PRF	*	sich	sg	-	-	(741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Erzöge	NN	*	erzöge	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Betroffen	VVPP	*	betreffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hört	VVFIN	(VROOT(PSEUDO(S*	hören	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*	mich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aus	PTKVZ	*)	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Indem	KOUS	*	indem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Er	PPER	*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	aufträgt	VVFIN	*	auftragen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	diesem	PDAT	*	dieser	sg	masc	-	(741
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Juden	NN	*	Jude	sg	masc	-	741)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	stracks	VVFIN	*	stracks	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	möglich	ADJD	*	möglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Spur	NN	*	Spur	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	kommen	VVINF	*	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Gewaltig	ADJD	*	gewaltig	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	sich	PRF	*	sich	sg	-	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	eines	ART	*	ein	sg	masc	-	(722
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	solchen	PIAT	*	solcher	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Frevels	NN	*	frevel	sg	masc	-	722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Erzürnt	NN	*	erzürnt	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	der	PRELS	*	der	sg	masc	-	(722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	ihm	PPER	*	ihm	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	die	ART	*	der	sg	fem	-	(841
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	wahre	ADJA	*	wahr	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Sünde	NN	*	sünde	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	wider	APPR	*	wider	-	-	-	841)|(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	Den	NE	*	den	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	heil	PTKVZ	*	heil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	gen	APPR	*	gen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	Geist	NN	*	geist	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	bedünkt	VVPP	*	bedünken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	–	VAFIN	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	das	PDS	*	der	sg	neut	-	(722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	die	ART	*	der	sg	fem	-	(841
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	Sünde	NN	*	sünde	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	,	$,	*	--	-	-	-	841)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	Die	NN	*	der	sg	fem	-	(841)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	50	aller	PIAT	*	aller	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	51	Sünden	NN	*	sünde	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	52	größte	ADJA	*	groß	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	53	Sünd	NN	*	sünd	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	54	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	55	uns	PPER	*	uns	pl	*	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	56	gilt	VVFIN	*	gelten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	57	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	58	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	59	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	60	wir	PPER	*	wir	pl	*	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	61	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	62	Gott	NN	*	gott	sg	masc	(PER*)	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	63	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	64	Dank	NN	*	dank	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	65	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	66	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	67	recht	ADV	*	recht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	68	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	69	wissen	VVINF	*	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	70	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	71	Worin	PWAV	*	worin	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	72	sie	PPER	*	sie	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	73	eigentlich	ADV	*	eigentlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	74	besteht	VVFIN	*	bestehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	75	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	76	–	PPER	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	77	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	78	wacht	VVFIN	*	wachen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	79	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	80	einmal	ADV	*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	81	mein	PPOSAT	*	mein	sg	neut	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	82	Gewissen	NN	*	gewissen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	83	auf	PTKVZ	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	84	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	85	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	86	mir	PPER	*	sich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	87	Fällt	NN	*	fallen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	88	bei	PTKVZ	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	89	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	90	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	91	könnte	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	92	selber	ADV	*	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	93	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	94	vor	APPR	*	vor	-	-	-	(835
Nathan.xml.rkpt.0.CoNLL2012.conll	000	95	Zeiten	NN	*	zeit	pl	fem	-	835)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	96	Zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	97	dieser	PDAT	*	dieser	sg	fem	-	(722
Nathan.xml.rkpt.0.CoNLL2012.conll	000	98	unverzeihlich	ADJD	*	unverzeihlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	99	großen	ADJA	*	groß	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	100	Sünde	NN	*	sünd	sg	fem	-	722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	101	Gelegenheit	NN	*	gelegenheit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	102	gegeben	VVPP	*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	103	haben	VAINF	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	104	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sagt	NN	*	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Hat	VAFIN	(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ein	ART	(NP*	ein	sg	neut	-	(842
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Reitknecht	NN	*)	reitknecht	sg	neut	-	842)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	(VP(PP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	vor	APPR	*	vor	-	-	-	(835
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	achtzehn	CARD	*	achtzehn	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Jahren	NN	*)	jahr	pl	neut	-	835)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Ein	ART	(NP*	ein	sg	neut	-	(742
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Töchterchen	NN	*)	töchterchen	sg	neut	-	742)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	gebracht	VVPP	*	bringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	wenig	PIAT	*	wenig	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Wochen	NN	*)))	woche	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	CARD	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	allerdings	ADV	*	allerdings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	–	XY	*	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	(VROOT(PSEUDO*	ei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	seht	VVFIN	(S*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mich	PPER	*	mich	sg	fem	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	recht	ADV	*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	an	PTKVZ	*)	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	*	der	sg	masc	-	(842
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Reitknecht	NN	*	reitknecht	sg	masc	-	842)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	PDS	*	der	sg	masc	-	(842)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(1043)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(843)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(476
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Herr	NN	*	herr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(S(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	welchem	PRELS	*)	welcher	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ichs	APPRART	(PP*)	ich	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Euch	PPER	*	euch	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	brachte	VVFIN	*))	bringen	sg	-	-	476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	War	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	PPER	*	–	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mir	PPER	(NP*	sich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	recht	NN	*)	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	–	CARD	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ein	ART	(NP*	ein	sg	masc	-	(844
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Herr	NN	*	herr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Filneck	NN	*)))	filneck	sg	neut	-	844)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wolf	NE	*	wolf	-	-	(PER*)	(844)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Filneck	NE	*	filneck	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Richtig	ADJD	(VROOT(PSEUDO*	richtig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Weil	KOUS	*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	*	der	pl	masc	-	(478
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mutter	NN	*	mutter	pl	masc	-	478)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kurz	ADJD	*	kurz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Vorher	ADV	*	vorher	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gestorben	VVPP	*	sterben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sich	PRF	*	sich	sg	-	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	der	ART	*	der	sg	masc	-	(476
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Vater	NN	*	vater	sg	masc	-	476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Nach	APPR	*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	–	NN	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	mein	PPOSAT	*	mein	-	-	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	–	XY	*	–	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Gazza	NE	*	gazza	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	plötzlich	ADJD	*	plötzlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	werfen	VVINF	*	werfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	mußte	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Wohin	NN	*	wohin	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	das	ART	*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Würmchen	NN	*	würmchen	sg	fem	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	ihm	PPER	*	ihm	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	folgen	VVINF	*	folgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	konnte	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	sandt	ADJD	*	sandt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	ers	APPRART	*	ers	-	-	-	(1049)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	Euch	NN	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	traf	VVFIN	*	treffen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	damit	PROAV	*	damit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Darun	NE	*	darun	-	-	(LOC*)	(845)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ganz	ADV	(VROOT(PSEUDO(S(ISU*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	recht	ADJD	*))	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kein	PIAT	*	kein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Wunder	NN	*	wunder	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mein	PPOSAT	*	mein	sg	neut	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Gedächtnis	NN	*	gedächtnis	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mich	PPER	*	mich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	betrög	VVFIN	*	betrög	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Der	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	braven	ADJA	*	braven	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Herrn	NN	*	herr	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	viel	PIS	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gehabt	VAPP	*	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	diesem	PDAT	*	dieser	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Hab	NN	*	hab	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	gar	ADV	*	gar	-	-	-	(846
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	kurze	ADJA	*	kurz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Zeit	NN	*	zeit	-	-	-	846)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	gedient	VVPP	*	dienen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	blieb	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bald	ADV	(AVP*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	drauf	PROAV	*)	drauf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Askalon	NN	*))	askalon	-	-	-	(847)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	war	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ein	ART	(NP*	ein	sg	masc	-	(1065
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	lieber	ADJA	*	lieber	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Herr	NN	*)))	herr	sg	masc	-	1065)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ja	ADV	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dem	PWS	*	der	sg	-	-	(848)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	viel	PIS	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	viel	ADV	*	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	danken	NN	*	danken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	habe	XY	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(VP(NP*	der	sg	masc	-	(848)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mehr	PIAT	(AP*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	als	KOKOM	(NP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	einmal	ADV	(NP*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	*)	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dem	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Schwert	NN	*))))	schwert	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	entrissen	VVPP	*)	entreißen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(AP*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schön	ADJD	*)	schön	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	(849
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	werd	ADJD	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	t	CARD	*	T	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	seines	PPOSAT	*	sein	sg	neut	-	(2|(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Töchterchens	NN	*	töchterchen	sg	neut	-	849)|2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	um	KOUI	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	lieber	ADV	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	angenommen	VVPP	*	annehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	haben	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(849)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	könnt	VVFIN	*	können	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(VP*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denken	VVINF	*))	denken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*	es	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	*)	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(VP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	etwa	ADV	(AVP*	etwa	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gar	ADV	*)	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gestorben	VVPP	*))	sterben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Laßts	NN	(S*	laßt	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	lieber	ADV	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gestorben	VVPP	(VP*	sterben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	niemand	PIS	*	niemand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	um	APPR	(PP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	*	der	sg	fem	-	(686
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Sache	NN	*)	sache	sg	fem	-	686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	weiß	VVFIN	*)	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Es	PPER	(NP*	es	sg	neut	-	(711)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	gute	ADJA	*	gut	pl	masc	-	(850
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Wege	NN	*))	weg	pl	masc	-	850)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	es	PPER	*	es	sg	neut	-	(711)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Traut	VVFIN	(VROOT(PSEUDO(S*	traut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	(NP*	sich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*))	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seht	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	(S*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denke	VVFIN	*	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*))	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	*	der	sg	neut	-	(156
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gute	NN	*	gute	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	156)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Das	KOUS	(S*	der	sg	neut	-	(156)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	tun	VVINF	*)	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	vermeine	VVFIN	*	vermein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gar	ADV	(AP*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKA	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nah	ADJD	*)	nah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Was	PWS	*	was	sg	neut	-	(851
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Schlimmes	NN	*)))	schlimmes	sg	neut	-	851)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	grenzt	VVFIN	*)	grenzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	so	ADV	(S(CAVP(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	tu	ADJD	(S*	tu	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	lieber	ADV	*	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Das	ART	(NP*	der	sg	neut	-	(156
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Gute	NN	*)	gute	sg	neut	-	156)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	weil	KOUS	(S*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	wir	PPER	*	wir	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	das	ART	(NP*	der	sg	neut	-	(851
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Schlimme	NN	*	schlimme	sg	neut	-	851)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	zwar	ADV	(AP*	zwar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	So	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	ziemlich	ADV	*)	ziemlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	zuverlässig	ADJD	*))	zuverlässig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	kennen	VVINF	*)))	kennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	aber	KON	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	Bei	APPR	*)	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	weiten	VVFIN	*	weit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	das	ART	*	der	sg	neut	-	(156
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	Gute	NN	*)))	gute	sg	neut	-	156)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	War	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Natürlich	ADV	(S*	natürlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	das	ART	(NP*	der	sg	neut	-	(1044
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Christentöchterchen	NN	*)	christentöchterch	sg	neut	(MISC*)	1044)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Recht	NN	*	recht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	gut	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	von	APPR	(VP(VP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Euch	PPER	*)	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	erzogen	VVPP	*)	erziehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	werden	VAINF	*)	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sollte	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Ihrs	NN	*	ihr	-	-	-	(1008)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Euer	NN	*	euer	-	-	-	(34|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	eigen	ADJA	(NP*	eigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Töchterchen	NN	*))	töchterch	pl	fem	-	34)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Erzögt	VVFIN	*))	erzögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	*	der	sg	neut	-	(853|(852)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hättet	VVFIN	*	hätten	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	aller	PIAT	*	aller	sg	fem	-	(854
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Lieb	NN	*	lieb	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	853)|854)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Und	KON	*	und	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Treue	NN	*	treue	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	getan	VVPP	*	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	müßtet	VMFIN	*	müßten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Belohnet	VVPP	*	belohnet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	werden	VAINF	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(853)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ein	PTKVZ	*)	ein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	(VROOT(PSEUDO*	ei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	freilich	ADV	(S(AP*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	klüger	ADJD	*)	klug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hättet	VVFIN	*	hätten	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*)	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	getan	VVPP	*	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Wenn	KOUS	(CS(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ihr	PPER	(NP*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	die	ART	(NP*	der	sg	fem	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Christin	NN	*)	christin	sg	fem	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	durch	APPR	(PP*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	die	ART	*	der	sg	fem	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zweite	ADJA	*	zweiter	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Hand	NN	*))	hand	sg	fem	-	0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Als	APPR	(VP(VP(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Christin	NN	*)	christin	sg	fem	-	(705)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	auferziehen	VVINF	*)	auferziehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	lassen	VVINF	*))	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	So	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	hättet	VVFIN	*	hätten	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	das	ART	(NP*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Kindchen	NN	*	kindchen	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Eures	PPOSAT	(NP*	dein	sg	masc	-	(476|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Freunds	NN	*))	freund	sg	masc	-	476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Auch	ADV	(VP(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	geliebt	VVPP	*)))	lieben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kinder	NN	*	kind	pl	neut	-	(124)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	brauchen	VVFIN	*	brauchen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Liebe	NN	*	liebe	pl	*	-	(855)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wärs	NN	*	wär	-	-	-	(855)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	eines	ART	*	ein	sg	neut	-	(856
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wilden	ADJA	*	wild	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Tieres	NN	*	tier	*	*	-	856)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Lieb	NE	*	lieb	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	In	APPR	*	in	-	-	-	(261
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	solchen	PIAT	*	solcher	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Jahren	NN	*	jahr	pl	neut	-	261)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	mehr	ADV	*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Christentum	NN	*	christentum	sg	neut	-	(333)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zum	APPRART	(VROOT(PSEUDO(S(PP*	zu	-	-	-	(333
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Christentume	NN	*)	christentume	pl	masc	-	333)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hats	VAFIN	*	hats	pl	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	noch	ADV	(NP(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	immer	ADV	*)	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Zeit	NN	*))	zeit	sg	fem	-	(473)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S(AVP(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mädchen	NN	*)	mädchen	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sonst	ADV	(VP*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gesund	ADJD	(CAP*	gesund	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	fromm	ADJD	*)	fromm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Vor	APPR	(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Euern	NN	*	euer	pl	masc	-	(161|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Augen	NN	*)	auge	pl	neut	-	161)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	aufgewachsen	VVPP	*)	aufwachsen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ist	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	So	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	bliebs	ADV	(PP*	blieb	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	vor	APPR	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Gottes	NN	*	gott	sg	masc	(PER*)	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Augen	NN	*)	auge	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	was	PWS	(S*	was	sg	neut	-	(708
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	es	PPER	*	es	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	war	VAFIN	*))	sein	sg	-	-	708)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	(NP*	der	sg	neut	-	(333
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ganze	ADJA	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Christentum	NN	*	christentum	sg	neut	-	333)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Aufs	APPRART	(PP*	auf	sg	neut	-	(756
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Judentum	NN	*))	judentum	sg	neut	-	756)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gebaut	VVPP	*)	bauen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(CS(S*	es	sg	neut	-	(857)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	(VP*	mich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	oft	ADV	*	oft	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Geärgert	VVPP	*))	geärgert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hat	VAFIN	(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mir	PPER	(VP*	sich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Tränen	NN	*	träne	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gnug	ADJD	*	gnug	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	gekostet	VVPP	*))	kosten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Wenn	KOUS	(S*	wenn	-	-	-	(857
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Christen	NN	*	christ	pl	masc	(MISC*)	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	gar	ADV	(AVP*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	sehr	ADV	*)	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	vergessen	VVINF	*	vergessen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	konnten	VMFIN	*)	können	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	unser	PPOSAT	(NP*	unser	sg	masc	-	(22|(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Herr	NN	*)	herr	sg	masc	-	22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	selbst	ADV	(NP*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Jude	NN	*)	jude	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	war	VAFIN	*))))	sein	sg	-	-	857)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S(NP*	ihr	sg	masc	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	guter	ADJA	(NP*	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bruder	NN	*))	bruder	sg	masc	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	müßt	VMFIN	*	müßen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mein	PPOSAT	(VP(NP*	mein	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Fürsprach	NN	*)	fürsprach	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Wenn	KOUS	(CS(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Haß	NN	(CNP*	haß	sg	masc	-	(88)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Gleisnerei	NN	*)	gleisnerei	sg	masc	-	(565)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	sich	PRF	(VP*	sich	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	gegen	APPR	(PP*	gegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	mich	PPER	*)	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Erheben	VVINF	*)	erheben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	sollten	VMFIN	*)	sollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	–	NN	(S(NP*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	wegen	APPR	(PP*	wegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	einer	ART	*	ein	sg	fem	-	(711
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Tat	NN	*	tat	-	-	-	711)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	–	NE	(MPN*	–	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Ah	NE	*)))	ah	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	wegen	APPR	(PP*	wegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	einer	ART	*	ein	sg	fem	-	(711
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Tat	NN	*)))))	tat	sg	fem	-	711)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	(S*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(S*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sollt	VVFIN	*	sollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Sie	PPER	(VP*	sie	pl	*	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wissen	VVINF	*))	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nehmt	VVFIN	(S*	nehmt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	*)	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(NP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ins	APPRART	*	in	sg	neut	-	(838
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Grab	NN	*))	grab	sg	neut	-	838)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(S*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nie	ADV	(VP*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	die	ART	(NP*	der	sg	fem	-	(386
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Eitelkeit	NN	*)	eitelkeit	sg	fem	-	386)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	versucht	VVPP	*	versuchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Sie	PPER	(VP(NP*	sie	pl	*	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	jemand	PIS	*)	jemand	sg	masc	-	(716
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	andern	VVINF	*	anderer	-	-	-	716)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	erzählen	VVINF	*))))	erzählen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Euch	PPER	*	euch	-	-	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	erzähl	VVFIN	*	erzähl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sie	PPER	*	sie	sg	fem	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	frommen	ADJA	*	fromm	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Einfalt	NN	*	einfalt	sg	-	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	erzähl	ADJD	*	erzähl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sie	PPER	*	sie	sg	fem	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Weil	KOUS	(VROOT(PSEUDO(S*	weil	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	(NP*	der	sg	fem	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	allein	ADV	(AP*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Versteht	NN	*))	verstehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	was	PWS	(S*	was	sg	neut	-	(858)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	*	sich	sg	-	-	(859)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	(VP(NP*	der	sg	masc	-	(859
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gottergebne	ADJA	*	gottergebn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Mensch	NN	*	mensch	sg	masc	-	859)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Taten	NN	*))	tat	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	abgewinnen	VVINF	*)	abgewinnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	kann	VMFIN	*))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(CS(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gerührt	NN	*)	gerührt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Euer	PPOSAT	(S(NP*	euer	*	*	-	(161|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Auge	NN	*)	auge	-	-	-	161)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	steht	VVFIN	*	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	voll	APPR	(PP*	voll	-	-	-	(432
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Wasser	NN	*)))	wasser	sg	neut	-	432)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	traft	VVFIN	*	trafen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Kinde	NN	*	kind	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Darun	NE	*)))	darun	-	-	-	(845)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(CS(S*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wißt	VVFIN	*	wissen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wenig	PIAT	(NP(NP*	wenig	*	*	-	(860
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Tage	NN	*)	tag	*	*	-	860)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Zuvor	NN	*	zuvor	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Gath	NE	*)	gath	sg	neut	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	die	ART	(NP*	der	pl	masc	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Christen	NN	*)	christ	pl	masc	(MISC*)	99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	alle	PIAT	(VP(NP*	aller	pl	*	-	(861
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Juden	NN	*)	Jude	pl	*	-	861)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Weib	NN	(CNP*	weib	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Kind	NN	*))	kind	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	ermordet	VVPP	*)	ermorden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	hatten	VAFIN	*))	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	wißt	VVFIN	(S*	wissen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	unter	APPR	(PP*	unter	-	-	-	(861
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	diesen	PDAT	*	dieser	pl	*	-	861)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	meine	PPOSAT	(NP*	mein	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	Frau	NN	*	frau	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Mit	APPR	(PP*	mit	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	sieben	CARD	*))	sieben	-	-	-	(862
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	hoffnungsvollen	ADJA	*	hoffnungsvoll	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	Söhnen	NN	*)	söhnen	sg	masc	-	862)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	sich	PRF	*	sich	sg	-	-	(863)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	Befunden	NN	(NP*	befunde	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	die	PRELS	(S*	der	pl	masc	-	(863
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	meines	PPOSAT	*	mein	sg	masc	-	(864|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	Bruders	NN	*)	bruder	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	Hause	NN	(VP(NP*	haus	sg	neut	-	864)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	,	$,	*	--	-	-	-	863)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	Zu	APPR	(S(PP*	zu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	dem	PRELS	*)	der	sg	neut	-	(864)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	sie	PPER	*	sie	sg	fem	-	(863)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	50	geflüchtet	VVPP	*	flüchten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	51	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	52	insgesamt	ADV	*	insgesamt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	53	Verbrennen	NN	*)))	verbrennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	54	müssen	VMFIN	*)))))	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	55	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Allgerechter	ADJD	(VROOT(PSEUDO*	allgerechter	-	-	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Als	KOUS	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	sg	neut	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kamt	VVFIN	*	kamen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hatt	VAFIN	*	hatt	-	-	-	(865
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	drei	CARD	*	drei	-	-	-	(860
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Tag	NN	*	tag	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	860)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Nächt	NN	*	nächt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Asch	NE	*	asch	sg	neut	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	'	$(	*	--	-	-	-	865)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Und	CARD	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Staub	NN	*	staub	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	vor	APPR	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Gott	NN	*	gott	sg	masc	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	gelegen	VVPP	*	liegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	geweint	VVPP	*	weinen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geweint	NN	*	geweint	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Beiher	NN	(VROOT(PSEUDO(CS(S*	beiher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gott	NN	*)	gott	sg	masc	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gerechtet	VVPP	*))	rechten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gezürnt	NN	(S*)	gezürnt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	getobt	VVPP	*	toben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	mich	PRF	(S(CNP*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	die	ART	(NP*	der	sg	fem	-	(262
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Welt	NN	*))	welt	sg	fem	-	262)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	verwünscht	VVPP	*)	verwünschen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Der	ART	(S(NP*	der	sg	masc	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Christenheit	NN	*)	christenheit	sg	masc	-	99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	den	ART	(VP(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	unversöhnlichsten	ADJA	*	unversöhnlich	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Haß	NN	*)	haß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	zugeschworen	VVPP	*)))	zugeschwor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	–	$.	*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ach	ITJ	(VROOT(PSEUDO(S*)	ach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	glaubs	VVFIN	*	glaub	sg	-	-	(865)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kam	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	(NP*	der	sg	fem	-	(380
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Vernunft	NN	*)	vernunft	sg	fem	-	380)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	allmählig	ADJD	(AVP*	allmählig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	*))	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	*	sie	sg	fem	-	(380)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sprach	VVFIN	*	sprechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sanfter	ADJA	*	sanft	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Stimm	NN	*	stimm	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	»	$(	*	»	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Gott	NN	*	gott	sg	masc	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	(VP(AP(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gottes	NN	(NP*	gott	sg	masc	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ratschluß	NN	*))	ratschluß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	*)))	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wohlan	NN	(VROOT(PSEUDO*	wohlan	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Komm	VVIMP	*	komm	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	übe	XY	(VROOT(PSEUDO*	üben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	*	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	längst	ADV	(VP*	längst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	begriffen	VVPP	*)	begreifen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hast	VAFIN	*)	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sicherlich	ADV	*	sicherlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	(VP(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	üben	VVINF	*)	üben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	schwerer	ADJD	(S(VP*	schwer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Als	NN	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	begreifen	VVINF	*))	begreifen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	ist	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	du	PPER	*	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	nur	ADV	*))	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	willst	VMFIN	*)	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Steh	NE	*	steh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auf	PTKVZ	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	«	XY	*	«	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	stand	VVFIN	*)	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	rief	VVFIN	*	rufen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gott	NN	*)	gott	-	-	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	will	VMFIN	*)	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Willst	VVFIN	(VROOT(PSEUDO(CS(S*	willen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	will	VMFIN	*))	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Indem	PIS	*	indem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	stiegt	VVFIN	*	stiegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPOSAT	*	ihr	sg	neut	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Vom	APPRART	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Pferd	NN	*	pferd	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	überreichtet	VVFIN	*	überreichten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	das	ART	*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Kind	NN	*	kind	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	In	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Euern	NN	*	euer	*	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Mantel	NE	*	mantel	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	eingehüllt	VVPP	*	einhüllen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mir	NE	*	sich	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	damals	ADV	*	damals	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sagtet	VVFIN	*	sagten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Euch	PPER	*	euch	sg	-	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	hab	VAFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Vergessen	VVPP	*	vergessen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	viel	PIS	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	weiß	VVFIN	*	weißn	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nahm	VVFIN	*	nehmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Das	ART	*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Kind	NN	*	kind	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	trugs	ADV	*	trug	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mein	PPOSAT	*	mein	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Lager	NN	*	lager	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	küßt	VVFIN	*	küssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	es	PPER	*	es	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	warf	VVFIN	*	werfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Mich	NE	*	mich	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	die	ART	*	der	sg	fem	-	(866
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Knie	NN	*	knie	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	'	$(	*	--	-	-	-	866)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	schluchzte	VVFIN	*	schluchzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Gott	NN	*	gott	-	-	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	auf	APPR	(VROOT(PSEUDO(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sieben	CARD	*)	sieben	-	-	-	(862)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Doch	KON	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Eines	PIS	(AVP*	ein	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	*))	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(MPN*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(MPN*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	(867
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Christ	NN	*))	christ	sg	masc	-	867)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bei	APPR	(NP(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gott	NN	*)	gott	sg	masc	(PER*)	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	(NP*	ein	sg	masc	-	(867
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Christ	NN	*)))	christ	sg	masc	-	867)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(S(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	beßrer	ADJA	*	beßrer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Christ	NN	*)	christ	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nie	ADV	*)	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wohl	ADV	(VROOT(PSEUDO(NP*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	uns	PPER	*)	uns	pl	*	-	(868)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	(NP(S*	was	sg	neut	-	(869)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zum	APPRART	(PP*	zu	sg	neut	-	(867
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Christen	NN	*)	christ	sg	neut	-	867)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	macht	VVFIN	*)	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	das	PDS	*)	der	sg	neut	-	(869)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	macht	VVFIN	*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Euch	PPER	*	euch	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Zum	APPRART	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Juden	NN	*))	Jude	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	(S*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	laßt	VVIMP	*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	uns	PPER	*	uns	pl	*	-	(868)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	länger	ADJD	*	lang	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Einander	NN	(VP*	einander	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	erweichen	VVINF	*))	erweichen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hier	ADV	(VROOT(PSEUDO(S*	hier	-	-	-	(870
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	brauchts	VVFIN	*	brauchts	-	-	-	(871)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Tat	NN	*)	tat	-	-	-	(858)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	870)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	siebenfache	ADJA	*	siebenfach	sg	fem	-	(854
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Liebe	NN	*	liebe	sg	fem	-	854)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Bald	ADV	*	bald	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dies	PDS	*	dieser	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	einz	ADV	*	einz	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ge	ADJA	*	GE	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	fremde	ADJA	*	fremd	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Mädchen	NN	*	mädchen	-	-	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	band	VVFIN	*	binden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Ob	NN	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	der	ART	*	der	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Gedanke	NN	*	gedanke	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	tötet	VVFIN	*	töten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	meine	PPOSAT	*	mein	sg	-	-	(862|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	sieben	CARD	*	sieben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Söhn	NN	*	söhn	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	'	$(	*	--	-	-	-	862)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	aufs	APPRART	*	auf	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	neue	ADJA	*	neu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Verlieren	NN	*	verlieren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	meinen	PPOSAT	*	mein	pl	neut	-	(872|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	Händen	NN	*	hand	pl	neut	-	872)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	Die	ART	*	der	sg	fem	-	(570
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	Vorsicht	NN	*	vorsicht	sg	fem	-	570)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	wiederfodert	VVFIN	*	wierfodern	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	–	PWS	*	–	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	gehorche	VVFIN	*	gehorchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	vollends	ADV	*	vollends	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Eben	NN	*	eben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(870)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bedacht	VVPP	*	bedacht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mich	PRF	*	mich	sg	-	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	viel	PIS	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Euch	PPER	*	euch	pl	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	anzuraten	VVIZU	*	anraten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hats	VAFIN	*	hats	-	-	-	(870)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euer	NE	(VP(NP*	euer	sg	*	-	(380|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	guter	ADJA	*	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Geist	NN	*)	geist	sg	masc	-	380)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	angeraten	VVPP	*))	angerat	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	erste	ADJA	(AP*	erster	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	beste	ADJA	*))	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sie	PPER	*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Entreißen	VVINF	*	entreißen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wollen	VMFIN	*)	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	(VROOT(PSEUDO(S*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gewiß	ADV	*	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	(873
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Auf	APPR	*	auf	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	*	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	größre	ADJA	*	größr	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Rechte	NN	*	recht	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	als	KOUS	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	873)|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Muß	NN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	frühere	VVFIN	*	früh	sg	masc	-	(817)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zum	APPRART	*	zu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mindsten	ADJA	*	mind	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	haben	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	–	XY	*	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Freilich	ADV	(VROOT(PSEUDO(S*)	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(VP(NP*	der	sg	fem	-	(817)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihm	PPER	(CNP*	ihm	sg	masc	-	(873)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Natur	NN	*	natur	sg	fem	-	(38)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Blut	NN	*))	blut	sg	neut	-	(607)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	erteilen	VVINF	*)	erteilen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mein	PPOSAT	*	mein	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*	es	sg	neut	-	(870)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Drum	ADV	*	drum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nennt	VVFIN	*	nennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	geschwind	ADJD	*	geschwind	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Den	ART	*	der	sg	masc	-	(873
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Mann	NN	*	mann	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	der	PRELS	*	der	sg	masc	-	(873)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ihr	PPER	*	ihr	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Bruder	NN	*	bruder	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Ohm	NN	*	ohm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Vetter	NN	*	vetter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Sipp	NN	*	sipp	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	verwandt	VVPP	*	verwanden	-	-	-	873)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Ihm	PPER	*	ihm	sg	masc	-	(873)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	sie	PPER	*	sie	*	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	vorenthalten	ADJA	*	vorenthalten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	–	NN	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Sie	PPER	*	sie	pl	*	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	,	$,	*	--	-	-	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Die	PDS	*	der	pl	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	jedes	PIAT	*	jeder	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Hauses	NN	*	haus	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	jedes	PIAT	*	jeder	sg	neut	-	(531
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	Glaubens	NN	*	glauben	sg	neut	-	531)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	Zierde	NN	*	zierd	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	Zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	sein	PPOSAT	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	erschaffen	VVPP	*	erschaffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	erzogen	VVPP	*	erziehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	ward	VVFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hoff	VVFIN	*	hoff	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	pl	*	-	(874|(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wißt	VVFIN	*	wissen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	diesem	PDAT	*	dieser	sg	masc	-	(476
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Euern	NN	*	euer	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Herrn	NN	*	herr	sg	masc	-	874)|476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	dem	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Geschlechte	NN	*	geschlecht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	dessen	PDS	*	der	sg	neut	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	mehr	PIS	*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(874)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	guter	ADJA	(NP*	gut	*	*	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NN	*)	nathan	*	*	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	schwerlich	ADJD	*)	schwerlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	habt	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	(VP*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gehört	VVPP	*	gehören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nur	ADV	(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gar	ADV	*))))	gar	-	-	-	(846)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Zu	APPR	(VP(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	kurze	ADJA	*	kurz	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Zeit	NN	*)	zeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ihm	PPER	*)	ihm	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	gewesen	VAPP	*)	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wißt	VVFIN	(VROOT(PSEUDO(S*	wißen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wenigstens	ADV	*	wenigstens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Geschlechts	NN	*)	geschlecht	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Die	ART	(NP*	der	pl	masc	-	(478
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Mutter	NN	*)	mutter	sg	fem	-	478)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	war	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	War	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(478)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	eine	ART	(NP*	ein	sg	fem	-	(875
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Stauffin	NN	*)	stauffin	sg	fem	-	875)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wohl	ADV	(VROOT(PSEUDO(S(ISU*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	möglich	ADJD	*))	möglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ja	PTKANT	(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dünkt	VVFIN	*)	dünken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hieß	VVFIN	(VROOT(PSEUDO(S*	hieß	-	-	-	(876
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPOSAT	(NP*	ihr	sg	masc	-	(471|(478)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bruder	NN	*	bruder	sg	masc	-	471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Conrad	NE	*)	conrad	sg	masc	-	(877
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Stauffen	NN	*))	stauff	pl	masc	-	877)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Tempelherr	NN	*)))	tempelherr	-	-	-	876)|(674)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	michs	PPER	*	michs	-	-	-	(876)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	triegt	VVFIN	*)	triegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	halt	ADV	*)	halt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fällt	VVFIN	*	fallen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ein	PTKVZ	*	ein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	vom	APPRART	*	von	sg	neut	-	(476
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	selgen	ADJA	*	selgen	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Herrn	NN	*	herr	sg	masc	-	476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ein	ART	*	ein	sg	neut	-	(878
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Büchelchen	NN	*	büchelchen	sg	neut	-	878)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	hab	VAFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	zogs	VVFIN	*	zog	sg	-	-	(878)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Busen	NN	*)	busen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	als	KOUS	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Wir	PPER	*	wir	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ihn	PPER	*	ihn	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Askalon	NN	*)	askalon	sg	neut	(PER*)	(847)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	verscharrten	VVFIN	*))	verscharren	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gebete	NN	(NP*	gebet	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	drin	ADV	*))	drin	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wir	PPER	(VROOT(PSEUDO(S(NP*	wir	pl	*	-	(99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nennens	ADV	*)	nennens	pl	-	-	(878)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Brevier	NN	*))	brevier	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	*	der	sg	neut	-	(878)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dacht	VVFIN	*	dacht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ein	ART	*	ein	sg	masc	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Christenmensch	NN	*	christenmensch	sg	masc	(MISC*)	99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ja	NN	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	brauchen	VVFIN	*	brauchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ich	PPER	*	ich	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	lesen	VVINF	*	lesen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	XY	*	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Tut	XY	*	tut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	(AP(PP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zur	APPRART	*	zu	sg	fem	-	(879
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sache	NN	*))	sache	sg	fem	-	879)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	In	APPR	(VROOT(PSEUDO(S(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	diesem	PDAT	*	dieser	sg	neut	-	(878
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Büchelchen	NN	*)	büchelchen	sg	neut	-	878)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	stehn	VVFIN	*	stehn	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	vorn	ADV	(CAVP*	vorn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hinten	ADV	*)	hinten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mir	PPER	(VP(VP*	sich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sagen	VVINF	*)	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	lassen	VVINF	*)	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	mit	APPR	(CS(S(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	des	ART	*	der	sg	masc	-	(1041
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Herrn	NN	*)	herr	sg	masc	-	1041)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Selbsteigner	ADJA	(NP*	selbsteigner	sg	masc	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Hand	NN	*))	hand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	die	ART	(S(NP*	der	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Angehörigen	NN	*)	angehörige	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Von	APPR	(VP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	ihm	PPER	(CNP*	ihm	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	ihr	PPER	*))	ihr	sg	fem	-	(478)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	geschrieben	VVPP	*)))))	schreiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	KON	(VROOT(PSEUDO(VP(AP*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	erwünscht	ADJD	*))	erwünschen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	lauft	VVFIN	*	laufen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	holt	VVFIN	(VROOT(PSEUDO(S*	holen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(NP*	der	sg	neut	-	(878
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Büchelchen	NN	*))	büchelchen	sg	neut	-	878)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geschwind	NN	(VROOT(PSEUDO*	geschwind	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bereit	ADJD	(AP*	bereit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Gold	NN	*	gold	sg	neut	-	(881)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	es	PPER	(CO(VP*	es	sg	neut	-	(878)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	aufzuwiegen	VVIZU	*)	auuwiegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	tausend	CARD	(NP*	tausend	-	-	-	(882
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Dank	NN	*	dank	-	-	-	882)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	dazu	PROAV	*))))))	dazu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Eilt	VVIMP	*	eilt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	lauft	VVFIN	*	laufen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Recht	NN	(VROOT(PSEUDO(NP*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gern	ADV	*)	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(878)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Arabisch	ADJD	*	arabisch	-	-	(MISC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(NP*	der	sg	masc	-	(476
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Herr	NN	*)	herr	sg	masc	-	476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Hineingeschrieben	NN	*))	hineingeschrieb	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ab	NN	(VROOT(PSEUDO*	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Einerlei	PIS	*	einerlei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(AP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	her	PTKVZ	*)	her	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*	gott	-	-	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	(NP*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Mädchen	NN	*)	mädchen	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	(CO*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	behalten	VVINF	*	behalten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	einen	ART	(NP*	ein	sg	masc	-	(873
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	solchen	PIAT	(NP*	solcher	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Eidam	NN	*))))	eidam	sg	masc	-	873)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mir	PPER	(VP*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	damit	PROAV	*	damit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Erkaufen	VVINF	*)	erkaufen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	könnte	VMFIN	*)	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Schwerlich	ADJD	*	schwerlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	fall	FM	*	fall	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Es	PPER	*	es	sg	neut	-	(879)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	aus	PTKVZ	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wie	PWAV	*	wie	-	-	-	(879
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	s	PPER	*	--	-	-	-	879)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	will	VMFIN	*	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wer	PWS	(S*	wer	sg	masc	-	(883
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mag	VMFIN	*)	mögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(884)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	aber	ADV	(NP(VP*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	*	denn	-	-	-	883)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Gewesen	NN	*	gewesen	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sein	VAINF	*)	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	der	PRELS	(S*	der	sg	masc	-	(884|(884)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	dem	ART	*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Patriarchen	NN	*)	patriarch	sg	masc	-	884)|8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	So	ADV	(VP(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	etwas	ADV	*)	etwas	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	angebracht	VVPP	*)))	anbringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(883)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Zu	APPR	(VP(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	fragen	ADJD	*)	fragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	vergessen	VVPP	*))	vergessen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(883)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gar	ADV	*)	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Von	APPR	(S(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Daja	NE	*)	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	käme	VVFIN	*)	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daja	NE	(VROOT(PSEUDO(CNP*	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nathan	NE	*)	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*))	daja	-	-	-	(0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	eilig	ADJD	(VROOT(PSEUDO(CO*	eilig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	verlegen	ADJD	*)	verlegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denkt	VVIMP	(VROOT(PSEUDO(S*	denken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	arme	ADJA	*	arm	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Kind	NN	*)	kind	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	erschrak	VVFIN	*	erschrecken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	recht	ADV	(AVP*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	darüber	PROAV	*))	darüber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schickt	VVFIN	*	schicken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Patriarch	NN	*)	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Des	ART	(VROOT(PSEUDO(NP*	der	-	-	-	(307|(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sultans	NN	*)	sultan	sg	neut	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Schwester	NN	(NP*	schwester	*	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Prinzessin	NN	(NP*	prinzessin	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Sittah	NE	*))))	sittah	sg	fem	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Patriarch	NN	*)	patriarch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*	sittah	pl	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hört	VVFIN	(S*	hören	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Prinzessin	NN	*	prinzessin	sg	fem	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	(S(NP*	sittah	sg	fem	-	307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Schickt	NE	*)	schickt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	her	PTKVZ	*	her	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	läßt	VVFIN	(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sie	PPER	*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zu	APPR	(VP(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sich	PRF	*)	sich	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	holen	VVINF	*)))	holen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wen	PWS	*	wen	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Läßt	VVFIN	*	lassen	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Recha	NE	*	recha	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	holen	VVINF	*	holen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sittah	NE	(S*	sittah	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	läßt	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	(VP*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	holen	VVINF	*))	holen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	XY	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Sittah	NE	*	sittah	sg	masc	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	holen	VVINF	*	holen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	läßt	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Patriarch	NN	*)))	patriarch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kommt	VVFIN	*	kommen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auf	APPR	(AVP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	den	ART	*))	der	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hast	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kürzlich	ADV	(NP*	kürzlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ihm	PPER	*)	ihm	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gehört	VVFIN	*)	gehören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gewiß	ADV	(VROOT(PSEUDO(CO(AVP*	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(VP(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihm	PPER	*)	ihm	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gesteckt	VVPP	*)	stecken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ihm	PPER	*	ihm	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	(VROOT(PSEUDO(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	pl	fem	-	(885
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Boten	NN	*))	bote	pl	fem	-	885)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Vorn	ADV	(VROOT(PSEUDO(S*)	vorn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	(VP*	sie	pl	*	-	(885)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Vorsicht	NN	*)	vorsicht	-	-	-	(570)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	selber	ADV	*	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sprechen	VVINF	*))	sprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Komm	VVIMP	*	komm	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vom	APPRART	(PP*	von	pl	fem	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Patriarchen	NN	*)	patriarchen	pl	fem	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nichts	PIS	(NP*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dahinter	PROAV	*))	dahinter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	steckt	VVFIN	*	stecken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ab	NN	(VROOT(PSEUDO*	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	(886
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	–	VVFIN	*	–	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	(S*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	fürchte	VVFIN	*	fürchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ganz	ADV	(NP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	was	PIS	*)	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	anders	ADV	(AVP*	anders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	noch	ADV	*)))	noch	-	-	-	886)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gilts	ADV	*	gilt	-	-	-	(886)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	die	ART	*	der	sg	fem	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	einzige	ADJA	*	einzig	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vermeinte	ADJA	*	vermeint	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Tochter	NN	*	tochter	sg	fem	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	So	ADV	*	so	-	-	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	eines	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	reichen	ADJA	*	reich	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Juden	NN	*	Jude	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	einen	ART	*	ein	sg	masc	-	(100
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Muselmann	NN	*	muselmann	sg	masc	-	100)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	übel	ADV	*	übel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hui	NE	(NP*	hui	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Der	ART	(S(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Tempelherr	NN	*)	tempelherr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	drum	ADV	*))	drum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	drum	ADV	*	drum	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Den	ART	(NP*	der	sg	masc	-	(887
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zweiten	ADJA	*	zweiter	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Schritt	NN	*)	schritt	sg	masc	-	887)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	auch	ADV	(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wage	NN	*	wagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	noch	ADV	(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	entdecke	VVFIN	*	entdecken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	wer	PWS	(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	ist	VAFIN	*)))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Getrost	NN	*	getrost	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	KOUS	(VROOT(PSEUDO(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*	mich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	(NP*	der	sg	masc	-	(888
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ersten	ADJA	*	erster	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Augenblick	NN	*)	augenblick	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	888)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Den	NE	*	der	sg	masc	-	(888)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	allein	ADV	(NP*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sie	PPER	*)	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	dazu	PROAV	(VP*	dazu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	brauchen	VVINF	*))	brauchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	der	PDS	*	der	sg	masc	-	(888)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sein	PPOSAT	(NP*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	NN	*)	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ich	PPER	*	ich	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	begleite	VVFIN	*))	begleiten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ein	ART	(S(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	erster	ADJA	*	erster	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wink	NN	*	wink	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Kann	NE	*)	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	unterwegens	ADV	(VP*	unterwegens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wenigstens	ADV	(AVP*	wenigstens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	schaden	VVINF	*))	schaden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*)	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(AP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	zu	PTKVZ	*)	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Itzt	ADV	(VROOT(PSEUDO*	itzt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nie	ADV	*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(AP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	zu	PTKVZ	*)	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihm	PPER	*	ihm	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nach	PTKVZ	*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Szene	NN	(VROOT(PSEUDO(S*	szene	sg	-	-	(763)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(CNP(NP*	der	sg	neut	-	(764
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Zimmer	NN	*	zimmer	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Saladins	NE	(MPN*	saladin	sg	*	-	(175|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Palaste	NE	*)	palaste	sg	-	-	175)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	in	APPR	(S(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	welches	PRELS	*)	welcher	sg	neut	-	(764)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	die	ART	(NP*	der	sg	fem	-	(765
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Beutel	NN	*)	beutel	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mit	APPR	(VP(VP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Geld	NN	*)	geld	sg	neut	-	765)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	getragen	VVPP	*)	tragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	worden	VAPP	*))))	werden	-	-	-	764)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	die	PRELS	(NP*	der	pl	*	-	(765)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	noch	ADV	(NP(AP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	sehen	VVINF	*)))	sehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*)))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO(CNP*	saladin	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bald	ADV	(NP(AVP*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	darauf	PROAV	*)	darauf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	verschiedne	ADJA	*	verschiedn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Mamelucken	NN	*))	mamelucken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	im	APPRART	(VROOT(PSEUDO(PP*	in	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hereintreten	NN	*)	hereintreten	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	steht	VVFIN	*	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(NP*	der	sg	neut	-	(765
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Geld	NN	*)	geld	sg	neut	-	765)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	(AVP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	*))	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	niemand	PIS	*	niemand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Den	ART	*	der	sg	masc	-	(3
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Derwisch	NN	*	derwisch	sg	masc	-	3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	aufzufinden	VVIZU	*	auffinden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	der	PRELS	*	der	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	vermutlich	ADV	*	vermutlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ans	NE	*	an	sg	*	-	(195
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Schachbrett	NN	*	schachbrett	-	-	-	195)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	irgendwo	ADV	*	irgendwo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	geraten	VVPP	*	geraten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Das	KOUS	*	der	sg	neut	-	(195)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ihn	PPER	*	ihn	sg	masc	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	seiner	PIS	*	sein	pl	neut	-	(3)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	vergessen	VVINF	*	vergessen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	macht	VVFIN	*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Warum	NN	*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	meiner	PPOSAT	*	mein	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Geduld	NN	*	geduld	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gibts	ADV	*	gibt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	EIN	NE	(VROOT(PSEUDO(MPN*	ein	-	-	-	(889
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	MAMELUCK	NE	*)	mameluck	-	-	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	889)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Erwünschte	ADJA	(VROOT(PSEUDO(NP*	erwünscht	-	-	-	(349
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nachricht	NN	*	nachricht	pl	-	-	349)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sultan	NE	*)	sultan	pl	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Freude	NN	(VROOT(PSEUDO(NP*	freude	sg	fem	-	(364)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sultan	NE	*)	sultan	sg	neut	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Die	ART	(S(NP*	der	sg	fem	-	(890
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Karawane	NE	*	karawane	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Kahira	NE	*))	kahira	sg	*	(PER*)	890)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	kömmt	VVFIN	*)	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ist	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	glücklich	ADJD	*	glücklich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	da	ADV	*)	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	mit	APPR	(VROOT(PSEUDO(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	siebenjährigem	ADJA	*	siebenjährig	sg	neut	-	(347)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Tribut	NN	*	tribut	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	des	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	reichen	ADJA	*	reich	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nils	NN	*))	nil	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Brav	NE	(VROOT(PSEUDO(NP*	brav	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ibrahim	NE	*)	ibrahim	sg	neut	-	(889)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(889)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wahrlich	ADJD	*	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	willkommner	ADJA	*	willkommn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Bote	NN	*))	bote	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ha	NE	*	ha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	endlich	ADV	(VROOT(PSEUDO*	endlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	einmal	ADV	*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	endlich	ADV	(VROOT(PSEUDO(S*)	endlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Habe	NN	*	haben	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Dank	APPR	*	dank	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Der	ART	(NP*	der	sg	fem	-	(349
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	guten	ADJA	*	gut	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Zeitung	NN	*)	zeitung	sg	fem	-	349)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DER	NE	(VROOT(PSEUDO(MPN*	der	-	-	-	(889
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	MAMELUCK	NE	*)))	mameluck	-	-	-	889)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wartend	ADJD	(VROOT(PSEUDO*	wartend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	(	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	her	ADV	*	her	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	damit	PROAV	*	damit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	)	$(	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wart	VVFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	st	ADV	*	--	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(889)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	NN	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(AP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wieder	ADV	*)	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DER	NE	(VROOT(PSEUDO(MPN*	der	-	-	-	(889
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	MAMELUCK	NE	*)	mameluck	-	-	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	889)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dem	ART	(VROOT(PSEUDO(NP*	der	sg	neut	-	(889
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Willkommnen	NN	*	willkommne	sg	*	-	889)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sonst	ADV	(NP*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nichts	PIS	*))	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sonst	ADV	*))	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DER	NE	(VROOT(PSEUDO(MPN*	der	-	-	-	(889
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	MAMELUCK	NE	*)	mameluck	-	-	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	889)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dem	ART	(VROOT(PSEUDO(NP*	der	sg	neut	-	(889
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	guten	ADJA	*	gut	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Boten	NN	*	bot	sg	neut	-	889)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Kein	PIAT	(NP*	kein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Botenbrod	NN	*))	botenbrod	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(10)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*)	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	(NP*	der	sg	masc	-	(891
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	erste	ADJA	*	erster	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	891)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Den	NE	(CO(VP(NP(MPN*	der	sg	masc	-	(891)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Saladin	NE	*)	saladin	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Worten	NN	*))	wort	pl	neut	-	(128)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	abzulohnen	VVIZU	*)	ablohnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Doch	KON	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	endlich	ADV	*	endlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	lernte	VVFIN	*)))	lernen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Auch	ADV	(NP(AP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	*)	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ruhm	NN	*)	ruhm	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	(NP*	der	sg	masc	-	(891
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	erste	ADJA	*)	erster	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	891)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dem	PRELS	(S*	der	sg	neut	-	(891)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	knickerte	VVFIN	*)	knickern	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nimm	VVIMP	(S*	nimm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dir	PPER	*	dir	sg	*	-	(889)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Dort	ADV	(NP(AP*	dort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	einen	ART	*)	ein	sg	masc	-	(892
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Beutel	NN	*))	beutel	sg	masc	-	892)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DER	NE	(VROOT(PSEUDO(MPN*	der	-	-	-	(889
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	MAMELUCK	NE	*)	mameluck	-	-	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	889)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	(VROOT(PSEUDO(S*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kannst	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mir	PPER	*	sich	sg	*	-	(10)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	*	sie	pl	*	-	(765)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	alle	PIS	(VP(VP*	alle	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	schenken	VVINF	*)	schenken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wollen	VMINF	*))	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Trotz	APPR	(VROOT(PSEUDO*	trotz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Komm	NN	*	komm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	her	PTKVZ	*)	her	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hast	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	(NP*	du	sg	*	-	(889)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zwei	CARD	*	zwei	-	-	-	(893)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Im	APPRART	(NP(PP*	in	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ernst	NN	*))	ernst	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(889)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geht	VVFIN	*)	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Tut	NN	(VROOT(PSEUDO(S(NP*	tut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mirs	NE	*)	mir	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Edelmut	NE	*	edelmut	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zuvor	ADV	*))	zuvor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sicher	ADJA	*	sicher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Muß	NN	*	müssen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*	ihm	sg	masc	-	(889)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	es	PPER	*	es	sg	neut	-	(894)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	saurer	ADJD	*	sauer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	werden	VAINF	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	auszuschlagen	VVIZU	*	ausschlagen	-	-	-	(894)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Als	KOUS	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	geben	VVINF	*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ibrahim	NE	*	ibrahim	-	-	-	(889)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kömmt	VVFIN	*)	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mir	NE	(NP*	sich	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ein	PTKVZ	*)	ein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	(VP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	kurz	ADJD	(PP*	kurz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	vor	APPR	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	meinem	PPOSAT	*	mein	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Abtritt	NN	*)	abtritt	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Auf	APPR	(AVP(AVP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	einmal	ADV	*)	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ganz	ADV	*)	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ein	ART	(VP(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	andrer	ADJA	*)	andrer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	sein	VAINF	*)	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	wollen	VMINF	*)))	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Will	VMFIN	(S*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Saladin	NE	*	saladin	sg	*	(PER*)	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	als	APPR	(VP(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Saladin	NN	*)	saladin	sg	*	-	(895)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sterben	VVINF	*))	sterben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mußt	VMFIN	*	mussen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Saladin	NN	*	saladin	sg	masc	-	(895)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	leben	VVINF	*	leben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	EIN	NE	(VROOT(PSEUDO(MPN*	ein	-	-	-	(11
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ZWEITER	NE	*	zweiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	MAMELUCK	NE	*)	mameluck	-	-	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	11)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sultan	NE	*	sultan	sg	neut	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(11)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	(VP*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	melden	VVINF	*))	melden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kömmst	VVFIN	*)	kömmsen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ZWEITER	NE	(VROOT(PSEUDO(MPN*	zweiter	-	-	-	(11
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	MAMELUCK	NE	*)	mameluck	-	-	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	11)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ägypten	NE	*)	ägypten	sg	neut	-	(348)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(NP*	der	sg	masc	-	(890
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Transport	NN	*)	transport	sg	masc	-	890)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	da	ADV	*)	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schon	ADV	*)	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ZWEITER	NE	(VROOT(PSEUDO(MPN*	zweiter	-	-	-	(11
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	MAMELUCK	NE	*)	mameluck	-	-	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	11)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kam	XY	(VROOT(PSEUDO(S*	kam	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(11)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(AP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	PTKA	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	spät	ADJD	*))	spät	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Warum	PWAV	(VROOT(PSEUDO(AP*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zu	PTKA	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	spät	ADJD	*)	spät	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Da	KOUS	(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nimm	PIS	(CNP*	nimm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	für	APPR	(NP(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	deinen	PPOSAT	*	dein	sg	masc	-	(11)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	guten	ADJA	*	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Willen	NN	*	wille	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Der	ART	(NP*	der	sg	masc	-	(489
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Beutel	NN	*))	beutel	sg	masc	-	489)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	einen	PIS	*)	ein	sg	masc	-	(892)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zwei	CARD	*))	zwei	-	-	-	(893)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ZWEITER	NE	(VROOT(PSEUDO(MPN*	zweiter	-	-	-	(11
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	MAMELUCK	NE	*)	mameluck	-	-	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	11)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Macht	NN	(VROOT(PSEUDO(NP*	macht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	drei	CARD	*)	drei	-	-	-	(896)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	*	du	sg	*	-	(11)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	rechnen	VVINF	*	rechnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kannst	VMFIN	*)	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nimm	VVFIN	*	nimm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	*	sie	sg	fem	-	(896)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ZWEITER	NE	(VROOT(PSEUDO(MPN*	zweiter	-	-	-	(11
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	MAMELUCK	NE	*)	mameluck	-	-	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	11)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(CS(S*	es	sg	neut	-	(897
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	(VP*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	(NP*	ein	sg	masc	-	(898
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dritter	ADJA	*)	dritter	sg	masc	-	898)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	kommen	VVINF	*))	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	–	KON	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Er	PPER	(VP(NP*	er	sg	masc	-	(898)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	anders	ADV	*)	anders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	kommen	VVINF	*)	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	kann	VMFIN	*))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	897)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(897)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ZWEITER	NE	(VROOT(PSEUDO(MPN*	zweiter	-	-	-	(11
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	MAMELUCK	NE	*)	mameluck	-	-	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	11)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Je	ADV	(VROOT(PSEUDO*	je	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nu	XY	*	nu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Er	PPER	(S*	er	sg	masc	-	(898)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	(VP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	den	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Hals	NN	*)	hals	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gebrochen	VVPP	*))	brechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sobald	KOUS	(S*	sobald	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wir	PPER	*	wir	pl	*	-	(899
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	drei	CARD	*	drei	-	-	-	899)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ankunft	NN	*	ankunft	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	des	ART	(NP*	der	sg	neut	-	(890
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Transports	NN	*))	transport	sg	neut	-	890)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Versichert	VVPP	*	versichert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	waren	VAFIN	*)	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sprengte	VVFIN	*	sprengen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	jeder	PIS	*	jeder	sg	masc	-	(899)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	frisch	ADJD	*	frisch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Davon	PTKVZ	*)	davon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(898
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vorderste	NN	*	vorderste	sg	masc	-	898)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	*	der	sg	masc	-	(898)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	stürzt	NN	*	stürzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Komm	NN	*	komm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(11)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	vor	PTKVZ	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	bleib	VVFIN	*	bleib	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	vor	APPR	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	bis	APPR	*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Die	ART	*	der	sg	fem	-	(14
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Stadt	NN	*	stadt	sg	fem	-	14)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Ibrahim	NE	*	ibrahim	sg	masc	(PER*)	(889
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Lecker	NE	*	lecker	sg	masc	-	889)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	Die	ART	*	der	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Gassen	NN	*	gasse	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	besser	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	KON	(VROOT(PSEUDO(PP*	O	-	-	-	(898
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gestürzte	NN	*)	gestürzt	sg	masc	-	898)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Freund	NN	(VROOT(PSEUDO(NP*	freund	sg	masc	-	(11)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(898
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gestürzte	NN	*))	gestürzt	sg	masc	-	898)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Reit	NN	*	reit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	(S*	ihm	sg	masc	-	(898)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	entgegen	PTKVZ	*)	entgegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ZWEITER	NE	(VROOT(PSEUDO(MPN*	zweiter	-	-	-	(11
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	MAMELUCK	NE	*)	mameluck	-	-	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	11)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	werd	VVFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(11)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	tun	VVINF	*)	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(898)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	lebt	VVFIN	*)	leben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	So	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	die	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Hälfte	NN	*)	hälfte	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	dieser	PDAT	(VP(NP*	dieser	sg	masc	-	(896
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Beutel	NN	*)	beutel	sg	masc	-	896)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sein	VAINF	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	(VROOT(PSEUDO(S*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ab	PTKVZ	*)	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sieh	NE	(VROOT(PSEUDO(S*	sieh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	welch	VVFIN	*	welcher	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ein	ART	(S(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	guter	ADJA	*	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	edler	ADJA	*	edel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Kerl	NN	*)	kerl	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	auch	ADV	(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	das	PDS	*)))	der	sg	neut	-	(11)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wer	PWS	(S*	wer	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sich	PRF	*	sich	sg	-	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	solcher	PIAT	(NP*	solcher	pl	fem	-	(899
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Mamelucken	NN	*)	mamelucke	pl	fem	-	899)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	rühmen	VVINF	*)	rühmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	denken	ADJD	*	denken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	erlaubt	VVPP	*	erlauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	sg	fem	-	(899)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mein	PPOSAT	*	mein	sg	neut	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Beispiel	NN	*	beispiel	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	bilden	VVINF	*	bilden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	helfen	VVINF	*	helfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Fort	NN	*	fort	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Gedanken	NN	*	gedanke	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sie	PPER	(VP*	sie	pl	*	-	(899)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	guter	ADJA	*	gut	sg	fem	-	(790
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Letzt	NN	*)	letzt	-	-	-	790)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	an	APPR	(AVP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ein	ART	*)	ein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	anders	ADV	*	anders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	gewöhnen	VVINF	*)))	gewöhnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	EIN	NE	(VROOT(PSEUDO(MPN*	ein	-	-	-	(12
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	DRITTER	NE	*	dritter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	MAMELUCK	NE	*)	mameluck	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	12)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sultan	NE	(VROOT(PSEUDO*	sultan	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bist	VAFIN	(VROOT(PSEUDO(S*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dus	PDS	*	dus	-	-	-	(900|(12)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	PRELS	(S*	der	sg	masc	-	(900)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	stürzte	VVFIN	*))	stürzen	sg	-	-	900)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	DRITTER	NE	(VROOT(PSEUDO(MPN*	dritter	-	-	-	(12
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	MAMELUCK	NE	*)	mameluck	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	12)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(12)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	melde	VVFIN	*	melden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	XY	*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Daß	KOUS	(S*	daß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Emir	NE	(MPN*	emir	sg	masc	-	(13
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Mansor	NE	*)	mansor	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	der	PRELS	(S*	der	sg	masc	-	(13)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	die	ART	(NP*	der	sg	fem	-	(890
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Karawane	ADJA	*	karawane	sg	fem	-	13)|890)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Geführt	NN	*)	führen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	vom	APPRART	(PP*	von	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Pferde	NN	*)	pferd	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	steigt	VVFIN	*))	steigen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bring	NE	*	bring	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*	ihn	sg	masc	-	(13)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	geschwind	ADJD	(VROOT(PSEUDO*	geschwind	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Da	ADV	(S*)	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(13)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*)	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Emir	NE	(VROOT(PSEUDO(CNP(MPN*	emir	-	-	-	(13
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mansor	NE	*)	mansor	-	-	-	13)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Saladin	NE	*)	saladin	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Willkommen	ADJD	(VROOT(PSEUDO(NP*	willkommen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Emir	NE	*	emir	sg	neut	-	(13)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wie	PWAV	(VP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ists	ADV	*	ists	-	-	-	(901)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gegangen	VVPP	*))	gehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mansor	NE	*	mansor	sg	-	-	(13)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mansor	NE	(NP*	mansor	sg	masc	-	(13)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hast	VAFIN	(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Uns	PPER	(VP*	uns	pl	*	-	(317)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	lange	ADV	*	lange	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	warten	VVINF	*	warten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	lassen	VVINF	*)))	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	MANSOR	NE	(VROOT(PSEUDO*	mansor	-	-	(LOC*)	(13
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	13)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dieser	PDAT	*	dieser	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Brief	NN	*	brief	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Berichtet	VVFIN	*	berichten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dein	PPOSAT	*	dein	sg	neut	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Abulkassem	NN	*	abulkassem	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Unruh	NN	*	unruh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Thebais	NE	*	thebais	sg	neut	(LOC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	dämpfen	VVINF	*	dämpfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	müssen	VMINF	*	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Eh	XY	*	eh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	wir	PPER	*	wir	pl	*	-	(890)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	es	PPER	*	es	sg	neut	-	(902)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	wagen	VVINF	*	wagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	durften	VMFIN	*	dürfen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	abzugehen	VVIZU	*	abgehen	-	-	-	(902)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Den	ART	*	der	sg	masc	-	(890
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zug	NN	*	zug	sg	masc	-	890)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	darauf	PROAV	*	darauf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hab	VAFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(13)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	beschleuniget	VVPP	*	beschleunigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	viel	PIS	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wie	KOKOM	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	möglich	ADJD	*	möglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	glaube	VVFIN	*	glauben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dir	PPER	*)	dir	sg	*	-	(13)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nimm	FM	(NP*	nimm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	guter	ADJA	(NP*	gut	*	*	-	(13
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Mansor	NN	*))	mansor	sg	*	-	13)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nimm	VVIMP	(S*	nimm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sogleich	ADV	*))	sogleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Du	PPER	(S*	du	sg	*	-	(13)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	tust	VVFIN	*	tun	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	es	PPER	*	es	sg	neut	-	(901)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	gern	ADV	*)	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO(AVP(S(ISU*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nimm	APPRART	(PP*	nimm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	frische	ADJA	*	frisch	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Bedeckung	NN	*)	bedeckung	sg	fem	-	(903)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sogleich	ADV	*)	sogleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mußt	VMFIN	*	mussen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sogleich	ADV	(VP*	sogleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Noch	ADV	(NP(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	weiter	ADV	(S*	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mußt	VMFIN	*	mussen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	(NP*	der	sg	masc	-	(347
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Gelder	NN	*)	geld	sg	masc	-	347)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	größern	VVINF	*))	größern	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Teil	NN	*)	teil	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Auf	APPR	(PP*	auf	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Libanon	NE	*)	libanon	sg	masc	-	(273)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	zum	APPRART	(PP*	zu	sg	masc	-	(174
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Vater	NN	*)	vater	sg	masc	-	174)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	bringen	VVINF	*))	bringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	MANSOR	NE	(VROOT(PSEUDO*	mansor	-	-	(LOC*)	(13
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	13)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gern	ADV	(VROOT(PSEUDO(S*)	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sehr	ADV	(VROOT(PSEUDO*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nimm	VVIMP	*	nimm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dir	PPER	*	dir	sg	*	-	(13)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	(NP*	der	sg	fem	-	(903
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bedeckung	NN	*)	bedeckung	sg	fem	-	903)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKA	(AP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	schwach	ADJD	*))	schwach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	um	APPR	(PP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Libanon	NE	*)	libanon	*	*	-	(273)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nicht	PTKNEG	(AP*	nicht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	alles	PIS	(NP*	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mehr	ADV	*)	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sicher	ADJD	*))	sicher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hast	VAFIN	(VROOT(PSEUDO(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(13)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gehört	NN	*	gehört	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	pl	masc	-	(121
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherrn	NN	*)	tempelherr	pl	masc	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	rege	NN	*)	regen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sei	VAIMP	*	sei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	deiner	PPOSAT	*	dein	sg	fem	-	(13)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Hut	NN	*	hut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Komm	NN	(NP*	komm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	(VROOT(PSEUDO(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hält	VVFIN	*	halten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Der	ART	(NP*	der	sg	masc	-	(890
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Zug	NN	*))	zug	sg	masc	-	890)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	(CNP(NP*	ihn	sg	masc	-	(890)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	alles	PIS	*)	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Betreiben	NN	*)	betreiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(12)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sodann	ADV	*	sodann	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sittah	NE	*))	sittah	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Szene	NN	*	szene	sg	-	-	(223)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	*	der	pl	*	-	(76
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Palmen	NN	*	palme	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	vor	APPR	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nathans	NE	*	nathan	sg	*	-	(19|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Hause	NN	*	haus	sg	neut	-	19)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wo	PWAV	*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	*	der	sg	masc	-	76)|(61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	auf	PTKVZ	(VROOT(PSEUDO(S*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nieder	ADV	*	nieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	geht	VVFIN	*)	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ins	APPRART	(VROOT(PSEUDO(S(PP*	in	-	-	-	(19
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Haus	NN	*)	haus	sg	neut	-	19)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	einmal	ADV	*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sich	PRF	(VP(VP*	sich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	endlich	ADV	*	endlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sehen	VVINF	*)	sehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	lassen	VVINF	*))	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Man	PIS	(S*	man	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bemerkte	NN	*	bemerkt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	(AVP*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*))	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	bald	ADV	(NP*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	gern	ADV	*))	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wills	NE	*	wills	-	-	-	(904)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	(VP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	erleben	VVINF	*	erleben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	daß	KOUS	(S*	daß	-	-	-	(904
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sichs	ADV	(AP*	sichs	-	-	-	(1011)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	verbittet	VVPP	*	verbitten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	904)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Vor	APPR	(VP(PP*	vor	-	-	-	(905|(19
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	seinem	PPOSAT	*	sein	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Hause	NN	*)	haus	sg	neut	-	19)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	fleißig	ADJD	*	fleißig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	finden	VVINF	*))	finden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Zu	NN	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	lassen	VVFIN	*	lassen	-	-	-	905)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Sehr	ADV	(AP*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	ärgerlich	ADJD	*)))	ärgerlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Erbittert	NN	(NP*	erbittert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gegen	APPR	(PP*	gegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ihn	PPER	*))	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sagte	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	schlüg	ADJD	*	schlüg	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ab	PTKVZ	*	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Saladin	NE	(MPN*	saladin	*	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Hats	NE	*)	hat	*	*	-	(906)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	über	APPR	(VP(PP*	über	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sich	PRF	*)	sich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	genommen	VVPP	*)	nehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihn	PPER	(VP*	ihn	sg	masc	-	(906|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	stimmen	VVINF	*)))	stimmen	-	-	-	906)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	sollte	VMFIN	(VROOT(PSEUDO(S*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wirklich	ADJD	*	wirklich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	in	APPR	(NP(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*)	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	*	der	sg	masc	-	(443
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Christ	NN	*)	christ	sg	masc	-	443)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Noch	ADV	(VP(AP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	tiefer	ADJD	*)	tief	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nisten	VVINF	*	nisten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	als	KOKOM	(NP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ihm	PPER	*)	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	der	ART	*	der	sg	masc	-	(46
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Jude	NN	*)))	jude	sg	masc	-	46)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wer	PWS	(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kennt	VVFIN	*)	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sich	PRF	(NP*	sich	sg	-	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	recht	ADV	*)	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(CS(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	könnt	VVFIN	*	können	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Den	ART	(NP*	der	pl	masc	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	kleinen	ADJA	*	klein	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Raub	NN	*)	raub	sg	masc	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	gönnen	VVINF	*	gönnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wollen	VMFIN	*)	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	den	ART	(S*	der	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Er	PPER	(NP*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sichs	CARD	*	sich	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	solcher	PIAT	*	solcher	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Angelegenheit	NN	*))	angelegenheit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Gemacht	VVPP	*	gemacht	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	den	ART	(VP(NP*	der	sg	masc	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Christen	NN	*)	christ	sg	masc	(MISC*)	99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	abzujagen	VVIZU	*)))	abjagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Kein	PIAT	(NP*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	kleiner	ADJA	*	klein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Raub	NN	*	raub	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ein	ART	(NP*	ein	sg	masc	-	(84
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	solch	PIAT	(NP*	solch	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Geschöpf	NN	*)))	geschöpf	sg	masc	-	84)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geschöpf	NN	*	geschöpf	sg	-	-	(84)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wessen	PDS	*	wessen	-	-	-	(84)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(NP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	des	ART	*	der	sg	masc	-	(476
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sklaven	NN	*)	sklave	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(CVP(VP(NP*	der	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	auf	APPR	(AP(PP*	auf	-	-	-	476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Des	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Lebens	NN	*)	leben	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	öden	ADJA	*)	öde	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Strand	NN	*)	strand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	den	ART	(NP*	der	sg	masc	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Block	NN	*)	block	sg	masc	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	geflößt	VVPP	*)	flößen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Und	KON	*	und	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	sich	PRF	(VP*	sich	sg	-	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	davon	PROAV	*	davon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	gemacht	VVPP	*)))	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Des	ART	(VROOT(PSEUDO(S(NP*	der	-	-	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Künstlers	NN	*)	künstler	sg	*	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wohl	ADV	(PP*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mehr	ADV	(AVP*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(CS(S*	der	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dem	ART	*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	hingeworfnen	ADJA	*	hingeworfn	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Blocke	NN	*	blocke	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Die	ART	(NP*	der	sg	fem	-	(60
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	göttliche	ADJA	*	göttlich	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Gestalt	NN	*))	gestalt	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	sich	PRF	*	sich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	dachte	VVFIN	*)	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	die	ART	(S*	der	sg	fem	-	(60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Er	PPER	(NP(S*	er	sg	masc	-	60)|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Trotz	APPR	(PP*	trotz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	dem	ART	*	der	sg	masc	-	(476
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Christen	NN	*))	christ	sg	masc	(MISC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	der	PRELS	(S*	der	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	zeugte	VVFIN	*))	zeugen	sg	-	-	476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	–	NN	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	bleibt	VVFIN	*)))	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	In	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Ewigkeit	NN	*	ewigkeit	sg	fem	-	(119)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	der	ART	(NP*	der	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Jude	NN	*)))	jude	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	*	wenn	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PRF	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sie	PPER	*	sie	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	lediglich	ADV	*	lediglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Christendirne	NN	*	christendirne	sg	fem	(PER*)	(708)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	denke	VVFIN	*	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Sie	PPER	*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sonder	ADV	*	sonder	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	alles	PIS	*	alle	sg	neut	-	(60
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	das	PDS	*	der	sg	neut	-	(60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	denke	VVFIN	*	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	was	PWS	*	was	sg	neut	-	60)|(60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	so	ADV	*	so	-	-	-	(568
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Jude	NN	*	jude	sg	masc	-	568)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	geben	VVINF	*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	konnte	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Sprich	NN	*	sprich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Herz	NN	*	herz	-	-	-	(282)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	–	NN	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	ihr	PPER	*	ihr	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	das	PRELS	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	dir	PPER	*	dir	sg	neut	-	(282)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	gefiel	VVFIN	*	gefallen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wenig	ADV	(VROOT(PSEUDO(S*)	wenig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihr	PPOSAT	*	ihr	sg	fem	-	(549|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Lächeln	NN	*	lächeln	pl	masc	-	549)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	es	PPER	*	es	sg	neut	-	(549)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sanfte	ADJA	*	sanft	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	schöne	ADJA	*	schön	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Zuckung	NN	*	zuckung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ihrer	PPOSAT	*	ihr	pl	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Muskeln	NN	*	muskel	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Wär	NN	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	was	PWS	*	was	sg	neut	-	(907
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	sie	PPER	*	sie	pl	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	lächeln	VVFIN	*	lächeln	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	macht	VVFIN	*	machen	sg	-	-	907)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	des	ART	*	der	sg	neut	-	(908
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Reizes	NN	*	reiz	sg	neut	-	908)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	unwert	ADJD	*	unwert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	In	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	den	PRELS	*	der	pl	fem	-	(908)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	es	PPER	*	es	sg	neut	-	(907)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	sich	PRF	*	sich	sg	-	-	(907)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	ihrem	PPOSAT	*	ihr	sg	neut	-	(433|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Munde	NN	*	mund	sg	neut	-	433)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	kleidet	VVFIN	*	kleiden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	Nein	NN	*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	ihr	PPOSAT	*	ihr	sg	neut	-	(549|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	Lächeln	NN	*	lächeln	sg	neut	-	549)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hab	VVFIN	*	hab	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(549)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wohl	NN	*	wohl	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	schöner	ADJD	*	schön	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Aberwitz	NE	*	aberwitz	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Tand	NN	*	tand	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	An	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Höhnerei	NN	*	höhnerei	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Schmeichler	NE	*	schmeichler	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Buhler	NE	*	buhler	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Verschwenden	NN	*	verschwend	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hats	NE	*	hat	-	-	-	(549)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	da	ADV	(S*)	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	(S(NP*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bezaubert	VVPP	*)	bezaubern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hats	NE	(VROOT(PSEUDO(S*	hats	-	-	-	(549)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	(VP*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	(NP*	der	sg	masc	-	(701
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wunsch	NN	*)	wunsch	sg	masc	-	701)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	entlockt	VVPP	*)	entlocken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mein	PPOSAT	(VP(NP*	mein	sg	neut	-	(63|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Leben	NN	*)	leben	sg	neut	-	63)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	In	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	seinem	PPOSAT	*	sein	sg	neut	-	(908|(549)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Sonnenscheine	NN	*)	sonnenschein	sg	neut	-	908)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	verflattern	VVINF	*)))	verflattern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wüßte	VVFIN	*	wissen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	den	ART	*	der	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	(NP(AP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	launisch	ADJD	*)	launisch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Der	NN	*))	der	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	diesen	PDAT	(NP*	dieser	pl	masc	-	(60
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	höhern	ADJA	*	höhern	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Wert	NN	*	wert	sg	masc	-	60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	allein	ADV	*)	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	gab	VVFIN	*)	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	warum	PWAV	(VROOT(PSEUDO*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(NP(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	den	ART	(NP*	der	sg	masc	-	(805
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Spott	NN	*)	spott	sg	masc	-	805)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	verdiente	VVFIN	*)	verdienen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Mit	APPR	(S(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dem	PRELS	*)	der	sg	*	-	(805)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Saladin	NE	*	saladin	sg	*	(PER*)	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	entließ	VVFIN	*))	entlassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Schon	ADV	(VROOT(PSEUDO(S*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schlimm	ADJD	*	schlimm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Genug	NN	*	genug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Saladin	NN	*	saladin	sg	neut	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	es	PPER	(VP*	es	sg	neut	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	glauben	VVINF	*)	glauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	konnte	VMFIN	*))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S(AP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	klein	ADJD	*)	klein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihm	PPER	(VP*	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	scheinen	VVINF	*)	scheinen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mußte	VMFIN	*)	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wie	PWAV	(VROOT(PSEUDO(AP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Verächtlich	ADJD	*)	verächtlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(NP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(909
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	alles	PIS	(NP*	alle	sg	neut	-	909)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	um	APPR	(PP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ein	ART	*	ein	sg	neut	-	(289
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Mädchen	NN	*)))	mädchen	sg	neut	-	289)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Curd	NE	*	curd	-	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Curd	NE	(VROOT(PSEUDO(MPN*	curd	-	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(909)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Lenk	NE	*	lenk	-	-	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	PTKVZ	*	ein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	vollends	ADV	*	vollends	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mir	NE	(MPN*	sich	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Daja	NE	*)	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	(S*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	was	PWS	*	was	sg	neut	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	vorgeplaudert	VVPP	*	vorgeplaudern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hätte	VAFIN	*)	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Was	PWS	(S*	was	sg	neut	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	schwerlich	ADJD	(VP*	schwerlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	erweisen	VVINF	*))	erweisen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	stünde	VVFIN	*))	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sieh	NE	(NP*	sieh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Da	ADV	(S*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	tritt	VVFIN	*	treten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	endlich	ADV	*	endlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	in	APPR	(VP(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Gespräch	NN	*)	gespräch	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	vertieft	VVPP	*)))	vertiefen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Aus	APPR	*	aus	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	seinem	PPOSAT	(NP*	sein	sg	neut	-	(19|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Hause	NN	*)	haus	sg	neut	-	19)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ha	NE	*	ha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wem	PWS	*	wem	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mit	APPR	(NP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*))	ihm	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mit	APPR	(VROOT(PSEUDO(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	meinem	PPOSAT	*	mein	sg	masc	-	(5|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Klosterbruder	NN	*)	klosterbruder	sg	masc	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ha	NE	*	ha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	so	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Er	PPER	(NP*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sicherlich	ADV	*	sicherlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	alles	PIS	*))	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Dem	ART	(VP(NP*	der	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Patriarchen	NN	*)	patriarch	sg	neut	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	verraten	VVPP	*))	verraten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ha	NE	*	ha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hab	VAFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(61|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Querkopf	NN	*	querkopf	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gestiftet	VVPP	*	stiften	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	einz	NN	*	einz	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ger	ADJA	*	g	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Funken	NN	*	funke	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dieser	PDAT	*	dieser	sg	fem	-	(338
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Leidenschaft	NN	*	leidenschaft	sg	fem	-	338)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	unsers	PPOSAT	*	unsers	-	-	-	(87|(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Hirns	NN	*	hirn	-	-	-	87)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	viel	PIS	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	verbrennen	VVINF	*	verbrennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geschwind	NN	*	geschwind	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	entschließ	VVFIN	*	entschlassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dich	PPER	*	dich	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nunmehr	ADV	*	nunmehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	tun	VVINF	*	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	seitwärts	ADV	*	seitwärts	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihrer	PPOSAT	*	ihr	sg	fem	-	(868)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	warten	VVINF	*	warten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Vielleicht	ADV	*	vielleicht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	der	ART	*	der	sg	masc	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Klosterbruder	NN	*	klosterbruder	sg	masc	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	verläßt	VVFIN	*	verlassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(CNP*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Klosterbruder	NN	*))	klosterbruder	sg	masc	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*))	nathan	-	-	-	(1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	im	APPRART	(VROOT(PSEUDO(PP*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Näherkommen	NN	*)	näherkommen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Habt	VVIMP	(VROOT(PSEUDO(S(S*	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nochmals	ADV	*)	nochmals	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	guter	ADJA	(NP*	gut	*	*	-	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bruder	NN	*	bruder	sg	*	-	5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	vielen	PIAT	(NP*	vieler	*	*	-	(882
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Dank	NN	*)))	dank	sg	*	-	882)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	desgleichen	ADV	*)	desgleichen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	von	APPR	(VROOT(PSEUDO(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*)	euch	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wofür	PWAV	(VROOT(PSEUDO*	wofür	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Für	APPR	(VROOT(PSEUDO(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	meinen	PPOSAT	*	mein	sg	masc	-	(910|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Eigensinn	NN	*	eigensinn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	(VP*	euch	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	aufzudringen	VVIZU	*))	aufdringen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	910)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Was	PWS	(S*	was	sg	neut	-	(881
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ihr	PPER	*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	braucht	VVFIN	*)	brauchen	sg	-	-	881)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*	ihm	sg	masc	-	(910)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Eurer	NN	*	eurer	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nachgegeben	VVPP	*	nachgeben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	hätt	VAFIN	*	hätt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Ihr	PPER	*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Gewalt	NN	*	gewalt	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	wolltet	VMFIN	*	wollten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	reicher	ADJD	*	reich	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(878
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Buch	NN	*)	buch	sg	neut	-	878)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gehört	VVFIN	*	gehört	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ohnedem	PIS	(S*	ohnedem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gehört	VVFIN	(S*	gehören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ja	PTKANT	(NP(AP(AP(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ohnedem	PIS	(NP*	ohnedem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	der	ART	(NP*	der	sg	masc	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Tochter	NN	*)	tochter	sg	masc	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	so	ADV	(NP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Der	ART	*	der	sg	masc	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Tochter	NN	*))	tochter	sg	masc	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	ganzes	ADJA	*)	ganz	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	väterliches	ADJA	*)	väterlich	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Erbe	NN	*))))	erbe	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Je	ADV	*	je	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nu	PTKANT	(S*	nu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hat	VAFIN	*)	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ja	ADV	(NP*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	*)	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*	gott	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gebe	VVFIN	*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	*	ihr	pl	*	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	es	PPER	*	es	sg	neut	-	(911)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nie	ADV	(VP(VP*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	bereuen	VVINF	*)	bereuen	-	-	-	(912)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	dürft	VMINF	*)	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	so	ADV	(VP(VP(PP(AP*	so	-	-	-	(911
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	viel	PIS	*)	viel	*	*	-	911)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Für	APPR	*	für	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sie	PPER	*)	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	getan	VVPP	*)	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	haben	VAINF	*))))	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(912)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(912)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nie	ADV	*)	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Seid	VAFIN	(VROOT(PSEUDO(S*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	unbesorgt	ADJD	*)	unbesorgt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nu	XY	(VROOT(PSEUDO*	nu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nu	XY	*	nu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(CNP(NP*	der	pl	*	-	(285
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Patriarchen	NN	*)	patriarch	pl	*	-	285)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	(NP*	der	pl	*	-	(121
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Tempelherren	NN	*))	tempelherr	pl	*	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Vermögen	VVFIN	*	vermögen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	des	ART	*	der	sg	masc	-	(48
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bösen	NN	*	böse	sg	masc	-	48)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nie	ADV	*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	viel	PIAT	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Zu	NN	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	tun	VVINF	*	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	irgend	ADV	*	irgend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	was	PIS	*	was	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	reuen	VVINF	*	reuen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	könnte	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Geschweige	NN	*	geschweige	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	das	PRELS	*	der	sg	neut	-	(911)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ganz	ADV	(S(VP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Versichert	VVPP	*	versichert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ein	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Tempelherr	NN	*)	tempelherr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	es	PPER	*	es	sg	neut	-	(884)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ist	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Der	ART	(NP*	der	sg	masc	-	(884)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Euern	NN	*))	euer	pl	fem	-	(8|(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Patriarchen	NN	(S*	patriarch	pl	fem	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	hetzt	VVFIN	*)	hetzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(884)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Beinah	NE	*	beinah	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kein	PIAT	(VP(NP*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	andrer	PIS	*)	andrer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(AVP(AP(NP*	ein	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherr	NN	*	tempelherr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sprach	NE	*)	sprach	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kurz	ADJD	*	kurz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	vorher	ADV	(CO(S(AVP*	vorher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ihm	PPER	*)	ihm	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	was	PWS	(S*	was	sg	neut	-	(913
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	hörte	VVFIN	*))	hören	sg	-	-	913)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Das	PDS	(S*	der	sg	neut	-	(913)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	klang	VVFIN	*)))	klingen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	darnach	PROAV	*)	darnach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ein	ART	*	ein	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	einziger	ADJA	*	einzig	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	itzt	NN	*	itzt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Jerusalem	NE	*)))	jerusalem	sg	neut	(LOC*)	(14)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	diesen	PDS	*	dieser	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kenn	VVFIN	*	kenn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dieser	PDS	(VROOT(PSEUDO(S*	dieser	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mein	PPOSAT	(NP*	mein	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Freund	NN	*))	freund	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	junger	ADJA	*	jung	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	edler	ADJA	*	edel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	offner	ADJA	*	offn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Mann	NN	*)	mann	*	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ganz	ADV	(VROOT(PSEUDO(NP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	recht	NN	*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Der	ART	(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nämliche	ADJA	*))	nämlich	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PIS	*	was	*	neut	-	(914
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	man	PIS	*	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	(S*	was	sg	neut	-	914)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Man	PIS	(VP*	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	muß	VMFIN	(S*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	in	APPR	(VP(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	der	ART	*	der	sg	fem	-	(262
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Welt	NN	*)))	welt	sg	fem	-	262)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	das	PDS	(S*	der	sg	neut	-	(914)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	paßt	VVFIN	*	passen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	ja	ADV	*))	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	immer	ADV	*)))	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Leider	ADV	(VROOT(PSEUDO(CO(AVP*	leider	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	tue	VVFIN	*	tun	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wers	APPRART	(PP*)	wers	-	-	-	(884)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	immer	ADV	*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ist	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sein	PPOSAT	(CNP(NP*	sein	sg	neut	-	(884)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Schlimmstes	NN	*)	schlimmst	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Bestes	NN	*)	best	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Euerm	PDAT	*	euerm	*	*	-	(878|(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Buche	NN	*	buch	sg	neut	-	878)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bruder	NN	*	bruder	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	trotz	APPR	*	trotz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	allen	PIS	*	aller	sg	masc	-	(884)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	gehe	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	graden	ADJA	*	grad	-	-	-	(915
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Wegs	NN	*	weg	-	-	-	915)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	damit	PROAV	*	damit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	zum	APPRART	*	zu	sg	neut	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Sultan	NN	*	sultan	sg	neut	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Viel	PIAT	(VROOT(PSEUDO(NP*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Glücks	NN	*)	glück	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	(VP*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	hier	ADV	*)	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	verlassen	VVPP	*))	verlassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	habt	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(VP(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	einmal	ADV	*)	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gesehn	VVPP	*))	gesehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	(AP*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Doch	KON	(AVP(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bald	ADV	*)	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	doch	KON	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	fleißig	ADJD	*	fleißig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wieder	ADV	*)	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	heut	ADV	*)	heut	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Der	ART	(NP*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Patriarch	NN	*)	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	noch	ADV	(S(NP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	erfährt	VVFIN	*)	erfahren	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sagt	VVFIN	(VROOT(PSEUDO(S*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihm	PPER	*	ihm	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	heute	ADV	*)	heute	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	was	PWS	(S*	was	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	*	ihr	pl	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wollt	VMFIN	*))	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Lebt	VVPP	(VROOT(PSEUDO(VP*	leben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	(S*))	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	(VROOT(PSEUDO(S*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ab	PTKVZ	*)	ab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Vergeßt	VVIMP	(VROOT(PSEUDO(S*	vergeßen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	uns	PPER	*	uns	pl	*	-	(105)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Bruder	NN	*)	bruder	-	-	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*	gott	-	-	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gleich	ADV	*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	unter	APPR	(PP*	unter	-	-	-	(916
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	freiem	ADJA	*	frei	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Himmel	NN	*)	himmel	sg	masc	-	916)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	meine	PPOSAT	*	mein	sg	fem	-	(866|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Kniee	NN	*)	kniee	sg	fem	-	866)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sinken	VVINF	*	sinken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	kann	VMFIN	*)	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sich	PRF	*	sich	sg	-	-	(711)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Der	ART	(NP*	der	sg	masc	-	(711
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Knoten	NN	*	knoten	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	PRELS	(S*	der	sg	masc	-	(711)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	oft	ADV	*)	oft	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	bange	ADV	*	bange	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	machte	VVFIN	*))	machen	sg	-	-	711)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	sich	PRF	*	sich	sg	-	-	(711)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	selber	ADV	*)	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	löset	VVFIN	*)	lösen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*	gott	-	-	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wie	PWAV	(VROOT(PSEUDO(S(AP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	leicht	ADJD	*)	leicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mir	PPER	*	sich	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nun	ADV	(VP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	weiter	ADV	*	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	der	ART	*	der	sg	fem	-	(262
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Welt	NN	*	welt	sg	fem	-	262)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	verbergen	VVINF	*))	verbergen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	habe	VAFIN	*))	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vor	APPR	(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Den	ART	*	der	pl	masc	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Menschen	NN	*)	mensch	pl	masc	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	frei	ADJD	*)	frei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wandeln	VVINF	(VP*	wandeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Vor	APPR	(CNP(NP(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	dir	PPER	*)	dir	sg	*	-	(24
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	der	PRELS	(CS(S*	der	sg	masc	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	du	PPER	(VP*	du	sg	*	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	den	ART	(NP*	der	pl	masc	-	(52
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Menschen	NN	*)	mensch	pl	masc	-	52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	nicht	PTKNEG	*	nicht	-	-	-	24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Nach	APPR	(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	seinen	PPOSAT	*	sein	pl	fem	-	(573|(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Taten	NN	*	tat	pl	fem	-	573)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	brauchst	ADV	*)	brauchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	richten	VVINF	*)))	richten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	die	ART	(S*	der	sg	fem	-	(573)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	So	ADV	(NP(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	selten	ADJD	*)	selten	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	seine	PPOSAT	*	sein	pl	masc	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	Taten	NN	*)	tat	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	sind	VAFIN	*)))	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	o	FM	(MPN*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	Gott	NN	*)))))	gott	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(CNP*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Tempelherr	NN	*	tempelherr	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	PRELS	(S*	der	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	*	der	sg	fem	-	(503
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Seite	NN	*)	seite	sg	fem	-	503)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ihn	PPER	*)	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKA	(AP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	kömmt	ADJD	*))))	kömmen	-	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	He	XY	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wartet	VVFIN	(VROOT(PSEUDO(S*	warten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nathan	NE	(S*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nehmt	VVFIN	*	nehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mich	PPER	*))	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	*	-	(917
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ruft	VVFIN	*)	rufen	sg	-	-	917)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Seid	VAFIN	(S*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	(NP*	es	sg	neut	-	(917)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ritter	NN	*))	ritter	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	(VROOT(PSEUDO(VP*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gewesen	VAPP	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dem	ART	*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Sultan	NN	*)	sultan	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Euch	PPER	(VP(VP*	euch	sg	masc	(PER*)	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	treffen	VVINF	*)	treffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	lassen	VVINF	*)))	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wir	PPER	(VROOT(PSEUDO(S*	wir	pl	*	-	(918|(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	einander	PRF	(AP*	einander	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	fehl	ADJD	*	fehl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gegangen	VVPP	*))	gehen	-	-	-	918)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nehmts	NE	(VROOT(PSEUDO*	nehmt	-	-	(PER*)	(918)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	übel	ADJD	*)	übel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(NP*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	(PP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	(NP*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Saladin	NN	*	saladin	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wart	VVFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	eben	ADV	*)	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	fort	PTKVZ	*)	fort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	spracht	VVFIN	*	sprachen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(AP(AVP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ists	ADV	*)	ists	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gut	ADJD	*)	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	uns	PPER	*	uns	pl	*	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	beide	PIAT	(VP(NP*	beide	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Zusammen	NN	*)	zusammen	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sprechen	VVINF	*))	sprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Desto	ADV	(VROOT(PSEUDO(AVP*	desto	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	besser	ADJD	*)	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kommt	VVFIN	(VROOT(PSEUDO(S*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mit	PTKVZ	*)	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(S(NP*	mein	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gang	NN	*)	gang	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	stand	VVFIN	*	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ohnehin	ADV	*	ohnehin	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihm	PPER	*))	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CS(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	darf	VMFIN	*	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	fragen	VVINF	*)	fragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Nathan	NE	(S*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Euch	PPER	*	euch	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	verließ	VVFIN	*))	verlassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wars	PWS	*	war	-	-	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	*	der	sg	fem	-	(225
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gute	ADJA	*	gut	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Haut	NN	*	haut	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Laienbruder	NN	*	laienbruder	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	225)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Des	PWS	*	der	sg	-	-	(225)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sich	PRF	*	sich	sg	-	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	der	ART	*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Patriarch	NN	*	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	zum	APPRART	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Stöber	NN	*	stöber	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Bedient	NN	*	bedient	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Beim	APPRART	(VROOT(PSEUDO(S(PP*	bei	-	-	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Patriarchen	NN	*)	patriarchen	-	-	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Er	PPER	*	er	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	allerdings	ADV	*)	allerdings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(DL(S(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Pfiff	NN	*)	pfiff	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gar	ADV	(AP(AVP*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	übel	ADJD	*))	übel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Die	ART	(VP(NP*	der	sg	fem	-	(232
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Einfalt	NN	*)	einfalt	sg	fem	-	232)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	vor	APPR	(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	der	ART	*	der	sg	fem	-	(715
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Schurkerei	NN	*	schurkerei	sg	fem	-	715)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	voraus	ADV	*)	voraus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	schicken	VVINF	*)))	schicken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dumme	NN	*))	dumm	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	–	$.	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	fromme	ADJA	*)	frommen	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	An	APPR	(VROOT(PSEUDO(S(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fromme	ADJA	*)	fromm	sg	-	-	(234)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	glaubt	VVFIN	*	glauben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kein	PIAT	(NP*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Patriarch	NN	*))	patriarch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Für	APPR	(VROOT(PSEUDO(S(AVP(AVP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	den	ART	*)	der	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nun	ADV	*)	nun	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	steh	VVFIN	*	steh	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*)	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	PDS	(VROOT(PSEUDO(S*	der	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	seinem	PPOSAT	(VP(NP*	sein	sg	neut	-	(8|(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Patriarchen	NN	*	patriarch	sg	neut	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nichts	NN	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Ungebührliches	NN	(VP*	ungebührliche	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	vollziehen	VVINF	*)	vollziehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	helfen	VVINF	*))	helfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	stellt	VVFIN	*	stellen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wenigstens	ADV	*	wenigstens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sich	PRF	*	sich	sg	-	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	an	PTKVZ	*)	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Er	PPER	*	er	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	pl	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*))	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	denn	ADV	(S(NP*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gesagt	VVPP	*)	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	(VROOT(PSEUDO(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*)	euch	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	(VROOT(PSEUDO(S(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*)	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	namentlich	ADV	*	namentlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nichts	PIS	*)	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	(S*	er	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	weiß	VVFIN	*)	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ja	PTKANT	(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	(NP(AP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	schwerlich	ADJD	*	schwerlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Euern	NN	*)	euer	-	-	-	(468|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Namen	NN	*))	name	pl	fem	-	468)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Schwerlich	ADJD	(VROOT(PSEUDO*	schwerlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	(VROOT(PSEUDO(S(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	einem	ART	*	ein	sg	masc	-	(121
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Tempelherren	NN	*)	tempelherr	sg	masc	-	121)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Er	PPER	(VP*	er	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gesagt	VVPP	*))	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Womit	PWAV	(VROOT(PSEUDO(S*	womit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Doch	NN	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	(CAVP*	ein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	allemal	ADV	*)	allemal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	meinen	VVINF	*	meinen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	kann	VMFIN	*)	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*)	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Laßt	VVIMP	(VROOT(PSEUDO(S*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(VP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hören	VVINF	*))	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	(919
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	einer	ART	(VP(NP*	ein	sg	fem	-	(884)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bei	APPR	(PP*	bei	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	seinem	PPOSAT	*	sein	sg	masc	-	(8|(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Patriarchen	NN	*))	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	angeklagt	VVPP	*))))	anklagen	-	-	-	919)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Euch	PPER	(VROOT(PSEUDO(S(VP*	euch	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	angeklagt	VVPP	*))	anklagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(919)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	seiner	PPOSAT	*	sein	sg	fem	-	(5)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Gunst	NN	*)	gunst	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	–	PIAT	(NP*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Erlogen	NN	*))	erloge	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hört	VVIMP	*	hören	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	(NP*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nathan	NE	*)	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Mensch	NN	*	mensch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	der	PRELS	(S*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	irgend	ADV	(VP*	irgend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	etwas	ADV	*	etwas	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	abzuleugnen	VVIZU	*)))	abzeugnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Im	APPRART	(AP(PP*	in	sg	neut	-	(697
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Stande	NN	*))	stand	sg	neut	-	697)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	wäre	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S(NP(S*	was	sg	neut	-	(909
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	tat	VVFIN	*)	taten	sg	-	-	909)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	*)	der	sg	neut	-	(909)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	tat	VVFIN	*	taten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*)	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	masc	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	der	PDS	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	alles	PIS	*	alle	sg	neut	-	(909
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	was	PRELS	*	was	sg	neut	-	909)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Er	PPER	*	er	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	tat	VVFIN	*	taten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	getan	VVPP	*	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	verteid	ADJD	*	verteid	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	gen	APPR	*	gen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	möchte	VMFIN	*	möchten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sollt	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	eines	ART	*	ein	sg	neut	-	(812
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Fehls	NN	*	fehl	sg	*	-	812)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	schämen	VVFIN	*	schämen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hab	XY	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	*	der	sg	masc	-	(920
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	festen	ADJA	*	fest	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Vorsatz	NN	*	vorsatz	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihn	PPER	*	ihn	sg	masc	-	(812)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	bessern	VVINF	*	bessern	-	-	-	920)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	etwa	ADV	(AVP*	etwa	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	weit	ADJD	(VP(PP*	weit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dem	ART	*	der	sg	masc	-	(920)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Es	PPER	(NP*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Menschen	NN	*))	mensch	pl	masc	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	bringen	VVINF	*)	bringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	können	VMFIN	*))	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hört	VVIMP	*	hören	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	(NP*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nathan	NE	*)	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	des	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Laienbruders	NN	*))	laienbruder	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Tempelherr	NN	(NP*	tempelherr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Der	PRELS	(S*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Euch	PPER	*	euch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	verklagt	VVPP	*	verklagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	haben	VAFIN	*	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	allerdings	ADV	*))	allerdings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wißt	VVFIN	*)	wissen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	PTKANT	(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	was	PWS	*	was	sg	neut	-	(700
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wurmisch	ADJD	*	wurmisch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	machte	VVFIN	*)	machen	sg	-	-	700)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	(700)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mein	PPOSAT	(VP(NP*	mein	sg	neut	-	(286|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Blut	NN	*)	blut	sg	neut	-	286)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	allen	PIAT	*	aller	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Adern	NN	*)	ader	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sieden	VVINF	*)	sieden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	machte	VVFIN	*)	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(NP*	ich	sg	*	-	(61|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gauch	NN	*	gauch	sg	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kam	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Leib	NN	*	leib	-	-	-	(785)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Seel	NN	*	seel	-	-	(PER*)	(282)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Arme	NN	*	arm	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	werfen	VVINF	*	werfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	(921)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	empfingt	VVFIN	*	empfingen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	NN	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wie	KOKOM	(AP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	kalt	ADJD	*)	kalt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	–	$.	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wie	PWAV	(S(NP(S(AP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	lau	ADJD	*)	lau	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	PPER	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	lau	ADJD	*	lau	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Ist	NN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	schlimmer	ADJD	(VP(AP*	schlimm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	noch	ADV	(VP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	kalt	ADJD	(CO*	kalt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	wie	KOKOM	(S(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	abgemessen	ADJD	(VP*	abgemessen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Mir	PPER	(VP*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	auszubeugen	VVIZU	*)	ausbeugen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	beflissen	VVPP	*)	beflissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	wart	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Mit	APPR	(S(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	welchen	PWAT	*	welcher	sg	masc	-	(676
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	aus	APPR	(AP(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	der	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Luft	NN	*)	luft	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	gegriffnen	ADJA	*)	gegriffn	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	Fragen	NN	*)	frage	pl	fem	-	676)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	Ihr	PPOSAT	(NP*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	Antwort	NN	*)))))	antwort	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	geben	VVINF	*)))	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	scheinen	VVINF	*)	scheinen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	wolltet	VMFIN	*)	wollten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	Das	PDS	*)	der	sg	neut	-	(921)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	darf	VMFIN	*	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	kaum	ADV	*	kaum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	itzt	ADV	*	itzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	49	denken	VVINF	(VP*	denken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	50	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	51	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	52	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	53	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	54	gelassen	ADJD	(VP*	gelassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	55	bleiben	VVINF	*)))))	bleiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	56	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hört	VVIMP	*	hören	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	(NP*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nathan	NE	*)	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	In	APPR	(S(PP*	in	-	-	-	(922
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dieser	PDAT	*	dieser	sg	fem	-	(810
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gärung	NN	*)	gärung	sg	fem	-	810)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schlich	ADJD	*	schlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Daja	NE	*	daja	-	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nach	PTKVZ	*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	warf	VVFIN	*	werfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ihr	PPOSAT	(NP*	ihr	sg	fem	-	(686|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Geheimnis	NN	*)))	geheimnis	sg	neut	-	686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	den	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Kopf	NN	*	kopf	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Das	KOUS	(S*	der	sg	neut	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	den	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Aufschluß	NN	*)))	aufschluß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Euers	NE	(NP*	euer	sg	masc	(PER*)	(700|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	rätselhaften	ADJA	*	rätselhaft	sg	masc	-	700)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Betragens	NN	*)))	betragen	sg	masc	-	922)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(922)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hört	VVFIN	(VROOT(PSEUDO(S*	hören	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aus	PTKVZ	*)	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bildete	VVFIN	*	bilden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	-	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ein	PTKVZ	*	ein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wolltet	VVFIN	*	wollten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	was	PWS	(S*	was	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ihr	PPER	(NP*	ihr	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	einmal	ADV	(NP*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	den	ART	*	der	sg	masc	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Christen	NN	*))	christ	sg	masc	(MISC*)	2)|99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	So	ADV	(VP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	abgejagt	VVPP	*))))	abjagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	einen	ART	*	ein	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Christen	NN	*	christ	sg	masc	(MISC*)	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	wieder	ADV	(NP*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Nicht	NN	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	gern	ADV	(VP*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	verlieren	VVINF	*)	verlieren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	fiel	VVFIN	*	fallen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ein	PTKVZ	*	ein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Euch	PPER	(VP*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	kurz	ADJD	(CAP*	kurz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gut	ADJD	*)	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	das	ART	(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Messer	NN	*	messer	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Kehle	NN	*))	kehl	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	setzen	VVINF	*)))	setzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kurz	ADJD	(VROOT(PSEUDO(CAP*	kurz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gut	ADJD	*)	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(VP(AP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gut	ADJD	*))	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wo	PWAV	(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	steckt	VVFIN	*)	stecken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Das	ART	(NP*	der	sg	neut	-	(156
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Gute	NN	*)	gute	sg	neut	-	156)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hört	VVIMP	(VROOT(PSEUDO(S*	hören	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	(NP*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*))	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Allerdings	ADV	*	allerdings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ich	PPER	(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	tat	VVFIN	*	taten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	recht	ADV	*))	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	(AP*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gar	ADV	(AVP*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	schuldig	ADJD	*))	schuldig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	(S(NP*	der	sg	fem	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Närrin	NN	*	närrin	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Daja	NE	*)	daja	sg	fem	(PER*)	0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	weiß	VVFIN	*)	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	(S*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sie	PPER	*	sie	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	spricht	VVFIN	*)	sprechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	XY	(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Euch	PPER	*	euch	sg	fem	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	gehässig	ADJD	(VP(AP*	gehässig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	–	CARD	(S(NP*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Sucht	NN	*)	suchen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Euch	PPER	*	euch	pl	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	nur	ADV	(VP(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	damit	PROAV	(VP*	damit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	In	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	einen	ART	*	ein	sg	masc	-	(703
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	bösen	ADJA	*	böse	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Handel	NN	*)	handel	sg	masc	-	703)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	verwickeln	VVINF	*))	verwickeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	–	$.	*))	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Kann	VMFIN	*))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	sein	VAINF	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	(923
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ein	ART	(VP(NP*	ein	sg	masc	-	(924
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	junger	ADJA	*	jung	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Laffe	NN	*	laffe	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	923)|924)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Der	PRELS	(S*	der	sg	masc	-	(924)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	immer	ADV	(AVP*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	an	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	beiden	PIAT	*	beide	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Enden	NN	*)	ende	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	schwärmt	VVFIN	*	schwärmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Bald	ADV	(S(AVP*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	viel	ADV	*)	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	zu	PTKA	(VP(AP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	viel	PIS	*)	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	bald	ADV	(S*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	viel	ADV	(AP*	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	zu	PTKA	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	wenig	PIS	*)	wenig	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	tut	VVFIN	*	tun	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	–	PPER	*	–	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Auch	ADV	(NP*	auch	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	das	PDS	*)))	der	sg	neut	-	(923)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	kann	VMFIN	*))))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	sein	VAINF	*)	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Verzeiht	VVFIN	(VROOT(PSEUDO(S*	verzeihen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	*)	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*	nathan	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	fasset	VVFIN	*	fassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	–	$(	*	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kurz	ADJD	(VROOT(PSEUDO(S*	kurz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ging	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Zum	APPRART	(PP*	zu	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Patriarchen	NN	*))	patriarch	sg	neut	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hab	XY	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Genannt	VVPP	*	nennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(919)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	erlogen	VVPP	*	erlogen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wie	PWAV	(VP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gesagt	VVPP	*))	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(925|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hab	VVFIN	*	hab	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bloß	ADV	*	bloß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	*	der	sg	masc	-	(722
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Fall	NN	*	fall	sg	masc	-	722)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ganz	ADV	*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	allgemein	ADJD	*	allgemein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Erzählt	VVFIN	*	erzählen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	um	KOUI	*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	seine	PPOSAT	*	sein	sg	fem	-	(723|(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Meinung	NN	*	meinung	sg	fem	-	723)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	vernehmen	VVINF	*	vernehmen	-	-	-	925)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	das	PDS	*	der	sg	neut	-	(925)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	hätt	VAFIN	*	hätt	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	unterbleiben	VVINF	*	unterbleiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	können	VMINF	*	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kannt	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	den	ART	*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Patriarchen	NN	*	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Als	APPR	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	einen	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Schurken	NN	*	schurk	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Konnt	ADJD	*	konnt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	selber	ADV	*	selber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gleich	ADV	*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zur	APPRART	*	zu	sg	fem	-	(128
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Rede	NN	*	rede	sg	fem	-	128)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	stellen	VVINF	*	stellen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mußt	VVFIN	(S*	mussen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*)	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Gefahr	NN	*	gefahr	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	(VP(AVP*	so	-	-	-	(568
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	einen	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Vater	NN	*))	vater	sg	masc	-	568)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	verlieren	VVINF	*)	verlieren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Das	ART	(NP*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	arme	ADJA	*	arm	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Mädchen	NN	*)	mädchen	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	opfern	VVINF	*))	opfern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	tuts	ADV	*	tut	-	-	-	(909)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	(808
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Schurkerei	NN	*	schurkerei	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	des	ART	(NP*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Patriarchen	NN	*)	patriarch	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	die	PRELS	(S*	der	sg	fem	-	(808)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	So	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ähnlich	ADJD	*)	ähnlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	immer	ADV	*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sich	PRF	*	sich	sg	-	-	(808)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	erhält	VVFIN	*))	erhalten	sg	-	-	808)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Des	ART	(NP*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nächsten	ADJA	*	nächster	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Weges	NN	*)	weg	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	mir	PPER	*)	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	selbst	ADV	*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Gebracht	NN	*)	gebracht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hört	VVFIN	*	hören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*)	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hört	VVFIN	(S*	hören	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	aus	PTKVZ	*)	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gesetzt	NN	*	setzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wüßt	VVFIN	*	wüssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Euern	NN	*	euer	pl	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Namen	NN	*	name	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mehr	ADV	*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	was	PWS	*	was	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	mehr	ADV	*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	(NP(S*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	(VP(NP*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Mädchen	NN	*)	mädchen	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nehmen	VVINF	*))	nehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	pl	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	niemands	PIS	*	niemands	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	als	APPR	(PP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Euer	NN	*)))	euer	sg	*	-	(1025)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	(VP*	sie	*	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	aus	APPR	(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Euerm	PPOSAT	*	euerm	*	*	-	(19|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Hause	NN	*	haus	sg	neut	-	19)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nur	ADV	(PP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ins	NN	*	in	sg	neut	-	(227
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Kloster	NN	*))	kloster	sg	neut	-	227)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	schleppen	VVINF	*))	schleppen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Also	ADV	*	also	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gebt	VVFIN	*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	pl	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gebt	VVFIN	(VROOT(PSEUDO(S*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	*	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	(VP(NP*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	laßt	VVFIN	*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihn	PPER	*))	ihn	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	kommen	VVINF	*))	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ha	XY	*	ha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(VP(NP*	er	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	solls	ADV	*)	solls	-	-	-	(926)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bleiben	VVINF	*	bleiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	lassen	VVINF	*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	(VP*	sich	sg	*	-	(926|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mein	PPOSAT	(NP*	mein	sg	masc	-	(2|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Weib	NN	*)	weib	sg	masc	-	926)|2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nehmen	VVINF	*)))	nehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gebt	VVFIN	*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	geschwind	ADJD	*	geschwind	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sie	PPER	(S*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Eure	PPOSAT	(NP*	euer	sg	fem	-	(34|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Tochter	NN	*))	tochter	sg	fem	-	34)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sei	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sei	APPR	(VROOT(PSEUDO(CNP(NP(PP*	sein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Christin	NN	(CNP*	christin	sg	fem	-	(705)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Jüdin	NN	*)))	jüdin	sg	fem	-	(710)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	keines	PIS	*)	keiner	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gleich	ADV	(VROOT(PSEUDO(NP*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	viel	PIS	*)	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	gleich	ADV	(VROOT(PSEUDO(NP*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	viel	PIS	*)	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	werd	VVFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	weder	KON	*	weder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	itzt	FM	*	itzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Noch	FM	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	jemals	ADV	*	jemals	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	meinem	PPOSAT	*	mein	sg	neut	-	(63|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ganzen	ADJA	*	ganz	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Leben	NN	*	leben	sg	neut	-	63)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Darum	PROAV	*	darum	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	befragen	VVINF	*	befragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sei	XY	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wie	PWAV	*	wie	-	-	-	(711
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	s	PPER	*	--	-	-	-	711)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wähnt	VVFIN	*	wähnen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wohl	ADV	(AP(VP*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gar	ADV	(PP*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	(NP*	der	sg	fem	-	(686
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Wahrheit	NN	*)))	wahrheit	sg	fem	-	686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	verbergen	VVINF	*))	verbergen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Sehr	ADV	*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nötig	ADJD	*))	nötig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sei	XY	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wie	PWAV	*	wie	-	-	-	(711
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	s	PPER	*	--	-	-	-	711)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hab	VVFIN	*	hab	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	–	CARD	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wem	PWS	*	wem	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	es	PPER	*	es	sg	neut	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wissen	VVINF	*	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ziemt	VVFIN	*	ziemen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	–	PPER	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	geleugnet	VVPP	*	leugnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	daß	KOUS	*	daß	-	-	-	(686
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	eine	ART	*	ein	sg	fem	-	(705
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Christin	NN	*	christin	sg	fem	-	705)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	als	KOKOM	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	meine	PPOSAT	*	mein	sg	fem	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Pflegetochter	NN	*	pflegetochter	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Warum	PWAV	*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ichs	CARD	*	ich	-	-	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aber	KON	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihr	PPER	(S(VP*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	entdeckt	VVPP	*))	entdecken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Darüber	PROAV	*	darüber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	brauch	VVFIN	*	brauch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mich	PPER	*	mich	sg	*	-	(927|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zu	APPR	*	zu	-	-	-	927)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Entschuldigen	NN	*	entschuldigen	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(927)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sollt	VVFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(NP*	ihr	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihr	PPOSAT	*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nicht	NN	*)))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	brauchen	VVFIN	*	brauchen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gönnts	NN	(NP*	gönnt	-	-	-	(928)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPER	(NP*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	daß	KOUS	(S*	daß	-	-	-	(928
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nie	ADV	*	nie	-	-	-	928)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	andern	PIAT	*	anderer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Augen	NN	*)	auge	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	darf	VMFIN	*	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	betrachten	VVINF	*)))	betrachten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Spart	VVFIN	(VROOT(PSEUDO(S*	spart	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Entdeckung	NN	*	entdeckung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*))	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Noch	ADV	(S*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	habt	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ganz	ADV	*)	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	allein	ADV	(VP*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ihr	PPER	*)	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	schalten	VVINF	*))	schalten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gebt	VVFIN	*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sie	PPER	*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bitt	VVFIN	*	bitt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nathan	NE	*	nathan	-	-	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gebt	VVFIN	*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bins	VVFIN	*	bins	sg	-	-	(929)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	*	der	sg	masc	-	(929)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zum	APPRART	*	zu	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zweitenmale	ADJA	*	zweitenmal	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Euch	NN	*	euch	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	retten	VVINF	*	retten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	–	TRUNC	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	konnte	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	konnte	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(AVP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	ADV	*)	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	damit	PROAV	(AP*	damit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	PTKA	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	spät	ADJD	*))	spät	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	zu	PTKA	(VROOT(PSEUDO(VP(AP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	spät	ADJD	*))	spät	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dank	PROAV	(VROOT(PSEUDO(S*	dank	-	-	-	(930)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dem	ART	(NP*	der	sg	masc	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Patriarchen	NN	*))	patriarchen	sg	masc	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dem	ART	(VROOT(PSEUDO(NP*	der	sg	neut	-	(8
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Patriarchen	NN	*)	patriarchen	sg	neut	-	8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dank	NN	(VROOT(PSEUDO*	dank	-	-	-	(930)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ihm	PPER	(VROOT(PSEUDO(S*	ihm	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Dank	VVFIN	*)	dank	-	-	-	(930)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wofür	PWAV	(VROOT(PSEUDO*	wofür	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dank	PROAV	(VROOT(PSEUDO(S*	dank	-	-	-	(930)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hätte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	uns	PPER	*))	uns	pl	*	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	verdienen	VVINF	*	verdienen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wollen	VMFIN	*)	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wofür	PWAV	(VROOT(PSEUDO*	wofür	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wofür	PWAV	(VROOT(PSEUDO*	wofür	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S(S*	daß	-	-	-	(931
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wir	PPER	*	wir	pl	*	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wissen	VVFIN	*)	wissen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wem	PWS	*	wem	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	anverwandt	ADJD	*	anverwandt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nun	ADV	(VP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wissen	VVINF	*	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wessen	PRELAT	(S(NP*	wessen	-	-	-	(932
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Händen	NN	*)	hand	pl	-	-	932)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Sie	PPER	*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	sicher	ADJD	(VP*	sicher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ausgeliefert	VVPP	*)	ausliefern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	werden	VAINF	*))	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	kann	VMFIN	*)))	können	sg	-	-	931)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	*	der	sg	neut	-	(931)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dank	APPR	*	dank	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihm	PPER	*	ihm	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	CARD	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mehr	PIS	*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihm	PPER	*	ihm	sg	masc	-	(8)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	danken	VVINF	*	danken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Aus	APPR	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	diesen	PDS	*	dieser	-	-	-	(932)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	müßt	VMFIN	*	müssen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	erhalten	VVPP	*	erhalten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	aus	APPR	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	meinen	PPOSAT	*	meinen	pl	neut	-	(1055)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Arme	NN	(VROOT(PSEUDO(NP*	arm	-	-	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Recha	NE	*)	recha	-	-	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Dir	PPER	*	dir	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	*	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zustößt	VVFIN	*	zustoßen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	arme	ADJA	(NP*	arm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Recha	NE	*))	recha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ein	ART	(NP*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Glück	NN	*	glück	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	andre	ADJA	*	andr	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Waisen	NN	*))	waise	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wäre	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Dein	PPOSAT	(NP*	dein	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Unglück	NN	*))	unglück	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wo	PWAV	(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	pl	*	-	(873
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	diese	PDAT	(NP*	dieser	pl	neut	-	873)|(873)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Verwandte	NN	*))	verwandte	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	(VROOT(PSEUDO(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	pl	*	-	(873)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sind	VAFIN	*)	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wer	PWS	*	wer	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	pl	*	-	(873)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sind	VAFIN	*)	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Besonders	ADV	(VROOT(PSEUDO(S*	besonders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bruder	NN	*)	bruder	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sich	PRF	(VP*	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gefunden	VVPP	*	finden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Bei	APPR	(S(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dem	PRELS	*)	der	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Ihr	PPER	*	ihr	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	um	APPR	(VP(PP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*)	sie	pl	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	werben	VVINF	*)	werben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	müßt	VMFIN	*)))	müßen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bruder	NN	*)	bruder	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dieser	PDAT	(NP*	dieser	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Bruder	NN	*))	bruder	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Soldat	NN	*)	soldat	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geistlicher	NN	*)	geistlich	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Laßt	VVIMP	*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hören	VVINF	*	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PRF	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Versprechen	NN	*	versprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	darf	VMFIN	*	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	glaube	VVFIN	*	glauben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	keines	PIS	(NP*	kein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Von	APPR	(PP*	von	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	beiden	PIAT	(CNP(NP*	beide	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	–	NN	*)	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	beides	PIS	*)))	beide	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ist	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kenn	VVFIN	*	kenn	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	recht	ADJD	*	recht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sonst	ADV	*)	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	braver	ADJA	*	brav	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mann	NN	*)	mann	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dem	ART	*	der	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	*	sich	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Recha	NE	*	recha	sg	neut	(PER*)	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	übel	ADV	*	übel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Befinden	NE	*	befinden	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ein	ART	(NP*	ein	sg	masc	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Christ	NN	*))	christ	sg	masc	-	99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S(AVP(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(PP*	zu	-	-	-	(158
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Zeiten	NN	*))	zeit	pl	fem	-	158)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Auch	ADV	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	von	APPR	(VP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Euch	PPER	*)	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	denken	VVINF	*)	denken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	soll	VMFIN	*))	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	–	XY	*	–	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Nehmt	NN	(NP*	nehmt	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	mirs	APPRART	(PP*))	mir	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	nicht	PTKNEG	(NP(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	ungut	ADJD	*)	ungut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Nathan	NE	*)	nathan	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wird	VAFIN	(S*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Die	ART	(NP*	der	sg	fem	-	(705
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Christin	NN	*)	christin	sg	fem	-	705)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	spielen	VVINF	*	spielen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	müssen	VMFIN	*)	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	unter	APPR	*	unter	-	-	-	(99
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Christen	NN	*	christ	pl	masc	(MISC*)	99)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	was	PWS	(S*	was	sg	neut	-	(705
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	lange	ADV	(VP*	lange	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gnug	ADV	*	gnug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gespielt	VVPP	*	spielen	-	-	-	705)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	endlich	ADV	*))	endlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	werden	VAINF	*))	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wird	VAFIN	*	werden	sg	-	-	(933
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	den	ART	*	der	pl	masc	-	(60
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	lautern	PIAT	*	lautern	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Weizen	NN	*	weizen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	933)|60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Den	NE	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	*	ihr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gesä	NE	*	gesä	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	t	VVPP	*	T	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	das	ART	*	der	sg	neut	-	(333
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Unkraut	NN	*	unkraut	sg	neut	-	333)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	endlich	ADV	*	endlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Ersticken	NN	*	ersticken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(933)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kümmert	VVFIN	*)	kümmern	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	(NP*	euch	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wenig	PIS	*)	wenig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dem	ART	*	der	sg	neut	-	(933)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ungeachtet	APPO	*	ungeachtet	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	könnt	VVFIN	*	können	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sagen	VVINF	*	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	–	$.	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihrem	PPOSAT	*	ihr	sg	masc	-	(61|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Bruder	NN	*))	bruder	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	(S*	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	übel	ADJD	*	übel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Befinden	NN	*	befinden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	werde	VAFIN	*)	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denk	NE	*	denk	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	hoff	XY	*	hoff	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihm	PPER	*)	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	was	PIS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mangeln	VVINF	*	mangeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sollte	VMFIN	*)	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Euch	PPER	(CNP*	euch	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	mich	PPER	*)	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	noch	ADV	*))	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	immer	ADV	*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Oh	NE	(VROOT(PSEUDO(MPN*	oh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihm	PPER	(AP*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihr	PPOSAT	*))	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mangeln	VVINF	*	mangeln	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	können	VMFIN	*)	können	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wird	VAFIN	(VROOT(PSEUDO(S*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	ART	(NP*	der	sg	neut	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Brüderchen	NN	*)	brüderchen	sg	neut	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(CPP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Essen	NN	*)	essen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Kleidung	NN	*)	kleidung	sg	fem	-	(437)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Mit	APPR	(PP*	mit	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Naschwerk	NN	*)	naschwerk	sg	neut	-	(291)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Putz	NN	*))	putz	sg	neut	-	(292)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	das	ART	(S(NP*	der	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Schwesterchen	NN	*)	schwesterchen	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	reichlich	ADJD	*)	reichlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	gnug	ADJD	*	gnug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	versorgen	VVFIN	*))	versorgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	braucht	VVFIN	*	brauchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ein	ART	(NP*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Schwesterchen	NN	*)	schwesterchen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mehr	ADV	*)	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ei	XY	*	ei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	freilich	ADV	(NP*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Noch	ADV	(AP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	einen	ART	*)	ein	sg	masc	-	(934
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Mann	NN	*)	mann	sg	masc	-	934)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(NP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	den	PDS	*)	der	sg	masc	-	(934)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	den	ART	(NP*	der	sg	masc	-	(934)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Wird	NN	*)	werden	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	das	ART	(VP(NP*	der	sg	neut	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Brüderchen	NN	*	brüderchen	sg	neut	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	seiner	PPOSAT	*	sein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Zeit	NN	*))	zeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	schaffen	VVINF	*)))	schaffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	wie	KOKOM	(S(NP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	er	PPER	*)	er	sg	masc	-	(934)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	immer	ADV	(VP*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	finden	VVINF	*)))	finden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Christlichste	NN	*	christlichste	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Beste	NN	*))	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Welch	PWAT	*	welch	-	-	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	einen	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Engel	NN	*	engel	sg	masc	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hattet	VAFIN	*	hatten	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	gebildet	VVPP	*	bilden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Den	PWS	*	der	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Euch	PPER	*	euch	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	andre	ADV	*	andre	sg	-	-	(873)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	verhunzen	VVPP	*	verhunzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	werden	VAINF	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hat	VAFIN	(VROOT(PSEUDO(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	keine	PIAT	(NP*	kein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Not	NN	*))	not	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(935|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	(VP*	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	unsrer	ADJD	*	unsrer	-	-	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Liebe	NN	*	liebe	sg	fem	-	935)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Noch	ADV	(AP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	immer	ADV	*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wert	ADJD	*)	wert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	genug	ADV	*	genug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	behaupten	VVINF	*))	behaupten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sagt	VVFIN	*	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	*	der	sg	neut	-	(935)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	meiner	PPOSAT	*	mein	sg	fem	-	(936|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Liebe	NN	*	liebe	sg	fem	-	936)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	*	der	sg	neut	-	(935)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	die	PDS	*	der	sg	fem	-	(936)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	läßt	VVFIN	*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sich	PRF	*	sich	sg	-	-	(936)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	unterschlagen	VVINF	*	unterschlagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	(AP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	klein	ADJD	*))	klein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	keinen	PIAT	*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Namen	NN	*)	name	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	halt	ADV	*	halt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Argwohnt	VVFIN	(S*	argwohnt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bereits	ADV	(NP*	bereits	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	was	PWS	(S*	was	sg	neut	-	(937
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mit	APPR	(PP*	mit	-	-	-	937)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ihr	PPER	*)	ihr	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	vorgeht	VVFIN	*))	vorgehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Möglich	ADJD	*	möglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wüßte	VVFIN	*	wissen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Woher	PWAV	*	woher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(S(S*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	viel	PIS	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	soll	VMFIN	*)	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	–	$.	*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	In	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	beiden	PIAT	*	beide	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Fällen	NN	*	fall	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	was	PRELS	(S*	was	sg	neut	-	(937
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ihr	PPOSAT	(NP*	ihr	sg	neut	-	(850|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Schicksal	NN	*)	schicksal	sg	neut	-	850)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	droht	VVFIN	*	drohen	sg	-	-	937)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	mir	PPER	*)))	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	zuerst	ADV	(VP*	zuerst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	erfahren	VVINF	*))	erfahren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(668|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gedanke	NN	*	gedanke	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	668)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sie	PPER	(VP(NP*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	eher	ADV	*)	eher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sehn	VVINF	*)	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	(VP(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sprechen	VVINF	*)	sprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Als	KOUS	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	bis	APPR	(NP(S(PP*	bis	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ich	PPER	*)	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	die	ART	(VP(NP*	der	sg	fem	-	(696
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Meine	NN	*)	mein	sg	fem	-	696)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	nennen	VVINF	*)	nennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	dürfe	VMFIN	*)	dürfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Fällt	NN	*)	fallen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	weg	ADV	*))))	weg	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eile	VVFIN	*)	eilen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wohin	PWAV	(VROOT(PSEUDO*	wohin	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zu	APPR	(VROOT(PSEUDO(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihr	PPER	*)	ihr	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sehn	CARD	*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ob	KOUS	*	ob	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	diese	PDAT	*	dieser	sg	fem	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Mädchenseele	NN	*	mädchenseel	sg	fem	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Manns	NN	*	mann	sg	masc	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	genug	PIAT	*	genug	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Wohl	NN	*	wohl	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	den	ART	*	der	sg	masc	-	(938
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	einzigen	ADJA	*	einzig	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Entschluß	NN	*	entschluß	sg	masc	-	938)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	fassen	ADJA	*	fassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Der	NN	*	der	sg	masc	-	(938|(938)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	ihrer	PPOSAT	*	ihr	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	würdig	ADJD	*	würdig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	wäre	VAFIN	*	sein	sg	-	-	938)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Welchen	PWAT	*	welchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Den	NE	(VROOT(PSEUDO*	der	sg	masc	-	(938)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nach	APPR	(PP*	nach	-	-	-	(938
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	(CNP*	euch	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihrem	PPOSAT	(NP*	ihr	sg	masc	-	(61|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Bruder	NN	*	bruder	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	weiter	ADV	(VP*	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Zu	APPR	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	fragen	VVINF	*)))))	fragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	–	XY	*))	–	-	-	-	938)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	(S(VP*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	folgen	VVINF	*)))	folgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Sie	PPER	*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	drüber	PROAV	*	drüber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	eines	ART	(NP*	ein	sg	masc	-	(100
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Muselmannes	NN	*)	muselmann	sg	masc	-	100)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Frau	NN	(VP*	frau	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	werden	VAINF	*)	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	müßte	VMFIN	*)	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	trefft	VVFIN	*	treffen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	*	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sittah	NE	*)	sittah	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	des	ART	(NP*	der	sg	neut	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Sultans	NN	*)	sultan	sg	neut	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Schwester	NN	*))	schwester	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Seit	APPR	*	seit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	warum	PWAV	(VROOT(PSEUDO*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(CS(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wollt	VMFIN	*	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(NP*	ihr	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	da	ADV	*)	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	bei	APPR	(VP(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihnen	PPER	*)	ihnen	pl	*	-	(317)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Zugleich	ADV	*	zugleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	den	ART	(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Bruder	NN	*)	bruder	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	finden	VVINF	*))	finden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	kommt	VVFIN	(S*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	mit	PTKVZ	*))	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Den	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bruder	NN	*)	bruder	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	welchen	PWAT	*	welcher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sittahs	NE	(VROOT(PSEUDO(CNP*	sittahs	-	-	-	(1063)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Rechas	NE	*)	rechas	-	-	(LOC*)	(1036)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Leicht	ADJD	(VROOT(PSEUDO(AP*	leicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	beide	PIS	*)	beide	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bitt	VVFIN	*	bitt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	führt	VVFIN	*	führen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	fort	PTKVZ	*)	fort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Szene	NN	(VROOT(PSEUDO*	szene	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sittahs	NE	*	sittah	-	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Harem	NE	*)	harem	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sittah	NE	(VROOT(PSEUDO(VP(CNP*	sittah	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Recha	NE	*)	recha	sg	*	(PER*)	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Unterhaltung	NN	*)	unterhaltung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	begriffen	VVPP	*)	begreifen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	freu	ADJD	*	freu	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PRF	*	mich	sg	-	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	deiner	ADJD	*)	dein	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	süßes	ADJA	(NP*	süß	pl	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Mädchen	NN	*))	mädchen	pl	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sei	XY	*	sei	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	(S*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	beklemmt	VVFIN	(S*	beklemmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	so	ADV	(VROOT(PSEUDO(S*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	angst	VVFIN	*	angst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	so	ADV	(VROOT(PSEUDO(S*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	schüchtern	VVFIN	*	schüchtern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sei	NN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	munter	PTKVZ	*)	munter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	sei	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gesprächiger	ADJD	*)	gesprächig	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	vertrauter	ADJD	(VROOT(PSEUDO*	vertraut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Prinzessin	NN	(VROOT(PSEUDO*	prinzessin	-	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(CO(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*))	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nicht	PTKNEG	(VROOT(PSEUDO(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Prinzessin	NN	*	prinzessin	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nenn	KOUS	(VROOT(PSEUDO(S*	nenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mich	PPER	*	mich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*	sittah	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	KON	(S*	–	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	deine	PPOSAT	(NP*	dein	sg	fem	-	(939|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Freundin	NN	*	freundin	sg	fem	-	939)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	–	NN	*)	–	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	deine	PPOSAT	(NP*	dein	sg	fem	-	(940|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Schwester	NN	*)))	schwester	sg	fem	-	940)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nenn	KOUS	(VROOT(PSEUDO(S*	nenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*	mich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dein	PPOSAT	(NP*	dein	sg	masc	-	(941|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mütterchen	NN	*))	mütterchen	pl	fem	-	941)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	könnte	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	(VP(NP*	der	sg	neut	-	(941)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ja	NN	*	ja	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schier	ADJD	*)	schier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sein	VAINF	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(S(ISU*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	jung	ADJD	*))	jung	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	so	ADV	(VROOT(PSEUDO(S(ISU*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	klug	ADJD	*))	klug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	so	ADV	(VROOT(PSEUDO(S(ISU*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fromm	ADJD	*))	fromm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	alles	PIS	*	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	weißt	VVFIN	*)	weißen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nicht	PTKNEG	(VROOT(PSEUDO(S(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	alles	PIS	*)	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mußt	VMFIN	*	mussen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Gelesen	NN	(VP*	gelese	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	haben	VAINF	*))	haben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S(VP*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gelesen	VVPP	*))	lesen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sittah	NE	(NP*	sittah	sg	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Du	PPER	(S*	du	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	spottest	VVFIN	*	spottest	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	deiner	PPOSAT	(NP*	dein	sg	fem	-	(2|(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	kleinen	ADJA	*	klein	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	albern	ADJD	*	albern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Schwester	NN	*)))	schwester	-	-	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kaum	ADV	(VP*	kaum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	lesen	VVINF	*))	lesen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kannst	VMFIN	(VROOT(PSEUDO(S*	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kaum	ADV	*	kaum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Lügnerin	NN	*)	lügnerin	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wenig	PIS	*	wenig	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	meines	PPOSAT	(PP*	mein	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vaters	NN	*	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Hand	NN	*))	hand	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	meinte	VVFIN	*	meinen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Du	PPER	(S*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sprächst	VVFIN	*	sprachsen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Büchern	NN	*)))	buch	pl	neut	-	(942)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Allerdings	ADV	(VROOT(PSEUDO(S*)	allerdings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	von	APPR	(VROOT(PSEUDO(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Büchern	NN	*)	buch	pl	neut	-	(942)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bücher	NN	*	buch	pl	neut	-	(942)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	(VP*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wahrlich	ADJD	*	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	schwer	ADJD	*	schwer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	lesen	VVINF	*)))	lesen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Im	APPRART	(VROOT(PSEUDO(PP*	in	sg	masc	-	(943
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ernst	NN	*)	ernst	sg	masc	-	943)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	In	APPR	(VROOT(PSEUDO(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ganzem	ADJA	*	ganz	sg	neut	-	(943
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ernst	NN	*)	ernst	sg	neut	-	943)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(S(NP*	mein	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	liebt	VVFIN	*	lieben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Die	ART	(NP*	der	sg	fem	-	(944
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	kalte	ADJA	*	kalt	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Buchgelehrsamkeit	NN	*	buchgelehrsamkeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	die	PRELS	(S*	der	sg	fem	-	(944)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sich	PRF	*	sich	sg	-	-	(944)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Mit	APPR	(PP*	mit	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	toten	ADJA	*	tot	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Zeichen	NN	*	zeichen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ins	APPRART	(PP*	in	sg	neut	-	(87
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Gehirn	NN	*))	gehirn	sg	neut	-	87)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	drückt	VVFIN	*))	drücken	sg	-	-	944)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Zu	PTKA	(AP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	wenig	PIS	*))	wenig	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	(VROOT(PSEUDO*	ei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sagst	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*)	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hat	VAFIN	(S*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	indes	ADV	*	indes	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Wohl	NN	*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	(NP(AVP*	nicht	-	-	-	(37
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sehr	ADV	*)	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Unrecht	NN	*)	unrecht	-	-	-	37)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(NP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	(AP*	so	-	-	-	(945
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	manches	PIS	*)	mancher	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	was	PRELS	(S*	was	sg	neut	-	945)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Du	PPER	*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	weißt	VVFIN	*))	weißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Weiß	VVFIN	(VROOT(PSEUDO(S*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	allein	ADV	(PP*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aus	APPR	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	seinem	PPOSAT	*	sein	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Munde	NN	*))	mund	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	könnte	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	*	der	sg	neut	-	(945
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	meisten	PIAT	*	meister	sg	neut	-	945)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dir	PPER	*	dir	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sagen	VVINF	*	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wo	PWAV	(VROOT(PSEUDO*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	warum	PWAV	(VROOT(PSEUDO*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	er	PPER	(VROOT(PSEUDO(VP(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	michs	VVFIN	*)	michs	sg	-	-	(945)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gelehrt	VVPP	*	lehren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hängt	VVFIN	*	hängen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sich	PRF	*	sich	sg	-	-	(946)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	freilich	ADV	*	freilich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	alles	PIS	*	alle	sg	neut	-	(946)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	besser	ADJD	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	an	PTKVZ	*)	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	lernt	VVFIN	*	lernen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mit	APPR	(NP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	eins	PIS	*)	einer	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	die	ART	*	der	sg	fem	-	(60
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ganze	ADJA	*	ganz	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Seele	NN	*))	seele	sg	fem	-	60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sicher	ADV	(VROOT(PSEUDO(CS(S*	sicher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Auch	ADV	(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sittah	NE	*)	sittah	*	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wenig	ADV	*)	wenig	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nichts	PIS	(S*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gelesen	VVPP	*))	lesen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	stolz	ADJD	*)	stolz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	aufs	APPRART	(PP*	auf	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Gegenteil	NN	*))	gegenteil	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wie	KOKOM	(AVP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*))	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dein	PPOSAT	(VROOT(PSEUDO(NP*	dein	sg	masc	-	(947|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Grund	NN	*)	grund	sg	masc	-	947)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sprich	NE	(VROOT(PSEUDO(S*	sprich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dreist	VVFIN	*)	dreisen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dein	PPOSAT	(VROOT(PSEUDO(NP*	dein	sg	masc	-	(947|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Grund	NN	*)	grund	sg	masc	-	947)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	(AP*	so	-	-	-	(948
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schlecht	ADJD	(CAP*	schlecht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	recht	ADJD	(AP*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	unverkünstelt	ADJD	*	unverkünstelt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	948)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	So	ADV	(AVP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ganz	ADV	*))))	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sich	PRF	(NP*	sich	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	nur	ADV	(AP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ähnlich	ADJD	*))	ähnlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(CS(S*	der	sg	neut	-	(948)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sollen	VMFIN	*	sollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Die	ART	(NP*	der	pl	neut	-	(942
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bücher	NN	*)	buch	pl	neut	-	942)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	uns	PPER	(VP(VP*	uns	pl	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	selten	VVINF	*)	selten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	lassen	VVINF	*))	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sagt	VVFIN	(S*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Mein	PPOSAT	(NP*	mein	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Vater	NN	*)))	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(S*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dein	PPOSAT	(NP*	dein	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ein	ART	*	ein	sg	masc	-	(294
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Mann	NN	*))	mann	sg	masc	-	294)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wahr	PTKVZ	*	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S(AP*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nah	ADJD	*)	nah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	immer	ADV	(AVP*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Zum	APPRART	(PP*	zu	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ziele	NN	*)	ziel	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	trifft	VVFIN	*)	treffen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wahr	PTKVZ	*	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(PP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	diesen	PDAT	*	dieser	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	XY	*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dir	PPER	(NP*	dir	sg	*	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Liebe	NN	*))	liebe	pl	*	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Diesen	PDAT	*	dieser	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vater	NN	*	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	–	XY	*	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gott	NN	(VROOT(PSEUDO*	gott	-	-	-	(209)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weinst	VVFIN	*)	weinst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	diesen	PDAT	*	dieser	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Vater	NN	*	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ah	NE	*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Heraus	NN	*	heraus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(60|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Herz	NN	*)	herz	sg	masc	-	60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Luft	NN	*	luft	sg	fem	-	(438)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Luft	NN	*	luft	sg	fem	-	(438)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wirft	VVFIN	(VROOT(PSEUDO(S*	wirfen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sich	PRF	*	sich	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(VP(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Tränen	NN	*)	träne	pl	fem	-	(529)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	überwältiget	VVPP	*)	überwältiget	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ihren	PPOSAT	*	ihr	pl	masc	-	(949|(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Füßen	NN	*))	fuß	pl	masc	-	949)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kind	NN	(VROOT(PSEUDO(S*	kind	sg	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Geschieht	VVFIN	*	geschehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*)	dir	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Recha	NE	(VROOT(PSEUDO(MPN*	recha	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Diesen	PDAT	(VROOT(PSEUDO(S(NP*	dieser	sg	masc	-	(950|(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	$.	*	–	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Soll	VMFIN	(S*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	(VP*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	verlieren	VVINF	*)))	verlieren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	950)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	verlieren	VVINF	*	verlieren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(950)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sei	NN	(S*	sei	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ruhig	ADJD	*)	ruhig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nimmermehr	NN	*	nimmermehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Steh	NE	*	steh	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auf	PTKVZ	*)	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sollst	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vergebens	ADV	*	vergebens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dich	PRF	*	dich	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	meiner	PPOSAT	*	mein	sg	fem	-	(939|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Freundin	NN	*	freundin	sg	fem	-	939)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Zu	APPR	(PP*	zu	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	meiner	PPOSAT	*	mein	sg	fem	-	(940|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Schwester	NN	*))	schwester	sg	fem	-	940)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	erboten	VVPP	(VP*	ereten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	haben	VAINF	*))	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bins	VVFIN	*	bins	sg	-	-	(951)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*)	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	bins	ADV	(VROOT(PSEUDO(S*)	bins	-	-	-	(951)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Steh	NE	(S*	steh	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auf	PTKVZ	*)	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sonst	ADV	(VP*	sonst	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Hülfe	NN	*	hülfe	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	rufen	VVINF	*))	rufen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*))	recha	-	-	-	(2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	die	PRELS	(VROOT(PSEUDO(CS(S*	der	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sich	PRF	*	sich	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ermannt	VVFIN	*)	ermennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	aufsteht	VVFIN	*)	aufstehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	verzeih	VVFIN	*	verzeih	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	vergib	VVIMP	*	vergib	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mein	PPOSAT	(S(NP*	mein	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Schmerz	NN	*)	schmerz	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	(VP*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	vergessen	VVPP	*))	vergessen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	machen	VVINF	(VP*	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wer	PWS	(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Du	PPER	*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	bist	VAFIN	*))	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Vor	APPR	(VROOT(PSEUDO(S(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sittah	NE	*)	sittah	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gilt	VVFIN	*	gelten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kein	PIAT	(CNP(NP*	kein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Winseln	NN	*)	winseln	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	kein	PIAT	(NP*	kein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Verzweifeln	NN	*)))	verzweifeln	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kalte	ADJA	(VROOT(PSEUDO(S(NP*	kalt	sg	-	-	(87
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ruhige	ADJA	*	ruhig	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vernunft	NN	*)	vernunft	sg	fem	-	87)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	alles	PIS	(NP*	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	über	APPR	(PP*	über	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sie	PPER	*))	sie	-	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	vermögen	VVFIN	*)	vermögen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wes	KOUS	(VROOT(PSEUDO(S*	w	-	-	-	(952
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sache	NN	*	sache	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	diese	PDAT	(NP*	dieser	sg	fem	-	(87)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	bei	APPR	(AP(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihr	PPER	*)	ihr	sg	fem	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	führt	VVFIN	*)	führen	sg	-	-	952)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	(NP*	der	sg	masc	-	(952)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	siegt	CARD	*)))	siegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dann	ADV	*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	(VROOT(PSEUDO(CS(S*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	meine	PPOSAT	(NP*	mein	pl	masc	-	(307|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Freundin	NN	*))	freundin	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	meine	PPOSAT	(S(NP*	mein	pl	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Schwester	NN	*)	schwester	sg	neut	-	307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gibt	VVFIN	*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	das	PDS	*	der	sg	neut	-	(953)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKVZ	*))	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gibt	VVFIN	(VROOT(PSEUDO(S*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nimmer	ADV	*	nimmer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKVZ	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	daß	KOUS	(S*	daß	-	-	-	(953
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	953)|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ein	ART	(NP*	ein	sg	masc	-	(954
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	andrer	ADJA	*	andr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Vater	NN	*)	vater	sg	masc	-	954)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	aufgedrungen	VVPP	*	aufdringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	werde	VAFIN	*))	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	masc	-	(954
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	andrer	ADJA	*	andr	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Vater	NN	*)	vater	sg	masc	-	954)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	aufgedrungen	VVPP	*	aufdringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	dir	PPER	*	dir	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(953)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	kann	VMFIN	(VROOT(PSEUDO(S(S*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(953)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*)	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wollen	VMFIN	*	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Liebe	NN	*)	liebe	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Meine	PPOSAT	*	mein	sg	fem	-	(955|(0|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gute	ADJA	*	gut	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	böse	ADJA	*	böse	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Daja	NE	*	daja	-	-	(PER*)	0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	kann	VMFIN	*	können	sg	-	-	955)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Das	PDS	*	der	sg	neut	-	(953)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wollen	VMFIN	*	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	–	NN	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	das	PDS	*	der	sg	neut	-	(953)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	können	VMFIN	*	können	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ja	XY	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	(S*	du	sg	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	kennst	VVFIN	*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wohl	NN	(NP*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	diese	PDAT	(NP*	dieser	pl	neut	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gute	ADJA	*	gut	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	böse	ADJA	*	böse	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Daja	NE	*))	daja	-	-	(PER*)	0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Gott	NN	*	gott	sg	masc	(PER*)	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	vergeb	VVFIN	*	vergeb	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	es	PPER	*	es	sg	neut	-	(955)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ihr	PPER	*	ihr	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	belohn	VVFIN	*	belohn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(955)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihr	PPER	*	ihr	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	(CNP(NP*	so	-	-	-	(956
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	viel	PIAT	*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Gutes	NN	*)	gut	sg	neut	-	956)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	–	KON	*	–	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	(NP(AVP*	so	-	-	-	(953
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	viel	PIAT	(NP*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Böses	NN	*))	böse	sg	neut	-	953)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Erwiesen	NN	*)))	erwiese	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Böses	PIS	*	böse	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dir	PPER	*	dir	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	*	sie	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Gutes	NN	*)	gut	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Doch	ADV	(VP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wahrlich	ADV	(NP*	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wenig	PIS	*)	wenig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	haben	VAINF	*)	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	recht	ADV	(VROOT(PSEUDO(S*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	viel	PIS	(NP(AP(NP*	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Recht	NN	*)	recht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	viel	PIAT	*)))	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Eine	ART	(VROOT(PSEUDO(S(NP*	ein	sg	fem	-	(957|(958
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Christin	NN	*	christin	sg	fem	-	958)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	die	PRELS	(S*	der	sg	fem	-	(957)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	In	APPR	(PP*	in	-	-	-	(956
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	meiner	PPOSAT	*	mein	sg	fem	-	(96|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Kindheit	NN	*)	kindheit	sg	fem	-	96)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mich	PPER	*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gepflegt	VVPP	(VP*	pflegen	-	-	-	956)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Gepflegt	NN	*	pflegen	-	-	-	957)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	So	ADV	(VP(NP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wenig	PIS	*)	wenig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	missen	VVINF	*)	missen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	lassen	VVINF	*)))	lassen	-	-	-	957)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Es	PPER	(NP(AP*	es	sg	neut	-	(956)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ihr	PPOSAT	*)))	ihr	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Die	PDS	(NP*	der	pl	masc	-	(958)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	aber	ADV	*)	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	(VP(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	geängstet	VVPP	*))	ängsten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mich	PPER	(VROOT(PSEUDO(VP*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gequält	VVPP	*)	quälen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	über	APPR	(PP*	über	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PIS	*))	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	warum	PWAV	(VROOT(PSEUDO*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ach	ITJ	(VROOT(PSEUDO(S*)	ach	-	-	-	(959
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	die	ART	*	der	sg	fem	-	(0
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	arme	ADJA	*	arm	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Frau	NN	*	frau	sg	fem	-	0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	PWS	*	–	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sag	VVFIN	*	sag	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dirs	APPRART	*	dir	-	-	-	(1060)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Ist	VAFIN	*	sein	sg	-	-	(960
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	eine	ART	*	ein	sg	fem	-	(298
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Christin	NN	*	christin	sg	fem	-	960)|298)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	aus	APPR	*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Liebe	NN	*	liebe	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	quälen	VVINF	*	quälen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	eine	ART	*	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	den	ART	*	der	pl	*	-	(807
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Schwärmerinnen	NN	*	schwärmerin	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	die	ART	*	der	pl	*	-	807)|(807)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	Den	NN	*	der	pl	*	-	(333
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	allgemeinen	ADJA	*	allgemein	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	einzig	ADJD	*	einzig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	wahren	ADJA	*	wahr	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	Weg	NN	*	weg	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	Nach	APPR	*	nach	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	Gott	NN	*	gott	sg	masc	-	333)|(445)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	versteh	VVFIN	*	versteh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sich	PRF	(VP*	sich	sg	-	-	(807)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gedrungen	VVPP	*	dringen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	fühlen	VVINF	*	fühlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	einen	PIS	(S*	ein	sg	masc	-	(961
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	jeden	PIAT	(NP*	jeder	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	961)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Der	PRELS	(S*	der	sg	masc	-	(961)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dieses	PDAT	(NP*	dieser	sg	masc	-	(333
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Wegs	NN	*)	weg	sg	masc	-	333)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	verfehlt	VVFIN	*))))	verfehlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	darauf	PROAV	(VP*	darauf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	lenken	VVINF	*)))	lenken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kaum	ADV	(S*	kaum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	können	VMFIN	*	können	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	*	sie	pl	*	-	(807)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	anders	ADV	*)	anders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ists	ADV	(AP*	ists	-	-	-	(962)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wahr	ADJD	*	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Daß	KOUS	(S*	daß	-	-	-	(962
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dieser	PDAT	(NP*	dieser	sg	masc	-	(333
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Weg	NN	*)	weg	sg	masc	-	333)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	richtig	ADJD	*	richtig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	führt	VVFIN	*	führen	sg	-	-	962)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Wie	PWAV	(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sollen	VMFIN	*	sollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	sie	PPER	*	sie	pl	*	-	(807)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	gelassen	ADJD	*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ihre	PPOSAT	(NP*	ihr	pl	masc	-	(961|(807)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Freunde	NN	*	freund	pl	masc	-	961)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	einem	ART	*	ein	sg	neut	-	(963
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	andern	PIS	*)))))	anderer	sg	neut	-	963)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	wandeln	VVFIN	*	wandeln	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	sehn	CARD	(CNP*	sehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	–	NN	*)	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	der	ART	*	der	sg	masc	-	(963)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	ins	APPRART	(PP*	in	sg	neut	-	(753)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Verderben	NN	*)	verderben	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	stürzt	VVFIN	*	stürzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	ins	APPRART	(PP*	in	sg	neut	-	(753
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	ewige	ADJA	*	ewig	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	Verderben	NN	*))	verderben	-	-	-	753)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(964)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	müßte	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	möglich	ADJD	(VP*	möglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sein	VAINF	*)	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	denselben	PDAT	(CVP(VP(NP*	derselbe	pl	fem	-	(1010
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Menschen	NN	*	mensch	pl	fem	-	1010)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Zur	APPRART	(PP*	zu	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	selben	ADJA	*	selber	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Zeit	NN	*))	zeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	lieben	VVINF	*))	lieben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	hassen	VVINF	*)))	hassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Auch	ADV	(S*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ists	ADV	*)	ists	-	-	-	(959)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	(S*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	endlich	ADV	*	endlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	laute	ADJA	(VP(NP*	laut	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Klagen	NN	*	klage	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Mich	NE	*)	mich	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	über	APPR	(PP*	über	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sie	PPER	*)	sie	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	führen	VVINF	*))	führen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	zwingt	VVFIN	*))	zwingen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPOSAT	*	ihr	pl	*	-	(965|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Seufzen	NN	*	seufze	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	965)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPOSAT	*	ihr	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Warnen	NN	*	warnen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ihr	PPOSAT	*	ihr	sg	neut	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gebet	NN	*	gebet	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ihr	PPOSAT	*	ihr	sg	neut	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Drohen	NN	*	drohen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	hätt	VAFIN	*	hätt	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	länger	ADJD	*	lang	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	ausgehalten	VVPP	*	aushalten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	gern	ADV	*	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(965)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	brachte	VVFIN	*	bringen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	immer	ADV	(AP*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auf	APPR	(CAP(AP(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Gedanken	NN	(CNP*	gedanke	pl	masc	-	(966
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	966)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Die	NN	*))	der	pl	masc	-	(966)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gut	ADJD	*)	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nützlich	ADJD	*)))	nützlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wem	PWS	*	wem	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	schmeichelts	ADV	*	schmeichelts	-	-	-	(967)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Im	APPRART	*	in	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Grunde	NN	*	grund	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sich	PRF	*	sich	sg	-	-	(1015|(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gar	ADV	*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	wert	ADJD	*	wert	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	teuer	ADJD	*	teuer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	1015)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	wems	ADV	*	wems	-	-	-	(968)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	gehalten	VVPP	*	halten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	fühlen	VVINF	*	fühlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	daß	KOUS	*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Er	PPER	*	er	sg	masc	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	den	ART	*	der	sg	masc	-	(969
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Gedanken	NN	*	gedanke	sg	masc	-	969)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	ertragen	VVINF	*	ertragen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Er	PPER	*	er	sg	masc	-	(969|(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	müß	VMFIN	*	müß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	einmal	ADV	*	einmal	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	ewig	ADJD	*	ewig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	uns	PPER	*	uns	pl	*	-	(961)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	entbehren	VVINF	*	entbehren	-	-	-	969)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sehr	ADV	(VROOT(PSEUDO(S(ISU*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wahr	ADJD	*))	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	–	PPER	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	$(	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	*	der	sg	neut	-	(887)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKA	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	weit	ADJD	*	weit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Dem	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(887)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nichts	PIS	(VP*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	entgegensetzen	VVINF	*	entgegensetzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(NP(PP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Geduld	NN	*	geduld	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Überlegung	NN	*	überlegung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*))	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nichts	PIS	*)))	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wem	PWS	*	wem	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	(686
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	itzt	ADJD	*	itzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	entdeckt	VVPP	*	entdecken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	will	VMFIN	*	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	haben	VAFIN	*	haben	-	-	-	686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Entdeckt	VVPP	*	entdecken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	itzt	VVFIN	*)	itzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eben	ADV	*	eben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	itzt	VVFIN	*)	itzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wir	PPER	*	wir	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nahten	VVFIN	*	nahen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auf	APPR	*	auf	-	-	-	(915
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Weg	NN	*	weg	sg	masc	-	915)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hierher	PROAV	*	hierher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	uns	PPER	*	uns	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	einem	ART	*	ein	sg	neut	-	(970)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Verfallnen	NN	*	verfalln	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Christentempel	NN	*	christentempel	sg	*	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Plötzlich	ADJD	(VROOT(PSEUDO(CS(S*	plötzlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	stand	VVFIN	*	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sie	PPER	*	sie	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	still	PTKVZ	*)	still	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schien	VVFIN	(S*	scheinen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sich	PRF	*	sich	sg	-	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	kämpfen	VVINF	*)))	kämpfen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	blickte	VVFIN	(S*	blicken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	nassen	ADJA	*	naß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Augen	NN	*)	auge	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	bald	ADV	*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	gen	APPR	(PP*	gen	-	-	-	(916
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Himmel	NN	*)	himmel	sg	masc	-	916)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	bald	ADV	*	bald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	mich	PPER	*)))	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Komm	NN	(VROOT(PSEUDO(S*	komm	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sprach	VVFIN	*	sprechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	*	sie	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	endlich	ADV	*	endlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	laß	KOUS	(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	uns	PPER	*	uns	pl	*	-	(67)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Durch	APPR	(PP*	durch	-	-	-	(970
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	diesen	PDAT	*	dieser	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Tempel	NN	*)	tempel	sg	masc	-	970)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Richte	NN	*	richte	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	gehn	CARD	*)))	gehn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	*	sie	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	geht	VVFIN	*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	folg	VVFIN	*	folg	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ihr	PPER	*	ihr	sg	neut	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mein	PPOSAT	*	mein	sg	masc	-	(219|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Auge	NN	*	auge	sg	masc	-	219)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	schweift	VVFIN	*	schweifen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Graus	NN	*	graus	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	die	ART	*	der	pl	*	-	(970
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	wankenden	ADJA	*	wankend	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Ruinen	NN	*	ruine	pl	*	-	970)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	durch	PTKVZ	*	durch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(CS(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	steht	VVFIN	*	stehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wieder	ADV	*)	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	(S*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sehe	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mich	PRF	*	mich	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	An	APPR	(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	versunknen	ADJA	*	versunkn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Stufen	NN	*	stufe	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	eines	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	morschen	ADJA	*	morsch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Altars	NN	*))	altar	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	ihr	PPER	*)))	ihr	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ward	VAFIN	*	werden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	als	KOUS	(VROOT(PSEUDO(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mit	APPR	(CPP(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	heißen	ADJA	*	heiß	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Tränen	NN	*)	träne	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gerungnen	ADJA	*	gerungn	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Händen	NN	*)	hand	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	meinen	PPOSAT	*	mein	pl	neut	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Füßen	NN	*))	fuß	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	stürzte	VVFIN	*)	stürzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gutes	ADJA	(VROOT(PSEUDO(NP*	gut	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kind	NN	*)	kind	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bei	APPR	(PP*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	sg	fem	-	(971
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Göttlichen	NN	*	göttliche	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	die	PRELS	(CS(S*	der	pl	*	-	(971)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sonst	ADV	*	sonst	-	-	-	971)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	So	ADV	(NP(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	manch	PIAT	*)	mancher	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Gebet	NN	*)	gebet	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	erhört	VVFIN	*)	erhören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	so	ADV	(S*	so	-	-	-	(133
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	manches	PIAT	(VP(NP*	mancher	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Wunder	NN	*)	wunder	sg	neut	-	133)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Verrichtet	VVPP	*)	verrichten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	habe	VAFIN	*)	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	mich	PPER	(S*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	beschwor	VVFIN	*	beschwören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	–	PPER	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	Blicken	NN	*	blick	pl	neut	-	(222)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Des	NE	*)	der	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	wahren	VVFIN	*)))	wahr	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Mitleids	NN	*	mitleids	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	mich	PPER	*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	beschwor	VVFIN	*	beschwören	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	mich	PPER	(VP*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	meiner	PPOSAT	(NP*	mein	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	Doch	NN	*)	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	erbarmen	VVINF	*)))	erbarmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wenigstens	ADV	*	wenigstens	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihr	PPER	*	ihr	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Vergeben	VVINF	*	vergeben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sie	PPER	*	sie	sg	fem	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mir	PPER	*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	entdecken	VVINF	*	entdecken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	müsse	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Was	PWS	*	was	sg	neut	-	(972
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ihre	PPOSAT	*	ihr	sg	fem	-	(739|(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Kirch	NE	*	kirch	sg	fem	(PER*)	739)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	mich	PPER	*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	für	APPR	*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Anspruch	NN	*	anspruch	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	habe	VAFIN	*	haben	sg	-	-	972)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	(	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Unglückliche	NN	*	unglücklich	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	*	es	sg	neut	-	(972)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ahndte	VVFIN	*	ahnden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	)	$(	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CS(S*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Aus	APPR	(PP*	aus	-	-	-	(708
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	christlichem	ADJA	*	christlich	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Geblüte	NN	*))	geblüte	-	-	-	708)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sei	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	getauft	VVPP	*	taufen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Sei	CARD	(NP*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Nathans	NN	*	nathan	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Tochter	NN	*)	tochter	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	mein	PPOSAT	(NP*	mein	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Vater	NN	*)))	vater	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*	gott	-	-	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gott	NN	(VROOT(PSEUDO*	gott	-	-	-	(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mein	PPOSAT	(NP*	mein	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vater	NN	*))	vater	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sittah	NE	*	sittah	-	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sittah	NE	(VROOT(PSEUDO(MPN*	sittah	-	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sieh	VVIMP	*	sieh	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	aufs	APPRART	*	auf	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	neu	ADJD	*	neu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	deinen	PPOSAT	*	deinen	pl	neut	-	(949|(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Füßen	NN	*	fuß	pl	neut	-	949)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Recha	NE	(VROOT(PSEUDO(MPN*	recha	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(CO(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*))	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	steh	XY	(VROOT(PSEUDO*	steh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Mein	PPOSAT	(S(NP*	mein	sg	masc	-	(7|(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bruder	NN	*)	bruder	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	kömmt	VVFIN	*)	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	steh	XY	(VROOT(PSEUDO*	steh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO(CNP*	saladin	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vorigen	NN	*))	vorige	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gibts	ADV	*	gibts	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hier	ADV	(NP*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sittah	NE	*))	sittah	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sich	PRF	*))	sich	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gott	NN	(VROOT(PSEUDO*	gott	-	-	-	(209)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ists	ADV	*	ists	-	-	-	(973)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	weißt	VVFIN	*	weißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*)	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Unsers	PPOSAT	(VROOT(PSEUDO(NP*	unser	-	-	-	(973|(1|(317)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathans	NN	*	nathan	sg	*	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Tochter	NN	*)	tochter	*	*	-	973)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fehlt	VVFIN	*	fehlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPER	*)	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Komm	VVIMP	(VROOT(PSEUDO(S*	komm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dir	PPER	*)	dir	sg	*	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Kind	NN	*)	kind	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	(NP*	der	sg	masc	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sultan	NN	*)	sultan	sg	masc	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*))	recha	-	-	-	(2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	die	PRELS	(VROOT(PSEUDO(CO(S*	der	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sich	PRF	*	sich	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	den	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Knieen	NN	*	kniee	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Saladins	NE	*	saladin	sg	masc	-	(974|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Füßen	NN	*))	fuß	sg	masc	-	974)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	schleppt	VVFIN	*)	schleppen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	(VP(NP*	der	sg	masc	-	(57
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Kopf	NN	*)	kopf	sg	masc	-	57)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zur	APPRART	(PP*	zu	sg	fem	-	(766
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Erde	NN	*)	erde	sg	fem	-	766)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	gesenkt	VVPP	*))	senken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	steh	VVFIN	*	steh	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auf	PTKVZ	*)	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nicht	PTKNEG	(VROOT(PSEUDO(VP(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eher	ADV	*))	eher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mag	VMFIN	(S*	mögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	eher	ADV	*	eher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Des	NN	*)	der	sg	neut	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sultans	NE	(S(NP*	sultan	sg	neut	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Antlitz	NE	*)	antlitz	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	erblicken	VVINF	*))	erblicken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eher	ADV	(S*	eher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Den	ART	(NP*	der	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Abglanz	NN	*	abglanz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ewiger	ADJA	(NP*	ewig	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Gerechtigkeit	NN	*)	gerechtigkeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Güte	NN	*	güte	sg	-	-	(40)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	(PP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	seinen	PPOSAT	*	sein	pl	neut	-	(245|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Augen	NN	*)	auge	pl	neut	-	245)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Auf	APPR	(VP(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	seiner	PPOSAT	*	sein	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Stirn	NN	*)	stirn	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	bewundern	VVINF	*))))	bewundern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Steh	NE	(VROOT(PSEUDO(S*	steh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	steh	VVFIN	*	steh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auf	PTKVZ	*)	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Eh	XY	(VROOT(PSEUDO*	eh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	(S*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	verspricht	VVFIN	*)	versprechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Komm	VVIMP	*	komm	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	verspreche	VVFIN	*)	versprechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Sei	NN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	was	PWS	*	was	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	will	VMFIN	*)	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mehr	ADV	*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	weniger	ADV	*	weniger	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Als	KOUS	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	meinen	PPOSAT	*	mein	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Vater	NN	*	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mir	PPER	*	sich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	lassen	VVINF	*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Mich	PPER	*	mich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	weiß	VVFIN	*	weißn	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wer	PWS	*	wer	sg	masc	-	(975
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mein	PPOSAT	*	mein	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Vater	NN	*	vater	sg	masc	-	975)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Zu	NE	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sein	PPOSAT	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	verlangt	VVPP	*	verlangen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	–	ADJD	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	verlangen	VVINF	*	verlangen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wills	KON	(VROOT(PSEUDO(VP(AVP*	wills	-	-	-	(975)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auch	ADV	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nicht	NN	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wissen	VVINF	*)	wissen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	(VROOT(PSEUDO(S*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	macht	VVFIN	*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	(NP*	nur	-	-	-	(607
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Blut	NN	*	blut	sg	neut	-	607)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Den	ART	(NP*	der	sg	masc	-	(976
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Vater	NN	*)))	vater	sg	masc	-	976)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nur	ADV	(VROOT(PSEUDO(NP*	nur	-	-	-	(607
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Blut	NN	*)	blut	sg	neut	-	607)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(S*	der	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	aufhebt	VVFIN	*)	aufheben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	merke	VVFIN	*	merken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wer	PWS	(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	grausam	ADJD	*	grausam	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dir	PPER	(NP*	dir	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	selbst	ADV	*))	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	VVFIN	(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	dir	PPER	*	dir	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	selbst	ADV	(VP(NP*	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Dergleichen	NN	*)	dergleichen	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	den	ART	*	der	sg	masc	-	(51
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Kopf	NN	*)	kopf	sg	masc	-	51)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	setzen	VVINF	*)))	setzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	*	es	sg	neut	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	(VP*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	(AP*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	völlig	ADJD	*)	völlig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ausgemacht	VVPP	*))	ausmachen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	erwiesen	VVPP	*	erweisen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Muß	VMFIN	*	müssen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Daja	NE	*	daja	-	-	(PER*)	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	meiner	PPOSAT	*	mein	sg	fem	-	(977|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Amm	NN	*	amm	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	977)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Es	PPER	*	es	sg	neut	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	haben	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Deiner	PPOSAT	(VROOT(PSEUDO(NP*	deiner	-	-	-	(977|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Amme	NN	*)	amme	-	-	-	977)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	*	der	sg	fem	-	(977
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	es	PPER	*	es	sg	neut	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sterbend	ADJD	*	sterbend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	vertrauen	VVINF	*	vertrauen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	*	sich	sg	-	-	(977)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	verbunden	VVPP	*	verbinden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	fühlte	VVFIN	*	fühlen	sg	-	-	977)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gar	ADV	(VROOT(PSEUDO(S(ISU*	gar	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sterbend	ADJD	*))	sterbend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nicht	PTKNEG	(S*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	faselnd	ADJD	(AP*	faselnd	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*))	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wärs	APPRART	*	wär	sg	*	-	(686)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wahr	PTKVZ	*	wahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ja	PTKANT	(S*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	(CNP(NP*	der	sg	neut	-	(607
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Blut	NN	*)	blut	sg	neut	-	607)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	das	ART	(NP*	der	sg	neut	-	(607
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Blut	NN	*	blut	sg	neut	-	607)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	allein	ADV	*)))	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Macht	NN	(S*	macht	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	lange	ADV	(AVP*	lange	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	den	ART	(NP*	der	sg	masc	-	(976
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Vater	NN	*)	vater	sg	masc	-	976)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	macht	VVFIN	(VROOT(PSEUDO(S*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kaum	ADV	*	kaum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Den	ART	(NP*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vater	NN	*	vater	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	eines	ART	(NP*	ein	sg	masc	-	(856
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Tieres	NN	*)))	tier	sg	masc	-	856)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	gibt	VVFIN	(VROOT(PSEUDO(S*	geben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	zum	APPRART	(NP(PP*	zu	sg	neut	-	(445
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	höchsten	ADJA	*)	hoch	sg	neut	-	445)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Das	ART	*	der	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	erste	ADJA	*	erster	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Recht	NN	*)	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sich	PRF	*	sich	pl	-	-	(445)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	diesen	PDAT	(NP*	dieser	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Namen	NN	*)	name	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Erwerben	NN	*))	erwerben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Laß	VVIMP	(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dir	PPER	*	dir	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	bange	ADJD	(VP*	bange	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sein	VAINF	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	weißt	VVFIN	*	weißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sobald	KOUS	(VROOT(PSEUDO(S*	sobald	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	(NP*	der	sg	masc	-	(978|(698
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Väter	NN	(MPN*	vater	sg	masc	-	698)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zwei	CARD	*))	zwei	-	-	-	978)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sich	PRF	(VP*	sich	sg	-	-	(978)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	um	APPR	(PP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dich	PPER	*)	dich	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	streiten	VVINF	*))	streiten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	laß	VVFIN	(S*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	-	-	-	(978)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	beide	PIS	*)	beide	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	nimm	ADJD	(NP*	nimm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Den	ART	*	der	pl	neut	-	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	dritten	ADJA	*)	dritter	-	-	-	7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nimm	NE	(NP*	nimm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dann	ADV	(NP*	dann	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*)	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	deinem	PPOSAT	*	dein	sg	masc	-	(979|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Vater	NN	*))	vater	sg	masc	-	979)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	XY	*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	tu	XY	*	tu	-	-	-	(980
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	s	XY	*	--	-	-	-	980)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	o	XY	*	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	tu	XY	*	tu	-	-	-	(980
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	s	XY	*	--	-	-	-	980)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(980|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	(979
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	guter	ADJA	*	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Vater	NN	*	vater	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	979)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Recht	NN	(NP*	recht	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	guter	ADJA	(NP*	gut	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Vater	NN	*)))	vater	sg	masc	-	980)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Noch	ADV	(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	viel	ADV	*)	viel	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	was	PIAT	(NP*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Bessers	NN	*)	besser	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	bei	PTKVZ	*)	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	brauchst	VVFIN	*)	brauchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	(NP*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Der	ART	*	der	sg	masc	-	(698
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Väter	NN	*	vater	sg	masc	-	698)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	überhaupt	ADV	*)	überhaupt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	pl	*	-	(698)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sterben	VVFIN	*)	sterben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bei	APPR	(VROOT(PSEUDO(S(PP*	bei	-	-	-	(158
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Zeiten	NN	*)	zeit	pl	fem	-	158)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	*	sich	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nach	APPR	(PP*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	einem	ART	*	ein	sg	masc	-	(981)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	umgesehn	TRUNC	*)	umgesehn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Der	PRELS	(S*	der	sg	masc	-	(981)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	uns	PPER	*)	uns	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	um	APPR	(VP(PP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	die	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Wette	NN	*)	wette	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	leben	VVINF	*)	leben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	will	VMFIN	*))	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kennst	VVFIN	(VROOT(PSEUDO(S*	kennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	keinen	PIAT	*))	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mach	VVFIN	(VROOT(PSEUDO(S*	mach	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	pl	*	-	(1045)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	erröten	VVINF	*)	erröten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	*	der	sg	neut	-	(982)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hab	VVFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	allerdings	ADV	*	allerdings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	vorgesetzt	VVPP	*	vorsetzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Erröten	NN	(VROOT(PSEUDO(DL*	erröten	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	macht	VVFIN	(S*	machen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Häßlichen	NN	*)	häßliche	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schön	ADJD	*))	schön	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sollte	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Schöne	NE	*	schöne	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	schöner	ADJD	(VP*	schön	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	machen	VVINF	*)))	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(CS(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	habe	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	deinen	PPOSAT	(NP*	dein	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Vater	NN	*	vater	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nathan	NE	*	nathan	-	-	(PER*)	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*))	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Noch	ADV	(S*	noch	-	-	-	(981
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	einen	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	–	NN	*)))	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	einen	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	noch	ADV	(VP(AVP*	noch	-	-	-	981)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	hierher	PROAV	*)	hierher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	bestellt	VVPP	*)	bestellen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Errätst	VVFIN	*	errätst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(981)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hierher	PROAV	*	hierher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wirst	VVFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Erlauben	NN	(NP*	erlauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Sittah	NE	*))	sittah	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bruder	NN	(VROOT(PSEUDO*	bruder	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Vor	APPR	(S*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*	ihm	sg	masc	-	(981)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	recht	ADV	*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sehr	ADV	*	sehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	errötest	VVFIN	*)	errötest	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	liebes	ADJA	(NP*	lieb	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Mädchen	NN	*))	mädchen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Vor	APPR	*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wem	PWS	*	wem	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	erröten	VVFIN	*	erröten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kleine	ADJA	(VROOT(PSEUDO(NP*	klein	sg	fem	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Heuchlerin	NN	*)	heuchlerin	sg	fem	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S(AVP*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*)	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	erblasse	VVFIN	*	erblassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	lieber	ADV	*)	lieber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	KOKOM	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	willst	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kannst	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Eine	ART	*	ein	sg	fem	-	(983
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sklavin	NN	*	sklavin	sg	fem	-	983)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	tritt	VVFIN	*	treten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	herein	PTKVZ	*	herein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nahet	VVFIN	*	nahet	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sich	PRF	*	sich	sg	-	-	(983)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Sittah	NE	*	sittah	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Sie	PPER	*	sie	pl	*	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	etwa	ADV	*	etwa	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	schon	ADV	*	schon	-	-	-	(984
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	da	PTKVZ	*	da	-	-	-	984)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Eine	ART	(VROOT(PSEUDO(CS(S(NP*	ein	sg	fem	-	(983
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sklavin	NN	*)	sklavin	sg	fem	-	983)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	tritt	VVFIN	*	treten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	herein	PTKVZ	*)	herein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nahet	VVFIN	(S*	nahet	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sich	PRF	*))	sich	sg	-	-	(983)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Sittah	NE	*	sittah	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*))	sittah	-	-	-	(307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	zur	APPRART	(VROOT(PSEUDO(PP*	zu	sg	fem	-	(983
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sklavin	NN	*)	sklavin	sg	fem	-	983)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gut	ADJD	(VROOT(PSEUDO*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	laß	VVFIN	(VROOT(PSEUDO(S*	lassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	sg	fem	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	herein	PTKVZ	*)	herein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sie	PPER	(S*	sie	pl	*	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	(NP*	es	sg	neut	-	(984)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Bruder	NN	*))	bruder	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(CNP*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	fem	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Tempelherr	NN	*	tempelherr	sg	fem	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	den	ART	*	der	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Vorigen	NN	*)))	vorige	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	XY	(VROOT(PSEUDO*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	meine	PPOSAT	(NP*	mein	pl	fem	-	(411|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	guten	ADJA	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	lieben	ADJA	*	lieb	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Freunde	NN	*)	freund	pl	masc	-	411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Dich	PPER	(S*	dich	sg	*	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Dich	PPER	(NP*	dich	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Nathan	NN	*)	nathan	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	muß	VMFIN	*	müssen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	vor	APPR	(PP*	vor	-	-	-	(43
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	allen	PIAT	*	aller	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Dingen	NN	*))	ding	pl	masc	-	43)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Bedeuten	NN	(NP*	bedeute	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	daß	KOUS	(VP(S*	daß	-	-	-	(985
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	du	PPER	*	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	sobald	KOUS	(S*	sobald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	du	PPER	*	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	willst	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	985)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Dein	PPOSAT	(VP(NP*	dein	sg	neut	-	(489|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	Geld	NN	*))	geld	sg	neut	-	489)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	kannst	VMFIN	*))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	wiederholen	VVINF	*	wiederholen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	lassen	VVINF	*))	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sultan	NE	(VROOT(PSEUDO(MPN*	sultan	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	steh	VVFIN	*	steh	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	(PP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	deinen	PPOSAT	*	dein	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Diensten	NN	*))	dienst	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sultan	NE	(VROOT(PSEUDO(MPN*	sultan	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	*	der	sg	fem	-	(890
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Karawan	NE	*	karawan	sg	fem	-	890)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	da	ADV	*	da	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	(VP(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	reich	ADJD	*	reich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	als	KOUS	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	lange	ADV	*	lange	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gewesen	VAPP	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Komm	NN	*	komm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sag	VVFIN	*	sag	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	du	PPER	*	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	brauchst	VVFIN	*	brauchen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	recht	ADJD	*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	was	PIAT	*	was	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Großes	NN	*	groß	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	unternehmen	VVINF	*	unternehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPER	*	ihr	sg	fem	-	(589)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihr	PPER	(VP*	ihr	sg	fem	-	(589)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Ihr	PPER	(NP*	ihr	pl	*	-	(589
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Handelsleute	NN	*	handelsleute	pl	-	-	589)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	könnt	VVFIN	(S*	können	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	des	ART	(NP*	der	sg	masc	-	(346
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	baren	ADJA	*	bar	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Geldes	NN	*)	geld	sg	masc	-	346)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Zu	APPR	(AVP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	viel	ADV	*)))	viel	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	nie	ADV	*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	haben	VAINF	*))	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	warum	PWAV	*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zuerst	ADV	*	zuerst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dieser	PDAT	*	dieser	sg	fem	-	(985
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Kleinigkeit	NN	*))	kleinigkeit	sg	fem	-	985)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sehe	VVFIN	*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dort	ADV	*	dort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ein	ART	*	ein	sg	masc	-	(54
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Aug	NN	*	aug	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	54)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Tränen	NN	*	träne	pl	fem	-	(529)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	das	PDS	*	der	sg	neut	-	(54)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	trocknen	VVINF	*	trocknen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	mir	PPER	*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Weit	NN	*	weit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	angelegner	ADJD	*	angelegn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	(VROOT(PSEUDO(S*	gehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Recha	NE	*)	recha	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	PTKVZ	*)	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hast	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	geweint	VVPP	*)	weinen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	fehlt	VVFIN	*	fehlen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dir	PPER	*)	dir	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bist	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	meine	PPOSAT	(NP*	mein	sg	fem	-	(34|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Tochter	NN	*))	tochter	sg	fem	-	34)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(1|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wir	PPER	(VROOT(PSEUDO(S*	wir	pl	*	-	(105)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	verstehen	VVFIN	*	verstehen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	uns	PRF	*)	uns	pl	-	-	(105)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Genug	NN	(VROOT(PSEUDO*	genug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sei	NN	*	sei	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	heiter	PTKVZ	*)	heiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sei	NN	(VROOT(PSEUDO(VP*	sei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gefaßt	VVPP	*)	fassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	dein	PPOSAT	(NP*	dein	sg	masc	-	(60|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Herz	NN	*)	herz	sg	masc	-	60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nur	ADV	(AVP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dein	ADV	*	dein	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ist	VAFIN	*)	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	deinem	PPOSAT	(NP*	dein	sg	masc	-	(60|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Herzen	NN	*)	herz	sg	masc	-	60)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nur	ADV	(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kein	PIAT	*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Verlust	NN	*)	verlust	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	droht	VVFIN	*)	drohen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Dein	PPOSAT	(NP*	dein	sg	masc	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Vater	NN	*)	vater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Dir	PPER	*	dir	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	unverloren	ADJD	*)	unverloren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Keiner	PIS	(VROOT(PSEUDO(CNP*	keiner	sg	masc	-	(986
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	keiner	PIS	(NP*	keiner	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sonst	ADV	*))	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	986)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sonst	ADV	(VROOT(PSEUDO(NP*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	keiner	PIS	*)	keiner	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(S*)	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hab	VVFIN	*	hab	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	betrogen	VVPP	*	betrügen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(CS(S(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	man	PIS	(VP*	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	verlieren	VVINF	*))	verlieren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	fürchtet	VVFIN	*)	fürchten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Man	PIS	(VP(VP*	man	sg	*	-	(52)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	besitzen	VVINF	*))	besitzen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nie	ADV	*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	geglaubt	VVPP	*))	glauben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	nie	ADV	(S*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Gewünscht	NN	*))	gewünscht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Recht	NN	(NP*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	recht	ADV	(VROOT(PSEUDO(S*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(986)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ändert	VVFIN	*)	ändern	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Nathan	NE	(CO*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Das	PDS	(S*	der	sg	neut	-	(986)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	ändert	VVFIN	*	ändern	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	alles	PIS	*))	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Saladin	NE	(NP*	saladin	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wir	PPER	(S*	wir	pl	*	-	(411)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	kamen	VVFIN	*	kommen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dein	PPOSAT	*	dein	sg	neut	-	(465|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Geheiß	NN	*)))	geheiß	sg	neut	-	465)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Allein	ADV	(VROOT(PSEUDO(S(PP*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hatte	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dich	PPER	(VP*	dich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Verleitet	VVPP	*)))	verleiten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	itzt	ADJD	(S*	itzt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	bemüh	VVFIN	*	bemühn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dich	PRF	*	dich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	weiter	PTKVZ	*))	weiter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gach	ADJD	*	gach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	junger	ADJA	(NP*	jung	pl	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Mann	NN	*))	mann	*	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Soll	VMFIN	(S*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	*	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Dir	PPER	(VP*	dir	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	entgegen	PTKVZ	*	entgegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	kommen	VVINF	*))	kommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	alles	PIS	(VROOT(PSEUDO(NP*	alle	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PPER	(NP*	dich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Erraten	NN	*	errater	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hörst	VVFIN	*	hörst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*)	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	siehst	VVFIN	(VROOT(PSEUDO(S*	sehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ja	ADV	(NP*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Sultan	NE	*))	sultan	-	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	PTKA	*	ei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wahrlich	ADJD	*	wahrlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Schlimm	NN	(S*)	schlimm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	genug	PIAT	(NP*	genug	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	deiner	PPOSAT	(NP*	dein	sg	masc	-	(1020|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Sache	NN	*)	sache	sg	masc	-	1020)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Du	PPER	*	du	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	gewisser	ADJD	*	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	warst	VVFIN	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ichs	NE	(NP*	ich	-	-	-	(987)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*))	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	irgend	ADV	*)	irgend	-	-	-	(988
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	eine	ART	(NP*	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Wohltat	NN	*)	wohltat	sg	fem	-	988)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	trotzt	VVFIN	*)	trotzen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Nimmt	VVFIN	*	nehmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	sie	PPER	*	sie	sg	fem	-	(988)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	zurück	PTKVZ	*)	zurück	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S(S*	was	sg	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gerettet	VVFIN	*)	retten	-	-	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Deswegen	NE	*	deswegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	dein	PPOSAT	(NP*	dein	-	-	-	(696|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Eigentum	NN	*))	eigentum	-	-	-	696)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sonst	ADV	*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Der	ART	*	der	sg	masc	-	(699
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Räuber	NN	*	räuber	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	den	PRELS	*	der	sg	masc	-	(699)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sein	PPOSAT	*	sein	sg	masc	-	(699)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Geiz	NN	*	geiz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	ins	APPRART	*	in	sg	neut	-	(253
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Feuer	NN	*	feuer	sg	neut	-	253)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	jagt	VVFIN	*	jagen	-	-	-	699)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	So	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	gut	ADV	*	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Held	NN	*	held	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	wie	KOKOM	*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	du	PPER	*	du	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auf	APPR	(VROOT(PSEUDO(AP(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Recha	NE	*)	recha	-	-	(PER*)	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zugehend	ADJD	*	zugehend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	um	KOUI	(VP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sie	PPER	*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dem	ART	(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Tempelherrn	NN	*)	tempelherr	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zuzuführen	VVIZU	*))	zuführen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Komm	NN	(VROOT(PSEUDO(CNP*	komm	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	liebes	ADJA	(NP*	lieb	pl	neut	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Mädchen	NN	*)	mädchen	pl	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Komm	NN	*)	komm	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nimms	NE	(VROOT(PSEUDO(NP*	nimm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*))	ihm	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	genau	ADJD	*)	genau	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	anders	ADV	*	anders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	minder	ADV	*	minder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	warm	ADJD	*	warm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	stolz	ADJD	*	stolz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	hätt	VAFIN	*	hätt	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	es	PPER	*	es	sg	neut	-	(989)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	bleiben	VVINF	*	bleiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	lassen	VVINF	*	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	dich	PPER	*	dich	sg	*	-	(989|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	retten	VVINF	*	retten	-	-	-	989)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mußt	VVFIN	*	mussen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	eins	PIS	*	eins	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	fürs	APPRART	(VP(PP*	für	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	andre	ADJA	*)	andre	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	rechnen	VVINF	*))	rechnen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Komm	NN	*	komm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Beschäm	VVFIN	(VROOT(PSEUDO(S*	beschäm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*)	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	tu	XY	*	tu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	*	was	sg	neut	-	(990
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	tun	VVINF	*	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	geziemte	ADJA	*	geziemt	-	-	-	990)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bekenn	NE	*	bekenn	-	-	-	(990
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	deine	PPOSAT	*	dein	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Liebe	NN	*	liebe	sg	fem	-	990)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	trage	VVFIN	(VROOT(PSEUDO(S*	tragen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PPER	*	dich	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	an	PTKVZ	*)	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dich	PRF	*	dich	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	verschmäht	VVFIN	*	verschmähen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	dirs	ADJD	(S*	dir	-	-	-	(1051)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	je	ADV	*	je	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	vergißt	VVFIN	*	vergessen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Wie	PWAV	(S*	wie	-	-	-	(991
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	ungleich	ADV	(AVP*	ungleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	mehr	ADV	*)	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	diesem	PDAT	*	dieser	sg	masc	-	(990
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Schritte	NN	*)	schritt	sg	masc	-	990)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	du	PPER	*	du	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Für	APPR	(VP(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	ihn	PPER	*)	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	getan	VVPP	*)	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	als	KOUS	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	für	APPR	(VP(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	dich	PPER	*)	dich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	(ISU*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	.	$.	*)	--	-	-	-	991)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	Er	PPER	(CNP*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	denn	KON	*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	für	APPR	(NP(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	dich	PPER	*)))	dich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	getan	VVPP	*)))))	tun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(VP(NP*	ein	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wenig	PIS	*)	wenig	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	*	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Beräuchern	NN	*	beräucher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	lassen	VVINF	*)	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Rechts	ADV	*	recht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	KON	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Er	PPER	(NP*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	meines	PPOSAT	(PP(NP*	mein	sg	masc	-	(131|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Bruders	NN	*)	bruder	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	meines	PPOSAT	(NP*	mein	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Assad	NN	*	assad	sg	masc	-	131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*))	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nichts	PIS	*))	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	trägt	VVFIN	*	tragen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	seine	PPOSAT	(NP*	sein	sg	fem	-	(284|(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Larve	NN	*)	larve	sg	fem	-	284)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sein	PPOSAT	(NP*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Herz	NN	*))	herz	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Komm	NN	(VROOT(PSEUDO*	komm	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Liebe	NN	*	liebe	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Liebe	NN	*	liebe	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(CS(S*	es	sg	neut	-	(990)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	deine	PPOSAT	*	dein	sg	fem	-	(79|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Dankbarkeit	NN	*)	dankbarkeit	sg	fem	-	79)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	immer	ADV	(AVP*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wenig	PIAT	*))	wenig	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Noch	ADV	(NP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	immer	ADV	*	immer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nichts	PIS	*))	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Halt	VVIMP	(VROOT(PSEUDO(S*	halt	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Saladin	NN	*)	saladin	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	halt	VVFIN	*	halen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sittah	NE	*	sittah	-	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*)	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Hier	ADV	*	hier	-	-	-	(992
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	*	noch	-	-	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	einer	PIS	*	ein	sg	fem	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sprechen	VVINF	*	sprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	992)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	leugnet	VVFIN	*	leugnen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*)	der	sg	neut	-	(992)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Unstreitig	ADJD	*	unstreitig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	So	ADV	*	so	-	-	-	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	einem	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Pflegevater	NN	*	pflegevater	sg	masc	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	eine	ART	*	ein	sg	fem	-	(36
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Stimme	NN	*	stimme	sg	fem	-	36)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKVZ	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	(36
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	erste	ADJA	*)	erster	sg	fem	-	36)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	willst	VMFIN	*))	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	(S*	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hörst	VVFIN	*	hörst	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(NP*	der	sg	masc	-	(871
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Sache	NN	*)))	sache	sg	masc	-	871)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ganze	ADJA	(NP*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Lage	NN	*)	lage	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(S(VP(AP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ganz	ADV	*)))	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	rede	VVFIN	*	reden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*))	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	*	es	sg	neut	-	(993)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	*	ein	sg	masc	-	(994
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	andrer	ADJA	*	andrer	sg	masc	-	994)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Weit	NN	*	weit	-	-	-	(994
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	weit	ADJD	*	weit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	andrer	ADJA	*	andrer	sg	masc	-	994)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	den	PRELS	*	der	sg	masc	-	(993
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ich	PPER	*	ich	sg	*	-	993)|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Saladin	NN	*	saladin	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Doch	KON	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	vorher	ADV	*	vorher	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	hören	VVINF	*	hören	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	bitte	PTKANT	*	bitte	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPOSAT	(VROOT(PSEUDO(NP*	ihr	sg	masc	-	(61|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bruder	NN	*)	bruder	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Rechas	NE	(VROOT(PSEUDO(NP*	rechas	-	-	-	(61|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bruder	NN	*)	bruder	-	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(61|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bruder	NN	*)	bruder	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hab	VVFIN	*	hab	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	einen	ART	(NP*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bruder	NN	*))	bruder	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	aus	APPR	(VROOT(PSEUDO(AP(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seiner	PPOSAT	*	sein	sg	fem	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wilden	ADJA	*	wild	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	stummen	ADJA	*	stumm	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Zerstreuung	NN	*)	zerstreuung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	auffahrend	ADJD	*)	auffahrend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	(VROOT(PSEUDO*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wo	PWAV	(VROOT(PSEUDO(S*	wo	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Er	PPER	(NP*	er	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	dieser	PDAT	(NP*	dieser	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Bruder	NN	*)))	bruder	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(S*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	hier	ADV	*)	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sollt	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ja	ADV	*	ja	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	treffen	VVINF	*	treffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(NP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geduld	NN	*)	geduld	sg	fem	-	(681)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	äußerst	ADV	(VROOT(PSEUDO(AP*	äußerst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bitter	ADJD	*)	bitter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(VP*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	einen	ART	(NP*	ein	sg	masc	-	(698
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Vater	NN	*)	vater	sg	masc	-	698)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	aufgebunden	VVPP	*))	aufbinden	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	–	PPER	(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	wird	VAFIN	*	werden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Er	PPER	(VP(NP*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	keinen	PIAT	*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Bruder	NN	*	bruder	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	für	APPR	(PP*	für	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	sie	PPER	*))	sie	pl	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	finden	VVINF	*)))	finden	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S*	der	sg	neut	-	(995)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	(VP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gefehlt	VVPP	*))	fehlen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Christ	NE	(VROOT(PSEUDO*	christ	-	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ein	ART	(VROOT(PSEUDO(S(NP*	ein	sg	masc	-	(995
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	niedriger	ADJA	*)	niedrig	sg	masc	-	995)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Verdacht	NN	*)	verdacht	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wär	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	über	APPR	(PP*	über	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Assads	NE	*	assad	pl	fem	(LOC*)	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Lippen	NN	*)	lippe	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Gekommen	NN	*	gekommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gut	ADJD	*	gut	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	fahr	ADJD	(VROOT(PSEUDO(S*	fahr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	fort	PTKVZ	*)	fort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Verzeih	VVFIN	(VROOT(PSEUDO(S*	verzeih	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihm	PPER	*)	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	verzeih	VVFIN	*	verzeih	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gern	ADV	*)	gern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	was	PRELS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wir	PPER	*	wir	pl	*	-	(459)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	An	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	seiner	PPOSAT	*	sein	sg	fem	-	(806|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Stell	NN	*	stellen	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	806)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	seinem	PPOSAT	*	sein	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Alter	NN	*	alter	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	dächten	VMFIN	*	denken	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Freundschaftlich	ADJD	(VROOT(PSEUDO(AP*	freundschaftlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*)	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zugehend	ADJD	*)	zugehend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Natürlich	ADV	(VROOT(PSEUDO*	natürlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ritter	NN	*	ritter	-	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Argwohn	NE	*	argwohn	sg	masc	-	(796)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	folgt	VVFIN	*	folgen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	auf	APPR	*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Mißtraun	NE	*	mißtraun	sg	masc	-	(700)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PRF	(VP*	mich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Euers	NN	(NP*	euer	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wahren	ADJA	(NP*	wahr	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Namens	NN	*))	name	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	gleich	ADV	*	gleich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Gewürdigt	VVPP	*)	gewürdigt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	hättet	VAFIN	*)	hätten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	kein	PIAT	(NP*	kein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Stauffen	NN	*))	stauffen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*)	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Heißt	NE	(VROOT(PSEUDO(S(NP*	heißen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Curd	NE	*)	curd	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Stauffen	NE	*)	stauff	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	heiß	ADJD	*	heiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*)	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Heißt	VVFIN	(VROOT(PSEUDO(S*	heißen	-	-	-	(996
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Leu	NN	*	leu	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Filneck	NE	*))	filneck	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	996)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	stutzt	VVFIN	*)	stutzen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mit	APPR	(VROOT(PSEUDO(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Recht	NN	*)	recht	sg	neut	-	(37)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*)	der	sg	neut	-	(996)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	ADV	*	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Noch	ADV	(S(CO(AVP*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mehr	ADV	*))	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	(VP*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	sagen	VVINF	*)	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	kann	VMFIN	*	können	sg	-	-	1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Euch	PPER	*	euch	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	keiner	PIAT	(NP*	keiner	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Lüge	NN	*))))	lüge	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Daß	KOUS	*	daß	-	-	-	(997
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	jener	PDAT	*	jener	sg	masc	-	(468
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Nam	NE	*	nam	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	468)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	ebenfalls	ADV	*	ebenfalls	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	gebührt	VVPP	*	gebühren	-	-	-	997)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(997)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sollt	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	(VP*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	meinen	VVINF	*))	meinen	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	(	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Das	PDS	*	der	sg	neut	-	(997)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	hieß	VVFIN	*	heißen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Gott	NN	*	gott	sg	masc	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	ihn	PPER	*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sprechen	VVINF	*	sprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	)	$(	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Eure	PPOSAT	(NP*	euer	sg	fem	-	(478|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mutter	NN	*)	mutter	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	VAFIN	*	–	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	die	PDS	(S*	der	sg	fem	-	478)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	eine	ART	(NP*	ein	sg	fem	-	(875
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Stauffin	NN	*)))	stauffin	sg	fem	-	875)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPOSAT	*	ihr	sg	masc	-	(471|(478)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bruder	NN	*	bruder	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euer	FM	*	euer	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Ohm	FM	*	ohm	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	PRELS	*	der	sg	masc	-	(471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	*	euch	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	erzogen	VVPP	*	erziehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Dem	PWS	*	der	sg	neut	-	(471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Eure	PPOSAT	*	euer	sg	*	-	(709|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Eltern	NN	*	eltern	pl	-	-	709)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	Euch	PPER	*	euch	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Deutschland	NE	*	deutschland	sg	neut	(LOC*)	(519)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	ließen	VVFIN	*	lassen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	Als	NN	*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	dem	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	rauhen	ADJA	*	rauh	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	Himmel	NN	*	himmel	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	dort	ADV	*	dort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	vertrieben	VVPP	*	vertreiben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	Sie	PPER	*	sie	pl	*	-	(709)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	28	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	29	hier	ADV	*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	30	zu	APPR	*	zu	-	-	-	(14
Nathan.xml.rkpt.0.CoNLL2012.conll	000	31	Lande	NN	*	land	-	-	-	14)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	32	kamen	VVFIN	*	kommen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	33	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	34	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	35	Der	ART	*	der	sg	masc	-	(471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	36	Hieß	NN	*	hieß	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	37	Curd	NE	*	curd	sg	masc	-	(877
Nathan.xml.rkpt.0.CoNLL2012.conll	000	38	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	39	Stauffen	NN	*	stauff	pl	masc	-	877)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	40	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	41	mag	VMFIN	*	mögen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	42	an	APPR	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	43	Kindesstatt	NN	*	kindesstatt	sg	neut	-	(124)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	44	Vielleicht	ADV	*	vielleicht	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	45	Euch	PPER	*	euch	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	46	angenommen	VVPP	*	annehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	47	haben	VAFIN	*	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	48	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Seid	VAFIN	(S*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	lange	ADV	*)	lange	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	(NP*	schon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ihm	PPER	*)	ihm	sg	masc	-	(471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	nun	ADV	*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	auch	ADV	(AP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	herüber	PIAT	*)	herüber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Gekommen	NN	*)	gekommen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	lebt	VVFIN	*	leben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*)	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	soll	VMFIN	*	sollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	(VP*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sagen	VVINF	*))	sagen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Allerdings	ADV	(S*)	allerdings	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ists	ADV	*	ists	-	-	-	(675)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S(NP*	er	sg	masc	-	(471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	tot	ADJD	*)	tot	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	kam	VVFIN	*	kommen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	erst	ADV	*	erst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	letzten	ADJA	*	letzter	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Verstärkung	NN	*	verstärkung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	unsers	PPOSAT	(NP*	unsers	sg	masc	-	(267
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Ordens	NN	*)))	orden	sg	masc	-	267)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	aber	KON	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	$(	*	–	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mit	APPR	*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	diesem	PDAT	*	dieser	sg	masc	-	(675
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	allen	PIAT	*	aller	sg	masc	-	675)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Rechas	NN	*	recha	sg	*	-	(61|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Bruder	NN	*	bruder	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	schaffen	VVINF	*	schaffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Euer	ADJA	(VROOT(PSEUDO*	euer	sg	masc	-	(476|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Vater	NN	*	vater	sg	masc	-	476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	auch	ADV	(VROOT(PSEUDO(VP(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	den	ART	*	der	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Habt	NN	*)	haben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	sg	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	gekannt	VVPP	*)	kennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(NP(AP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	den	ART	*))	der	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(998|(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	mein	PPOSAT	(NP*	mein	sg	masc	-	(848|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Freund	NN	*))	freund	sg	masc	-	998)|848)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	War	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Euer	PPOSAT	(NP*	euer	sg	*	-	(848|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Freund	NN	*))	freund	-	-	-	848)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ists	ADV	(VROOT(PSEUDO*	ist	-	-	-	(998)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	möglich	ADJD	(NP*	möglich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*)	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nannte	VVFIN	(VROOT(PSEUDO(S(S*	nannter	-	-	-	(999
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sich	PRF	*	sich	sg	-	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wolf	NE	(MPN*	wolf	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Filneck	NE	*))	filneck	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	aber	ADV	*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	kein	PIAT	(NP*	kein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Deutscher	NN	*))))	deutsch	sg	neut	-	999)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wißt	VVFIN	*	wissen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	(NP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*))	der	sg	neut	-	(999)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	War	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	einer	ART	(NP*	ein	sg	fem	-	(478
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Deutschen	NN	*)	deutsche	sg	fem	(MISC*)	478)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Vermählt	VVPP	*	vermählt	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	war	VAFIN	(S*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Eurer	PPOSAT	(NP*	eurer	sg	fem	-	(478|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Mutter	NN	*)	mutter	sg	fem	-	478)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	nur	ADV	(PP*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	nach	APPR	*	nach	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Deutschland	NE	*)	deutschland	sg	neut	(LOC*)	(519)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Auf	APPR	(VP(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	kurze	ADJA	*	kurz	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Zeit	NN	*)	zeit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	gefolgt	VVPP	*)))	folgen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(CO(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mehr	ADV	*))	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bitt	VVFIN	*	bitt	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	(CNP*	aber	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Rechas	NE	(NP*	rechas	sg	*	-	(61|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Bruder	NN	*))	bruder	*	*	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Rechas	NE	(VROOT(PSEUDO(NP*	rechas	sg	*	-	(61|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bruder	NN	*)	bruder	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Seid	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ich	PPER	(VROOT(PSEUDO(NP(AP*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihr	PPOSAT	*)	ihr	sg	-	-	(1000|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bruder	NN	*)	bruder	*	*	-	1000)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(NP*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mein	PPOSAT	(NP*	mein	sg	masc	-	(1000|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bruder	NN	*))	bruder	sg	masc	-	1000)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geschwister	NN	(VROOT(PSEUDO*	geschwister	-	-	-	(536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(NP*	sie	pl	*	-	(536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Geschwister	NN	*)	geschwister	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*))	recha	-	-	-	(2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	will	VMFIN	(VROOT(PSEUDO(S*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*)	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	PTKVZ	*)	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(61|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bruder	NN	*)	bruder	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	tritt	VVFIN	(VROOT(PSEUDO(S*	treten	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	zurück	PTKVZ	*)	zurück	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPOSAT	(VROOT(PSEUDO(NP*	ihr	sg	masc	-	(1000|(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bruder	NN	*)	bruder	sg	masc	-	1000)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*))	recha	-	-	-	(2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	hält	VVFIN	(VROOT(PSEUDO(S*	halten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	an	PTKVZ	*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wendet	VVFIN	*	wenden	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	sich	PRF	*	sich	sg	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Nathan	NE	*)))	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sein	VAINF	*	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sein	PPOSAT	(NP*	sein	sg	neut	-	(282|(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Herz	NN	*)	herz	sg	neut	-	282)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Weiß	NN	(NP*	weiße	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	(NP*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	davon	PROAV	*))	davon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wir	PPER	(S*	wir	pl	*	-	(1001|(105)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Betrieger	NN	*)	betrieger	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Gott	NN	(VROOT(PSEUDO*	gott	-	-	-	1001)|(24)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	zum	APPRART	(VROOT(PSEUDO(PP*	zu	-	-	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherrn	NN	*)	tempelherrn	-	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Betrieger	NN	(VROOT(PSEUDO*	betrieger	*	*	-	(105)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(1001)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	denkst	VVFIN	*	denken	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*)	du	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	kannst	VMFIN	(VROOT(PSEUDO(S*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	(VP*	du	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	denken	VVINF	*))	denken	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Betrieger	NN	(VROOT(PSEUDO(NP*	betrieger	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	alles	PIS	*	alle	sg	neut	-	(414)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	erlogen	VVPP	(VP*	erliegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	An	APPR	(S(PP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	dir	PPER	*)	dir	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Gesicht	NN	(CNP*	gesicht	-	-	-	(112)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Stimm	NN	*	stimm	sg	-	-	(477)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Gang	NN	*))))	gang	sg	masc	-	(413)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dein	PTKANT	*	dein	sg	neut	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S(VP*	so	-	-	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	eine	ART	(NP*	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Schwester	NN	*)	schwester	sg	fem	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	erkennen	VVINF	*)	erkennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wollen	VMFIN	*)	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Geh	XY	*	geh	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	sich	PRF	(VROOT(PSEUDO(AP*	sich	sg	-	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	demütig	ADJD	*	demütig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	(AP*	ihm	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	nahend	ADJD	*))	nahend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mißdeut	NE	*	mißdeut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	mein	PPOSAT	*	mein	sg	neut	-	(537|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Erstaunen	NN	*	erstaunen	sg	neut	-	537)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Sultan	NE	*	sultan	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Verkenn	NN	*	verkenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	*	in	-	-	-	(1002
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	einem	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Augenblick	NN	*	augenblick	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	dem	PRELS	*	der	sg	neut	-	1002)|(1002)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Du	PPER	*	du	sg	neut	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	schwerlich	ADJD	*	schwerlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	deinen	PPOSAT	*	dein	sg	masc	-	(131|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	Assad	NN	*	assad	-	-	-	131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	je	ADV	*	je	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	gesehen	VVPP	*	sehen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	ihn	PPER	*	ihn	sg	masc	-	(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	mich	PPER	*	mich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auf	APPR	(VROOT(PSEUDO(AP(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*)	nathan	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zueilend	ADJD	*)	zueilend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(CS(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nehmt	VVFIN	*)	nehmen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	gebt	VVFIN	(S*	geben	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	(NP*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Nathan	NE	*)))	nathan	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mit	APPR	(VROOT(PSEUDO(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	vollen	ADJA	*	voll	pl	fem	-	(450
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Händen	NN	*	hand	pl	fem	-	450)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	beides	PIS	*)	beide	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nein	PTKANT	*	nein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	sg	fem	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gebt	VVFIN	*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Mir	NE	*	sich	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	PIS	*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	als	KOKOM	(S*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mir	PPER	*	sich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	nehmt	VVFIN	*))	nehmen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	unendlich	ADJD	(VROOT(PSEUDO(AP*	unendlich	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mehr	PIS	*)	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Recha	NE	(VROOT(PSEUDO*	recha	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	um	APPR	(AP(PP*	um	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	*	der	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Hals	NN	*)	hals	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	fallend	ADJD	*)	fallend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	APPR	(VROOT(PSEUDO(PP*	ah	-	-	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	meine	PPOSAT	*	mein	sg	-	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Schwester	NN	*)	schwester	sg	neut	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	meine	PPOSAT	(VROOT(PSEUDO(NP*	mein	-	-	-	(2|(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Schwester	NN	*)	schwester	sg	masc	-	2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Blanda	NE	(VROOT(PSEUDO(MPN*	blanda	-	-	-	(2
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Von	NE	*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Filneck	NE	*)))	filneck	-	-	-	2)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Blanda	NE	(VROOT(PSEUDO(MPN*	blanda	sg	-	(LOC*)	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Blanda	NE	(VROOT(PSEUDO(MPN*	blanda	sg	-	(LOC*)	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Recha	NE	*	recha	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(NP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Eure	PPOSAT	*	euer	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Recha	NN	*	recha	-	-	(PER*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	ADV	*)	mehr	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*	gott	-	-	-	(22)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	verstoßt	VVFIN	*	verstoßen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sie	PPER	*)	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	gebt	VVPP	(VROOT(PSEUDO(S*	geben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ihren	PPOSAT	(NP*	ihr	sg	masc	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Christennamen	NN	*)	christenname	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wieder	ADV	*)	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Verstoßt	VVFIN	(VROOT(PSEUDO(S*	verstoßen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	(NP*	sie	sg	fem	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	meinetwegen	ADV	*))	meinetwegen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(MPN*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Warum	PWAV	(VROOT(PSEUDO(S*	warum	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	es	PPER	*	es	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	(VP(VP*	sie	pl	*	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	entgelten	VVINF	*)	entgeln	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	lassen	VVINF	*))	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	sie	PPER	*	sie	-	-	-	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	O	XY	*	O	-	-	-	(536
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	meine	PPOSAT	(NP*	mein	pl	neut	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Kinder	NN	*)	kind	pl	neut	-	536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	meine	PPOSAT	(VROOT(PSEUDO(NP*	mein	pl	neut	-	(536|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Kinder	NN	*)	kind	pl	neut	-	536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	meiner	PPOSAT	(NP*	mein	pl	masc	-	(61|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Tochter	NN	*))	tochter	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Bruder	NN	(S*	bruder	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wär	VAFIN	*	sein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	mein	PPOSAT	(NP*	mein	sg	masc	-	(671|(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Kind	NN	*)	kind	sg	masc	-	671)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Nicht	PTKNEG	(CO(AVP*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	auch	ADV	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	–	KON	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	sobald	KOUS	(S*	sobald	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	er	PPER	*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	will	VMFIN	*)))	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Indem	KOUS	(VROOT(PSEUDO(S(S*	indem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	*	sich	sg	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihren	PPOSAT	(NP*	ihr	pl	fem	-	(1003|(536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Umarmungen	NN	*)	umarmung	pl	fem	-	1003)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	überläßt	VVFIN	*)	überlassen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	tritt	VVFIN	*	treten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Saladin	NE	*	saladin	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mit	APPR	(PP*	mit	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	unruhigem	ADJA	*	unruhig	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Erstaunen	NN	*	erstaunen	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	seiner	PPOSAT	*	sein	sg	fem	-	(307|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Schwester	NN	*)))	schwester	sg	fem	-	307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sagst	VVFIN	*	sagen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Schwester	NN	*)	schwester	*	*	-	307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	gerührt	VVPP	*)	rühren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	KON	*	–	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	schaudere	VVFIN	*	schaudern	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Vor	APPR	(PP*	vor	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	einer	PIS	*	ein	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	größern	ADJA	(NP*	größern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Rührung	NN	*))	rührung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	fast	ADV	*	fast	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	zurück	PTKVZ	*)	zurück	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Bereite	NN	(VROOT(PSEUDO*	bereite	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PRF	(S(VP(AP*	dich	sg	-	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	drauf	PROAV	(PP*	drauf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	(S(AP*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	gut	ADJD	*)	gut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*	du	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	kannst	VVFIN	*)))))	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(NP*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auf	APPR	(PP*	auf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ein	ART	*	ein	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Wort	NN	*))	wort	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ein	ART	(VROOT(PSEUDO(NP*	ein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Wort	NN	*)	wort	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Indem	KOUS	*	indem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	tritt	VVFIN	*	treten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	tritt	VVFIN	*	treten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Sittah	NE	*	sittah	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	zu	APPR	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	dem	ART	*	der	sg	neut	-	(536
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Geschwister	NN	*	geschwister	sg	neut	-	536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ihm	PPER	*	ihm	sg	masc	-	(536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	ihre	PPOSAT	*	ihr	sg	fem	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Teilnehmung	NN	*	teilnehmung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	zu	PTKZU	*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	bezeigen	VVINF	*	bezeigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	Saladin	NE	*	saladin	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	sprechen	VVFIN	*	sprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	leiser	ADJD	*	leise	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	26	Hör	PTKVZ	*	hör	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	27	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Indem	KOUS	(VROOT(PSEUDO(CS(S(S*	indem	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihm	PPER	*)	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	tritt	VVFIN	*)	treten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	tritt	VVFIN	*	treten	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Sittah	NE	*	sittah	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	dem	ART	*	der	sg	neut	-	(536
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Geschwister	NN	*)	geschwister	sg	neut	-	536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	ihm	PPER	(VP*	ihm	sg	masc	-	(536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	ihre	PPOSAT	(NP*	ihr	sg	fem	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Teilnehmung	NN	*)	teilnehmung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	bezeigen	VVINF	*)))	bezeigen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	und	KON	(S(CNP*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	19	Nathan	NE	*	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	20	und	KON	*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	21	Saladin	NE	*)	saladin	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	22	sprechen	VVFIN	*	sprechen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	23	leiser	ADJD	*))	leise	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	hör	XY	(VROOT(PSEUDO*	hör	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	(NP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*)	nathan	-	-	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sagtest	VVFIN	*	sagtest	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	vorhin	ADV	*	vorhin	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Aus	APPR	(VROOT(PSEUDO(S(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Deutschland	NE	*)	deutschland	sg	neut	(LOC*)	(519)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihr	PPOSAT	(NP*	ihr	sg	masc	-	(476|(536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Vater	NN	*)	vater	sg	masc	-	476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Gewesen	NN	(NP*	gewesen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	ein	ART	*	ein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	geborner	ADJA	*	geborn	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Deutscher	NN	*)	deutsche	sg	masc	(MISC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*)	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	wo	PWAV	(VROOT(PSEUDO(S*	wo	-	-	-	(1004
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sonst	ADV	(AVP*	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*)	denn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	her	PTKVZ	*)	her	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	1004)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(1004)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	(VP(NP*	er	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	(VP*	sich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nie	ADV	*	nie	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	vertrauen	VVINF	*)	vertrauen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	wollen	VMINF	*))	wollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Aus	APPR	(VROOT(PSEUDO(S(PP*	aus	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	seinem	PPOSAT	*	sein	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Munde	NN	*)	mund	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nichts	PIS	*	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	davon	PTKVZ	*)	davon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	sonst	ADV	*)	sonst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	kein	PIAT	(NP*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Frank	NN	*))	frank	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	kein	PIAT	(VROOT(PSEUDO(NP*	kein	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Abendländer	NN	*)	abendländer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(CS(S*)	O	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	daß	KOUS	(S*	daß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	der	PDS	*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sei	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	gestand	VVFIN	(S*	gestehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	er	PPER	*	er	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wohl	ADV	*)))	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	(S*	er	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sprach	VVFIN	*	sprechen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	am	PTKA	(AP*	an	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	liebsten	ADJD	*))	lieb	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Persisch	NN	*	persisch	sg	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Persisch	ADJD	(VROOT(PSEUDO*	persisch	-	-	(MISC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Persisch	ADJD	(VROOT(PSEUDO*	persisch	-	-	(MISC*)	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	ADV	*)	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	*	er	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ists	ADV	*)	ist	-	-	-	(1005)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(476)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(1005)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(131|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Bruder	NN	*)	bruder	sg	masc	-	131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ganz	ADV	(VROOT(PSEUDO(S*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	gewiß	ADV	*)	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	-	-	-	(131|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Assad	NN	*)	assad	-	-	-	131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ganz	ADV	(VROOT(PSEUDO(S*	ganz	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Gewiß	ADV	*)	gewiß	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wenn	KOUS	*	wenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	(NP*	du	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	selbst	ADV	*)	selbst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	darauf	PROAV	*)	darauf	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	verfällst	VVPP	*	verfällen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	:	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	–	XY	*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Nimm	NE	*	nimm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	die	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	Versichrung	NN	*	versichrung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	hier	ADV	(PP*	hier	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	in	APPR	*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	diesem	PDAT	*	dieser	sg	neut	-	(878
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	Buche	NN	*))	buch	sg	neut	-	878)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihm	PPER	(VROOT(PSEUDO(AP(NP*	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	das	ART	*	der	sg	neut	-	(878
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Brevier	NN	*)	brevier	sg	neut	-	878)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	überreichend	ADJD	*)	überreichend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	es	PPER	(VROOT(PSEUDO(AP*	es	sg	neut	-	(878)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	begierig	ADJD	*	begierig	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	aufschlagend	ADJD	*)	aufschlagend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	seine	PPOSAT	(VROOT(PSEUDO(NP*	sein	sg	fem	-	(880|(131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Hand	NN	*)	hand	sg	fem	-	880)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	*	der	pl	fem	-	(880)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	erkenn	FM	*	erkenn	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wieder	ADV	*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(S*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wissen	VVFIN	*	wissen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	pl	*	-	(536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(PP*	von	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	*))	nichts	*	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(S*	noch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	stehts	ADV	(PP*	stehts	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	bei	APPR	*	bei	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	dir	PPER	*)	dir	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Allein	ADV	*	allein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	was	PWS	(S*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	sie	PPER	(VP*	sie	sg	fem	-	(536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	davon	PROAV	*	davon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	erfahren	VVINF	*)	erfahren	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	sollen	VMFIN	*))	sollen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	indes	ADV	(VROOT(PSEUDO(VP(NP*	indes	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*)	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	darin	PROAV	*	darin	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	geblättert	VVPP	*)	blättern	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	meines	VVFIN	*	mein	sg	masc	-	(536
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bruders	NN	(VP*	bruder	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	Kinder	NN	*	kind	pl	neut	-	536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	erkennen	VVINF	*))	erkennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S(AP(NP*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	meine	PPOSAT	(NP*	mein	sg	-	-	(536|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Neffen	NN	*))	neffen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	–	APPO	*)	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	meine	PPOSAT	(NP*	mein	pl	neut	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	Kinder	NN	*)	kind	pl	neut	-	536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(VP*	sie	pl	*	-	(536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	erkennen	VVINF	*)	erkennen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(VP*	sie	pl	*	-	(536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	dir	PPER	*	dir	sg	*	-	(1)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	lassen	VVINF	*)	lassen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wieder	ADV	(VROOT(PSEUDO(AP*	wieder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	laut	ADJD	*)	laut	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	pl	*	-	(536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sinds	VVFIN	*)	sinds	-	-	-	(1006)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	sie	PPER	(VROOT(PSEUDO(S*	sie	pl	*	-	(536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sind	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	(NP*	es	sg	neut	-	(1006)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Sittah	NE	*	sittah	sg	*	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*)	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sind	VAFIN	*)	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	pl	*	-	(536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	sinds	VVFIN	*)	sinds	-	-	-	(1006)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Sind	VAFIN	(VROOT(PSEUDO(S*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	beide	PIS	(NP*	beide	pl	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	meines	PIS	(NP*	mein	sg	neut	-	(1006|(131|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	deines	PPOSAT	(NP*	dein	sg	masc	-	(307)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Bruders	NN	*)))	bruder	sg	masc	-	131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Kinder	NN	*)	kind	pl	neut	-	1006)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	rennt	VVFIN	*	rennen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(PP*	in	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ihre	PPOSAT	*	ihr	pl	fem	-	(1003|(536)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Umarmungen	NN	*))	umarmung	pl	fem	-	1003)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*))	sittah	-	-	-	(307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ihm	PPER	(VROOT(PSEUDO(AP*	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	folgend	ADJD	*)	folgend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	hör	VAFIN	*	hör	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Konnts	NN	(S*	konnt	pl	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	(VP(AVP*	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	anders	ADV	*)	anders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	anders	ADV	*	anders	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	sein	VAINF	*))	sein	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	zum	APPRART	(VROOT(PSEUDO(PP*	zu	-	-	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherrn	NN	*)	tempelherrn	-	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(CS(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	mußt	VMFIN	*	mussen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*)	wohl	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Trotzkopf	NN	(S*	trotzkopf	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	mußt	VMFIN	*	mussen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	mich	PPER	(VP*	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	lieben	VVINF	*)))	lieben	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Zu	APPR	(VROOT(PSEUDO(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Recha	NE	*)	recha	-	-	(PER*)	(2)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	fem	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	wozu	PWAV	(S*	wozu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mich	PRF	*	mich	sg	-	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	erbot	VVFIN	*))	erbot	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Magst	NN	*	magst	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wollen	VMFIN	*	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	oder	KON	*	oder	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(307
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	307)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(NP*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auch	ADV	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ich	PPER	(VROOT(PSEUDO(NP*	ich	sg	*	-	(6)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	auch	ADV	*)	auch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	zum	APPRART	(VROOT(PSEUDO(S(PP*)	zu	-	-	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherrn	NN	*	tempelherrn	-	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	zurück	PTKVZ	*)	zurück	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(61|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Sohn	NN	*)	sohn	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	-	-	-	(61|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Assad	NE	*)	assad	-	-	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	meines	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(61|(131|(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	Assads	NN	*	assad	sg	masc	-	131)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Sohn	NN	*)	sohn	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	61)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(NP*	ich	sg	*	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	deines	PPOSAT	(NP*	dein	sg	neut	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bluts	NN	*))	blut	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(S*	so	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	waren	VAFIN	*	sein	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	jene	PDAT	(CNP(NP*	jener	pl	masc	-	(1007
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Träume	NN	*)	traum	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	1007)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	Womit	NN	*))	womit	*	*	-	(1007)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	man	PIS	(S(NP*	man	sg	*	-	(471)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	meine	PPOSAT	(NP*	mein	sg	fem	-	(4)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	Kindheit	NN	*))	kindheit	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	wiegte	VVFIN	*	wiegen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	doch	ADV	(NP*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	–	CARD	*))	–	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	14	Doch	KON	(S*	doch	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	15	mehr	PIS	(NP*	mehr	*	*	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	16	als	KOKOM	(NP*	als	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	17	Träume	NN	*)))	traum	pl	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	18	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Ihm	PPER	(VROOT(PSEUDO(AP*	ihm	sg	masc	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Füßen	NN	*)	fuß	pl	masc	-	(974)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	fallend	ADJD	*)	fallend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	ihn	PPER	(VROOT(PSEUDO(S*	ihn	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	aufhebend	VVFIN	*)	aufhebend	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Seht	VVFIN	(VROOT(PSEUDO(S*	sehen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	den	ART	(NP*	der	sg	masc	-	(61
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Bösewicht	NN	*))	bösewicht	sg	masc	-	61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	wußte	VVFIN	*	wissen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	was	PIS	*	was	sg	neut	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	davon	PROAV	*	davon	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	(S*	und	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	konnte	VMFIN	*	können	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	mich	PPER	*	mich	sg	*	-	(7)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	Zu	APPR	(PP*	zu	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	9	seinem	PPOSAT	*	sein	sg	masc	-	(61)
Nathan.xml.rkpt.0.CoNLL2012.conll	000	10	Mörder	NN	*)	mörder	sg	masc	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	11	machen	VVINF	*	machen	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	12	wollen	VMFIN	*))	wollen	pl	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Wart	VVIMP	*	wart	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan.xml.rkpt.0.CoNLL2012.conll	000	0	Unter	APPR	(VROOT(PSEUDO(S(PP*	unter	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	1	stummer	ADJA	*	stumm	-	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	2	Wiederholung	NN	*	wiederholung	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	3	allerseitiger	ADJA	(NP*	allerseitig	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	4	Umarmungen	NN	*))	umarmung	pl	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	5	fällt	VVFIN	*	fallen	sg	-	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(NP*	der	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	7	Vorhang	NN	*))	vorhang	sg	fem	-	-
Nathan.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

#end document
