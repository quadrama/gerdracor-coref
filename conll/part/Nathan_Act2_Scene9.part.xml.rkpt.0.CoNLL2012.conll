#begin document (Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll); part 000
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO*	nathan	-	-	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ha	XY	*	ha	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	ha	XY	*	ha	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	zu	APPR	(VROOT(PSEUDO(S(PP*	zu	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*)	euch	-	-	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	wollt	VMFIN	*	wollen	pl	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	*	nun	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	eben	ADV	*	eben	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	*)	wieder	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ists	NE	(VROOT(PSEUDO(S*	ist	-	-	-	(15)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	denn	ADV	(AP*	denn	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	eilig	ADJD	*))	eilig	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	verlangt	VVFIN	*	verlangen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	Von	APPR	(PP*	von	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*))	sich	sg	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO*	saladin	-	-	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	komm	VVIMP	*	kommen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	komme	VVFIN	*	kommen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zu	APPR	*	zu	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	wem	PWS	*	wem	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zum	APPRART	(VROOT(PSEUDO(PP*	zu	-	-	-	(7
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Saladin	NN	*)	saladin	sg	*	-	7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Schickt	NN	(VROOT(PSEUDO(S*	schicken	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Saladin	NE	(NP*	saladin	sg	fem	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Dich	NE	*)	dich	sg	fem	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mich	PPER	*	mich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	nein	PTKANT	*	nein	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hat	VAFIN	(VROOT(PSEUDO(S*	haben	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	(VP*	denn	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	*	schon	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	geschickt	VVPP	*))	schicken	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*	es	sg	neut	-	(16)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	richtig	ADJD	*)	richtig	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	richtig	ADJD	*)	richtig	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	masc	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	Schuld	NN	*	schuld	sg	fem	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	Gott	NN	(S*	gott	sg	masc	-	(17)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	ich	PPER	*	ich	sg	masc	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	bin	VAFIN	*))	sein	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	15	Schuld	NN	*	schuld	sg	fem	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	hab	VAFIN	*	hab	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	Von	APPR	*	von	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	Euch	PPER	*	euch	-	-	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	gesagt	VVPP	*	sagen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	gelogen	VVPP	*	gelogen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	um	KOUI	*	um	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	es	PPER	*	es	sg	neut	-	(16)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	abzuwenden	VVIZU	*	abwenden	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	abzuwenden	VVIZU	*	abwenden	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	richtig	ADJD	*)	richtig	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	*	daß	-	-	-	(16
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	sein	PPOSAT	*	sein	-	-	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	Defterdar	NN	*	defterdar	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	geworden	VAPP	*	werden	-	-	-	16)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	Betaur	NN	*	betaur	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	mit	APPR	*	mit	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	ansehn	NE	*	ansehn	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	ichs	NE	*	ichs	-	-	-	(16)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	geh	XY	*	gehn	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	*	von	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	Stund	NN	*	stund	sg	masc	-	(18)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	an	PTKVZ	*	an	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	geh	XY	*	geh	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	habt	VAFIN	*	haben	pl	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	es	PPER	*	es	sg	neut	-	(19)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	schon	ADV	*	schon	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	Gehört	VVPP	*	hören	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	wohin	PWAV	*	wohin	-	-	-	(19)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	16	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	17	wißt	VVFIN	*	wissen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	18	den	ART	*	der	sg	masc	-	(20
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	19	Weg	NN	*	weg	sg	masc	-	20)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Habt	VAFIN	(S*	haben	pl	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPOSAT	(NP*	ihr	pl	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	Des	ART	(NP*	der	sg	masc	-	(20
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	Wegs	NN	*	weg	sg	masc	-	20)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	was	PIS	(VP*	was	sg	neut	-	(21
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	bestellen	VVINF	*)))	bestellen	-	-	-	21)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	sagt	VVFIN	(S*	sagen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	(S*	ich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	Zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	Diensten	NN	*)))))	dienst	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Freilich	ADV	(VROOT(PSEUDO(S*	freilich	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(21)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	PIS	(VP*	mehr	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*	sein	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	Als	KOUS	(S*	als	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	was	PIS	*	was	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	ein	ART	(VP(NP*	ein	sg	masc	-	(22
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	Nackter	NN	*)	nackter	sg	masc	-	22)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	mit	APPR	(PP*	mit	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	sich	PRF	*)	sich	sg	-	-	(22)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	schleppen	VVINF	*)	schleppen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	kann	VMFIN	*)))	können	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	geh	XY	*	gehn	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	bald	ADV	*	bald	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Besinn	NN	(VROOT(PSEUDO(NP*	besinn	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PPER	(NP*	dich	sg	masc	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	Al-Hafi	NE	*))	al-hafi	sg	masc	(LOC*)	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Besinn	NN	(VROOT(PSEUDO(S*	besinn	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PPER	*	dich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	*	noch	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	gar	ADV	(AP*	gar	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	nichts	PIS	*))	nichts	*	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	weiß	VVFIN	*))	weiß	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	plauderst	VVFIN	*	plauderst	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	da	PTKVZ	*)	da	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S(S*	ihr	sg	masc	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	bringt	VVFIN	*	bringen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	*	*	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	Gleich	ADV	*	gleich	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	mit	PTKVZ	*)	mit	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	(NP*	der	pl	*	-	(23
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	Beutel	NN	*))	beutel	pl	*	-	23)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Beutel	NN	(VROOT(PSEUDO*	beutel	-	-	-	(23)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(NP*	der	sg	neut	-	(23
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	Geld	NN	*	geld	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	23)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	Das	KOUS	(S*	der	sg	neut	-	(23)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	dem	ART	(VP(NP*	der	sg	neut	-	(7
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	Saladin	NN	*)	saladin	sg	neut	-	7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	vorschießen	VVINF	*)	vorschießen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	sollt	VMFIN	*)))	sollen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	weiter	ADV	*	weiter	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(15)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	sollt	VVFIN	*	sollen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(24)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	Mit	APPR	(CPP(PP*	mit	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	ansehn	CARD	*	ansehn	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	wie	PWAV	(S*	wie	-	-	-	(24
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	Euch	PPER	*	euch	pl	-	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	Tag	NN	*)	tag	sg	masc	-	(25)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	Tag	NN	*	tag	sg	masc	-	24)|(25)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	Aushöhlen	NN	*)	aushöhlen	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	15	wird	VAFIN	*))	werden	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	16	bis	APPR	(PP*	bis	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	17	auf	APPR	*	auf	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	18	die	ART	*	der	pl	fem	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	19	Zehen	NN	*)))	zehe	pl	fem	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	20	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sollt	VMFIN	*	sollen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Es	PPER	*	es	sg	neut	-	(26)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	*	mit	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	ansehn	CARD	*	ansehn	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	*	daß	-	-	-	(26
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	Verschwendung	NN	*	verschwendung	sg	fem	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	aus	APPR	*	aus	-	-	-	26)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	Der	ART	*	der	sg	fem	-	(27
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	weisen	ADJA	*	weisen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	Milde	NN	*	milde	sg	*	-	27)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	sonst	ADV	*	sonst	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	nie	ADV	*	nie	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	15	leeren	ADJA	*	leer	pl	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	16	Scheuern	NN	*	scheuer	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	17	So	ADV	*	so	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	18	lange	ADV	*	lange	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	19	borgt	VVFIN	*	borgen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	21	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	22	borgt	VVFIN	*	borgen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	24	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	25	borgt	VVFIN	*	borgen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	27	bis	APPR	*	bis	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	28	auch	ADV	*	auch	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	29	Die	ART	*	der	pl	masc	-	(28
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	30	armen	ADJA	*	arm	pl	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	31	eingebornen	ADJA	*	eingeborn	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	32	Mäuschen	NN	*	mäusch	pl	masc	-	28)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	33	drin	ADV	*	drin	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	34	Verhungern	NN	*	verhunger	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	35	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Bildet	VVFIN	*	bilden	pl	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(S(NP(S*	ihr	pl	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	ein	PTKVZ	*	ein	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	Wer	PWS	(S*	wer	sg	masc	-	(29
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	Euers	NN	(AP(NP*	euer	sg	masc	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	Gelds	NE	*)	geld	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	bedürftig	ADJD	*)	bedürftig	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	sei	VAFIN	*))	sein	sg	-	-	29)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	der	PDS	*)	der	sg	masc	-	(29)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	werde	VAFIN	*	werden	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	15	Doch	NE	(NP*	doch	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	16	Euerm	NN	*))	euerm	sg	masc	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	17	Rate	NN	(S*	rate	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	18	wohl	ADV	(VP*	wohl	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	19	auch	ADV	*	auch	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	20	folgen	VVINF	*))	folgen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	21	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ja	XY	*	ja	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	Er	PPER	(S(VP*	er	sg	masc	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	Rate	NN	*	rate	pl	neut	-	(30)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	folgen	VVINF	*))	folgen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Saladin	NN	*	saladin	sg	*	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sich	PRF	(VP(VP*	sich	sg	-	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	raten	VVINF	*)	raten	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	lassen	VVINF	*))	lassen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Denkt	VVFIN	(S*	denkt	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	Nathan	NE	*	nathan	-	-	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	Mir	PPER	*	sich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	eben	ADV	*	eben	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	itzt	ADV	*	itzt	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	ihm	PPER	*)))	ihm	sg	masc	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	begegnet	VVFIN	*	begegnen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO*	da	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	komm	VVIMP	(CS(S*	kommen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*))	ihm	sg	masc	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	eben	ADV	*	eben	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	Schach	NE	*	schach	sg	neut	-	(31)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	Gespielt	VVFIN	*	gespielt	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	seiner	PPOSAT	*	sein	sg	fem	-	(32|(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	Schwester	NN	*)))	schwester	sg	fem	-	32)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sittah	NE	(VROOT(PSEUDO(CS(CS(S*	sittah	sg	*	-	(32)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	spielt	VVFIN	*	spielen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nicht	NN	*	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	übel	PTKVZ	*)	übel	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	das	ART	(S(VP(NP*	der	sg	neut	-	(33
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	Spiel	NN	*	spiel	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	das	PRELS	(S*	der	sg	neut	-	(33)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	Saladin	NE	(NP*	saladin	sg	neut	-	33)|(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	Verloren	NN	*)	verlor	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	glaubte	VVFIN	*))	glauben	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	schon	ADV	*	schon	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	15	gegeben	VVPP	*)	geben	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	16	hatte	VAFIN	*))	haben	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	18	Das	PDS	(S*	der	sg	neut	-	(33)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	19	stand	VVFIN	*	stehen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	20	noch	ADV	(AVP*	noch	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	21	ganz	ADV	*)	ganz	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	22	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	23	da	PTKVZ	*))	da	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S(AVP(S*	ich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	seh	VVFIN	*	seh	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PRF	*	euch	pl	*	-	(34)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	hin	PTKVZ	*)	hin	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	Und	KON	*)	und	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	sehe	VVFIN	*	sehen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	das	ART	(NP*	der	sg	neut	-	(33
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	Spiel	NN	*)	spiel	sg	neut	-	33)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	noch	ADV	(AVP*	noch	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	lange	ADV	*)	lange	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	Verloren	NN	*	verloren	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	*	ei	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(35)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	für	APPR	(NP(PP*	für	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	dich	PPER	*)	dich	-	-	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	*	ein	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	Fund	NN	*))	Fund	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(59|(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	durfte	VMFIN	*	dürfen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	*	der	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	König	NN	*	könig	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	an	APPR	(PP*	an	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	den	ART	*	der	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	Bauer	NN	*	bauer	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	Nur	ADV	*))	nur	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	rücken	VVINF	*))	rücken	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	auf	APPR	(S(VP(PP*	auf	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	ihr	PPOSAT	*	ihr	sg	neut	-	(35|(32)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	Schach	NN	*)	schach	sg	neut	-	59)|35)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	Nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	15	zeigen	VVINF	*)	zeigen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	16	könnte	VMFIN	*))	können	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	KON	(VROOT(PSEUDO(S*	O	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	traue	VVFIN	*	trauen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	dir	PPER	*)	dir	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	bekam	VVFIN	*	bekommen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(NP*	der	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	Roche	NN	*	roche	*	*	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	Feld	NN	(S*	feld	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	(S*	und	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	sie	PPER	*	sie	pl	*	-	(32)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	War	VAFIN	*)))	sein	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	hin	PTKVZ	*)	hin	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	*	der	sg	neut	-	(37
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	*	alle	sg	neut	-	37)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	*	nun	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	weisen	VVINF	*	weisen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	Und	KON	*	und	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	ruf	FM	*	ruf	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	ihn	PPER	*	ihn	sg	masc	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Denkt	VVIMP	*	denkt	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	deiner	PPOSAT	(NP*	dein	sg	fem	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	Meinung	NN	*))	meinung	sg	fem	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(38|(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	hört	VVFIN	*	hören	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	gar	ADV	(AVP*	gar	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	an	PTKVZ	*)	an	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	wirft	VVFIN	(S*	werfen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	verächtlich	ADJD	*	verächtlich	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	Das	ART	(NP*	der	sg	neut	-	(35
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	ganze	ADJA	*	ganz	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	Spiel	NN	*	spiel	sg	neut	-	35)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	in	APPR	(PP*	in	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	Klumpen	NE	*))))))	klumpen	sg	neut	-	38)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(38)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	möglich	ADJD	*	möglich	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	(S*	er	sg	masc	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	wolle	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	matt	ADJD	(VP(AP*	matt	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	*	nun	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	einmal	ADV	*)	einmal	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	sein	VAINF	*)	sein	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	Er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	wolle	VMFIN	*))	wollen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Heißt	VVFIN	(VROOT(PSEUDO(S*	heißen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(39)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	spielen	VVFIN	*)	spielen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Schwerlich	ADJD	(VROOT(PSEUDO(S*	schwerlich	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	Heißt	NN	(VP*	heißt	pl	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	dem	ART	*	der	sg	neut	-	(31
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	Spiele	NN	*)	spiel	sg	neut	-	31)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	spielen	VVINF	*))	spielen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gleichwohl	ADV	(VROOT(PSEUDO(S*	gleichwohl	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	galt	VVFIN	*	gelten	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Es	PPER	(NP*	es	sg	neut	-	(33)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	keine	PIAT	(NP*	kein	sg	fem	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	taube	ADJA	*	taub	sg	fem	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	Nuß	NN	*)))	nuß	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geld	NN	(VROOT(PSEUDO(CNP(NP*	geld	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	hin	ADV	*)	hin	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	Geld	NN	*	geld	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	her	ADV	*)	her	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(40)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(NP*	der	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	wenigste	ADJA	*))	wenig	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Allein	ADV	(VROOT(PSEUDO(VP(NP*	allein	-	-	-	(40
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PPER	*)	dich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	gar	ADV	(NP*	gar	-	-	-	40)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nicht	NN	*)	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	anzuhören	VVIZU	*)	anhören	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	über	APPR	(VROOT(PSEUDO(VP(PP*	über	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	einen	ART	*	ein	sg	masc	-	(37
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Punkt	NN	*)	punkt	sg	masc	-	37)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	Von	APPR	(PP*	von	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	solcher	PIAT	*	solcher	sg	fem	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	Wichtigkeit	NN	*)	wichtigkeit	sg	fem	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	dich	PRF	*	dich	sg	-	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	einmal	ADV	*)	einmal	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	Zu	NN	*	zu	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	hören	VVINF	*)	hören	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	deinen	PPOSAT	(VROOT(PSEUDO(NP*	dein	sg	masc	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Adlerblick	NN	*	adlerblick	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	(PP*	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	*	zu	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	Bewundern	NN	*))	bewundern	pl	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	(VROOT(PSEUDO(NP*	der	sg	neut	-	(40)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	PRELS	(S*	der	sg	neut	-	(40)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	schreit	ADJD	*	schreit	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	um	APPR	(PP*	um	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	Rache	NN	*	rache	sg	fem	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*)	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ach	ITJ	*	ach	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	sag	VVFIN	*	sögen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*	der	sg	neut	-	(38)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	(AVP*	nur	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*)	so	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	damit	KOUS	(S*	damit	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	sehen	VVINF	*	sehen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	könnt	VVFIN	*	können	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	für	APPR	(PP*	für	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	ein	ART	*	ein	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	15	Kopf	NN	*)	kopf	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	16	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	17	ist	VAFIN	*)))	sein	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kurz	ADJD	(VROOT(PSEUDO(S*	kurz	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	halts	VVFIN	*	halts	sg	-	-	(41)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	ihm	PPER	*)	ihm	sg	masc	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	länger	ADJD	*	lang	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	aus	PTKVZ	*)	aus	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO(CS(S*	da	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	lauf	VVFIN	*	lauf	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	allen	PIAT	*	aller	pl	*	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	schmutzgen	ADJA	*	schmutzg	pl	*	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	Mohren	NN	*	mohr	pl	*	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	Herum	NE	*))	herum	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	frage	VVFIN	(S*	fragen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	wer	PWS	(S*	wer	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	ihm	PPER	(VP*	ihm	sg	masc	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	15	borgen	VVINF	*)	borgen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	16	will	VMFIN	*)))	wollen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S(NP*	ich	sg	*	-	(3|(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	PRELS	(S*	der	sg	-	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	nie	ADV	(VP(AVP*	nie	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	für	APPR	(PP*	für	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	mich	PPER	*))	mich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	gebettelt	VVPP	*)	betteln	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	habe	VAFIN	*))	haben	sg	-	-	3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	Soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	nun	ADV	*	nun	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	für	APPR	(VP(PP*	für	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	andre	ADJA	*)	andre	pl	*	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	borgen	VVINF	*))	borgen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Borgen	NN	*	borgen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Viel	NN	*	viel	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	besser	ADJD	*	gut	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	als	KOKOM	*	als	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	betteln	VVINF	*	betteln	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	wie	KOKOM	*	wie	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	leihen	VVINF	*	leihen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	Auf	APPR	*	auf	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	Wucher	NN	*	wucher	pl	masc	-	(42)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	leihen	VVINF	*	leihen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	16	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	17	viel	ADV	*	viel	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	18	besser	ADJD	*	gut	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	19	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	21	Als	KOKOM	*	als	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	22	stehlen	VVINF	*	stehlen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Unter	APPR	(VROOT(PSEUDO(S(PP*	unter	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	meinen	PPOSAT	*	mein	pl	masc	-	(43|(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ghebern	NN	*)	gheber	pl	masc	-	43)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	an	APPR	(PP*	an	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	Dem	NE	(MPN*	der	sg	masc	-	(44
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ganges	NE	*))	gange	sg	neut	-	44)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	brauch	VVFIN	*	brauch	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	(VP(VP*	ich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	beides	PIS	*	beide	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	(S*	und	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	brauche	VVFIN	*	brauchen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	15	Das	ART	(NP*	der	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	16	Werkzeug	NN	*	werkzeug	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	17	beider	ADV	*)	beide	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	18	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	19	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	20	sein	VAINF	*)))	sein	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Am	APPRART	(VROOT(PSEUDO(CO(PP*	an	-	-	-	(44
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ganges	NN	*)	gange	-	-	-	44)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	Am	APPRART	(NP(PP*	an	-	-	-	(44
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ganges	NE	*)	gange	sg	*	-	44)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	gibts	CARD	*	gibt	sg	*	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	Menschen	NN	*))	mensch	sg	*	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hier	ADV	*	hier	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	Der	ART	*	der	sg	masc	-	(45
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	einzige	ADJA	*	einzig	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	der	PRELS	*	der	sg	masc	-	(45)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	noch	ADV	*	noch	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	würdig	ADJD	*	würdig	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	wäre	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	Daß	KOUS	*	daß	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	er	PPER	*	er	sg	masc	-	(45)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	am	APPRART	*	an	-	-	-	(44
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	15	Ganges	NN	*	gange	sg	masc	-	44)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	16	lebte	VVFIN	*	leben	sg	-	-	45)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	17	Laßt	VVIMP	*	lassen	pl	-	-	(47
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	18	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	19	mit	APPR	*	mit	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	20	eins	PIS	*	einer	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	21	den	ART	*	der	sg	masc	-	(23
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	22	Plunder	NN	*	plunder	sg	masc	-	23)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	23	ganz	ADV	*	ganz	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	24	im	APPRART	*	in	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	25	Stiche	NN	*	stich	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	27	Um	KOUI	*	um	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	28	den	ART	*	der	sg	masc	-	(23)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	29	es	PPER	*	es	sg	neut	-	(48)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	30	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	31	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	32	tun	VVINF	*	tun	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	33	.	$.	*	--	-	-	-	47)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO*	und	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	nach	APPR	*	nach	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(AP*	doch	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	drum	ADV	*)	drum	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	*	der	sg	fem	-	(49
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	Plackerei	NN	*	plackerei	sg	fem	-	49)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	Auf	APPR	*	auf	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	einmal	ADV	*	einmal	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	aus	PTKVZ	*	aus	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	schaff	VVFIN	*	schaff	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	einen	ART	(NP*	ein	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	Delk	NN	*))	delk	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kommt	VVFIN	*	kommen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	dächte	VVFIN	*	dächen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	zwar	ADV	*	zwar	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	(S*	der	sg	neut	-	(47)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	blieb	VVFIN	*	bleiben	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	uns	PPER	*	uns	pl	*	-	(50)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	ja	ADV	*	ja	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	Noch	ADV	(AP(AVP*	noch	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	immer	ADV	*)	immer	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	übrig	ADJD	*)))	übrig	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Al-Hafi	NE	*	al-hafi	sg	masc	(LOC*)	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ichs	NE	*	ichs	sg	*	-	(46)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	überlegen	VVINF	*	überlegen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Warte	NN	(VROOT(PSEUDO*	warte	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Überlegen	NN	(VROOT(PSEUDO*	überlegen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	*	nein	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	(46
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	was	PIS	*	was	*	neut	-	46)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	überlegt	VVFIN	*	überlegen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	sich	PRF	*	sich	sg	-	-	(46)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S*	nur	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	bis	APPR	(PP*	bis	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	*)	ich	sg	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	*	der	sg	neut	-	(7
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	Sultan	NN	*)	sultan	sg	neut	-	7)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	wiederkomme	VVFIN	*)	wiederkommen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	bis	APPR	*	bis	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	Ich	PPER	(NP*	ich	sg	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	Abschied	NN	*	abschied	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	erst	ADV	*)	erst	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	(51
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	überlegt	VVPP	*	überlegen	sg	-	-	51)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	*	der	sg	masc	-	(51)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	sucht	PTKNEG	*	suchen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	Bewegungsgründe	NN	*	bewegungsgrund	pl	masc	-	(52)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	dürfen	VMINF	*	dürfen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(CS(S*	wer	sg	masc	-	(53)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sich	PRF	*	sich	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Knall	NN	(NP(CNP*	knall	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	Fall	NN	*)	fall	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	ihm	PPER	(VP(NP*	ihm	sg	masc	-	(53)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	selbst	ADV	*)	selbst	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	leben	VVINF	*)))	leben	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	Entschließen	VVINF	*	entschließen	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	kann	VMFIN	*)	können	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	15	der	ART	(S(NP*	der	sg	masc	-	(53)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	16	lebet	ADJD	(AP*	lebet	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	17	andrer	ADJA	*)	andr	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	18	Sklav	NN	*)	sklav	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	19	Auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	20	immer	ADV	*)))	immer	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	wollt	VMFIN	*)	wollen	pl	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(CNP*	–	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Lebt	NE	*	leben	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*)	wohl	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	wies	VVFIN	(VROOT(PSEUDO(S*	weisen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wohl	ADV	(AP*	wohl	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	dünkt	ADJD	*))	dünken	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mein	PPOSAT	*	mein	sg	masc	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Weg	NN	*	weg	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	liegt	VVFIN	*	liegen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	dort	ADV	*	dort	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	Eurer	PPOSAT	*	eurer	-	-	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	da	ADV	*	da	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	(VROOT(PSEUDO(MPN*	al-hafi	-	-	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(54|(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	wirst	VAFIN	*	werden	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	erst	ADV	(NP*	erst	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	*	der	sg	neut	-	(41
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	Deine	ADJA	*	dein	sg	neut	-	54)|41)|(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	Berichtigen	NN	*))	berichtig	sg	neut	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ach	ITJ	(VROOT(PSEUDO(S*)	ach	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Possen	NE	*	posse	-	-	-	(54)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Bestand	NN	*	bestand	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	Von	APPR	*	von	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	meiner	PPOSAT	*	mein	sg	fem	-	(55|(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	Kaß	NN	*	kaß	sg	fem	-	55)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	des	ART	*	der	sg	masc	-	(41
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	Zählens	NN	*	zählen	sg	masc	-	41)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	wert	ADJD	*	wert	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	Und	KON	*	und	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	13	meine	PPOSAT	*	mein	sg	fem	-	(56|(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	14	Rechnung	NN	*	rechnung	sg	fem	-	56)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	15	bürgt	VVFIN	*	bürgen	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	16	–	$.	*	–	pl	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	17	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	18	oder	KON	*	oder	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	19	Sittah	NE	*	sittah	sg	-	-	(32)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Lebt	VVPP	(VROOT(PSEUDO(VP*	leben	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	(S*))	wohl	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ab	NN	(VROOT(PSEUDO*	ab	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*))	nathan	-	-	-	(1)

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	ihm	PPER	(VROOT(PSEUDO(AP*	ihm	sg	masc	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	nachsehend	ADJD	*)	nachsehend	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	*	der	sg	fem	-	(56)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	bürg	NE	*	bürg	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wilder	NN	*	wild	pl	neut	-	(3
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	guter	ADJA	*	gut	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	edler	ADJA	*	edel	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	–	NN	*	–	-	-	-	3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	Wie	KOKOM	*	wie	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	nenn	ADV	*	nenn	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	ihn	PPER	*	ihn	sg	masc	-	(3)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	(S(NP*	der	sg	masc	-	(57
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	wahre	ADJA	*	wahr	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	Bettler	NN	*)	bettler	sg	masc	-	57)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	Doch	NE	(CO*	doch	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	6	einzig	ADJD	*	einzig	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	8	allein	ADV	*))	allein	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	(NP*	der	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	10	wahre	ADJA	*	wahr	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	11	König	NN	*)	könig	sg	masc	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	(VROOT(PSEUDO(S*	von	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	1	einer	ART	(NP*	ein	sg	masc	-	(58
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	2	andern	ADJA	*	anderer	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	3	Seite	NN	*)	seite	sg	fem	-	58)
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	4	ab	PTKVZ	*)	ab	-	-	-	-
Nathan_Act2_Scene9.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

#end document
