#begin document (Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll); part 000
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Szene	NN	(VROOT(PSEUDO*	szene	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	den	ART	*	der	pl	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Kreuzgängen	NN	*	kreuzgang	pl	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	des	ART	(NP*	der	sg	masc	-	(15
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Klosters	NN	*))	kloster	sg	masc	-	15)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(CNP(NP*	der	sg	masc	-	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Klosterbruder	NN	*)	klosterbruder	sg	masc	-	5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	bald	ADV	(NP(AVP*	bald	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	darauf	PROAV	*)	darauf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	*	der	sg	fem	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Tempelherr	NN	*))	tempelherr	sg	fem	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*)	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	schon	ADV	(NP*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Recht	NN	*	recht	-	-	-	(17)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	(NP*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Patriarch	NN	*)))	patriarch	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(18)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	von	APPR	(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	alle	PIS	*)	alle	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	dem	ART	(NP*	der	sg	masc	-	(18)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Nicht	NN	*)	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	viel	PIS	(S(VP*	viel	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	gelingen	VVINF	*)	gelingen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	wollen	VMFIN	*)	wollen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	er	PPER	*	er	sg	masc	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	mir	PPER	(NP*	sich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	So	ADV	*)	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	aufgetragen	VVPP	*))	auftragen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Warum	PWAV	(S*	warum	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	trägt	VVFIN	*	tragen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*	sich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Auch	ADV	*)	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	lauter	ADJD	(S*	lauter	-	-	-	(19
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	solche	PIAT	(NP*	solcher	pl	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Sachen	NN	*)	sache	pl	fem	-	19)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	auf	PTKVZ	*)	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	mag	VMFIN	*	mögen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nicht	PTKNEG	(VP(AP*	nicht	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	fein	ADJD	*)	fein	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*)	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	mag	VMFIN	(S*	mögen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	überreden	VVINF	*))	überreden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	mag	VMFIN	(S(S*	mögen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Mein	PPOSAT	(VP(NP*	mein	sg	neut	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Näschen	NN	*)	näsche	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	in	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	alles	PIS	*)	alle	sg	neut	-	(20)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	stecken	VVINF	*))	stecken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	mag	VMFIN	*	mögen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	Mein	PPOSAT	(NP*	mein	sg	neut	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Händchen	NN	*)	händchen	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	in	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	allem	PIS	*)	alle	sg	neut	-	(20)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	haben	VAFIN	*)	haben	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Bin	VAFIN	(S*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	darum	PROAV	(VP*	darum	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	*	der	sg	fem	-	(21
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Welt	NN	*)	welt	sg	fem	-	21)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	geschieden	VVPP	*)	scheiden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Für	APPR	(PP*	für	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	mich	PPER	*))	mich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	um	APPR	(S(NP(PP*	um	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	mich	PPER	*)	mich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	für	APPR	(PP*	für	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	andre	ADJA	*)	andre	sg	*	-	(22)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	der	ART	*	der	sg	fem	-	(21
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	Welt	NN	*))	welt	sg	fem	-	21)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	Noch	ADV	(VP*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	erst	ADV	(AVP*	erst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	recht	ADV	*)	recht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	verwickeln	VVINF	*)))	verwickeln	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	mit	APPR	(VROOT(PSEUDO(AP(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Hast	NN	*)	haben	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*)	ihn	sg	masc	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	zukommend	ADJD	*)	zukommend	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Guter	ADJA	(VROOT(PSEUDO(NP*	gut	sg	masc	-	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Bruder	NN	*)	bruder	sg	masc	-	5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO(S*	da	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*)	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	hab	VVFIN	*	hab	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	lange	ADV	*	lange	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	schon	ADV	*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Gesucht	NN	*	gesucht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mich	PPER	(VROOT(PSEUDO(NP*	mich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Herr	NN	*)	herr	sg	masc	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	sg	neut	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	(AVP*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	ADV	*))	mehr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(CNP*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	KON	*)	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	glaubte	VVFIN	*	glauben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	daß	KOUS	(S*	daß	-	-	-	(23
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	den	ART	(NP*	der	pl	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Herrn	NN	*)	herr	pl	masc	-	23)|16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	In	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	meinem	PPOSAT	*	mein	sg	neut	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Leben	NN	*)	leben	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	wieder	ADV	(AVP*	wieder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	nie	ADV	*)	nie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	sehn	CARD	*	sehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Bekommen	NN	*)	bekommen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	würde	VAFIN	*))	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	hofft	VVFIN	*	hoffen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*	es	sg	neut	-	(23)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	APPR	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Dem	ART	*	der	sg	neut	-	(24
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	lieben	ADJA	*	lieb	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Gott	NN	*	gott	sg	masc	(PER*)	24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	(S(NP(NP*	der	sg	masc	-	(24
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	liebe	ADJA	*	liebe	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Gott	NN	*)	gott	sg	masc	(PER*)	24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	der	PDS	*)	der	sg	masc	-	(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Wie	NN	*)	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	sauer	ADJD	(S*	sauer	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	mir	PPER	*	sich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	der	ART	(NP*	der	sg	masc	-	(18
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Antrag	NN	*)	antrag	sg	masc	-	18)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	ward	VVFIN	*	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	den	PRELS	(S*	der	sg	masc	-	(18)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Dem	ART	(VP(NP*	der	sg	neut	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Herrn	NN	*)	herr	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	tun	VVINF	*))	tun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	verbunden	VVPP	*	verbinden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	war	VAFIN	*))	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ob	KOUS	*	ob	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	gewünscht	VVPP	*	wünschen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	ein	ART	*	ein	sg	neut	-	(25
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	offnes	ADJA	*	offn	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Ohr	NN	*	ohr	sg	neut	-	25)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	bei	APPR	*	bei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Euch	PPER	*	euch	sg	masc	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Zu	NN	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	finden	VVINF	*	finden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	wie	PWAV	*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	sehr	ADV	*	sehr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	mich	PPER	*	mich	sg	-	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	gefreut	VVPP	*	freuen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	Im	APPRART	*	in	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	Innersten	NN	*	innersten	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	gefreut	VVPP	*	freuen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	daß	KOUS	*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	Ihr	PPER	*	ihr	pl	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	rund	ADV	*	rund	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	Das	PDS	*	der	sg	neut	-	(18
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	alles	PIS	*	alle	sg	neut	-	18)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	33	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	34	ohne	KOUI	*	ohne	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	35	viel	PIAT	*	viel	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	36	Bedenken	NN	*	bedenken	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	37	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	38	von	APPR	*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	39	Euch	PPER	*	euch	pl	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	40	wies	VVFIN	*	weisen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	41	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	42	t	PPER	*	T	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	43	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	44	was	PRELS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	45	einem	ART	*	ein	sg	masc	-	(26
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	46	Ritter	NN	*	ritter	sg	masc	-	26)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	47	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	48	geziemt	VVPP	*	ziemen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	49	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(S*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*)	ihr	sg	neut	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	(VP*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	hats	ADV	(AVP*	hats	-	-	-	(18)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	doch	ADV	*)	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	nachgewirkt	VVPP	*	nachgewirken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*)))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wißt	VVFIN	*	wissen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(27)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	warum	PWAV	(S*	warum	-	-	-	(27
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	komme	VVFIN	*))	kommen	sg	-	-	27)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kaum	ADV	(VROOT(PSEUDO(S*	kaum	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Weiß	VVFIN	*	weiße	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(27)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	selbst	ADV	*)	selbst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	*	ihr	pl	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	habts	VAFIN	*	habts	pl	-	-	(18)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	überlegt	VVPP	*	überlegen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Habt	VAFIN	*	haben	sg	-	-	(28
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	gefunden	VVPP	*	finden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	daß	KOUS	*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	der	ART	*	der	sg	masc	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Patriarch	NN	*	patriarch	sg	masc	-	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	So	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Unrecht	NN	*	unrecht	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	daß	KOUS	*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	Ehr	NN	*	ehr	-	-	-	(29)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	Geld	NN	*	geld	sg	neut	-	(30)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	Durch	APPR	*	durch	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	seinen	PPOSAT	*	sein	sg	masc	-	(31|(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	Anschlag	NN	*	anschlag	sg	masc	-	31)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	gewinnen	VVINF	*	gewinnen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	daß	KOUS	*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	Ein	ART	*	ein	sg	masc	-	(32
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	Feind	NN	*	feind	sg	masc	-	32)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	ein	ART	*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	33	Feind	NN	*	feind	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	34	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	35	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	36	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	37	er	PPER	*	er	sg	masc	-	(32)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	38	unser	PPOSAT	*	unser	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	39	Engel	NN	*	engel	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	40	Auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	41	siebenmal	ADV	*	siebenmal	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	42	gewesen	VAPP	*	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	43	wäre	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	44	.	$.	*	--	-	-	-	28)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S(AVP(S*	der	sg	neut	-	(28)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	habt	VAFIN	*	haben	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(VP*	ihr	pl	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Fleisch	NN	(CNP*	fleisch	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Blut	NN	*))	blut	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	erwogen	VVPP	*))	erwägen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Und	KON	*)	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	tragt	VVFIN	(S*	tragen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Euch	PPER	*	euch	pl	masc	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	an	PTKVZ	*))	an	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ach	ITJ	(S*)	ach	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Gott	NN	(S*)	gott	-	-	-	(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(5|(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	frommer	ADJA	*	fromm	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	lieber	ADJA	*	lieber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Mann	NN	*)	mann	sg	masc	-	5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	gebt	VVPP	(VROOT(PSEUDO(S*	geben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*	euch	pl	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	zufrieden	ADJD	*)	zufrieden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Deswegen	PROAV	*	deswegen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	komm	VVIMP	*	komm	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	deswegen	PROAV	*	deswegen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	*	der	sg	masc	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Patriarchen	NN	*	patriarch	sg	masc	-	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	sprechen	VVINF	*	sprechen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Noch	ADV	*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	denk	ADJD	*	denk	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	über	APPR	*	über	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	jenen	PDAT	*	jener	sg	masc	-	(18
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Punkt	NN	*	punkt	sg	masc	-	18)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	wie	KOKOM	*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Gedacht	NN	*	gedacht	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	wollt	VMFIN	*	wollen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	um	APPR	*	um	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	alles	PIS	*	alle	sg	neut	-	(33
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	in	APPR	*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	der	ART	*	der	sg	fem	-	(21
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Welt	NN	*	welt	sg	fem	-	33)|21)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	Die	ART	*	der	sg	fem	-	(34
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	gute	ADJA	*	gut	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	Meinung	NN	*	meinung	sg	fem	-	34)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	verlieren	VVINF	*	verlieren	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	deren	PRELAT	*	der	pl	masc	-	(34)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	Mich	PPER	*	mich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	ein	ART	*	ein	sg	masc	-	(35
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	grader	ADJD	*	grader	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	33	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	34	frommer	ADJD	*	fromm	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	35	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	36	lieber	ADJA	*	lieber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	37	Mann	NN	*	mann	-	-	-	35)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	38	Einmal	ADV	*	einmal	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	39	gewürdiget	VVPP	*	gerdigen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	40	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	komme	VVFIN	*	kommen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	bloß	PTKVZ	*	bloß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Den	ART	(VP(NP*	der	pl	*	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Patriarchen	NN	*)	patriarch	pl	*	-	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	über	APPR	(PP*	über	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	eine	ART	*	ein	sg	fem	-	(36
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Sache	NN	*)	sache	sg	fem	-	36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Um	APPR	(PP*	um	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Rat	NN	*)	Rat	sg	masc	-	(37)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	fragen	VVINF	*)))	fragen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(NP*	ihr	pl	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	den	ART	(NP*	der	pl	masc	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Patriarchen	NN	*))	patriarch	pl	masc	-	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(CNP(NP*	ein	sg	masc	-	(26
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ritter	NN	*)	ritter	sg	masc	-	26)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	einen	ART	(NP*	ein	sg	masc	-	(38
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	–	ADJA	*	–	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Pfaffen	NN	*))	pfaffe	pl	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	38)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sich	PRF	(VROOT(PSEUDO(AP*	sich	sg	-	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	schüchtern	ADJD	*	schüchtern	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	umsehend	ADJD	*)	umsehend	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	*	der	sg	fem	-	(36
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Sach	NE	*	sach	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ist	NE	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	ziemlich	ADV	*	ziemlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	pfäffisch	ADJD	*	pfäffisch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gleichwohl	ADV	(VROOT(PSEUDO(S*	gleichwohl	-	-	-	(39
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	fragt	VVFIN	*	fragen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	fem	-	(38
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Pfaffe	NN	*	pfaff	sg	fem	-	38)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Den	NE	(MPN*	der	sg	masc	-	(26
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ritter	NE	*))	ritter	sg	masc	-	26)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	nie	ADV	*	nie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	die	ART	(S(NP*	der	sg	fem	-	(40
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Sache	NN	*)	sache	sg	fem	-	40)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	sei	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	auch	ADV	(AP*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	noch	ADV	*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	So	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	ritterlich	ADJD	*)))	ritterlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	39)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Weil	KOUS	*	weil	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(38)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	*	der	sg	neut	-	(41
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vorrecht	NN	*	vorrecht	sg	neut	-	41)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Sich	PRF	*	sich	sg	-	-	(38)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	vergehn	VVINF	*	vergehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	das	PDS	*	der	sg	neut	-	(41)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	unser	PPOSAT	*	unser	sg	neut	-	(26
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	einer	PIS	*	ein	sg	masc	-	26)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	ihm	PPER	*	ihm	sg	masc	-	(38)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	sehr	ADV	*	sehr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	beneidet	VVFIN	*	beneiden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Freilich	ADV	*	freilich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Für	APPR	*	für	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	mich	PPER	*	mich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	handeln	VVINF	*	handeln	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	hätte	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Rechenschaft	NN	*	rechenschaft	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	geben	VVINF	*	geben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	hätte	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	Was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	braucht	VVFIN	*	brauchen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	Euers	NE	*	euer	sg	masc	-	(8|(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	Patriarchen	NN	*	patriarch	sg	masc	-	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	(VROOT(PSEUDO*	aber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gewisse	FM	*	gewiß	-	-	-	(40
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Dinge	NN	(NP*	ding	-	-	-	40)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	will	VMFIN	(CS(S*	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	lieber	ADV	*	lieber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	schlecht	ADJD	*)	schlecht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Nach	APPR	(VP(PP*	nach	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	andrer	ADJA	*	andr	sg	fem	-	(42|(43)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Willen	NN	*)	wille	-	-	-	42)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	machen	VVINF	*	machen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	als	KOKOM	(AVP*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	allein	ADV	*))))	allein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Nach	APPR	(AP(PP*	nach	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	meinem	PIS	*)	mein	sg	masc	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	gut	ADJD	*)	gut	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Zudem	PROAV	*	zudem	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	seh	VVFIN	*	seh	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Religion	NN	*	religion	sg	fem	-	(44)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Partei	NN	*	partei	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	wer	PWS	*	wer	sg	masc	-	(329)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Sich	PRF	*	sich	sg	-	-	(46)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	drob	VVFIN	*	drob	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	noch	ADV	*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	unparteiisch	ADJD	*	unparteiisch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	glaubt	VVFIN	*	glauben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	Hält	NN	*	halten	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	ohn	PPER	*	ohn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	es	PPER	*	es	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	wissen	VVINF	*	wissen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	33	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	34	seiner	PPOSAT	*	sein	sg	fem	-	(44)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	35	Die	ART	*	der	sg	fem	-	(47
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	36	Stange	NN	*	stange	-	-	-	47)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	37	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Weil	KOUS	(VROOT(PSEUDO(S(S*	weil	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	ART	*	der	sg	neut	-	(45)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	einmal	ADV	*	einmal	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ist	VAFIN	*)	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Wirds	NN	*	wird	-	-	-	(45)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	recht	ADJD	(VP*	recht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	sein	VAINF	*))	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dazu	PROAV	*	dazu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	schweig	VVFIN	*	schweig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	lieber	ADV	*	lieber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	versteh	VVFIN	*	versteh	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	den	ART	(NP*	der	pl	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Herrn	NN	*	herr	pl	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	recht	ADV	*)))	recht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*)	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	(	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Laß	NN	*	lassen	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	sehn	CARD	*	sehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	warum	PWAV	*	warum	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	eigentlich	ADV	*	eigentlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	tun	VVINF	*	tun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Um	KOUI	(VROOT(PSEUDO(PP*	um	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Machtspruch	NN	*	machtspruch	sg	masc	-	(48)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	oder	KON	(CNP*	oder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Rat	NN	*	Rat	sg	masc	-	(49)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Um	KOUI	*	um	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	lautern	VVINF	*	lautern	pl	-	-	(48)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	oder	KON	*	oder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Gelehrten	ADJA	*	gelehrt	sg	masc	-	(49
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Rat	NN	*	Rat	sg	masc	-	49)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	)	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	–	$(	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	dank	APPR	*	dank	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Euch	PPER	*	euch	pl	*	-	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Bruder	NN	*	bruder	*	*	-	5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	dank	APPR	*	dank	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	Euch	PPER	*	euch	pl	masc	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	für	APPR	*	für	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	den	ART	*	der	sg	masc	-	(39
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	guten	ADJA	*	gut	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	Wink	NN	*	wink	sg	masc	-	39)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Patriarch	NN	*	patriarch	-	-	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Seid	VAFIN	(S*	sein	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	mein	PPOSAT	(NP*	mein	sg	neut	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Patriarch	NN	*))	patriarch	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Den	NE	(VP(NP*	der	sg	masc	-	(50
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Christen	NN	*)	christ	sg	masc	(MISC*)	50)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	mehr	ADV	*	mehr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	im	APPRART	(CPP(PP*	in	sg	neut	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Patriarchen	NN	*)	patriarchen	sg	neut	-	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	als	APPR	(PP*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Den	ART	*	der	pl	*	-	(51
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Patriarchen	NN	*	patriarch	pl	*	-	51)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	in	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	dem	ART	*	der	sg	neut	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Christen	NN	*)))	christ	sg	neut	(MISC*)	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	fragen	VVINF	*))	fragen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	*	der	sg	fem	-	(36
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sach	NE	*	sach	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	die	PDS	*	der	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(NP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	weiter	ADV	*	weiter	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Herr	NN	(NP*	herr	sg	masc	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	(CO(AVP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	weiter	ADV	*))))	weiter	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wozu	PWAV	(VROOT(PSEUDO*	wozu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	(S(NP*	der	sg	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Herr	NN	*)	herr	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	verkennt	VVFIN	*	verkennen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	*)	mich	sg	masc	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wer	PWS	(S*	wer	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	viel	PIS	*	viel	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Hat	VAFIN	(S*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	viel	ADV	(VP*	viel	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	sorgen	VVINF	*))))	sorgen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	und	KON	(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	ja	ADV	(VP*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Mich	APPR	(PP*	mich	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Einer	ART	*	einer	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Sorge	NN	*)	sorge	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	gelobt	VVPP	*))	loben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	O	NE	*	O	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	gut	ADJD	*	gut	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hört	VVIMP	*	hören	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	seht	VVFIN	*	sehen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dort	ADV	(VROOT(PSEUDO(S*	dort	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	meinem	PPOSAT	*	mein	sg	masc	-	(52|(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Glück	NN	*)	glück	sg	masc	-	52)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	er	PPER	(NP*	er	sg	masc	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	selbst	ADV	*))	selbst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Bleibt	VVFIN	(VROOT(PSEUDO(S*	bleiben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	hier	ADV	*	hier	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(NP*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	stehn	CARD	*))	stehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	(VP*	euch	sg	neut	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	erblickt	VVPP	*))	erblicken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(CNP(NP*	der	sg	masc	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Patriarch	NN	*	patriarch	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	welcher	PRELS	(S*	welcher	sg	masc	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	allem	PIS	*)	alle	sg	neut	-	(53
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	geistlichen	ADJA	(NP*	geistlich	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Pomp	NN	*)	pomp	sg	neut	-	53)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	den	ART	(NP*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	einen	ADJA	*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Kreuzgang	NN	*)	kreuzgang	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	heraufkömmt	VVFIN	*))	heraufkömmen	sg	-	-	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	die	ART	(NP*	der	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Vorigen	NN	*))	vorige	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(326)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wich	VVFIN	*	weichen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	*	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	lieber	ADV	*	lieber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	aus	PTKVZ	*)	aus	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wär	VAFIN	*	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	mein	PPOSAT	*	mein	-	-	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Mann	NN	*	mann	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ein	ART	(NP*	ein	sg	masc	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	dicker	ADJA	(CAP*	dick	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	roter	ADJA	*))	rot	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	freundlicher	ADJA	*	freundlich	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Prälat	NN	*	prälat	sg	masc	-	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	welcher	PWAT	(NP*	welcher	sg	masc	-	(53
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Prunk	NN	*))	prunk	sg	masc	-	53)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	solltet	VMFIN	*	sollten	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	erst	ADV	(NP*	erst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	sehn	CARD	*)	sehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Nach	APPR	(PP*	nach	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Hofe	NN	*)	hof	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	sich	PRF	(VP*	sich	sg	-	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	erheben	VVINF	*))	erheben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Itzo	NE	(VROOT(PSEUDO(S*	itzo	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Er	PPER	(NP*	er	sg	masc	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	von	APPR	(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	einem	ART	*	ein	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Kranken	NN	*)))	kranke	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	sich	PRF	*	sich	sg	-	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	da	ADV	*	da	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nicht	PTKNEG	*	nicht	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Saladin	NE	*	saladin	sg	fem	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	schämen	VVINF	*	schämen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	müssen	VMINF	*	müssen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*))	patriarch	-	-	-	(8)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	indem	KOUS	(VROOT(PSEUDO(S(S*	indem	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	näher	ADJD	*	nah	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	kömmt	VVFIN	*)	kömmen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	winkt	VVFIN	*	winken	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	dem	ART	(NP*	der	sg	masc	-	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Bruder	NN	*))	bruder	sg	masc	-	5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hier	ADV	(VROOT(PSEUDO(S*)	hier	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	(NP*	der	sg	fem	-	(54
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Tempelherr	NN	*))	tempelherr	sg	fem	-	54)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Er	PPER	*	er	sg	masc	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Weiß	NN	*	weiß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*))	patriarch	-	-	-	(8)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	auf	APPR	(VROOT(PSEUDO(AP(PP*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*)	ihn	sg	masc	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	zugehend	ADJD	*	zugehend	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	indem	KOUS	(S*	indem	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	(NP*	der	sg	masc	-	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Bruder	NN	*)	bruder	sg	masc	-	5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	das	ART	(VP(NP*	der	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Gefolge	NN	*)	gefolge	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	zurücktreten	VVINF	*)))	zurücktreten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Herr	NN	(NP*	herr	sg	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ritter	NE	*)	ritter	sg	masc	(PER*)	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sehr	ADV	(NP(AP*	sehr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	erfreut	ADJD	*)	erfreuen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Den	ART	*	der	pl	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	braven	ADJA	*)	brave	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	jungen	ADJA	(NP*	jung	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Mann	NN	*	mann	-	-	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	sehn	CARD	*))	sehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ei	XY	*	ei	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	noch	ADV	(AVP*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	So	ADV	*)	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	gar	ADV	(S(ISU*	gar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	jung	ADJD	*))	jung	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(VP(VP(AP(AVP*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(NP(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Gottes	NN	*	gott	sg	masc	-	(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Hülfe	NN	*	hülfe	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	daraus	PROAV	*)	daraus	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Kann	NE	*))	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	etwas	PIS	*))	etwas	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	werden	VAINF	*)	werden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mehr	ADV	*	mehr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ehrwürd	NE	*	ehrwürd	-	-	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ger	ADJA	*	g	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Herr	NN	*	herr	sg	masc	-	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Wohl	NN	*	wohl	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	schwerlich	ADJD	*	schwerlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	als	KOKOM	*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	schon	ADV	*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	eher	ADV	*	eher	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	weniger	ADV	*	weniger	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wünsche	VVFIN	*	wünschen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wenigstens	ADV	*	wenigstens	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*	so	-	-	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	(NP*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	frommer	ADJA	*	fromm	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Ritter	NN	*)	ritter	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	lange	ADV	(AVP*	lange	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	noch	ADV	*)	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Der	ART	(NP*	der	sg	masc	-	(55
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	lieben	ADJA	*	lieben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Christenheit	NN	*	christenheit	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	55)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	der	ART	(CS(S(NP*	der	sg	fem	-	(56
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Sache	NN	*)	sache	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Gottes	NN	(CNP(NP*	gott	sg	masc	(LOC*)	56)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	Ehr	NN	*))	ehr	sg	fem	-	(29)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Frommen	NN	*)	fromme	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	blühn	VVFIN	*)	blühn	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	grünen	VVFIN	*))	grün	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	möge	VMFIN	*))	mögen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S(S*	der	sg	neut	-	(29)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	(VP*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	fehlen	VVINF	*))	fehlen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	fein	ADJD	*	fein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Die	ART	(NP*	der	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	junge	ADJA	*	jung	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Tapferkeit	NN	*)	tapferkeit	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	dem	ART	(VP(NP*	der	sg	masc	-	(57
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	reifen	ADJA	*	reifen	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Rate	NN	*	rate	sg	fem	-	57)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Des	ART	(NP*	der	sg	masc	-	(58
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Alters	NN	*))	alter	sg	masc	-	58)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	folgen	VVINF	*)	folgen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	will	VMFIN	*))	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Womit	NN	*	womit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wär	VAFIN	*	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	sonst	ADV	*	sonst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Dem	ART	*	der	sg	neut	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Herrn	NN	*	herr	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	dienen	VVINF	*	dienen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mit	APPR	(VROOT(PSEUDO(S(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	dem	ART	*	der	sg	masc	-	(57
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nämlichen	ADJA	*)	nämlich	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	57)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Woran	PWAV	(S*	woran	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	es	PPER	*	es	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	meiner	PPOSAT	(NP*	mein	sg	fem	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Jugend	NN	*)	jugend	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	fehlt	VVFIN	*	fehlen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Rat	NN	*)))	Rat	-	-	-	(37)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Recht	NN	(VROOT(PSEUDO(NP*	recht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	gern	ADV	*)	gern	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	(S*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(VP(NP*	der	sg	masc	-	(37
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Rat	NN	*)	Rat	sg	masc	-	37)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	anzunehmen	VVIZU	*))	annehmen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	(59
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	blindlings	ADV	*	blindlings	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*)	nicht	-	-	-	59)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	(NP*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*))	der	sg	neut	-	(59)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ei	XY	*	ei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	freilich	ADV	(S*	freilich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Muß	NN	*	müssen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	niemand	PIS	(VP*	niemand	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	(NP*	der	sg	fem	-	(60
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Vernunft	NN	*	vernunft	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	die	ART	(S(NP*	der	sg	fem	-	(60)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Gott	NN	*)	gott	sg	fem	-	(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	gab	VVFIN	*	geben	sg	-	-	60)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Zu	PPER	(S*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	brauchen	VVFIN	*)))	brauchen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	unterlassen	VVINF	*))	unterlassen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	wo	PWAV	(S*	wo	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	sie	PPER	*	sie	sg	fem	-	(60)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	hin	ADV	*	hin	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Gehört	VVFIN	*)	gehören	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gehört	VVFIN	(S*	gehören	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*)	sie	sg	fem	-	(60)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	(AVP*	aber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	überall	ADV	*)	überall	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Denn	KON	(S*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	hin	ADV	*)	hin	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	O	XY	*	O	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nein	PTKANT	*	nein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Zum	APPRART	(NP(PP*	zu	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Beispiel	NN	*)	beispiel	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	wenn	KOUS	(NP(CS(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	uns	PPER	*	uns	pl	*	-	(61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Gott	NN	*	gott	sg	masc	(PER*)	(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Durch	APPR	(PP*	durch	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	einen	PIS	*	ein	sg	masc	-	(62
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	seiner	PPOSAT	(NP*	sein	sg	masc	-	(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Engel	NN	*)))	engel	sg	-	-	62)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	–	NN	(S*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	sagen	VVINF	*)	sagen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Durch	APPR	(PP*	durch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	einen	ART	*	ein	sg	masc	-	(62
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	Diener	NN	*	diener	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	seines	PPOSAT	(NP*	sein	sg	neut	-	(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Worts	NN	*))))	wort	sg	neut	-	62)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	–	KOUS	(S*	–	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	ein	ART	(NP*	ein	sg	neut	-	(63
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	Mittel	NN	*)	mittel	sg	neut	-	63)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	Bekannt	NN	(VP*	bekannt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	machen	VVINF	*))	machen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	würdiget	VVFIN	*	würdiget	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	das	ART	(VP(NP*	der	sg	neut	-	(63)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	Wohl	NN	*	wohl	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	33	Der	ART	(NP*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	34	ganzen	ADJA	*	ganz	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	35	Christenheit	NN	*)	christenheit	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	36	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	37	das	ART	(NP*	der	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	38	Heil	NN	*	heil	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	39	der	ART	(CNP(NP*	der	sg	masc	-	(64
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	40	Kirche	NN	*)	kirche	sg	masc	-	64)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	41	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	42	Auf	APPR	(AVP*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	43	irgend	ADV	*)	irgend	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	44	eine	ART	(NP*	ein	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	45	ganz	ADV	(AP*	ganz	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	46	besondre	ADJA	*)	besondre	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	47	Weise	NN	*	weise	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	48	Zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	49	fördern	NN	*)))))	fördern	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	50	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	51	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	52	befestigen	VVINF	*)))))	befestigen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	53	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	54	wer	PWS	(S*	wer	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	55	darf	VMFIN	*	dürfen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	56	Sich	PRF	*	sich	sg	-	-	(61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	57	da	ADV	*	da	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	58	noch	ADV	(AP*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	59	unterstehn	ADJD	*)	unterstehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	60	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	61	die	ART	(NP*	der	sg	fem	-	(56
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	62	Willkür	NN	*)	willkür	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	63	des	ART	(NP*	der	sg	masc	-	(24
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	64	,	$,	*	--	-	-	-	56)|24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	65	Der	PRELS	(S*	der	sg	masc	-	(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	66	die	ART	(NP*	der	sg	fem	-	(60
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	67	Vernunft	NN	*)	vernunft	sg	fem	-	60)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	68	erschaffen	VVFIN	*))	erschaffen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	69	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	70	nach	APPR	(VP(PP*	nach	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	71	Vernunft	NN	*)	vernunft	sg	fem	-	(60)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	72	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	73	untersuchen	VVINF	*)))	untersuchen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	74	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	ART	(NP*	der	sg	neut	-	(65
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ewige	ADJA	*	ewig	sg	neut	-	65)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Gesetz	NN	*	gesetz	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(NP*	der	sg	fem	-	(24
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Herrlichkeit	NN	*	herrlichkeit	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	des	ART	(NP*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Himmels	NN	*)	himmel	sg	masc	-	24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	nach	APPR	(NP(PP*	nach	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Den	NE	*	der	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	kleinen	ADJA	*	klein	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Regeln	NN	*)	regel	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	einer	PIS	*)))	ein	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	eiteln	VVFIN	*	eiteln	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Ehre	NN	(VP*	ehre	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	prüfen	VVINF	*)))	prüfen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(CO(AVP*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	hiervon	PROAV	*	hiervon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	genug	ADV	*))	genug	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Es	PPER	(NP*	es	sg	neut	-	(36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	worüber	PWAV	(S*	worüber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	unsern	PPOSAT	(NP*	unsern	-	-	-	(37
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Rat	NN	*)	Rat	sg	masc	-	37)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	für	APPR	(PP*	für	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	itzt	ADJD	*))))	itzen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Der	ART	(S(NP*	der	sg	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Herr	NN	*)	herr	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	verlangt	VVFIN	*)	verlangen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gesetzt	VVPP	*	setzen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ehrwürd	NE	*	ehrwürd	-	-	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ger	ADJA	*	g	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Vater	NN	*	vater	-	-	-	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ein	ART	*	ein	sg	neut	-	(66
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Jude	NN	*	jude	sg	neut	-	66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	hätt	VAFIN	*	hätt	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	ein	ART	*	ein	sg	neut	-	(67
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	einzig	ADJD	*	einzig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Kind	NN	*	kind	sg	neut	-	67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	–	NN	*	–	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	es	PPER	*	es	sg	neut	-	(67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	sei	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Ein	ART	*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	Mädchen	NN	*	mädchen	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	–	$.	*	–	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	das	PDS	*	der	sg	neut	-	(67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	er	PPER	*	er	sg	masc	-	(66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	mit	APPR	*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	der	ART	*	der	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	größten	ADJA	*	groß	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	Sorgfalt	NN	*	sorgfalt	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	Zu	APPR	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	allem	PIS	*	alle	sg	neut	-	(68
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	Guten	NN	*	gute	pl	*	-	68)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	auferzogen	VVPP	*	auferehen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	33	das	ART	*	der	sg	neut	-	(67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	34	Er	NN	*	er	sg	masc	-	(66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	35	liebe	VVFIN	*	lieben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	36	mehr	PIS	*	mehr	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	37	als	KOKOM	*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	38	seine	PPOSAT	*	sein	sg	fem	-	(66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	39	Seele	NN	*	seele	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	40	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	41	das	PRELS	*	der	sg	neut	-	(67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	42	Ihn	PPER	*	ihn	sg	masc	-	(66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	43	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	44	mit	APPR	*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	45	der	ART	*	der	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	46	frömmsten	ADJA	*	frömmst	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	47	Liebe	NN	*	liebe	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	48	liebe	VVFIN	*	lieben	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	49	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	würd	VAFIN	*	würd	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	unser	PPOSAT	*	unser	sg	masc	-	(55
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	einem	PIS	*	ein	sg	masc	-	55)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	hinterbracht	VVPP	*	hintbringen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Dies	APPRART	*	dieser	sg	neut	-	(67
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Mädchen	NN	*	mädchen	sg	neut	-	67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	sei	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	des	ART	*	der	sg	masc	-	(66
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Juden	NN	*	Jude	sg	masc	(MISC*)	66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Tochter	NN	*	tochter	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Er	PPER	*	er	sg	masc	-	(66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	hab	VAFIN	*	hab	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	es	PPER	*	es	sg	neut	-	(67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	in	APPR	*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	der	ART	*	der	sg	fem	-	(69
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	Kindheit	NN	*	kindheit	sg	fem	-	69)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	aufgelesen	VVPP	*	auflesen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	Gekauft	NN	*	gekauft	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	gestohlen	VVPP	*	stehlen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	–	NN	*	–	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	Ihr	PPER	*	ihr	pl	*	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	wollt	VMFIN	*	wollen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	33	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	34	man	PIS	*	man	sg	*	-	(61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	35	wisse	VVFIN	*	wissen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	36	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	37	Das	ART	*	der	sg	neut	-	(67
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	38	Mädchen	NN	*	mädchen	sg	neut	-	67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	39	sei	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	40	ein	ART	*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	41	Christenkind	NN	*	christenkind	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	42	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	43	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	44	sei	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	45	Getauft	NN	*	getauft	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	46	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	47	der	ART	*	der	sg	masc	-	(66
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	48	Jude	NN	*	jude	sg	masc	-	66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	49	hab	VAFIN	*	hab	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	50	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	51	es	PPER	*	es	sg	neut	-	(67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	52	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	53	als	APPR	*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	54	Jüdin	NN	*	jüdin	sg	fem	-	(70)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	55	Erzogen	VVPP	*	erziehen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	56	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	57	laß	VVFIN	*	lassen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	58	es	PPER	*	es	sg	neut	-	(67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	59	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	60	als	APPR	*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	61	Jüdin	NN	*	jüdin	sg	fem	-	(70)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	62	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	63	Als	APPR	*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	64	seine	PPOSAT	*	sein	sg	fem	-	(71|(66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	65	Tochter	NN	*	tochter	sg	fem	-	71)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	66	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	67	verharren	VVINF	*	verharren	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	68	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	69	–	PPER	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	70	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	71	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	72	Ehrwürd	NE	*	ehrwürd	sg	masc	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	73	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	74	ger	ADJA	*	g	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	75	Vater	NN	*	vater	pl	masc	-	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	76	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	77	was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	78	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	79	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	80	hierbei	ADV	*	hierbei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	81	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	82	Zu	NN	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	83	tun	VVINF	*	tun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	84	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mich	PPER	(VROOT(PSEUDO(S*	mich	sg	*	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	schaudert	VVFIN	*)	schaudern	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	allererst	ADV	*	allererst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Erkläre	NN	*	erkläre	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	sich	PRF	*	sich	sg	-	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	*	der	sg	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Herr	NN	*	herr	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	ob	KOUS	*	ob	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*	so	-	-	-	(36
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	ein	ART	*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Fall	NN	*	fall	sg	masc	-	36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Ein	ART	*	ein	sg	neut	-	(72
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Faktum	NN	*	faktum	sg	neut	-	72)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	oder	KON	*	oder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	eine	ART	*	ein	sg	fem	-	(73
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Hypothes	NN	*	hypothes	-	-	-	73)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(74)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	sagen	VVINF	*)	sagen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ob	KOUS	(S(AVP(CS(S*	ob	-	-	-	(74
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(NP*	der	sg	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Herr	NN	*)	herr	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	sich	PRF	*	sich	sg	-	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	das	ART	(NP*	der	sg	neut	-	74)|(36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Nur	NN	*)	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	bloß	ADV	(AVP*	bloß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	so	ADV	*)	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	dichtet	VVFIN	*)	dichten	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	oder	KON	*	oder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	obs	NN	(S*	ob	-	-	-	(36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	geschehn	VVPP	*))	geschehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	Und	KON	*)	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	fortfährt	VVFIN	*	fortfahren	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	zu	PTKA	(AP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	geschehn	ADJD	*)))	geschehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	glaubte	VVFIN	*	glauben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	(VP(NP*	der	sg	neut	-	(74)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Sei	NN	*	sei	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	eins	CARD	*)	eins	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	um	KOUI	*	um	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Euer	PPOSAT	(NP*	euer	*	*	-	(37|(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Hochehrwürden	NN	*	hochehrwürd	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Meinung	NN	(NP*	meinung	sg	fem	-	37)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Bloß	NN	*))	bloß	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	vernehmen	VVINF	*)))	vernehmen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Eins	NN	(VROOT(PSEUDO*	eins	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Da	KOUS	*	da	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	seh	XY	*	seh	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	*	der	sg	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Herr	NN	*	herr	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Wie	PWAV	*	wie	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	*	sich	sg	-	-	(60)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	*	der	sg	fem	-	(60
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	stolze	ADJA	*	stolz	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	menschliche	ADJA	*	menschlich	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Vernunft	NN	*	vernunft	sg	fem	-	60)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Im	APPRART	*	in	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Geistlichen	NN	*	geistliche	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	irren	VVINF	*	irren	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mit	APPR	*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nichten	VMFIN	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(36
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	vorgetragne	ADJA	*	vorgetragn	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Fall	NN	*)	fall	sg	masc	-	36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ein	ART	(NP*	ein	sg	neut	-	(73
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Spiel	NN	*	spiel	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	des	ART	(NP*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Witzes	NN	*))	witz	sg	masc	-	73)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	so	ADV	(S*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	verlohnt	VVFIN	*	verlohnen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	es	PPER	*	es	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	sich	PRF	*	sich	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Der	ART	(NP*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Mühe	NN	*)	mühe	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	im	APPRART	(PP*	in	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Ernst	NN	*)))	ernst	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	ihn	PPER	(VP*	ihn	sg	masc	-	(36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	durchzudenken	VVIZU	*)	durchzudenken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	(VP(VP(NP*	der	pl	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Herrn	NN	*	herr	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	damit	PROAV	(S(VP*	damit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	das	ART	*	der	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Theater	NN	*)	theater	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Verwiesen	VVPP	*)	verweisen	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	haben	VAFIN	*)	haben	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	wo	PWAV	(S*	wo	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	dergleichen	PIS	*	dergleichen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	pro	APPR	(PP*	pro	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Et	NN	*)	et	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	contra	VVFIN	*	contra	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	sich	PRF	*	sich	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	vielem	ADJA	*	vieler	sg	neut	-	(29
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	Beifall	NN	*)	beifall	sg	neut	-	29)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	könnte	VMFIN	*))	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Behandeln	VVINF	*)	behandeln	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	lassen	VVINF	*))	lassen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	sg	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Herr	NN	*	herr	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	*	mich	sg	-	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	aber	ADV	*	aber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	bloß	ADV	*	bloß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	mit	APPR	*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	einer	ART	*	ein	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	theatral	ADJD	*	theatral	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	schen	VVFIN	*	sch	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Schnurre	NE	*	schnurr	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Zum	APPRART	*	zu	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	besten	ADJA	*	gut	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	der	ART	*	der	sg	masc	-	(36
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	Fall	NN	*	fall	sg	masc	-	36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	ein	ART	*	ein	sg	neut	-	(72
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Faktum	NN	*	faktum	sg	neut	-	72)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	hätt	VAFIN	*	hätt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	Er	PPER	*	er	sg	masc	-	(36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	sich	PRF	*	sich	sg	-	-	(36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	gar	ADV	*	gar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	in	APPR	*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	unsrer	ADJA	*	unsrer	sg	fem	-	(14|(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	Diözes	NN	*	diöz	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	'	$(	*	--	-	-	-	14)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	33	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	34	In	APPR	*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	35	unsrer	ADJD	*	unsrer	sg	masc	-	(14|(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	36	lieben	ADJA	*	lieb	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	37	Stadt	NN	*	stadt	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	38	Jerusalem	NE	*	jerusalem	sg	neut	(LOC*)	14)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	39	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	40	Eräugnet	NN	*	eräugnet	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	41	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	42	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	43	ja	ADV	*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	44	alsdann	ADV	*	alsdann	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	45	–	CARD	*	–	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	alsdann	ADV	*	alsdann	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dann	ADV	(VROOT(PSEUDO(S*	dann	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wäre	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	*	der	sg	neut	-	(66
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Juden	NN	*)	Jude	sg	neut	-	66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	fördersamst	VVFIN	*	fördersamen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Die	ART	(NP*	der	sg	fem	-	(75
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Strafe	NN	*	strafe	sg	fem	-	75)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	vollziehn	NN	*)	vollziehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	die	ART	(NP*	der	sg	fem	-	(75)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	päpstliches	ADJA	*))	päpstlich	sg	neut	-	(76)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Und	KON	(NP*	und	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	kaiserliches	ADJA	*	kaiserlich	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Recht	NN	*)	recht	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	so	ADV	(NP(AP*	so	-	-	-	(36
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	einem	ART	*)	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Frevel	NN	*)	frevel	sg	masc	-	36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	So	ADV	(VP*	so	-	-	-	(36
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	einer	ART	(NP*	ein	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	Lastertat	NN	*)	lastertat	sg	fem	-	36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	bestimmen	VVINF	*))	bestimmen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*)	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	zwar	ADV	*	zwar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	bestimmen	VVFIN	*	bestimmen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	obbesagte	ADJA	(NP*	obbesagt	pl	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Rechte	NN	*	recht	pl	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Dem	ART	(NP*	der	sg	neut	-	(77
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Juden	NN	*)	Jude	pl	masc	(MISC*)	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	welcher	PRELS	(S*	welcher	pl	masc	-	(77)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	einen	ART	(NP*	ein	sg	masc	-	(55
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Christen	NN	*	christ	sg	masc	-	55)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	zur	APPRART	(PP*	zu	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Apostasie	NN	*))	apostasie	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	verführt	VVFIN	*))	verführen	sg	-	-	77)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Den	ART	(NP*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Holzstoß	NN	*))	holzstoß	sg	masc	(MISC*)	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	–	$.	*))	–	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*)	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wie	PWAV	*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	vielmehr	ADV	*	vielmehr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	(NP*	der	sg	neut	-	(78
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Juden	NN	*	Jude	sg	neut	(MISC*)	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	78)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Der	PRELS	(S*	der	sg	masc	-	(78)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Gewalt	NN	*)	gewalt	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	ein	ART	(NP*	ein	sg	neut	-	(67
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	armes	ADJA	*	arm	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Christenkind	NN	*	christenkind	sg	neut	-	67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Dem	ART	(NP*	der	sg	neut	-	(55
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Bunde	NN	*	bunde	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	seiner	PPOSAT	(NP*	sein	pl	masc	-	(67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Tauf	NN	*)))	tauf	-	-	-	55)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	entreißt	VVFIN	*)))	entreißen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nicht	PTKNEG	(CNP(NP*	nicht	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	alles	PIS	*)	alle	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	was	PRELS	(NP*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	man	PIS	*))	man	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Kindern	NN	*	kind	pl	neut	-	(79)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	tut	VVFIN	*	tun	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Gewalt	NN	*)	gewalt	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Zu	PTKZU	*	zu	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	sagen	VVINF	*	sagen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	–	PPER	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ausgenommen	VVPP	*	ausnehmen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	die	ART	*	der	sg	fem	-	(64
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Kirch	NE	*	kirch	sg	fem	(PER*)	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	64)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	An	APPR	*	an	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Kindern	NN	*	kind	pl	neut	-	(79)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	tut	VVFIN	*	tun	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	aber	ADV	(VP*	aber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	(PP*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	*	der	sg	neut	-	(67
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Kind	NN	(CNP*	kind	sg	neut	-	67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Erbarmte	NN	*)	erbarmte	pl	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	seiner	PPOSAT	*	sein	pl	neut	-	(67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	sich	PRF	(S*	sich	sg	-	-	(66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	(NP*	der	sg	masc	-	(66
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Jude	NN	*)	jude	sg	masc	-	66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Vielleicht	NN	*	vielleicht	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	im	APPRART	(PP*	in	sg	neut	-	(80
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Elend	NN	*))	elend	sg	neut	-	80)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	umgekommen	VVPP	*)	umkommen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	wäre	VAFIN	*)	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Tut	XY	*	tut	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(66
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Jude	NN	*)	jude	sg	masc	-	66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	verbrannt	VVPP	*)	verbrennen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	besser	ADJD	*	gut	-	-	-	(81
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	81)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Es	PPER	*	es	sg	neut	-	(67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	wäre	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	hier	ADV	(VP*	hier	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	im	APPRART	(PP*	in	sg	neut	-	(80
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Elend	NN	*)	elend	-	-	-	80)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	umgekommen	VVPP	*))	umkommen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Als	NE	*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	zu	APPR	(VP(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	seinem	PPOSAT	*	sein	sg	masc	-	(82|(67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	ewigen	ADJA	*	ewig	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Verderben	NN	*)	verderben	sg	neut	-	82)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Es	PPER	(NP*	es	sg	neut	-	(67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	so	ADV	*)	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	gerettet	VVPP	*))	retten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	ward	VVFIN	*	werden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Zu	APPR	(NP(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	dem	PDS	*)	der	sg	neut	-	(81)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	was	PRELS	(S*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Der	ART	(VP(NP*	der	sg	masc	-	(66
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Jude	NN	*	jude	sg	masc	-	66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Gott	NN	*)	gott	sg	masc	(PER*)	(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	denn	ADV	*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	vorzugreifen	VVIZU	*)))	vorgreifen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gott	NN	*	gott	sg	masc	-	(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kann	NE	*	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wen	PWS	*	wen	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	retten	VVINF	*	retten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	schon	ADV	*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	ohn	PPER	*	ohn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	ihn	PPER	*	ihn	sg	masc	-	(66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	retten	VVFIN	*	retten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Trotz	VVFIN	*	trotz	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	masc	-	(66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	sollt	VMFIN	*	sollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	meinen	VVFIN	*	meinen	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	–	PPER	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	selig	ADJD	*	selig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	machen	VVINF	*	machen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Tut	XY	*	tut	-	-	-	(83
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(66
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Jude	NN	*)	jude	sg	masc	-	66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	verbrannt	VVPP	*)	verbrennen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	83)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	*	der	sg	neut	-	(83)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	geht	VVFIN	*	gehen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nah	ADJD	*	nah	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Besonders	ADV	(VROOT(PSEUDO(CS(S*	besonders	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	da	KOUS	*	da	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	man	PIS	*	man	sg	*	-	(84)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	(S*	er	sg	masc	-	(85|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	habe	VAFIN	*	haben	sg	-	-	85)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Das	ART	(NP*	der	sg	neut	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Mädchen	NN	*)	mädchen	sg	neut	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	sowohl	KON	*	sowohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	in	APPR	(S(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	seinem	PPOSAT	*	sein	sg	neut	-	(327)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	als	KOKOM	(AP*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Vielmehr	ADV	*	vielmehr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	in	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	keinem	PIAT	*	kein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	Glauben	NN	*)	glaube	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	auferzogen	VVPP	*	auferehen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	Und	KON	(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	von	APPR	(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	Gott	NN	*)	gott	sg	masc	(PER*)	(87)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	mehr	ADV	*)	mehr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	weniger	ADV	*))	weniger	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	Gelehrt	NN	*)	gelehrt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	33	der	ART	(NP*	der	sg	masc	-	(60
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	34	Vernunft	NN	*)	vernunft	sg	masc	-	60)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	35	genügt	VVFIN	*)))	genügen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	36	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Tut	XY	*	tut	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(66
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Jude	NN	*	jude	sg	masc	-	66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	verbrannt	VVPP	*	verbrennen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	allein	ADV	*	allein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Schon	ADV	*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	dieserwegen	PDAT	*	dieserwegen	-	-	-	(85)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	wert	ADJD	*	wert	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	dreimal	ADV	*	dreimal	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	verbrannt	VVPP	*	verbrennen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Zu	NN	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	werden	VAINF	*	werden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	ein	ART	*	ein	sg	masc	-	(79
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kind	NN	*	kind	sg	masc	-	79)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ohn	PPER	*	ohn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	allen	PIAT	*	aller	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Glauben	NN	*	glaube	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Erwachsen	NN	*	erwachsen	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	lassen	VVINF	*	lassen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	große	ADJA	*	groß	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Pflicht	NN	*	pflicht	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Zu	NN	*)	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	glauben	VVFIN	*	glauben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	ganz	ADV	(VP(CAVP*	ganz	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	gar	ADV	*)	gar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	ein	ART	(NP*	ein	sg	neut	-	(79
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Kind	NN	*)	kind	sg	neut	-	79)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	lehren	VVINF	*))	lehren	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKA	(AP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	arg	ADJD	*))	arg	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mich	PPER	(S*	mich	sg	*	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wundert	VVFIN	*	wundern	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	sehr	ADV	*	sehr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Herr	NN	(NP*	herr	sg	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ritter	NE	*)	ritter	sg	masc	(PER*)	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Euch	PPER	(NP*	euch	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	selbst	ADV	*))	selbst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ehrwürd	NE	*	ehrwürd	-	-	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ger	ADJA	*	g	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Herr	NN	*	herr	sg	masc	-	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	*	der	sg	neut	-	(88
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	übrige	ADJA	*	übrig	sg	neut	-	88)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Wenn	KOUS	*	wenn	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Gott	NN	*	gott	sg	masc	(PER*)	(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	in	APPR	*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	der	ART	*	der	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Beichte	NN	*	beichte	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Will	VMFIN	*	wollen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	gehn	CARD	*	gehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	mir	PPER	(VROOT(PSEUDO(S*	sich	sg	*	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nicht	PTKNEG	(NP(AVP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	einmal	ADV	*)	einmal	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Rede	NN	*)	rede	-	-	-	(88)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	stehn	VVFIN	*)	stehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Den	ART	(NP*	der	sg	masc	-	(66
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Bösewicht	NN	*	bösewicht	sg	masc	-	66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Den	NE	(VP(NP*	der	sg	masc	-	(66
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Juden	NE	*)	Jude	pl	masc	-	66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	nennen	VVINF	*))	nennen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	*	sich	sg	*	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Zur	APPRART	(VP(PP*	zu	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Stelle	NN	*)	stelle	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	schaffen	VVINF	*))	schaffen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	O	NE	*	O	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	da	ADV	(S*)	da	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	weiß	VVFIN	(S*	weiß	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Rat	NN	*)	Rat	sg	masc	-	(37)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	geh	XY	*	geh	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	sogleich	ADV	*	sogleich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	zum	APPRART	*	zu	-	-	-	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Sultan	NN	*	sultan	sg	neut	-	7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Saladin	NN	*	saladin	-	-	(PER*)	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vermöge	NN	(NP*	vermöge	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(NP*	der	sg	fem	-	(89
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Kapitulation	NN	*	kapitulation	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	89)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Die	NN	(CS(S*	der	sg	fem	-	(89)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	beschworen	VVFIN	*	beschwören	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	muß	VMFIN	(S*	müssen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	uns	PPER	*	uns	pl	*	-	(84)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	muß	VMFIN	(S*	müssen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	uns	PPER	*	uns	pl	*	-	(84)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	schützen	VVINF	(VP*	schützen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Bei	APPR	(CO(PP*	bei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	allen	PIAT	*	aller	pl	*	-	(76
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	Rechten	NN	*)	rechte	pl	*	-	76)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	allen	PIAT	(VP(NP*	aller	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	Lehren	NN	*)	lehre	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	schützen	VVINF	*))))))	schützen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	Die	PDS	(S*	der	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	wir	PPER	*	wir	pl	*	-	(84)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	unsrer	ADJD	(AP*	unsrer	sg	*	-	(90|(84)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	allerheiligsten	ADJA	*))	allerheiligster	pl	fem	-	90)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	Religion	NN	*	religion	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	nur	ADV	(AVP*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	33	immer	ADV	*)	immer	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	34	rechnen	VVINF	*	rechnen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	35	dürfen	VMFIN	*))))	dürfen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	36	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gottlob	NE	(VROOT(PSEUDO(MPN*	gottlob	-	-	(PER*)	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	wir	PPER	(VROOT(PSEUDO(S*	wir	pl	*	-	(55)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	haben	VAFIN	*	haben	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(NP*	der	sg	neut	-	(24
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Original	NN	*))	original	sg	neut	-	24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wir	PPER	(VROOT(PSEUDO(S*	wir	pl	*	-	(55)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	haben	VAFIN	*	haben	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	seine	PPOSAT	(CNP(NP*	sein	sg	fem	-	(91|(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Hand	NN	*)	hand	sg	fem	-	91)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	sein	PPOSAT	(NP*	sein	-	-	-	(65|(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Siegel	NN	*)))	siegel	sg	masc	-	65)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wir	PPER	*	wir	pl	*	-	(55)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	mach	VVFIN	*	machen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	gar	ADV	*	gar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	leicht	ADJD	*	leicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	begreiflich	ADJD	*	begreiflich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	wie	KOKOM	*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Gefährlich	ADJD	*	gefährlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	selber	ADV	*	selber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	für	APPR	*	für	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	den	ART	*	der	sg	masc	-	(92
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Staat	NN	*	staat	sg	masc	-	92)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	es	PPER	*	es	sg	neut	-	(93)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	Nichts	NN	*	nichts	*	neut	-	(93
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	glauben	VVINF	*	glauben	-	-	-	93)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Alle	PIAT	(VROOT(PSEUDO(S(S(NP*	aller	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	bürgerliche	ADJA	*	bürgerlich	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Bande	NN	*)	Bande	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sind	VAFIN	*	sein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	aufgelöset	VVPP	*)	auelösen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	sind	VAFIN	*	sein	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	zerrissen	VVPP	*	zerreißen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Der	ART	(NP*	der	sg	masc	-	(61
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Mensch	NN	*)	mensch	sg	masc	-	61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	nichts	PIS	(VP*	nichts	*	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	glauben	VVINF	*)	glauben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	darf	VMFIN	*))	dürfen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Hinweg	NN	*	hinweg	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	hinweg	ADV	(VROOT(PSEUDO(PP*	hinweg	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mit	APPR	*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	solchem	PIAT	*	solcher	sg	neut	-	(36
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Frevel	NN	*)	frevel	sg	neut	-	36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Schade	ADJD	(VROOT(PSEUDO(S*	schade	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Den	ART	(VP(NP*	der	sg	masc	-	(37
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	trefflichen	ADJA	*	trefflich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Sermon	NN	*	sermon	-	-	-	37)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	beßrer	ADJA	*	beßr	-	-	-	(94
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Muße	NN	*))	muße	-	-	-	94)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Genießen	VVINF	*)	genießen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	kann	VMFIN	*))	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	zum	APPRART	(VP(PP*	zu	sg	neut	-	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Saladin	NN	*)	saladin	sg	neut	-	7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Gerufen	VVPP	*))	gerufen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(AVP*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*)	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	–	CARD	(PP*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Nun	ADV	(AP*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	–	CARD	*)	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Dann	NN	*)	dann	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	–	XY	*))	–	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	(VP(NP*	der	sg	masc	-	(95|(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sultan	NN	*)	sultan	sg	masc	-	7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	vorbereiten	VVINF	*	vorbereiten	-	-	-	95)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Es	PPER	(NP*	es	sg	neut	-	(95)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Eurer	PPOSAT	(NP*	eurer	sg	masc	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Hochehrwürden	NN	*))	hochehrwürde	pl	fem	-	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	gefällt	VVFIN	*)))	fällen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(S*)	O	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	oh	FM	*	oh	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(S(NP*	der	sg	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Herr	NN	*)	herr	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Gnade	NN	*	gnade	sg	fem	-	(96)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	funden	VVFIN	*))	fund	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Vor	APPR	*	vor	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Saladin	NE	*	saladin	-	-	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(VP(VP(NP*	ich	sg	*	-	(97|(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	bitte	ADV	*)	bitte	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	meiner	PIS	*	mein	sg	fem	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	97)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Im	APPRART	(PP*	in	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	besten	ADJA	*	gut	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihm	PPER	*))	ihm	sg	masc	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	eingedenk	VVPP	*)	eingedenk	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	sein	VAINF	*))	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mich	PPER	(S*	mich	sg	*	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	treibt	VVFIN	*	treiben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(NP*	der	sg	masc	-	(56
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Eifer	NN	*))	eifer	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Gottes	NN	(NP*	gott	sg	masc	(LOC*)	56)|(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	lediglich	ADV	*)	lediglich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKA	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	viel	PIS	*	viel	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	tu	PPER	*	tu	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	tu	PPER	*	tu	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihm	PPER	*	ihm	sg	masc	-	(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(97)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wolle	VMFIN	*	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Doch	NE	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	(VP(NP*	der	sg	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Herr	NN	*)	herr	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	erwägen	VVINF	*))	erwägen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wahr	PTKVZ	*)	wahr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Herr	NN	*	herr	sg	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ritter	NN	*	ritter	sg	masc	(PER*)	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(36
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	vorhin	ADV	(NP*	vorhin	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Erwähnte	NN	*)	erwähnt	sg	neut	-	36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Dem	ART	*	der	sg	masc	-	(66
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Juden	NN	*))	Jude	sg	masc	(MISC*)	66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	(NP*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	ein	ART	*	ein	sg	neut	-	(73
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Problema	NN	*))	problema	sg	neut	-	73)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Zu	PPER	(VP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	sagen	VVINF	*))	sagen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	–	$.	*))	–	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	neut	-	(73
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Problema	NN	*)	problema	sg	neut	-	73)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	(VROOT(PSEUDO(S*	gehen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ab	PTKVZ	*)	ab	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	PATRIARCH	NE	(VROOT(PSEUDO*	patriarch	sg	neut	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	8)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	(	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Dem	VVIMP	*	der	sg	neut	-	(73)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	tiefer	ADJD	*	tief	-	-	-	(98)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Doch	KON	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	auf	APPR	*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	den	ART	*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Grund	NN	*	grund	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	kommen	VVINF	*	kommen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	suchen	VVINF	*	suchen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	*	der	sg	neut	-	(98)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	wiederum	ADV	*	wiederum	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ein	ART	*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Auftrag	NN	*	auftrag	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	für	APPR	*	für	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Den	ART	*	der	sg	masc	-	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Bruder	NN	*	bruder	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Bonafides	NE	*	bonafide	sg	neut	-	5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	)	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Hier	ADV	*	hier	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	mein	PPOSAT	*	mein	sg	masc	-	(5|(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Sohn	NN	*	sohn	sg	masc	-	5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	spricht	VVFIN	*	sprechen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	im	APPRART	(PP*	in	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Abgehn	NN	*	abgehn	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	dem	ART	*	der	sg	masc	-	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Klosterbruder	NN	*)))	klosterbruder	sg	masc	-	5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Szene	NN	(VROOT(PSEUDO(S*	szene	sg	fem	-	(99)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	(100
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Zimmer	NN	*	zimmer	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	im	APPRART	(PP*	in	sg	masc	-	(101
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Palaste	NN	*	palast	sg	masc	-	101)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	des	ART	(NP*	der	sg	masc	-	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Saladin	NN	*	saladin	sg	masc	-	7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	in	APPR	(VP(CVP(VP(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	welches	PRELS	*)	welcher	sg	neut	-	(100)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	von	APPR	(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Sklaven	NN	*	sklave	pl	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	eine	ART	(NP*	ein	sg	fem	-	(102
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Menge	NN	*	menge	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Beutel	NN	*))	beutel	-	-	-	102)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	getragen	VVPP	*)	tragen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	auf	APPR	(VP(PP*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	dem	ART	*	der	sg	neut	-	(103
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Boden	NN	*)	boden	sg	neut	-	103)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	neben	APPR	(PP*	neben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	einander	PPER	*)	einander	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	gestellt	VVPP	*))	stellen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	werden	VAINF	*)))))	werden	-	-	-	100)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO*	saladin	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	bald	ADV	(S(AVP*	bald	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	darauf	PROAV	*)	darauf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Sittah	NE	*)	sittah	sg	-	-	(104)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	*	der	sg	masc	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	dazu	PROAV	*	dazu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	kömmt	VVFIN	*	kömmen	sg	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S(ISU*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wahrlich	ADJD	*))	wahrlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(105)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	(NP(AP*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	kein	PIAT	*)	kein	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ende	NN	*))	ende	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	VAFIN	(S*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Des	ART	(NP*	der	sg	masc	-	(105
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Dings	NN	*)	dings	sg	masc	-	105)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	viel	PIS	*	viel	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	zurück	PTKVZ	*)	zurück	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	EIN	NE	(VROOT(PSEUDO(MPN*	ein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	SKLAVE	NE	*)	sklave	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wohl	ADV	(VROOT(PSEUDO(S*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	noch	ADV	(NP*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	*	der	sg	fem	-	(106
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Hälfte	NN	*))	hälfte	sg	fem	-	106)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	(107
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	tragt	VVFIN	*	tragen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(NP*	der	sg	neut	-	(106
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	übrige	ADJA	*)	übrig	sg	neut	-	106)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Sittah	NE	*))	sittah	-	-	-	107)|(104)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wo	PWAV	(S*	wo	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Al-Hafi	NE	*)	al-hafi	sg	*	-	(3)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(102)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	hier	ADV	*)	hier	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	sogleich	ADV	(VP(NP*	sogleich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Al-Hafi	NE	*)	al-hafi	-	-	-	(3)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	*)	sich	sg	-	-	(3)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	nehmen	VVINF	*))	nehmen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Oder	NE	*	oder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ob	KOUS	(S*	ob	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ichs	NE	*	ich	-	-	-	(102)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	vielmehr	ADV	*))	vielmehr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	dem	ART	(S(NP*	der	sg	masc	-	(108
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Vater	NN	*)	vater	sg	masc	-	108)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	schicke	VVFIN	*)	schicken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hier	ADV	(VROOT(PSEUDO(S*	hier	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Fällt	VVFIN	*	fallen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(102)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	(PP*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	durch	APPR	*	durch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	*	der	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Finger	NN	*))	finger	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Zwar	ADV	*	zwar	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Man	PIS	(NP(CS(S*	man	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	endlich	ADV	*	endlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	hart	ADJD	*)	hart	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	(S(AVP*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	nun	ADV	*)	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	gewiß	ADV	*	gewiß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Solls	NN	*	soll	-	-	-	(109)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Künste	NN	(VP*	kunst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	kosten	VVINF	*)))	kosten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	mir	PPER	(VP*	sich	sg	*	-	(109|(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	viel	PIS	*	viel	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	abzuzwacken	VVIZU	*))	abzwacken	-	-	-	109)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Bis	APPR	(VROOT(PSEUDO(S(S(PP*	bis	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wenigstens	ADV	*)	wenigstens	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	pl	neut	-	(110
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Gelder	NN	*	geld	pl	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ägypten	NE	*)	ägypten	sg	neut	-	110)|(111)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Zur	APPRART	(PP*	zu	sg	fem	-	(101
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Stelle	NN	*))	stelle	sg	fem	-	101)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	kommen	VVFIN	*)	kommen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	mag	VMFIN	*	mögen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	das	ART	(NP*	der	sg	neut	-	(112
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Armut	NN	*)	armut	sg	neut	-	112)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	sehn	PPOSAT	(AP(NP*	sehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Wies	NN	*)	wies	-	-	-	(112)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	fertig	ADJD	*)	fertig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	wird	VAFIN	*)	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	*	der	pl	masc	-	(113
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Spenden	NN	*	spende	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	bei	APPR	*	bei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	*	der	sg	neut	-	(114
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Grabe	NN	*	grabe	sg	neut	-	113)|114)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	die	ART	*	der	sg	fem	-	(113)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	fortgehn	FM	*	fortgehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	(NP*	der	pl	masc	-	(115
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Christenpilger	NN	*	christenpilger	pl	masc	(MISC*)	115)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Mit	APPR	(PP*	mit	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	leeren	ADJA	*	leer	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Händen	NN	*))	hand	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	abziehn	VVINF	*	abziehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	dürfen	VMFIN	*)	dürfen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	–	NN	*)))	–	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(104
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	104)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	(NP*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*))	der	sg	neut	-	(107)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(PP*	der	sg	neut	-	(106
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Geld	NN	*	geld	sg	neut	-	106)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Bei	APPR	(PP*	bei	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*)))	sich	sg	*	-	(6)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mach	VVIMP	*	mach	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PRF	*	dich	sg	*	-	(116)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	davon	PROAV	*	davon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	bezahlt	VVPP	*	bezahlen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	leg	VVFIN	*	leg	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Auf	APPR	*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Vorrat	NN	*	vorrat	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	was	PIS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	übrig	ADJD	*	übrig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(104
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	104)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	(MPN*	nathan	sg	fem	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Noch	NE	*)	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	*	der	sg	neut	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Tempelherrn	NN	*)	tempelherr	sg	neut	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	da	PTKVZ	*)	da	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	sucht	VVFIN	*	suchen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihn	PPER	*	ihn	sg	masc	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	aller	PIAT	(NP*	aller	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Orten	NN	*))	ort	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(104
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	104)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sieh	VVIMP	(VROOT(PSEUDO(S(S*	sieh	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*)	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	hier	ADV	*	hier	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Indem	KOUS	(VP(S*	indem	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	mir	PPER	*	sich	sg	*	-	(6)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	mein	PPOSAT	(NP*	mein	sg	neut	-	(6)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	alt	ADJD	*	alt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Geschmeide	NN	*)	geschmeide	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	durch	APPR	(PP*	durch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Die	ART	*	der	pl	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Hände	NN	*)	hand	pl	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	geht	VVFIN	*)	gehen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	gefunden	VVPP	*))	finden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihm	PPER	(VROOT(PSEUDO(AP(NP*	ihm	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ein	ART	*	ein	sg	masc	-	(117
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	klein	ADJD	*	klein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Gemälde	NN	*)	gemälde	-	-	-	117)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	zeigend	ADJD	*)	zeigend	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ha	XY	*	ha	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(118|(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Bruder	NN	*)	bruder	sg	masc	-	118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	*	der	sg	neut	-	(117)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(119)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	*	er	sg	masc	-	(119)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	War	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(119)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(119)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	ah	XY	*	ah	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	*	ah	-	-	-	(118
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wackrer	ADJA	*	wackrer	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	lieber	ADJA	(NP*	lieber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Junge	NN	*	junge	-	-	-	118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	dich	PRF	*	dich	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	So	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	früh	ADJD	*	früh	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	verlor	VVFIN	*))	verlieren	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	hätt	VAFIN	*	hätt	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	erst	ADV	*	erst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	mit	APPR	*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	dir	PPER	*	dir	sg	*	-	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	An	APPR	*	an	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	deiner	PPOSAT	*	dein	sg	fem	-	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Seit	NN	*	seit	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	erst	ADV	*	erst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	unternommen	VVPP	*	unternehmen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sittah	NE	*	sittah	sg	-	-	(104)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Laß	NN	(NP*	lassen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	(NP*	sich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	*	der	sg	neut	-	(117
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Bild	NN	*))	bild	sg	neut	-	117)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	kenn	KOUS	*	kenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ichs	ADJD	*	ichs	-	-	-	(330)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	gab	VVFIN	*	geben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Es	PPER	*	es	sg	neut	-	(117)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	deiner	PPOSAT	*	dein	sg	fem	-	(120|(104)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	ältern	NN	*	ältern	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Schwester	NN	*	schwester	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	seiner	PPOSAT	*	sein	sg	fem	-	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Lilla	NN	*	lilla	sg	fem	(PER*)	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	120)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Die	NN	*	der	sg	fem	-	(120)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	eines	ART	*	ein	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Morgens	NN	*	morgen	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	ihn	PPER	*	ihn	sg	masc	-	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	ganz	ADV	*	ganz	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	gar	ADV	*	gar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	aus	APPR	*	aus	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	den	ART	*	der	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	Armen	NN	*	arme	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	lassen	VVINF	*	lassen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	wollt	VMFIN	*	wollen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(121)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Der	ART	(NP*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	letzte	ADJA	*	letzter	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	den	PRELS	(S*	der	sg	masc	-	(121
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	ausritt	VVFIN	*)))	ausreten	sg	-	-	121)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	(NP*	ah	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	(S*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ließ	VVFIN	*	lassen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ihn	PPER	*))	ihn	sg	masc	-	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	reiten	VVFIN	*	reiten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	allein	ADV	*	allein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	*	ah	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Lilla	NE	*	lilla	-	-	(PER*)	(120)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	starb	VVFIN	(CS(S*	sterben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Vor	APPR	(PP*	vor	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Gram	NN	*))	gram	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	hat	VAFIN	(S*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	mirs	ADV	(VP(VP*	mir	-	-	-	(122)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	nie	ADV	*	nie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	vergeben	VVPP	*	vergeben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	daß	KOUS	(S*	daß	-	-	-	(122)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	so	ADV	*))	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	allein	ADV	*	allein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	ihn	PPER	*	ihn	sg	masc	-	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	reiten	VVINF	*	reiten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	lassen	VVINF	*)))	lassen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	(S*	er	sg	masc	-	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Blieb	VVFIN	*	blieb	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	weg	PTKVZ	*)	weg	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(104
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	104)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(118
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	arme	ADJA	*	arm	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Bruder	NN	*)	bruder	sg	masc	-	118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	NN	(VROOT(PSEUDO(S*	lassen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	gut	ADJD	*	gut	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sein	NN	*)	sein	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Einmal	ADV	(S*)	einmal	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	bleiben	VVFIN	(S*	bleiben	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wir	PPER	*	wir	pl	*	-	(61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	alle	PIS	*	alle	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	weg	PTKVZ	*)	weg	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Zudem	PROAV	*	zudem	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	–	XY	*	–	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	wer	PWS	*	wer	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(123
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Tod	NN	*)	tod	sg	masc	-	123)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ists	ADV	*	ist	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(PP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	allein	ADV	*	allein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Der	PRELS	(S*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	einem	ART	(NP*	ein	sg	masc	-	(124
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Jüngling	NN	*	jüngling	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	seiner	PPOSAT	(NP*	sein	sg	fem	-	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Art	NN	*))	Art	sg	fem	-	124)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	das	ART	(NP*	der	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Ziel	NN	*)	ziel	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Verrückt	VVFIN	*)))	verrückt	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(124)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP(CNP(NP*	der	sg	masc	-	(32
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Feinde	NN	*	feind	sg	masc	-	32)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	mehr	ADV	*)	mehr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	oft	ADV	(NP*	oft	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Erliegt	NN	*))	erliegen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	(NP*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Stärkste	NN	*))	stärkst	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	gleich	ADV	*	gleich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	dem	ART	(NP*	der	sg	masc	-	(125
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Schwächsten	NN	*))	schwache	sg	masc	-	125)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(NP*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sei	NN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	wie	KOKOM	(S*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ihm	PPER	*	ihm	sg	masc	-	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	sei	VAFIN	*))	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	(VP(NP*	der	sg	neut	-	(117
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Bild	NN	*)	bild	sg	neut	-	117)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Dem	ART	*	der	sg	neut	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	jungen	ADJA	*	jung	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Tempelherrn	NN	*)	tempelherr	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	vergleichen	VVINF	*)	vergleichen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Doch	KON	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	sehn	CARD	*	sehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	wie	KON	(S*	wie	-	-	-	(126
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	viel	ADV	*	viel	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	mich	PPER	*	mich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	meine	PPOSAT	(NP*	mein	sg	fem	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	Phantasie	NN	*)))	phantasie	sg	fem	-	126)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Getäuscht	NN	*	getäuscht	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(104
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	104)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	darum	PROAV	*	darum	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	bring	FM	*	bring	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ichs	APPRART	*	ichs	-	-	-	(117)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	*	aber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	gib	VVIMP	*	geben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Doch	KON	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	gib	VVIMP	*	geben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(DL(S*	ich	sg	*	-	(6)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	dir	PPER	*	dir	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*	der	sg	neut	-	(126)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	sagen	VVINF	*)	sagen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	das	ART	(S(NP*	der	sg	neut	-	(126)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Versteht	NN	*)	verstehen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	ein	ART	(NP*	ein	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	weiblich	ADJD	*	weiblich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Aug	NN	*)	aug	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	am	PTKA	(AP*	an	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	besten	ADJD	*)))	gut	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	zu	APPR	(VROOT(PSEUDO(CO(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	einem	ART	*	ein	sg	neut	-	(127
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Türsteher	NN	*)	türsteher	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(NP*	der	sg	masc	-	(127)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	hereintritt	NN	*))	hereintreten	sg	masc	-	127)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	da	ADV	*)	da	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	(NP*	der	sg	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Tempelherr	NN	*)	tempelherr	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	*	er	sg	masc	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	komm	VVIMP	*	kommen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(104
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	104)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Euch	ADV	*	euch	-	-	-	(128)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Zu	PTKZU	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	stören	VVINF	*	stören	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ihn	PPER	*	ihn	sg	masc	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	meiner	PPOSAT	*	mein	sg	fem	-	(129|(6)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Neugier	NN	*	neugier	sg	fem	-	129)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Zu	APPR	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	irren	VVINF	*	irren	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	–	XY	*	–	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(CS(S*	sie	sg	fem	-	(104)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	setzt	VVFIN	*	setzen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	*	sich	sg	-	-	(104)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	seitwärts	ADV	*	seitwärts	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	einen	ART	*	ein	sg	masc	-	(130
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Sofa	NN	*))	sofa	sg	masc	-	130)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	läßt	VVFIN	(S*	lassen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	den	ART	(NP*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Schleier	NN	*)	schleier	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	fallen	VVINF	*))	fallen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gut	ADJD	(VROOT(PSEUDO*	gut	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	(S*)	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	gut	ADJD	(VROOT(PSEUDO*	gut	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	(	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	sein	PPOSAT	*	sein	-	-	-	(131|(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ton	NN	*	ton	-	-	-	131)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	(VP(AVP*	der	sg	masc	-	(131)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*)	wohl	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	sein	VAINF	*)	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	wird	VAFIN	*)	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Assads	NE	*	assad	-	-	(LOC*)	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ton	NE	*	ton	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Schläft	NE	*	schläft	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	wo	PWAV	*	wo	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	meiner	PPOSAT	*	mein	sg	fem	-	(132|(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Seele	NN	*	seele	sg	fem	-	132)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	noch	ADV	*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	)	$(	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(CNP(NP*	der	sg	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherr	NN	*)	tempelherr	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Saladin	NN	*)	saladin	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(16|(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	dein	PPOSAT	(NP*	dein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Gefangner	NN	*	gefangner	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Sultan	NN	*))	sultan	sg	masc	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(16|(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gefangner	NN	*)	gefangner	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wem	PWS	*	wem	sg	-	-	(133
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	*	der	sg	neut	-	(134
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Leben	NN	*	leben	sg	neut	-	134)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	schenke	VVFIN	*	schenken	sg	-	-	133)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	werd	VVFIN	*	werden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	dem	ART	*	der	sg	neut	-	(133)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Nicht	NN	*	nicht	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	die	ART	*	der	sg	fem	-	(135
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Freiheit	NN	*	freiheit	sg	fem	-	135)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	schenken	VVINF	*	schenken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S(S*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	dir	PPER	*	dir	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ziemt	VVFIN	*)	ziemen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Zu	NN	(VP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	tun	VVINF	*)	tun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	ziemt	VVFIN	*	ziemen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	mir	PPER	(NP(VP*	sich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	erst	ADV	*	erst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	vernehmen	VVINF	*))	vernehmen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Vorauszusetzen	NN	*	vorauszusetzen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	*	aber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sultan	NE	*	sultan	sg	fem	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	–	XY	*	–	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Dank	NN	*	dank	sg	*	-	(136)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Besondern	NN	*	besond	*	*	-	(136
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Dank	APPR	*	dank	sg	*	-	136)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	dir	PPER	*	dir	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	für	APPR	*	für	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	mein	PPOSAT	*	mein	sg	neut	-	(137|(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Leben	NN	*	leben	sg	neut	-	137)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	zu	APPR	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Beteuern	NN	*	beteuer	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	stimmt	VVFIN	*	stimmen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	mit	APPR	*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	meinem	PPOSAT	*	mein	sg	masc	-	(138|(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	Stand	NN	*	stand	sg	masc	-	138)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	meinem	PPOSAT	*	mein	sg	masc	-	(322)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	Charakter	NN	*	charakter	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	(S*	es	sg	neut	-	(137)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	steht	VVFIN	*	stehen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	in	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	allen	PIAT	*	aller	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Fällen	NN	*))	fall	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Zu	APPR	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	deinen	PPOSAT	(NP*	dein	pl	neut	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Diensten	NN	*	dienst	pl	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	wieder	ADV	*)	wieder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Brauch	VVFIN	(VROOT(PSEUDO(S*	brauch	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	es	PPER	*	es	sg	neut	-	(137)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(NP*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nicht	NN	*)	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	wider	APPR	(PP*	wider	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	mich	PPER	*))	mich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Zwar	ADV	*	zwar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	*	ein	*	*	-	(140
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Paar	NN	*	paar	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Hände	NN	*	hand	pl	fem	-	140)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	ADV	*	mehr	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Die	ART	*	der	pl	masc	-	(140)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	gönnt	VVFIN	*	gönnen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	meinem	PPOSAT	*	mein	sg	masc	-	(26|(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Feinde	NN	*	feind	sg	-	-	26)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	gern	ADV	*	gern	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Allein	ADV	(VROOT(PSEUDO(AP(S*	allein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihm	PPER	*	ihm	sg	*	-	(26)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	(AVP*	so	-	-	-	(139
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ein	ART	(S(NP*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Herz	NN	*)	herz	sg	masc	-	139)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	(VP*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	mehr	ADV	*	mehr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	gönnen	VVINF	*))))	gönnen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	fällt	VVFIN	*	fallen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Mir	NE	*)	sich	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	schwer	ADJD	*)	schwer	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PRF	*	mich	sg	-	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	dir	PPER	*)	dir	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	in	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	nichts	PIS	*))	nichts	*	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Betrogen	NN	*	betroge	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	braver	ADJA	*	brav	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	junger	ADJA	(NP*	jung	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Mann	NN	*)	mann	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	bist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mit	APPR	(PP*	mit	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Seel	NN	(CNP*	seel	sg	*	(PER*)	(139)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Leib	NN	*)))	leib	sg	*	-	(141)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	mein	PPOSAT	(NP*	mein	sg	neut	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Assad	NN	*)	assad	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sieh	NE	(VROOT(PSEUDO*	sieh	-	-	-	(142
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	ich	PPER	(VROOT(PSEUDO(DL(S*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	könnte	VMFIN	*	können	sg	-	-	142)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Dich	PPER	(VP*	dich	sg	neut	-	(143)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	fragen	VVINF	*))	fragen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	wo	PWAV	(S*	wo	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	du	PPER	*	du	sg	*	-	(143)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	denn	ADV	(VP(NP*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	die	ART	*	der	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	ganze	ADJA	*	ganz	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Zeit	NN	*)	zeit	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Gesteckt	VVPP	*)))	gesteckt	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	in	APPR	(VROOT(PSEUDO(VP(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	welcher	PWAT	*	welcher	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Höhle	NN	*)	höhle	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	*	du	sg	*	-	(143)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	geschlafen	VVPP	*)	schlafen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	In	APPR	(VROOT(PSEUDO(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	welchem	PWAT	*	welcher	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ginnistan	NE	*	ginnistan	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	von	APPR	(VP(VP(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	welcher	PWAT	*	welcher	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	guten	ADJA	*	gut	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Div	NN	*	div	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	diese	PDAT	(NP*	dieser	pl	neut	-	(143
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Blume	NN	*))	blume	pl	neut	-	143)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	fort	PTKVZ	(CAVP*	fort	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	fort	PTKVZ	*)	fort	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	frisch	ADJD	*	frisch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Erhalten	VVPP	*)	erhalten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	worden	VAPP	*))	werden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sieh	NE	(VROOT(PSEUDO*	sieh	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	ich	PPER	(VROOT(PSEUDO(S(S*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	könnte	VMFIN	*	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PRF	(VP*	dich	sg	-	-	(143)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Erinnern	VVINF	*))	erinnern	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	wollen	VMFIN	*	wollen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	wir	PPER	*	wir	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	dort	ADV	*	dort	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	dort	ADV	(VP*	dort	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Zusammen	NN	*	zusammen	pl	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	ausgeführt	VVPP	*)))	ausführen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CS(S*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	könnte	VMFIN	*	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Dir	PPER	*)	dir	sg	*	-	(143)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	zanken	VVINF	*))	zanken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*	du	sg	*	-	(143)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Ein	ART	(NP*	ein	sg	neut	-	(144
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Geheimnis	NN	*)	geheimnis	sg	neut	-	144)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	doch	ADV	(VP*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Vor	APPR	(AP(PP*	vor	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	mir	PPER	*))	sich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	gehabt	VAPP	*)))	haben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	*	ein	sg	masc	-	(144
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Abenteuer	NN	*	abenteuer	sg	masc	-	144)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Doch	KON	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	unterschlagen	VVINF	*	untschlagen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	das	PDS	*	der	sg	neut	-	(142)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	könnt	VVFIN	*	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	dich	PRF	*	dich	sg	-	-	(143)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	säh	NE	*	säh	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	mich	PPER	*	mich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(NP*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	mags	ADV	*)	mags	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	(VROOT(PSEUDO(S(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	dieser	PDAT	*	dieser	sg	masc	-	(145
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	süßen	ADJA	*	süß	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Träumerei	NN	*)	träumerei	-	-	-	145)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	immer	ADV	*	immer	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Doch	KON	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	(NP*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	viel	PIS	*)	viel	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	wahr	PTKVZ	*	wahr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	in	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	meinem	PPOSAT	*	mein	sg	masc	-	(146|(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Herbst	NN	*)	herbst	sg	masc	-	146)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Ein	ART	(NP*	ein	sg	masc	-	(147
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Assad	NN	*)	assad	sg	masc	-	147)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	wieder	ADV	(VP*	wieder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	blühen	VVINF	*)	blühen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	soll	VMFIN	*))	sollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	(S*	du	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	bist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Es	PPER	(AP*	es	sg	neut	-	(145)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	zufrieden	ADJD	*))	zufrieden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ritter	NN	*	ritter	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Alles	PIS	(VROOT(PSEUDO(NP*	alle	sg	neut	-	(148|(149
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	was	PRELS	(CS*	was	sg	neut	-	(149)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Von	APPR	(S(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*)	dir	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	kömmt	VVFIN	*)	kömmen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	–	PPER	(S*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	sei	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	es	PPER	*	es	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	will	VMFIN	*	wollen	sg	-	-	149)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Als	APPR	(PP*	als	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Wunsch	NN	*	wunsch	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	in	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	meiner	PPOSAT	*	mein	sg	fem	-	(139|(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Seele	NN	*))))))	seele	sg	fem	-	139)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	148)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	VVIMP	(VROOT(PSEUDO(S*	lassen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	uns	PPER	*	uns	pl	*	-	(128)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(NP*	der	sg	neut	-	(148)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sogleich	NN	*)	sogleich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	versuchen	VVINF	*)	versuchen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Bliebst	VVFIN	(S*	bliebst	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*)	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	bei	APPR	(NP(PP*	bei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*))	sich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Um	KOUI	*	um	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Als	APPR	(NP(PP*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Christ	NN	*)	christ	sg	masc	(PER*)	(150)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	als	APPR	(PP*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Muselmann	NN	*	muselmann	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	gleich	ADV	(NP*	gleich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	viel	PIS	*)))	viel	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Im	APPRART	(VROOT(PSEUDO(CS(PP*	in	sg	neut	-	(151
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	weißen	ADJA	*	weiß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mantel	NN	*)	mantel	sg	*	-	151)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	oder	KON	*	oder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Jamerlonk	NE	(S*	jamerlonk	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Im	APPRART	(PP*	in	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Tulban	NE	*))	tulban	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	oder	KON	*	oder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	deinem	PPOSAT	(S(NP*	dein	sg	masc	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Filze	NN	*)	filz	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	wie	KOKOM	(VP(NP*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Du	PPER	*))	du	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	willst	VMFIN	*))	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gleich	ADV	(VROOT(PSEUDO(NP*	gleich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	viel	PIS	*)	viel	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nie	ADV	(VP*	nie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	verlangt	VVPP	*	verlangen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	allen	PIAT	(NP*	aller	pl	*	-	(61
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Bäumen	NN	*	baum	pl	*	-	61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Eine	ART	(NP*	ein	sg	fem	-	(152
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Rinde	NN	*))	rinde	sg	fem	-	152)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	wachse	VVFIN	*)))	wachsen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sonst	ADV	(VROOT(PSEUDO(CS(S*	sonst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wärst	VVFIN	*	wären	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	schwerlich	ADJD	*)	schwerlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	(S*	der	sg	masc	-	(153
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	du	PPER	*	du	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	bist	VAFIN	*	sein	sg	-	-	153)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Der	ART	(NP*	der	sg	masc	-	(153
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Held	NN	*	held	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	der	PRELS	(S*	der	sg	masc	-	(153)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	lieber	ADV	*	lieber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Gottes	ADJA	(NP*	gott	sg	masc	-	(152)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Gärtner	NN	*)	gärtner	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	wäre	VAFIN	*))))	sein	sg	-	-	153)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(DL(S*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	dann	ADV	*	dann	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	schlechter	ADJD	*)	schlecht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	von	APPR	(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	mir	PPER	*)	sich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	denkst	VVFIN	*)	denken	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	So	ADV	(S*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	wären	VAFIN	*	sein	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	wir	PPER	*	wir	pl	*	-	(128)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	ja	ADV	*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	halb	ADJD	*	halb	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	schon	ADV	(AP*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	richtig	ADJD	*)))	richtig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ganz	ADV	(VROOT(PSEUDO(S*)	ganz	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	ihm	PPER	(VROOT(PSEUDO(AP*	ihm	sg	masc	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	(NP*	der	sg	fem	-	(154
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Hand	NN	*)	hand	sg	fem	-	154)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	bietend	ADJD	*)	bietend	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wort	NN	*)	wort	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	einschlagend	ADJD	(VROOT(PSEUDO*	einschlagend	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mann	NN	*)	mann	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Hiermit	PROAV	*	hiermit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	empfange	VVFIN	*	empfangen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	PIAT	*	mehr	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Als	KOKOM	*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	du	PPER	*	du	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	nehmen	VVINF	*	nehmen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	konntest	VMFIN	*	konntest	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ganz	ADV	(VROOT(PSEUDO(NP*	ganz	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Deine	NN	*)	dein	sg	masc	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zu	APPR	(VROOT(PSEUDO(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	viel	PIAT	(NP*	viel	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Gewinn	NN	*)	gewinn	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	für	APPR	*	für	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	einen	ART	*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Tag	NN	*)	tag	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	zu	PTKA	(VROOT(PSEUDO(AP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	viel	PIS	*)	viel	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kam	NE	*	kam	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	mit	PTKVZ	*)	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO*	nathan	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	frostig	ADJD	(VROOT(PSEUDO*	frostig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	*	nein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	kam	VVFIN	*	kommen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Allein	ADV	*)	allein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Welch	PWAT	(VROOT(PSEUDO(NP*	welch	sg	fem	-	(155
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	eine	ART	(NP*	ein	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Tat	NN	*)	tat	sg	fem	-	155)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*)	dir	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*)))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	welch	PWAT	(NP*	welcher	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ein	ART	(NP*	ein	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	weises	ADJA	*	weis	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Glück	NN	*)	glück	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	eine	ART	(NP*	ein	sg	fem	-	(156
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	solche	PIAT	(NP*	solcher	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Tat	NN	*))	tat	sg	fem	-	156)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Zum	APPRART	(PP*	zu	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Besten	NN	*)	gut	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	eines	ART	(NP*	ein	sg	masc	-	(157
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	solchen	PIAT	(NP*	solcher	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Mannes	NN	*))	mann	sg	masc	-	157)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	ausschlug	VVFIN	*)))	ausschlagen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*)	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S(ISU*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	kalt	ADJD	*))	kalt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nein	PTKANT	(S*	nein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	junger	ADJA	(NP*	jung	pl	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Mann	NN	*))	mann	*	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*	gott	sg	masc	-	(87)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Was	PIAT	*	was	sg	neut	-	(68
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Gutes	NN	*	gute	sg	neut	-	68)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	durch	APPR	*	durch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	uns	PPER	*	uns	pl	*	-	(61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	tut	VVFIN	*	tun	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	man	PIS	*	man	sg	*	-	(61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	kalt	ADJD	*	kalt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	sein	VAINF	*	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	aus	APPR	*	aus	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Bescheidenheit	NN	*	bescheidenheit	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	kalt	ADJD	*	kalt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	scheinen	VVINF	*	scheinen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	wollen	VMFIN	*	wollen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	*	der	sg	fem	-	(21
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Welt	NN	*)	welt	sg	fem	-	21)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ein	ART	(NP*	ein	sg	neut	-	(158
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	jedes	PIAT	(NP*	jeder	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ding	NN	*))	ding	sg	neut	-	158)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	manche	PIAT	(NP*	mancher	pl	*	-	(159
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Seiten	NN	*)	seite	pl	fem	-	159)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	hat	VAFIN	*)	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Von	APPR	(AVP(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	denen	PDS	*)	der	pl	fem	-	(159)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	oft	ADV	*)	oft	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	sich	PRF	(S(VP*	sich	sg	-	-	(61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	gar	ADV	(AVP*	gar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	denken	VVINF	*)	denken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	läßt	VVFIN	*	lassen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Wie	PWAV	(VP*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	pl	*	-	(159)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	zusammenpassen	VVPP	*))	zusammenpassen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Halte	VVFIN	*	halten	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PPER	*	dich	sg	-	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	immer	ADV	*	immer	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	an	APPR	*	an	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	*	der	sg	fem	-	(87
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	best	FM	*	Best	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	87)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	preise	ADJA	*	preis	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Gott	NN	*	gott	-	-	-	(87)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	PDS	(VROOT(PSEUDO(S*	der	sg	masc	-	(87)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	pl	fem	-	(159)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	zusammenpassen	VVFIN	*))	zusammenpassen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	*	aber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	schwierig	ADJD	*	schwierig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	sein	VAINF	*	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	willst	VAFIN	*	wollen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	junger	ADJA	*	jung	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Mann	NN	*	mann	*	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	So	ADV	*	so	-	-	-	(160
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	werd	ADJD	*	werden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	ja	ADV	*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	auf	APPR	*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	meiner	PPOSAT	*	mein	sg	fem	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	Hut	NN	*	hut	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	Mich	PPER	*	mich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	mit	APPR	*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	dir	PPER	*	dir	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	halten	VVINF	*	halten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	müssen	VMFIN	*	müssen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Leider	ADV	(VROOT(PSEUDO(S*	leider	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Auch	ADV	(VP*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	(NP*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	(NP*	ein	sg	neut	-	(161
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ding	NN	*)	ding	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	vielen	PIAT	*	vieler	pl	fem	-	(159
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Seiten	NN	*))	seite	pl	fem	-	159)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	die	ART	(S(NP*	der	sg	fem	-	161)|(161)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Oft	NN	*)	oft	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	(VP(AVP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	so	ADV	*)	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	recht	ADJD	*	recht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	passen	VVINF	*))	passen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	scheinen	VVFIN	*))	scheinen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	mögen	VMFIN	*)))	mögen	-	-	-	160)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(160)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	schmerzt	VVFIN	*)	schmerzen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Argwohn	NN	*	argwohn	sg	masc	-	(162)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	(NP*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	wenig	PIS	*))	wenig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	sonst	ADV	(PP*	sonst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Mein	PPOSAT	*	mein	sg	masc	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Fehler	NN	*)	fehler	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	–	XY	*))	–	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	sage	VVFIN	*	sagen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	(S*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	wem	PWS	*	wem	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Dus	NN	*	dus	sg	masc	-	(324)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	hast	VVFIN	*))	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	(S*	es	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	schien	VVFIN	*	scheinen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	gar	ADV	*	gar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Nathan	NE	*))	nathan	sg	*	(PER*)	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auf	APPR	(VROOT(PSEUDO(PP*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	(MPN*	nathan	*	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Argwohn	NE	*))	argwohn	sg	*	-	(162)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	du	PPER	*	du	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Erklär	NN	*	erklär	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	dich	PPER	*	dich	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	sprich	ADV	(VROOT(PSEUDO(S*)	sprich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Komm	NN	(VROOT(PSEUDO(CS*	komm	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	gib	VVIMP	(S*	geben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	deines	PPOSAT	(NP*	dein	sg	neut	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Zutrauns	NN	*)	zutraun	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	erste	ADJA	(NP*	erster	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Probe	NN	*)))	probe	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wider	APPR	(NP(PP*	wider	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*)	nathan	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	*))	nichts	*	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	zürn	VVFIN	*	zürn	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Allein	ADV	*	allein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	–	XY	*	–	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	über	APPR	(PP*	über	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	was	PIS	*))	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Geträumt	NN	*	geträumt	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	*	ein	sg	masc	-	(163|(164
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Jude	NN	*	jude	sg	masc	-	164)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	könn	VMFIN	*	könn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	ein	ART	*	ein	sg	masc	-	(165
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Jude	NN	*	jude	sg	masc	-	163)|165)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Zu	NN	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	sein	VAINF	*	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	verlernen	VVINF	*	verlernen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	daß	KOUS	*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	wachend	ADJD	*	wachend	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	Geträumt	VVPP	*	geträumt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Heraus	NN	(VROOT(PSEUDO(NP*	heraus	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	diesem	PDAT	*	dieser	sg	masc	-	(163
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wachen	ADJA	*	wach	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Traume	NN	*))	traume	-	-	-	163)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	weißt	VVFIN	*	weißen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	(NP(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nathans	NE	*)	nathan	sg	*	(PER*)	(2|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Tochter	NN	(CNP*	tochter	sg	fem	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Sultan	NN	*)))	sultan	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	(155)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	für	APPR	*	für	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	tat	VVFIN	*	taten	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	das	PDS	*	der	sg	neut	-	(155)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	tat	VVFIN	*	taten	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	weil	KOUS	*	weil	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	ichs	CARD	*	ich	-	-	-	(155)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	tat	VVFIN	*	taten	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zu	PTKA	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	stolz	ADJD	*	stolz	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Dank	NN	*	dank	-	-	-	(166)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	einzuernten	VVIZU	*	einzuernen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	wo	PWAV	*	wo	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihn	PPER	*	ihn	sg	masc	-	(166)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	säete	VVFIN	*	säen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	verschmäht	VVFIN	*	verschmähen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Tag	NN	*	tag	sg	masc	-	(167)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	für	APPR	*	für	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Tag	NN	*	tag	sg	neut	-	(167)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Das	ART	*	der	sg	neut	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Mädchen	NN	*	mädchen	sg	neut	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	noch	ADV	*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	einmal	ADV	*	einmal	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	sehn	VAINF	*	sehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Vater	NN	*)	vater	sg	masc	-	1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	War	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	fern	ADJD	(VP(NP(CS*	fern	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	(S*	er	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	(S*	er	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	hört	VVFIN	*	hören	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	er	PPER	(S*	er	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	sucht	VVFIN	*	suchen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	mich	PRF	*	mich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	auf	PTKVZ	*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Er	PPER	(S*	er	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	dankt	VVFIN	*	danken	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	wünscht	VVFIN	*)))))	wünschen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	seine	PPOSAT	(NP*	sein	sg	fem	-	(2|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	Tochter	NN	*	tochter	sg	fem	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	mir	PPER	(S(NP*	sich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	Gefallen	NN	*)	gefallen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	möge	VMFIN	*	mögen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	spricht	VVFIN	(S*	sprechen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	von	APPR	(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	Aussicht	NN	*))))	aussicht	sg	fem	-	(168)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	33	spricht	VVFIN	*))	sprechen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	34	Von	APPR	(VZ*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	35	heitern	VVINF	*)))	heitern	-	-	-	(169
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	36	Fernen	NN	*	fernen	-	-	-	169)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	37	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(S(AVP*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	(S*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	lasse	VVFIN	*))	lassen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	mich	PPER	*	mich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Beschwatzen	NN	*	beschwatze	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	komme	VVFIN	*	kommen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	sehe	VVFIN	(S*	sehen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	finde	VVFIN	(S*	finden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	wirklich	ADJD	*	wirklich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Ein	ART	(NP*	ein	sg	masc	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Mädchen	NN	*))))	mädchen	sg	masc	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	Ah	NE	(S*	ah	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	mich	PPER	(VP*	mich	sg	-	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	schämen	VVINF	*))	schämen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	Sultan	NE	*	sultan	-	-	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dich	PPER	(VROOT(PSEUDO(S*	dich	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	schämen	VVFIN	*)	schämen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	neut	-	(170
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Judenmädchen	NN	*)	judenmädchen	sg	neut	-	170)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Dich	PDAT	*	dich	sg	masc	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Eindruck	NN	*)	eindruck	sg	masc	-	(171)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	machte	VVFIN	*)	machen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	nimmermehr	ADV	*	nimmermehr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(CS(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	diesem	PDAT	(NP*	dieser	sg	masc	-	(171
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Eindruck	NN	*)	eindruck	sg	masc	-	171)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	*	der	sg	neut	-	(172
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	liebliche	ADJA	*	lieblich	sg	neut	-	172)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Geschwätz	NN	*	geschwätz	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	des	ART	(NP*	der	sg	masc	-	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Vaters	NN	*))	vater	sg	masc	-	1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	hin	PTKVZ	*)	hin	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	mein	PPOSAT	(S(NP*	mein	sg	neut	-	(139|(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	rasches	ADJA	*	rasch	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Herz	NN	*)	herz	sg	neut	-	139)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	So	ADV	(AP(NP(AP*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	wenig	PIAT	*)	wenig	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Widerstand	NN	*)	widerstand	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	entgegen	APPO	*)	entgegen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	setzte	VVFIN	*))	setzen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(16|(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Tropf	NN	*	tropf	sg	-	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	sprang	VVFIN	*	springen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	zum	APPRART	(PP*)	zu	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	zweitenmal	ADV	(PP*	zweitenmal	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ins	APPRART	*	in	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Feuer	NN	*))	feuer	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	warb	VVFIN	*	werben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	ward	VVFIN	*	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	verschmäht	VVFIN	*))	verschmähen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Verschmäht	VVFIN	*	verschmähen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	weise	ADJA	*	weise	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Vater	NN	*)	vater	sg	masc	-	1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	schlägt	VVFIN	*	schlagen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Mich	PPER	*	mich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	platterdings	ADV	*	platterdings	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	aus	PTKVZ	*)	aus	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(CO(VP(NP*	der	sg	masc	-	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	weise	ADJA	*	weise	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Vater	NN	*	vater	sg	masc	-	1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Muß	NN	*)	müssen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	aber	ADV	*	aber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	*	sich	sg	-	-	(173|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	erst	ADV	*	erst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	erkunden	VVINF	*)	erkunden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	erst	ADV	(NP*	erst	-	-	-	173)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Besinnen	NN	*))	besin	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Allerdings	ADV	(VROOT(PSEUDO(S*)	allerdings	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Tat	VVFIN	(VROOT(PSEUDO(S*	tat	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	(NP*	der	sg	neut	-	(173)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Nicht	NN	*)	nicht	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	*)	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Erkundete	NN	(VROOT(PSEUDO(S*	erkundet	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	besann	VVFIN	*	besann	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Mich	PPER	*	mich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	erst	ADV	(AVP*	erst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	auch	ADV	*)	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	im	APPRART	(PP*	in	sg	neut	-	(174
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Feuer	NN	*)	feuer	sg	neut	-	174)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	schrie	VVFIN	*))	schreien	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Fürwahr	NN	*	fürwahr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	bei	APPR	(VROOT(PSEUDO(PP*	bei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*)	gott	-	-	-	(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(175)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(VP*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	gar	ADV	*	gar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	was	PIS	(NP*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Schönes	NE	*	schöne	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	So	ADV	(S(AVP*	so	-	-	-	(175
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	weise	ADV	*	weise	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*)	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	bedächtig	ADJD	*))	bedächtig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	sein	VAINF	*))	sein	-	-	-	175)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	sieh	VVIMP	(S*	sieh	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	einem	ART	(NP*	ein	sg	masc	-	(58
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Alten	NN	*)	alt	sg	masc	-	58)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	etwas	PIS	*	etwas	*	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	nach	PTKVZ	*)	nach	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(CS(S(AVP*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	lange	ADV	*)	lange	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	können	VMFIN	*	können	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	seine	PPOSAT	(NP*	sein	pl	fem	-	(174|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Weigerungen	NN	*))	weigerung	pl	fem	-	174)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Denn	KON	*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	dauern	VVINF	*)	dauern	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wird	VAFIN	(VROOT(PSEUDO(S*	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(VP(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*)	dir	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	verlangen	VVINF	*)	verlangen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	du	PPER	*	du	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	erst	ADV	(VP*	erst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Jude	NN	*	jude	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	werden	VAINF	*)	werden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	sollst	VMFIN	*))	sollen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*)	weiß	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*)	weiß	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	diesen	PDAT	(S(NP*	dieser	sg	masc	-	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NN	*)	nathan	sg	masc	-	1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	besser	ADJD	*	gut	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	kennt	VVFIN	*)	kennen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(44
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Aberglaub	NN	*	aberglaub	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	dem	PRELS	*	der	sg	neut	-	(44)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	wir	PPER	*	wir	pl	*	-	(61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	aufgewachsen	VVPP	*	aufwachsen	-	-	-	44)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Verliert	VVPP	*	verlieren	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	wir	PPER	*	wir	pl	*	-	(61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	ihn	PPER	*	ihn	sg	masc	-	(44)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	erkennen	VVFIN	*	erkennen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	darum	PROAV	*	darum	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Doch	PPER	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	seine	PPOSAT	*	sein	sg	fem	-	(44)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	Macht	NN	*	macht	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	über	APPR	*	über	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	uns	PPER	*	uns	pl	*	-	(61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	(NP(S*	es	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	sind	VAFIN	*	sein	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	alle	PIS	*)	aller	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	frei	ADJD	*)	frei	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	die	PRELS	(S*	der	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihrer	PPOSAT	(NP*	ihr	sg	fem	-	(44|(61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Ketten	NN	*)	kette	pl	fem	-	44)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	spotten	VVFIN	*))	spotten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sehr	ADV	(VROOT(PSEUDO(VP*	sehr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	reif	ADJD	*	reif	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	bemerkt	VVPP	*)	bemerken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*	nathan	pl	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wahrlich	ADJD	*	wahrlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Nathan	NE	*	nathan	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(176
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Aberglauben	NN	*	aberglauben	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	schlimmster	ADJD	*	schlimmster	sg	masc	-	176)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	den	ART	*	der	sg	masc	-	(44
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	seinen	PPOSAT	*	sein	sg	masc	-	44)|(61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Für	APPR	*	für	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	den	ART	*	der	sg	masc	-	(177
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	erträglichern	NN	*	erträglichern	-	-	-	177)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	halten	VVINF	*	halten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mag	VMFIN	(VROOT(PSEUDO(S*	mögen	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wohl	NN	(VP*	wohl	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	sein	VAINF	*))	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*	nathan	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dem	KOUS	(VROOT(PSEUDO(S*	der	sg	neut	-	(44)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	allein	ADV	*	allein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Die	ART	(VP(NP*	der	sg	fem	-	(61
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	blöde	ADJA	*	blöd	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Menschheit	NN	*)	menschheit	sg	fem	-	61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	vertrauen	VVINF	*))	vertrauen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	bis	KOUS	(S*	bis	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Sie	PPER	*	sie	pl	masc	-	(61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	hellern	VVFIN	*	hellern	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Wahrheitstag	NN	*))	wahrheitstag	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	gewöhne	PTKVZ	*	gewöhnen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	dem	ART	*	der	sg	masc	-	(44)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Allein	ADV	*	allein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gut	ADJD	(VROOT(PSEUDO*	gut	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	(VROOT(PSEUDO*	aber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*	nathan	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nathans	NN	*	nathan	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Los	NE	(S(MPN*	los	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ist	NE	*)	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	diese	PDAT	(NP*	dieser	sg	fem	-	(176
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Schwachheit	NN	*)	schwachheit	sg	fem	-	176)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	dacht	VVFIN	*	dacht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	gleichwohl	ADV	*	gleichwohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	dieser	PDAT	*	dieser	sg	masc	-	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ausbund	NN	*	ausbund	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	aller	PIAT	*	aller	pl	masc	-	(61
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Menschen	NN	*	mensch	pl	masc	-	1)|61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	So	ADV	*	so	-	-	-	(178
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	ein	ART	*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	gemeiner	ADJA	*	gemein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Jude	NN	*	jude	sg	masc	-	178)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	wäre	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	daß	KOUS	*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Er	PPER	*	er	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Christenkinder	NN	*	christenkind	pl	neut	(MISC*)	(67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	bekommen	VVINF	*	bekommen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	suche	VVFIN	*	suchen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	Um	KOUI	*	um	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	sie	PPER	*	sie	pl	masc	-	(67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	als	APPR	*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	Juden	NN	*	Jude	pl	masc	-	(70)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	aufzuziehn	VVIZU	*	aufziehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	wie	KOKOM	*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	dann	ADV	*	dann	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	(36
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	was	PWS	*	was	sg	neut	-	36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	nach	PTKVZ	*	nach	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mädchen	NN	*	mädchen	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	selbst	ADV	(PP*	selbst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Mit	APPR	(S(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	welcher	PRELS	(S*	welcher	sg	fem	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	mich	PPER	*	mich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	körnt	VVFIN	*)	körnen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	mit	APPR	(S(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	deren	PRELAT	*	der	sg	fem	-	(168|(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Hoffnung	NN	*)	hoffnung	sg	fem	-	168)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Er	PPER	(NP*	er	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	gern	ADV	*)	gern	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	mir	PPER	(VP*	sich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	bezahlen	VVINF	*))	bezahlen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	schiene	VVFIN	*	schien	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	was	PWS	(S*	was	sg	neut	-	(155)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	umsonst	ADV	*)	umsonst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	für	APPR	(VP(PP*	für	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	sie	PPER	*)	sie	pl	masc	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	getan	VVPP	*)	tun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	soll	VMFIN	*)))	sollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	haben	VAFIN	*	haben	pl	-	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	Dies	PDS	(NP*	dieser	sg	neut	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	Mädchen	NN	*	mädchen	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	selbst	ADV	*	selbst	-	-	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	33	ist	VAFIN	(S*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	34	seine	PPOSAT	(AP(NP*	sein	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	35	Tochter	NN	*)	tochter	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	36	–	APPO	*)))	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	37	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	38	;	$.	*)	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	39	Ist	VAFIN	*)	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	40	ein	ART	*	ein	sg	neut	-	(179
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	41	verzettelt	VVPP	*	verzetteln	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	42	Christenkind	NN	*	christenkind	-	-	(PER*)	179)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	43	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Dem	PDS	*	der	sg	neut	-	(180)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ungeachtet	APPR	(PP*	ungeachtet	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*)	dir	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	geben	VVINF	*	geben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	wollte	VMFIN	*)	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	heftig	ADJD	(VROOT(PSEUDO*	heftig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Woll	VMFIN	*	woll	-	-	(PER*)	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	oder	KON	*	oder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wolle	VMFIN	*	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	entdeckt	VVPP	*)	entdecken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	tolerante	ADJA	*	tolerant	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Schwätzer	NN	*)	schwätzer	sg	masc	-	1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	entdeckt	VVPP	*)	entdecken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	werde	VAFIN	*	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	hinter	APPR	*	hinter	-	-	-	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	diesen	PDAT	*	dieser	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	jüd	NN	*	jüd	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	schen	VVFIN	*	sch	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Wolf	NE	*	wolf	sg	masc	(PER*)	1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Im	APPRART	*	in	sg	masc	-	(181
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	philosoph	NN	*	philosoph	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	schen	ADJA	*	schen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Schafpelz	NN	*	schafpelz	-	-	-	181)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Hunde	NN	*	hund	-	-	-	(182)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	schon	ADV	*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Zu	NN	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	bringen	VVINF	*	bringen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	wissen	VVINF	*	wissen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	die	PRELS	*	der	pl	masc	-	(182)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	zausen	VVINF	*	zausen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	sollen	VMFIN	*	sollen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	ernst	ADJD	(VROOT(PSEUDO*	ernst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sei	VAIMP	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ruhig	ADJD	*	ruhig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Christ	NE	*	christ	-	-	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	ruhig	ADJD	(VROOT(PSEUDO(NP*	ruhig	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Christ	NN	*)	christ	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Jud	NE	*	jud	-	-	-	(164)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Und	NE	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Muselmann	NE	*	muselmann	sg	*	-	(183)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	auf	APPR	*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Jud	NE	*	jud	-	-	-	(165)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	auf	APPR	*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Muselmann	NE	*	muselmann	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Bestehen	NN	*	bestehen	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	allein	ADV	*	allein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	der	ART	*	der	sg	masc	-	(55
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Christ	NN	*	christ	sg	masc	-	55)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	den	ART	*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	Christen	NN	*	christ	sg	masc	(MISC*)	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	machen	VVINF	*	machen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	dürfen	VMINF	*	dürfen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	noch	ADV	(VROOT(PSEUDO(AP*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ernster	ADJD	*)	ernst	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ruhig	ADJD	(VROOT(PSEUDO(NP*	ruhig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Christ	NE	*	christ	pl	-	-	(320)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*)))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	gelassen	VVPP	*	lassen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	fühle	VVFIN	*	fühlen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Des	ART	(NP*	der	sg	masc	-	(185
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vorwurfs	NN	*)	vorwurf	sg	masc	-	185)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ganze	ADJA	(NP*	ganz	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Last	NN	*)	last	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	–	KOUS	(S*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	die	ART	(NP*	der	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Saladin	NN	*)	saladin	sg	fem	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	In	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	diese	PDAT	*	dieser	sg	fem	-	(184
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Silbe	NN	*)	silbe	sg	fem	-	184)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	preßt	VVFIN	*))	pressen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	ITJ	(VROOT(PSEUDO(S*	ah	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	wüßte	VVFIN	*	wissen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Assad	NE	(NP*	assad	sg	*	(PER*)	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	–	NE	(MPN*	–	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Assad	NE	*))	assad	sg	*	-	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	sich	PRF	*	sich	sg	-	-	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	an	APPR	(PP*	an	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	meiner	PPOSAT	*	mein	sg	fem	-	(186|(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Stelle	NN	*)	stelle	sg	fem	-	186)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Hierbei	PROAV	(VP*	hierbei	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	genommen	VVPP	*)	nehmen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	hätte	VAFIN	*))	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(VP(AP(CO(AVP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	viel	ADV	*))	viel	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	besser	ADJD	*))	gut	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Vermutlich	ADV	(NP*	vermutlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ganz	ADV	(AP*	ganz	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	brausend	ADJD	*))	brausend	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(NP*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wer	PWS	(S*	wer	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Denn	KON	(VP*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	dich	PRF	*	dich	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	auch	ADV	(AVP*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	schon	ADV	*)	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	gelehrt	VVPP	*)	lehren	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	mich	PRF	(VP*	mich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	so	ADV	(PP(AVP*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	er	PPER	*))	er	sg	masc	-	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Mit	APPR	*	mit	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Einem	ART	*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Worte	NN	*)	wort	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	bestechen	VVINF	*))))	bestechen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Freilich	ADV	(VROOT(PSEUDO(DL*	freilich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	*	alle	sg	neut	-	(187)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	sich	PRF	*	sich	sg	-	-	(187)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	verhält	VVFIN	*	verhalten	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	wie	KOKOM	(S*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*	du	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	sagest	VVFIN	*))	sagest	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Kann	VMFIN	(S*	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	mich	PRF	(VP(NP*	mich	sg	-	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	selber	ADV	*)	selber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	kaum	ADV	(PP*	kaum	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	in	APPR	*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Nathan	NE	*)	nathan	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	finden	VVINF	*)))	finden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Indes	NN	(NP*	indes	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	(S*	er	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	mein	PPOSAT	(NP*	mein	sg	masc	-	(188|(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Freund	NN	*)))	freund	sg	masc	-	188)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	meiner	PPOSAT	(S(NP*	mein	pl	masc	-	(189|(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Freunde	NN	*)	freund	pl	masc	-	189)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Muß	NN	(VP*	müssen	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	keiner	PIS	*	keiner	sg	masc	-	(189)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	dem	ART	*	der	sg	neut	-	(189
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	andern	PIS	*)	anderer	-	-	-	189)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	hadern	VVINF	*))	hadern	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Laß	NN	*	lassen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Dich	PPER	(VP*	dich	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	weisen	VVINF	*))	weisen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geh	XY	*	geh	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	behutsam	ADJD	*	behutsam	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gib	VVIMP	(VROOT(PSEUDO(S*	geben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sofort	ADV	*))	sofort	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	(NP*	der	pl	masc	-	(190
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Schwärmern	NN	*	schwärmer	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	deines	PPOSAT	(NP*	dein	sg	neut	-	(26|(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Pöbels	NN	*	pöbel	sg	neut	-	190)|26)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Preis	NN	*))	preis	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Verschweig	ADJD	(VROOT(PSEUDO(S*	verschweig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	deine	PPOSAT	(CVP(VP(NP*	dein	sg	fem	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Geistlichkeit	NN	*)	geistlichkeit	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	an	APPR	(PP*	an	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	ihm	PPER	*)	ihm	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	rächen	VVINF	*))	rächen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	mir	PPER	(VP*	sich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	so	ADV	(AP*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	nahe	ADJD	*)	nahe	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	legen	VVINF	*))	legen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	würde	VAFIN	*)	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sei	APPR	(VROOT(PSEUDO(PP*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	keinem	PIAT	*	kein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Juden	NN	*	Jude	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	keinem	PIAT	(S(NP*	kein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Muselmanne	NN	*)	muselmann	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Zum	APPRART	(NP(PP*	zu	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Trotz	NN	*)	trotz	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	ein	ART	*	ein	-	-	-	(150
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Christ	NN	*)))	christ	-	-	-	150)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Bald	ADV	(VROOT(PSEUDO(AP*	bald	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wärs	ADJD	*	wär	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	damit	PROAV	*	damit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	zu	PTKA	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	spät	ADJD	*)	spät	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Dank	APPR	*	dank	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	sg	masc	-	(191
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Blutbegier	NN	*	blutbegier	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	des	ART	*	der	sg	masc	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Patriarchen	NN	*	patriarch	sg	masc	-	191)|8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Des	ART	*	der	sg	masc	-	(192|(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Werkzeug	NN	*	werkzeug	sg	masc	-	192)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	werden	VAINF	*	werden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	graute	ADJA	*	grauen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(193|(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	kamst	VVFIN	*	kamsen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	zum	APPRART	(PP*	zu	sg	masc	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Patriarchen	NN	*)	patriarchen	sg	masc	-	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	eher	ADV	*	eher	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	als	KOKOM	(PP*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Zu	APPR	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	mir	PPER	*))))	sich	sg	*	-	193)|(7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Im	APPRART	(VROOT(PSEUDO(PP*	in	-	-	-	(194
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sturm	NN	*	sturm	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(195
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Leidenschaft	NN	*	leidenschaft	sg	masc	-	194)|195)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	im	APPRART	(PP*	in	sg	masc	-	(194
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Wirbel	NN	*	wirbel	sg	masc	-	194)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Der	ART	(NP*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Unentschlossenheit	NN	*))))	unentschlossenheit	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Verzeih	NE	*	verzeih	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	*	du	sg	*	-	(196|(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wirst	VAFIN	*	werden	sg	-	-	196)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Von	APPR	*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	deinem	PPOSAT	*	dein	sg	masc	-	(118|(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Assad	NN	*	assad	sg	masc	-	118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	fürcht	VVFIN	*	fürchen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	ferner	ADV	*	ferner	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	mehr	ADV	*	mehr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	in	APPR	*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	erkennen	VVINF	*	erkennen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	wollen	VMFIN	*	wollen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wär	XY	*	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Es	PPER	*	es	sg	neut	-	(193)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	diese	PDAT	*	dieser	sg	fem	-	(196
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Furcht	NN	*	furcht	sg	fem	-	196)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mich	PPER	(VROOT(PSEUDO(S*	mich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	dünkt	VVFIN	*	dünken	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	(CS(S*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	weiß	VVFIN	*)	weiß	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Aus	APPR	(S(NP(AP(PP*	aus	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	welchen	PWAT	*	welcher	pl	masc	-	(197
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Fehlern	NN	*)	fehler	pl	masc	-	197)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	unsre	ADJA	*)	unsr	sg	-	-	(198|(61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Tugend	NN	*)	tugend	-	-	-	198)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	keimt	VVFIN	*)))	keimen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Pfleg	NE	*	pfleg	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	diese	PDAT	*	dieser	sg	fem	-	(199)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ferner	ADV	*	ferner	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	jene	PDS	*	jener	pl	fem	-	(196)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	sollen	VMFIN	*	sollen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Bei	APPR	*	bei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	dir	PPER	*	dir	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	wenig	PIS	*	wenig	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	schaden	VVINF	*	schaden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	*	aber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	geh	XY	*	geh	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Such	KON	*	such	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*	nathan	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	wie	PWAV	*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	dich	PPER	*	dich	sg	-	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	gesucht	VVPP	*	suchen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	bring	VVFIN	*	bring	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	her	PTKVZ	*	her	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	euch	PRF	*	euch	pl	*	-	(200)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	zusammen	ADV	*	zusammen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Verständigen	NN	*)	verständigen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wär	NN	*	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	um	APPR	*	um	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	*	der	sg	neut	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Mädchen	NN	*	mädchen	sg	neut	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	dir	PPER	*	dir	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Im	APPRART	*	in	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Ernst	NN	*	ernst	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	tun	VVINF	*	tun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	sei	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	ruhig	ADJD	*	ruhig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	dein	ADJD	*)	dein	-	-	-	(328)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(S*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(202)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*	nathan	sg	neut	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	empfinden	VVINF	(VP*	empfinden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	(S*	daß	-	-	-	(202)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Er	PPER	(NP*	er	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	ohne	APPR	(PP*	ohne	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Schweinefleisch	NN	*)	schweinefleisch	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	ein	ART	*	ein	sg	neut	-	(67
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Christenkind	NN	*)	christenkind	sg	neut	(MISC*)	67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Erziehen	VVINF	*	erziehen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	dürfen	VMFIN	*)))	dürfen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	XY	*	geh	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(CS(S(NP*	der	sg	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherr	NN	*)	tempelherr	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	geht	VVFIN	*	gehen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ab	PTKVZ	*)	ab	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Sittah	NE	(S*	sittah	sg	*	-	(104)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	verläßt	VVFIN	*	verlassen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	den	ART	(NP*	der	sg	masc	-	(130
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Sofa	NN	*)))	sofa	sg	masc	-	130)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO(CNP*	saladin	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*)	sittah	sg	*	-	(104)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(104
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	104)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ganz	ADV	(VROOT(PSEUDO(S(ISU*	ganz	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	sonderbar	ADJD	*))	sonderbar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gelt	NN	(VROOT(PSEUDO(NP*	gelt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*)	sittah	sg	-	-	(104)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Muß	VMFIN	(VROOT(PSEUDO(S*	müssen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	mein	PPOSAT	(NP*	mein	-	-	-	(118|(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Assad	NN	*)	assad	-	-	-	118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(VP(VP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	(NP*	ein	sg	masc	-	(203
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	braver	ADJD	*	brav	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	203)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ein	ART	(NP*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	schöner	ADJA	*	schön	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	junger	ADJA	*	jung	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Mann	NN	*))	mann	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	gewesen	VAPP	*)	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	sein	VAINF	*))	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(104
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	104)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	diesem	PDAT	*	dieser	sg	masc	-	(117
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Bilde	NN	*)	bild	sg	masc	-	117)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Der	ART	(NP*	der	sg	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Tempelherr	NN	*)	tempelherr	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	vielmehr	ADV	(VP*	vielmehr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	gesessen	VVPP	*)))	sitzen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	(S*	aber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	hast	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	doch	ADV	*)	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	vergessen	VVINF	(S*	vergessen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	können	VMFIN	*	können	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	dich	PRF	(VP*	dich	sg	-	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Nach	APPR	(PP*	nach	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	seinen	PPOSAT	*	sein	pl	neut	-	(204|(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Eltern	NN	*)	eltern	pl	neut	-	204)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	erkundigen	VVINF	*)))	erkundigen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	(205
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ins	APPRART	(PP*	in	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	besondre	ADJA	*)	besondre	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nach	APPR	(PP*	nach	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	seiner	PPOSAT	*	sein	sg	fem	-	(206|(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Mutter	NN	*))	mutter	sg	fem	-	206)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ob	KOUS	(VROOT(PSEUDO(S*	ob	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	seine	PPOSAT	(NP*	sein	pl	masc	-	(206|(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mutter	NN	*)	mutter	pl	masc	-	206)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	hier	ADV	*	hier	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	zu	APPR	(PP*	zu	-	-	-	(92
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Lande	NN	*	land	sg	neut	-	92)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	nie	ADV	*)	nie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Gewesen	NN	*	gewesen	*	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	sei	VAFIN	*)	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wahr	PTKVZ	*	wahr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	205)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(104
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	104)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(205)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	machst	VVFIN	*	machen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	gut	ADJD	*)	gut	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	*	O	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	möglicher	ADJD	*	möglich	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wär	VAFIN	*	sein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(CS(S*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Assad	NE	*	assad	sg	masc	-	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Bei	APPR	(AP(PP*	bei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	hübschen	ADJA	*	hübsch	pl	masc	-	(207
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Christendamen	NN	*)	christendam	pl	masc	-	207)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	willkommen	ADJD	*))	willkommen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Auf	APPR	(VP(PP*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	hübsche	ADJA	*	hübsch	pl	masc	-	(207
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Christendamen	NN	*)	christendame	pl	masc	-	207)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	erpicht	VVPP	*	erpichen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	einmal	ADV	*	einmal	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	gar	ADV	(NP*	gar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	die	ART	*	der	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	Rede	NN	*)	rede	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	ging	VVFIN	*	gehen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	–	$.	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	Nun	ADV	(S*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	Man	PIS	(S*	man	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	spricht	VVFIN	*	sprechen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	gern	ADV	*	gern	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	davon	PTKVZ	*)))))	davon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Genug	NN	*	genug	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	(S*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	hab	VAFIN	*	heben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ihn	PPER	*	ihn	sg	masc	-	(143)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	*)	wieder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	allen	PIS	*	aller	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	seinen	PPOSAT	(NP*	sein	pl	*	-	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Fehlern	NN	*	fehler	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Mit	APPR	(VP(PP*	mit	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	allen	PIAT	*	aller	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Launen	NN	*	laune	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	seines	PPOSAT	(NP*	sein	sg	neut	-	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	weichen	ADJA	*	weich	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Herzens	NN	*))	Herz	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Ihn	PPER	*	ihn	sg	masc	-	(118)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	haben	VAINF	*))	haben	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Oh	NE	*	oh	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mädchen	NN	*)	mädchen	sg	neut	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ihm	PPER	*	ihm	sg	masc	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Nathan	NE	(CNP*	nathan	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	geben	VVINF	*	geben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Meinst	ADV	(VROOT(PSEUDO(S*	meinst	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(104)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(104
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	104)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihm	PPER	(VROOT(PSEUDO(S*	ihm	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	geben	VVFIN	*)	geben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihm	PPER	(VROOT(PSEUDO(S*	ihm	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	lassen	VVFIN	*)	lassen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Allerdings	ADV	(VROOT(PSEUDO(S*)	allerdings	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	hätte	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nathan	NE	*	nathan	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	So	ADV	(S(AVP*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	bald	ADV	*)	bald	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihr	PPOSAT	(NP*	ihr	sg	masc	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Vater	NN	*)	vater	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	ist	VAFIN	*)	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	für	APPR	(PP*	für	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Recht	NN	*	recht	sg	neut	-	(208)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Auf	APPR	(PP*	auf	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	sie	PPER	*)))	sie	pl	*	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	*	der	sg	neut	-	(209
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Leben	NN	*	leben	sg	neut	-	209)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	erhielt	VVFIN	*	erhalten	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Tritt	VVFIN	*	treten	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	einzig	ADJD	*	einzig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	in	APPR	*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	die	ART	*	der	pl	neut	-	(210
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Rechte	NN	*	recht	pl	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	des	ART	*	der	sg	masc	-	(204
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	der	PRELS	*	der	sg	masc	-	(204)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	ihr	PPOSAT	*	ihr	sg	masc	-	210)|204)|(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Es	PPER	*	es	sg	neut	-	(209)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	gab	VVFIN	*	geben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(104
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	104)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	also	ADV	*	also	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Saladin	NN	*)	saladin	sg	*	(PER*)	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	(211
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	211)|(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	gleich	ADV	*	gleich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	(NP*	der	sg	neut	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Mädchen	NN	*)	mädchen	sg	neut	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	dir	PPER	*)	dir	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	nähmst	VVFIN	*)	nähmsen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	pl	*	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Dem	ART	(NP*	der	sg	neut	-	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	unrechtmäßigen	ADJA	*	unrechtmäßig	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Besitzer	NN	*)	besitzer	pl	masc	-	1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	gleich	ADV	*	gleich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Entzögest	NN	*)	entzögest	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Täte	VVFIN	(VROOT(PSEUDO(S*	täte	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(211)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Not	NN	*)	not	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(104
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	104)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Not	NN	(VROOT(PSEUDO(S*	not	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	eben	ADV	*	eben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	(NP*	der	sg	fem	-	(129
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	liebe	ADJA	*)	lieb	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Neubegier	NN	*	neubegier	*	*	-	129)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Treibt	VVFIN	*	treiben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	mich	PPER	(VP*	mich	sg	*	-	(6)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	allein	ADV	*	allein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	dir	PPER	*	dir	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	diesen	PDAT	(NP*	dieser	sg	masc	-	(211
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Rat	NN	*)	Rat	sg	masc	-	211)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	geben	VVINF	*))	geben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S(S*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	gewissen	ADJA	*	gewiß	pl	masc	-	(212
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Männern	NN	*)	mann	pl	masc	-	212)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	mag	VMFIN	*	mögen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	masc	-	(6)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	gar	ADV	*	gar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Zu	NN	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	gern	ADV	*	gern	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	bald	ADV	*	bald	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	wie	KOKOM	(AP*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	möglich	ADJD	*))	möglich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	wissen	VVFIN	*	wissen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	was	PWS	(S*	was	sg	neut	-	(213)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Sie	PPER	*	sie	pl	*	-	(212)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	für	APPR	(VP(VP(PP*	für	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	ein	ART	*	ein	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Mädchen	NN	*)	mädchen	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	lieben	VVINF	*)	lieben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	können	VMINF	*)))	können	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	So	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	schick	ADJD	*	schick	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	laß	VVFIN	*	lassen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	holen	VVINF	*	holen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(104
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	104)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Darf	VMFIN	(VROOT(PSEUDO(S*	dürfen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Bruder	NN	*)	bruder	-	-	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	schone	VVFIN	*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nathans	NE	*)	nathan	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(S*	nathan	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	durchaus	ADV	*	durchaus	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	glauben	VVINF	*)	glauben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	man	PIS	(NP*	man	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Gewalt	NN	*))	gewalt	sg	fem	-	(214)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	von	APPR	(VP(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Ihr	PPER	*)	ihr	pl	*	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	trennen	VVINF	*)	trennen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	wolle	VMFIN	*))	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(104
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	104)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sorge	NN	*	sorge	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	schon	ADV	*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	selbst	ADV	(AP*	selbst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	sehn	CARD	*)	sehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	wo	PWAV	(S*	wo	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Al-Hafi	NE	*	al-hafi	-	-	(LOC*)	(3)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	bleibt	VVFIN	*))	bleiben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Szene	NN	(VROOT(PSEUDO(S*	szene	sg	-	-	(215)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	sg	fem	-	(216
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	offne	ADJA	*	offn	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Flur	NN	*	flur	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	in	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Nathans	NE	*	nathan	sg	*	-	(217|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Hause	NN	*))	haus	sg	neut	-	216)|217)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	gegen	APPR	(PP*	gegen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	die	ART	*	der	pl	fem	-	(218
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Palmen	NN	*)	palme	pl	fem	-	218)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKVZ	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	wie	KOKOM	(PP*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	im	APPRART	*	in	sg	masc	-	(219
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	ersten	ADJA	*	erster	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Auftritte	NN	*	auftritt	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	des	ART	(NP*	der	sg	masc	-	(220
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	ersten	ADJA	*	erster	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	Aufzuges	NN	*)))	aufzug	sg	masc	-	219)|220)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	*	ein	sg	masc	-	(221
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Teil	NN	*	teil	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	pl	fem	-	(105
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Waren	NN	*	sein	pl	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Kostbarkeiten	NN	*	kostbarkeit	pl	fem	-	221)|105)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	liegt	VVFIN	*	liegen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	ausgekramt	VVPP	*	ausgekramt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	deren	PRELAT	*	der	pl	masc	-	(221)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	eben	ADV	*	eben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	daselbst	ADV	*	daselbst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	gedacht	VVPP	*	denken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(CNP*	nathan	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*)	daja	-	-	(PER*)	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	*	O	-	-	-	(221
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	*	alle	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	herrlich	ADJD	*	herrlich	-	-	-	221)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	alles	PIS	*	alle	sg	neut	-	(221
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	auserlesen	VVFIN	*	auserlesen	-	-	-	221)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	*	O	-	-	-	(221
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	*	alle	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	–	PPER	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	wie	KOKOM	*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPOSAT	*	ihr	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	es	PPER	*	es	sg	neut	-	(221)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	geben	VVINF	*	geben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	könnt	VVFIN	*	können	-	-	-	221)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	(VROOT(PSEUDO(S*	wo	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(222
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Silberstoff	NN	*)	silberstoff	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	goldnen	ADJA	*	goldn	pl	*	-	(223
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ranken	NN	*)	rank	pl	*	-	222)|223)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Gemacht	NN	*)	gemacht	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	kostet	VVFIN	*	kosten	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*)	er	sg	masc	-	(222)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	*	der	sg	neut	-	(222)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nenn	ADV	*	nenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ein	ART	*	ein	sg	neut	-	(224
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Brautkleid	NN	*	brautkleid	sg	neut	-	224)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Keine	PIAT	(VROOT(PSEUDO(S(NP*	kein	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Königin	NN	*)	königin	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	verlangt	VVFIN	*	verlangen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Es	PPER	*	es	sg	neut	-	(225)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	besser	ADJD	*)	gut	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Brautkleid	NN	(VROOT(PSEUDO*	brautkleid	-	-	-	(225)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Warum	PWAV	(VROOT(PSEUDO(S*	warum	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Brautkleid	NE	(NP*	brautkleid	-	-	-	(225)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	eben	ADV	*))	eben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Je	ADV	(VROOT(PSEUDO*	je	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	dachtet	VVFIN	*	dachten	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	daran	PROAV	*	daran	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Als	KOUS	(S*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihn	PPER	*	ihn	sg	masc	-	(222)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	kauftet	VVFIN	*))	kauften	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	*	aber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wahrlich	ADV	*	wahrlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Nathan	NE	*	nathan	-	-	(PER*)	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Der	NE	*	der	sg	masc	-	(222
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	kein	PIAT	*	kein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	andrer	ADJA	*	andrer	sg	masc	-	222)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	es	PPER	*	es	sg	neut	-	(224)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	sein	VAINF	*	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(222)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Zum	APPRART	(PP*	zu	-	-	-	(224
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Brautkleid	NN	*))	brautkleid	-	-	-	224)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	wie	KOKOM	(VP*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	bestellt	VVPP	*)	bestellen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(CS(S(NP*	der	sg	masc	-	(226
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	weiße	ADJA	*	weiß	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Grund	NN	*)	grund	sg	masc	-	226)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ein	ART	(NP*	ein	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Bild	NN	*	bild	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(NP*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Unschuld	NN	*)))	unschuld	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	die	ART	(S(NP*	der	pl	*	-	(223
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	goldnen	ADJA	*	goldn	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Ströme	NN	*	strom	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	223)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Die	NN	(VP(NP*	der	pl	masc	-	(223)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	aller	PIAT	(NP*	aller	pl	masc	-	(222
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Orten	NN	*	ort	pl	masc	-	222)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	diesen	PDAT	(NP*	dieser	sg	masc	-	(226
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Grund	NN	*)))	grund	sg	masc	-	226)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	durchschlängeln	VVINF	*))	durchschlängeln	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Ein	ART	(NP*	ein	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	Bild	NN	*	bild	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	des	ART	(NP*	der	sg	neut	-	(227
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	Reichtums	NN	*))))	reichtum	sg	neut	-	227)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Seht	VVFIN	(VROOT(PSEUDO(S*	sehen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*)	ihr	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Allerliebst	ADV	(VROOT(PSEUDO(S*)	allerliebst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	witzelst	VVFIN	*	witzelen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	da	PTKVZ	*)	da	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	(VROOT(PSEUDO(S(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wessen	PWAT	*	wessen	-	-	-	(225
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Brautkleid	NE	*	brautkleid	-	-	-	225)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sinnbilderst	NN	*)	sinnbilderst	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	(VP*	sich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	gelehrt	VVPP	*))	lehren	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Bist	NN	(NP*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	(NP*	du	*	*	-	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Denn	NE	*	denn	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Braut	NE	*))	braut	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wer	PWS	*	wer	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	(24
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	lieber	ADJA	*	lieber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Gott	NN	*	gott	-	-	-	24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	denn	ADV	*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	(VROOT(PSEUDO(S(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wessen	PWAT	*	wessen	-	-	-	(225
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Brautkleid	NE	*	brautkleid	-	-	-	225)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	sprichst	ADV	*)	sprichen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	*)	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(228
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	*	alle	sg	neut	-	228)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	(AP*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	dein	ADJD	*	dein	-	-	-	(319)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	(VP*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	keiner	PIS	*	keiner	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	andern	VVINF	*)))	anderer	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	mein	PPOSAT	*	mein	sg	neut	-	(319)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	mein	PPOSAT	*	mein	sg	masc	-	(319)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	sein	VAINF	*	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	VAFIN	(S*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	für	APPR	(PP*	für	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Recha	NE	*)	recha	sg	*	(PER*)	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	(230
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	(VP(NP*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	für	APPR	(PP*	für	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Recha	NE	*))	recha	sg	neut	(PER*)	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	mitgebracht	VVPP	*)	mitbringen	-	-	-	230)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	das	PDS	*	der	sg	neut	-	(230)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	liegt	VVFIN	*	liegen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	In	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	einem	ART	*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	andern	ADJA	*	anderer	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Ballen	NN	*))	ballen	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mach	VVIMP	*	mach	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	nimm	XY	*	nimm	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	weg	PTKVZ	*	weg	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Trag	NE	(VROOT(PSEUDO(S*	trag	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	deine	PPOSAT	(NP*	dein	pl	fem	-	(228|(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Siebensachen	NN	*)	siebensachen	pl	fem	-	228)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	fort	PTKVZ	*)	fort	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Versucher	NN	(VROOT(PSEUDO*	versucher	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	(VROOT(PSEUDO(S*	nein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wären	VAFIN	*	sein	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(228)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	die	ART	(NP*	der	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Kostbarkeiten	NN	*)	kostbarkeit	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	auch	ADV	(NP*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Der	ART	*	der	sg	masc	-	(21
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	ganzen	ADJA	*	ganz	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Welt	NN	*))	welt	-	-	-	21)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	rühr	ADV	*	rühr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	an	PTKVZ	*	an	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	wenn	KOUS	(VROOT(PSEUDO(CS(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PRF	*	sich	sg	*	-	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vorher	ADV	*	vorher	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	schwört	VVFIN	*)	schwören	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	von	APPR	(S(VP(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	dieser	PDAT	*	dieser	sg	fem	-	(168
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	einzigen	ADJA	*	einzig	sg	fem	-	168)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Gelegenheit	NN	*	gelegenheit	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	dergleichen	ADJA	*	dergleich	pl	-	-	(231)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Euch	NN	*)	euch	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	der	ART	(NP*	der	sg	masc	-	(24
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Himmel	NN	*	himmel	sg	masc	-	24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	zweimal	ADV	*))	zweimal	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	schicken	VVINF	*)	schicken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Gebrauch	NN	(VP*	gebrauch	sg	masc	-	(232)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	machen	VVINF	*))))	machen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gebrauch	NN	(VROOT(PSEUDO*	gebrauch	-	-	-	(232)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	von	APPR	*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gelegenheit	NN	*	gelegenheit	pl	-	-	(231)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	wozu	PWAV	(VROOT(PSEUDO*	wozu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(S*	O	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	stellt	VVFIN	*	stellen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	fremd	ADJD	*))	fremd	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mit	APPR	*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	kurzen	ADJA	(NP*	kurz	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Worten	NN	*)	wort	pl	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherr	NN	*)	tempelherr	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	liebt	VVFIN	*	lieben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Recha	NE	*	recha	sg	neut	(PER*)	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	gebt	VVFIN	(S*	geben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	sie	PPER	*	sie	pl	*	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	ihm	PPER	*	ihm	sg	masc	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	So	ADV	(S*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	doch	ADV	(AVP*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	einmal	ADV	*)	einmal	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Eure	PPOSAT	(NP*	euer	-	-	-	(187|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Sünde	NN	*	sünde	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	die	ART	(S(NP*	der	sg	fem	-	187)|(187)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Ich	NN	*)	ich	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	länger	ADJD	*	lang	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	verschweigen	VVINF	*	verschweigen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	kann	VMFIN	*))	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	ein	ART	(NP*	ein	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	Ende	NN	*))))	ende	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	*	der	sg	neut	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Mädchen	NN	*	mädchen	sg	neut	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	unter	APPR	*	unter	-	-	-	(55
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Christen	NN	*	christ	pl	masc	-	55)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Wird	NN	*	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	was	PWS	*	was	sg	neut	-	(233
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	ist	VAFIN	*	sein	sg	-	-	233)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	was	PWS	*	was	sg	neut	-	(179)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Sie	PPER	*	sie	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	ward	VVFIN	*	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	habt	VAFIN	*	haben	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	mit	APPR	*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	all	PIAT	*	all	*	*	-	(234
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	dem	ART	*	der	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	Guten	NN	*	gute	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	,	$,	*	--	-	-	-	234)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	Das	KOUS	*	der	sg	neut	-	(234)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	33	wir	PPER	*	wir	pl	*	-	(235)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	34	Euch	PRF	*	euch	pl	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	35	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	36	genug	ADV	*	genug	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	37	verdanken	VVINF	*	verdanken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	38	können	VMINF	*	können	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	39	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	40	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	41	Feuerkohlen	NN	*	feuerkohle	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	42	bloß	ADV	*	bloß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	43	auf	APPR	*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	44	Euer	ADJA	*	euer	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	45	Haupt	NN	*	haupt	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	46	Gesammelt	VVPP	*	gesammelt	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	47	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	*	der	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	alte	ADJA	*	alt	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Leier	NN	*	leier	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	-	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Mit	APPR	*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	einer	ART	*	ein	sg	fem	-	(236
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	neuen	ADJA	*	neu	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Saite	NN	*	saite	sg	fem	-	236)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	bezogen	VVPP	*	beziehen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Die	NN	*	der	sg	fem	-	(236)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	fürcht	VVFIN	*	fürchen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	weder	KON	*	weder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	stimmt	VVFIN	*	stimmen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	noch	ADV	*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	hält	VVFIN	*	halten	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mir	NE	*	sich	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	*	der	sg	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Tempelherr	NN	*	tempelherr	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	schon	ADV	*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	recht	NN	*	recht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihm	PPER	*	ihm	sg	*	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	gönnt	VVFIN	*	gönnen	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Recha	NE	*	recha	sg	-	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	PIS	*	mehr	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	als	KOKOM	*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	einem	ART	*	ein	sg	masc	-	(43
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	in	APPR	*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	*	der	sg	fem	-	(21
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Welt	NN	*	welt	sg	fem	-	43)|21)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Allein	ADV	(VROOT(PSEUDO(CS(S(ISU*	allein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Nun	ADV	(S*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	nur	ADV	(NP*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Geduld	NN	*)))	geduld	sg	neut	-	(237)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geduld	NN	(VROOT(PSEUDO*	geduld	-	-	-	(237)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geduld	NN	(VROOT(PSEUDO(S*	geduld	sg	fem	-	(237)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Eure	PPOSAT	(NP*	euer	sg	fem	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	alte	ADJA	*	alt	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Leier	NN	*)	leier	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	(AVP*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(NP(AP*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wenig	PIAT	*)	wenig	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Tage	NN	*)	tag	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	noch	ADV	(NP*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Geduld	NN	*)	geduld	sg	fem	-	(237)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sieh	VVIMP	(S*	sieh	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*)	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wer	PWS	(S*	wer	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*)	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	dort	ADV	*	dort	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	masc	-	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Klosterbruder	NN	*)	klosterbruder	sg	masc	-	5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geh	XY	*	geh	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	frag	VVFIN	*	frag	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihn	PPER	*	ihn	sg	masc	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	was	PWS	*	was	sg	neut	-	(238
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	will	VMFIN	*	wollen	sg	-	-	238)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wollen	VMFIN	*)	wollen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(CS(S*	sie	sg	fem	-	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	geht	VVFIN	*	gehen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*)	ihn	sg	masc	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKVZ	*)	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	fragt	VVFIN	*)	fragen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	gib	VVIMP	*	geben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	eh	XY	*	eh	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	bittet	VVFIN	*	bitten	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	(	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wüßt	VVIMP	*	wüßt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Dem	ART	*	der	sg	neut	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Tempelherrn	NN	*	tempelherr	sg	neut	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	erst	ADV	*	erst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	beizukommen	VVPP	*	beizukmen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	ohne	KOUI	*	ohne	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Die	ART	*	der	sg	fem	-	(239
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Ursach	NN	*	ursach	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	meiner	PPOSAT	*	mein	pl	masc	-	(240|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Neugier	NN	*	neugier	pl	masc	-	239)|240)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	ihm	PPER	*	ihm	sg	masc	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	sagen	VVINF	*	sagen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	*	sie	sg	fem	-	(239)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*	ihm	sg	masc	-	(16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	sag	VVFIN	*	sag	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	*	der	sg	fem	-	(239
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Verdacht	NN	*	verdacht	sg	fem	-	239)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	ohne	APPR	*	ohne	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Grund	NN	*	grund	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	hab	VAFIN	*	hab	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	ganz	ADV	*	ganz	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	umsonst	ADV	*	umsonst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Den	ART	*	der	sg	masc	-	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	Vater	NN	*	vater	sg	masc	-	1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	auf	APPR	*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	das	ART	*	der	sg	neut	-	(80
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	Spiel	NN	*	spiel	sg	neut	-	80)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	gesetzt	VVPP	*	setzen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	)	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	–	$.	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	Was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	ists	ADV	*	ist	-	-	-	(238)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	(VP*	euch	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	sprechen	VVINF	*))	sprechen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	laß	VVFIN	*	lassen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihn	PPER	(VP*	ihn	sg	masc	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	kommen	VVINF	*))	kommen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	geh	XY	*	geh	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	indes	ADV	(S*)	indes	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(CNP*	nathan	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Klosterbruder	NN	*))	klosterbruder	sg	masc	-	5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	(	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	bliebe	VVFIN	*	bleiben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Rechas	NE	*	recha	sg	*	-	(241|(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Vater	NN	*	vater	sg	masc	-	241)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	gar	ADV	*	gar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	gern	ADV	*	gern	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Zwar	ADV	*	zwar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ichs	ADV	*	ichs	-	-	-	(241)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	bleiben	VVINF	*	bleiben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Auch	NN	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	aufhör	VVFIN	*	aufhör	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	es	PPER	*	es	sg	neut	-	(241)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	heißen	VVINF	*	heißen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	werd	VVFIN	*	werden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	ichs	PPER	*	ichs	-	-	-	(241)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	immer	ADV	*	immer	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	noch	ADV	*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	heißen	VVINF	*	heißen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	erkennt	VVFIN	*	erkennen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	wie	PWAV	*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	gern	ADV	*	gern	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	ichs	ADJD	*	ichs	-	-	-	(241)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	wäre	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	)	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	–	$.	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	Geh	NE	*	geh	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Euern	NN	*	euer	pl	masc	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Diensten	NN	*))	dienst	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	frommer	ADJA	(NP*	fromm	sg	masc	-	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Bruder	NN	*)	bruder	sg	masc	-	5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(NP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	eben	ADV	*	eben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	viel	PIS	*)	viel	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	freue	VVFIN	*	freuen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	-	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Herr	NN	(VP(NP*	herr	sg	masc	-	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Nathan	NE	*	nathan	sg	masc	(PER*)	1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Euch	PPER	(S(NP*	euch	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	annoch	ADV	*)	annoch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	wohl	ADV	*))	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	sehn	VAINF	*)))	sehn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Je	ADV	(VROOT(PSEUDO*	je	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nu	XY	*	nu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wer	PWS	(S*	wer	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	habt	VAFIN	*	haben	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	(VP(NP(AP*	so	-	-	-	(112
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	manchem	PIAT	*)	mancher	sg	masc	-	112)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ja	NN	*)	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Euern	NN	*	euer	pl	fem	-	(242|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Namen	NN	(NP*	name	pl	fem	-	242)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	die	ART	*	der	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Hand	NN	*))	hand	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	gedrückt	VVPP	*))	drücken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(242)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	steht	VVFIN	*	stehen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	meiner	PIS	*)	mein	sg	fem	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	seit	APPR	(PP*	seit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	vielen	PIAT	*	vieler	pl	neut	-	(243
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Jahren	NN	*))	jahr	pl	neut	-	243)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*))	nathan	-	-	-	(1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	nach	APPR	(VROOT(PSEUDO(AP(PP*	nach	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	seinem	PPOSAT	*	sein	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Beutel	NN	*)	beutel	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	langend	ADJD	*)	langend	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kommt	VVFIN	*	kommen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Bruder	NN	*	bruder	sg	masc	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	frisch	ADJD	*	frisch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	ihn	PPER	*	ihn	sg	masc	-	(242)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	auf	PTKVZ	*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Habt	VAFIN	*	haben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Dank	NN	*	dank	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	würd	VAFIN	*	würd	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(244)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ärmern	NN	*	ärmer	pl	-	-	(112)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	stehlen	VVINF	*	stehlen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	nehme	VVFIN	*	nehmen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*)	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	erlauben	VVINF	(S*	erlauben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	wollt	VMFIN	*	wollen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	ein	ART	(VP(NP*	ein	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	wenig	PIAT	(NP*	wenig	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Euch	PPER	(AP*	euch	pl	*	-	(245|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	meinen	PPOSAT	*)	meinen	sg	masc	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Namen	NN	*))	name	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	aufzufrischen	VVIZU	*))	auffrischen	-	-	-	245)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	(VP*	mich	sg	-	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	rühmen	VVINF	*	rühmen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	auch	ADV	(VP(VP*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Eure	PPOSAT	*	euer	-	-	-	(246|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Hand	NN	*	hand	*	*	-	246)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Etwas	ADV	*)	etwas	*	*	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	gelegt	VVPP	*)	legen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	haben	VAINF	*)	haben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	was	PWS	(S*	was	sg	neut	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Verachten	NN	*)	verachten	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	war	VAFIN	*))))	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Verzeiht	VVPP	*	verzeihen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	schäme	VVFIN	*	schämen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PRF	*	mich	sg	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	–	PPER	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Sagt	NN	*	sagt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nehmt	VVFIN	(S*	nehmt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	zur	APPRART	(PP*	zu	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Buße	NN	*	buße	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	siebenfach	CARD	*)	siebenfach	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Den	ART	(NP*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Wert	NN	*)	wert	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	desselben	PDS	*	derselbe	sg	masc	-	(247)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	von	APPR	(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	mir	PPER	*)	sich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	an	PTKVZ	*)	an	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hört	VVIMP	(VROOT(PSEUDO(S*	hören	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Vor	APPR	(PP*	vor	-	-	-	(158
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	allen	PIAT	*	aller	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Dingen	NN	*)	ding	pl	*	-	158)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	wie	KOKOM	(VP(NP*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*)	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	selber	ADV	*	selber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	nur	ADV	(VP(AVP*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Erst	ADV	*)	erst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	heut	ADV	*	heut	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	an	APPR	(PP*	an	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	dies	PDS	*	dieser	sg	neut	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	mein	PPOSAT	(NP*	mein	sg	neut	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Euch	PPER	(AP*	euch	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	vertrautes	ADJA	*)	vertraut	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Pfand	NN	*))	pfand	sg	neut	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Erinnert	VVPP	*)	erinnern	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	worden	VAPP	*))	werden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mir	NE	(VROOT(PSEUDO(NP*	sich	sg	*	-	(247
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	vertrautes	ADJA	*	vertraut	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Pfand	NN	*)	pfand	sg	neut	-	247)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Vor	APPR	(VROOT(PSEUDO(S(PP*	vor	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	kurzem	ADJA	*)	kurz	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	saß	VVFIN	*	sitzen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	als	APPR	(CPP(PP*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Eremit	NN	*)	eremit	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Quarantana	NE	*)	quarantana	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	unweit	APPR	(PP*	unweit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Jericho	NE	*)))	jericho	sg	neut	(LOC*)	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	*	da	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	kam	VVFIN	*	kommen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	arabisch	ADJD	*	arabisch	sg	masc	(MISC*)	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Raubgesindel	NN	*	raubgesindel	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	brach	VVFIN	*	brechen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Mein	PPOSAT	*	mein	sg	masc	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Gotteshäuschen	NN	*	gotteshäusche	sg	masc	(LOC*)	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	ab	PTKVZ	*	ab	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	meine	PPOSAT	*	mein	sg	fem	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Zelle	NN	*	zelle	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	schleppte	VVFIN	*	schleppen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	mich	PPER	*	mich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	mit	APPR	*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	fort	PTKVZ	*	fort	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zum	APPRART	(VROOT(PSEUDO(S(PP*	zu	sg	neut	-	(52
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Glück	NN	*)	glück	sg	neut	-	52)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	entkam	VVFIN	*	entkommen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ich	PPER	(NP*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	(CS(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	floh	VVFIN	*	floh	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	hierher	PROAV	*	hierher	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	zum	APPRART	(PP*	zu	sg	neut	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Patriarchen	NN	*)	patriarchen	sg	neut	-	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Um	KOUI	(VP*	um	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	mir	PPER	*	sich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	ein	ART	(NP*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	ander	ADJA	*	ander	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Plätzchen	NN	*)	plätzchen	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	auszubitten	VVIZU	*))	auszubeiten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	Allwo	NE	(S*	allwo	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	ich	PPER	(VP*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	meinem	PPOSAT	(NP*	mein	sg	masc	-	(24|(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	Gott	NN	*	gott	sg	masc	-	24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	in	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	Einsamkeit	NN	*)	einsamkeit	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	Bis	APPR	(PP*	bis	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	an	APPR	*	an	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	mein	PPOSAT	*	mein	sg	neut	-	(248|(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	selig	ADJD	*	selig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	Ende	NN	*))	ende	sg	neut	-	248)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	dienen	VVINF	*)	dienen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	könne	VMFIN	*))))	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	steh	VVFIN	*	steh	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Kohlen	NN	(CNP*	kohle	pl	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	guter	ADJA	(NP*	gut	*	*	-	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Bruder	NN	*))))	bruder	*	*	-	5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Macht	NN	(VROOT(PSEUDO*	macht	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	(AP*	es	sg	neut	-	(245)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	kurz	ADJD	*)	kurz	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(NP*	der	sg	neut	-	(247
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Pfand	NN	*)	pfand	sg	neut	-	247)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	ART	(VROOT(PSEUDO(NP*	der	sg	neut	-	(247
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	(AP*	sich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	vertraute	ADJA	*)	vertraut	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Pfand	NN	*)	pfand	sg	neut	-	247)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sogleich	ADV	(VROOT(PSEUDO*	sogleich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Herr	NN	(NP*	herr	sg	masc	-	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*)	nathan	sg	masc	(PER*)	1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(NP*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(S(NP*	der	sg	masc	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Patriarch	NN	*)	patriarch	sg	masc	-	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Versprach	VVFIN	*	versprach	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	eine	ART	(NP*	ein	sg	fem	-	(249
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Siedelei	NN	*	siedelei	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	auf	APPR	(PP*	auf	-	-	-	(250
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Tabor	NN	*)	tabor	sg	-	(LOC*)	249)|250)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Sobald	NE	*)	sobald	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	als	APPR	(PP*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	eine	PIS	*)	ein	sg	fem	-	(249)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	leer	PTKVZ	*))	leer	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	und	KON	(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	hieß	VVFIN	*	heißen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	inzwischen	ADV	*	inzwischen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	Im	APPRART	(PP*	in	sg	neut	-	(15
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Kloster	NN	*)	kloster	sg	neut	-	15)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	mich	PPER	(VP*	mich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	als	APPR	(PP*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	Laienbruder	NN	*)	laienbruder	sg	masc	-	(251)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	bleiben	VVINF	*))	bleiben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO(CS(S*	da	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	itzt	ADJD	*	itzen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Herr	NN	(NP*	herr	sg	masc	-	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Nathan	NE	*	nathan	sg	masc	(PER*)	1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*))	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	verlange	VVFIN	(S*	verlang	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Des	ART	(NP*	der	-	-	-	(252
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Tags	NN	*)	tags	-	-	-	252)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	wohl	ADV	(AVP*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	hundertmal	ADV	*)	hundertmal	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Tabor	NN	*)))	tabor	-	-	(LOC*)	(250)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	(NP*	der	sg	masc	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Patriarch	NN	*)	patriarch	sg	masc	-	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	braucht	VVFIN	*	brauchen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	*)	mich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	APPR	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	allerlei	PIAT	*	allerlei	*	*	-	(19
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	19)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Wovor	KOUS	(S*	wovor	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	großen	ADJA	(NP*	groß	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Ekel	NN	*)	ekel	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	habe	VAFIN	*)	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zum	APPRART	(VROOT(PSEUDO(PP*	zu	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Exempel	NN	*)	exempel	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Macht	NN	*	macht	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	bitt	VVFIN	*	bitt	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	pl	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(CS*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	(S*	es	sg	neut	-	(245)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	kömmt	VVFIN	*))	kömmen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Da	ADV	*	da	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ihm	PPER	*	ihm	sg	masc	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	jemand	PIS	*	jemand	sg	masc	-	(61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	heut	ADV	*	heut	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	ins	APPRART	*	in	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Ohr	NN	*	ohr	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	gesetzt	VVPP	*	setzen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Es	PPER	*	es	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	lebe	VVFIN	*	leben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	hier	ADV	*	hier	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	herum	ADV	*	herum	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	ein	ART	*	ein	sg	masc	-	(66
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Jude	NN	*	jude	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	der	PRELS	*	der	sg	masc	-	66)|(66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	Ein	ART	*	ein	sg	masc	-	(67
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	Christenkind	NE	*	christenkind	sg	masc	-	67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	als	APPR	*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	seine	PPOSAT	*	sein	sg	fem	-	(71
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	Tochter	NN	*	tochter	sg	fem	-	71)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	sich	PRF	*	sich	sg	-	-	(66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	Erzöge	NN	*	erzöge	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Betroffen	VVPP	*	betreffen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hört	VVFIN	(VROOT(PSEUDO(S*	hören	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*	mich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	aus	PTKVZ	*)	aus	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Indem	KOUS	*	indem	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Er	PPER	*	er	sg	masc	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	aufträgt	VVFIN	*	auftragen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	diesem	PDAT	*	dieser	sg	masc	-	(66
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Juden	NN	*	Jude	sg	masc	-	66)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	stracks	VVFIN	*	stracks	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Wo	PWAV	*	wo	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	möglich	ADJD	*	möglich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	auf	APPR	*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	die	ART	*	der	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Spur	NN	*	Spur	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	kommen	VVINF	*	kommen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Gewaltig	ADJD	*	gewaltig	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	sich	PRF	*	sich	sg	-	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	ob	KOUS	*	ob	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	eines	ART	*	ein	sg	masc	-	(36
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	solchen	PIAT	*	solcher	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	Frevels	NN	*	frevel	sg	masc	-	36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	Erzürnt	NN	*	erzürnt	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	der	PRELS	*	der	sg	masc	-	(36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	ihm	PPER	*	ihm	sg	masc	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	die	ART	*	der	sg	fem	-	(253
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	wahre	ADJA	*	wahr	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	33	Sünde	NN	*	sünde	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	34	wider	APPR	*	wider	-	-	-	253)|(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	35	Den	NE	*	den	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	36	heil	PTKVZ	*	heil	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	37	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	38	gen	APPR	*	gen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	39	Geist	NN	*	geist	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	40	bedünkt	VVPP	*	bedünken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	41	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	42	–	VAFIN	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	43	das	PDS	*	der	sg	neut	-	(36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	44	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	45	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	46	die	ART	*	der	sg	fem	-	(253
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	47	Sünde	NN	*	sünde	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	48	,	$,	*	--	-	-	-	253)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	49	Die	NN	*	der	sg	fem	-	(253)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	50	aller	PIAT	*	aller	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	51	Sünden	NN	*	sünde	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	52	größte	ADJA	*	groß	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	53	Sünd	NN	*	sünd	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	54	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	55	uns	PPER	*	uns	pl	*	-	(55)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	56	gilt	VVFIN	*	gelten	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	57	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	58	Nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	59	daß	KOUS	*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	60	wir	PPER	*	wir	pl	*	-	(55)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	61	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	62	Gott	NN	*	gott	sg	masc	(PER*)	(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	63	sei	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	64	Dank	NN	*	dank	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	65	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	66	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	67	recht	ADV	*	recht	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	68	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	69	wissen	VVINF	*	wissen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	70	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	71	Worin	PWAV	*	worin	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	72	sie	PPER	*	sie	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	73	eigentlich	ADV	*	eigentlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	74	besteht	VVFIN	*	bestehen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	75	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	76	–	PPER	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	77	da	ADV	*	da	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	78	wacht	VVFIN	*	wachen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	79	Mit	APPR	*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	80	einmal	ADV	*	einmal	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	81	mein	PPOSAT	*	mein	sg	neut	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	82	Gewissen	NN	*	gewissen	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	83	auf	PTKVZ	*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	84	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	85	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	86	mir	PPER	*	sich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	87	Fällt	NN	*	fallen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	88	bei	PTKVZ	*	bei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	89	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	90	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	91	könnte	VMFIN	*	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	92	selber	ADV	*	selber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	93	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	94	vor	APPR	*	vor	-	-	-	(243
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	95	Zeiten	NN	*	zeit	pl	fem	-	243)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	96	Zu	APPR	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	97	dieser	PDAT	*	dieser	sg	fem	-	(36
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	98	unverzeihlich	ADJD	*	unverzeihlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	99	großen	ADJA	*	groß	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	100	Sünde	NN	*	sünd	sg	fem	-	36)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	101	Gelegenheit	NN	*	gelegenheit	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	102	gegeben	VVPP	*	geben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	103	haben	VAINF	*	haben	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	104	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sagt	NN	*	sagen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Hat	VAFIN	(S*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ein	ART	(NP*	ein	sg	neut	-	(254
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Reitknecht	NN	*)	reitknecht	sg	neut	-	254)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	(VP(PP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	vor	APPR	*	vor	-	-	-	(243
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	achtzehn	CARD	*	achtzehn	pl	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Jahren	NN	*)	jahr	pl	neut	-	243)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Ein	ART	(NP*	ein	sg	neut	-	(67
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Töchterchen	NN	*)	töchterchen	sg	neut	-	67)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	gebracht	VVPP	*	bringen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	von	APPR	(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	wenig	PIAT	*	wenig	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Wochen	NN	*)))	woche	pl	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	–	CARD	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	allerdings	ADV	*	allerdings	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	–	XY	*	–	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	(VROOT(PSEUDO*	ei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	seht	VVFIN	(S*	sehen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Mich	PPER	*	mich	sg	fem	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	recht	ADV	*	recht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	an	PTKVZ	*)	an	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	*	der	sg	masc	-	(254
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Reitknecht	NN	*	reitknecht	sg	masc	-	254)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	der	PDS	*	der	sg	masc	-	(254)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(318)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Seid	VAFIN	*	sein	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(255)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(256
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Herr	NN	*	herr	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(S(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	welchem	PRELS	*)	welcher	sg	masc	-	(256)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ichs	APPRART	(PP*)	ich	sg	masc	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Euch	PPER	*	euch	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	brachte	VVFIN	*))	bringen	sg	-	-	256)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	War	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	–	PPER	*	–	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	mir	PPER	(NP*	sich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	recht	NN	*)	recht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	–	CARD	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	ein	ART	(NP*	ein	sg	masc	-	(257
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Herr	NN	*	herr	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	von	APPR	(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Filneck	NN	*)))	filneck	sg	neut	-	257)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wolf	NE	*	wolf	-	-	(PER*)	(257)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Von	APPR	*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Filneck	NE	*	filneck	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Richtig	ADJD	(VROOT(PSEUDO*	richtig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Weil	KOUS	*	weil	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	*	der	pl	masc	-	(206
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mutter	NN	*	mutter	pl	masc	-	206)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	kurz	ADJD	*	kurz	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Vorher	ADV	*	vorher	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	gestorben	VVPP	*	sterben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	sich	PRF	*	sich	sg	-	-	(256)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	der	ART	*	der	sg	masc	-	(256
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Vater	NN	*	vater	sg	masc	-	256)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Nach	APPR	*	nach	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	–	NN	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	mein	PPOSAT	*	mein	-	-	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	–	XY	*	–	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Gazza	NE	*	gazza	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	plötzlich	ADJD	*	plötzlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	werfen	VVINF	*	werfen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	mußte	VMFIN	*	müssen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	Wohin	NN	*	wohin	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	das	ART	*	der	sg	neut	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	Würmchen	NN	*	würmchen	sg	fem	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	ihm	PPER	*	ihm	sg	masc	-	(256)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	folgen	VVINF	*	folgen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	konnte	VMFIN	*	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	So	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	sandt	ADJD	*	sandt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	33	ers	APPRART	*	ers	-	-	-	(316)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	34	Euch	NN	*	euch	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	35	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	traf	VVFIN	*	treffen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	damit	PROAV	*	damit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	in	APPR	*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Darun	NE	*	darun	-	-	(LOC*)	(258)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ganz	ADV	(VROOT(PSEUDO(S(ISU*	ganz	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	recht	ADJD	*))	recht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	*	es	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	kein	PIAT	*	kein	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Wunder	NN	*	wunder	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	mein	PPOSAT	*	mein	sg	neut	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Gedächtnis	NN	*	gedächtnis	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	mich	PPER	*	mich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	betrög	VVFIN	*	betrög	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Der	ART	*	der	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	braven	ADJA	*	braven	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Herrn	NN	*	herr	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	viel	PIS	*	viel	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	gehabt	VAPP	*	haben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	diesem	PDAT	*	dieser	sg	masc	-	(256)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Hab	NN	*	hab	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	gar	ADV	*	gar	-	-	-	(259
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	zu	APPR	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	kurze	ADJA	*	kurz	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Zeit	NN	*	zeit	-	-	-	259)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	gedient	VVPP	*	dienen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(256)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	blieb	VVFIN	*	bleiben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	bald	ADV	(AVP*	bald	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	drauf	PROAV	*)	drauf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Askalon	NN	*))	askalon	-	-	-	(260)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	war	VAFIN	(S*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	sonst	ADV	*	sonst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	ein	ART	(NP*	ein	sg	masc	-	(323
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	lieber	ADJA	*	lieber	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Herr	NN	*)))	herr	sg	masc	-	323)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	ja	ADV	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*)	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dem	PWS	*	der	sg	-	-	(261)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	viel	PIS	*	viel	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	viel	ADV	*	viel	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	zu	APPR	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	danken	NN	*	danken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	habe	XY	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(VP(NP*	der	sg	masc	-	(261)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	mehr	PIAT	(AP*	mehr	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	als	KOKOM	(NP*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	einmal	ADV	(NP*	einmal	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	*)	mich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	dem	ART	(NP*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Schwert	NN	*))))	schwert	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	entrissen	VVPP	*)	entreißen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(AP*	O	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	schön	ADJD	*)	schön	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	(262
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	werd	ADJD	*	werden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	t	CARD	*	T	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	seines	PPOSAT	*	sein	sg	neut	-	(2|(256)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Töchterchens	NN	*	töchterchen	sg	neut	-	262)|2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	um	KOUI	*	um	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	lieber	ADV	*	lieber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	angenommen	VVPP	*	annehmen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	haben	VAFIN	*	haben	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(262)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	könnt	VVFIN	*	können	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(VP*	ihr	pl	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	denken	VVINF	*))	denken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wo	PWAV	*	wo	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*	es	sg	neut	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	*)	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(VP*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	etwa	ADV	(AVP*	etwa	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	gar	ADV	*)	gar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	gestorben	VVPP	*))	sterben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Laßts	NN	(S*	laßt	-	-	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	lieber	ADV	*	lieber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	gestorben	VVPP	(VP*	sterben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*))	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	sonst	ADV	*	sonst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	niemand	PIS	*	niemand	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	um	APPR	(PP*	um	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	*	der	sg	fem	-	(180
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Sache	NN	*)	sache	sg	fem	-	180)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	weiß	VVFIN	*)	weiß	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	(S*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Es	PPER	(NP*	es	sg	neut	-	(187)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	gute	ADJA	*	gut	pl	masc	-	(263
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Wege	NN	*))	weg	pl	masc	-	263)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	es	PPER	*	es	sg	neut	-	(187)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Traut	VVFIN	(VROOT(PSEUDO(S*	traut	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	(NP*	sich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*))	nathan	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	seht	VVFIN	*	sehen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	(S*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	denke	VVFIN	*	denken	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*))	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	an	APPR	(PP*	an	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	*	der	sg	neut	-	(68
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Gute	NN	*	gute	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	68)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Das	KOUS	(S*	der	sg	neut	-	(68)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	tun	VVINF	*)	tun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	vermeine	VVFIN	*	vermein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	gar	ADV	(AP*	gar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKA	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	nah	ADJD	*)	nah	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Was	PWS	*	was	sg	neut	-	(264
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	gar	ADV	*	gar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Schlimmes	NN	*)))	schlimmes	sg	neut	-	264)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	grenzt	VVFIN	*)	grenzen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	so	ADV	(S(CAVP(AVP*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	tu	ADJD	(S*	tu	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	lieber	ADV	*	lieber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	Das	ART	(NP*	der	sg	neut	-	(68
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	Gute	NN	*)	gute	sg	neut	-	68)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	weil	KOUS	(S*	weil	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	wir	PPER	*	wir	pl	*	-	(61)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	das	ART	(NP*	der	sg	neut	-	(264
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	Schlimme	NN	*	schlimme	sg	neut	-	264)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	zwar	ADV	(AP*	zwar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	33	So	ADV	(AVP*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	34	ziemlich	ADV	*)	ziemlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	35	zuverlässig	ADJD	*))	zuverlässig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	36	kennen	VVINF	*)))	kennen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	37	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	38	aber	KON	*	aber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	39	Bei	APPR	*)	bei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	40	weiten	VVFIN	*	weit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	41	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	42	das	ART	*	der	sg	neut	-	(68
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	43	Gute	NN	*)))	gute	sg	neut	-	68)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	44	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	War	VAFIN	(S*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*)	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Natürlich	ADV	(S*	natürlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	das	ART	(NP*	der	sg	neut	-	(321
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Christentöchterchen	NN	*)	christentöchterch	sg	neut	(MISC*)	321)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Recht	NN	*	recht	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	gut	ADJD	*	gut	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	von	APPR	(VP(VP(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Euch	PPER	*)	euch	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	erzogen	VVPP	*)	erziehen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	werden	VAINF	*)	werden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	sollte	VMFIN	*	sollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Ihrs	NN	*	ihr	-	-	-	(317)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	als	APPR	(PP*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	Euer	NN	*	euer	-	-	-	(266|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	eigen	ADJA	(NP*	eigen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	Töchterchen	NN	*))	töchterch	pl	fem	-	266)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	Erzögt	VVFIN	*))	erzögen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	*	der	sg	neut	-	(267|(265)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	hättet	VVFIN	*	hätten	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	aller	PIAT	*	aller	sg	fem	-	(268
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Lieb	NN	*	lieb	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	267)|268)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Und	KON	*	und	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Treue	NN	*	treue	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	getan	VVPP	*	tun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	müßtet	VMFIN	*	müßten	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Belohnet	VVPP	*	belohnet	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	werden	VAINF	*	werden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(267)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ein	PTKVZ	*)	ein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	(VROOT(PSEUDO*	ei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	freilich	ADV	(S(AP*	freilich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	klüger	ADJD	*)	klug	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	hättet	VVFIN	*	hätten	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*)	ihr	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	getan	VVPP	*	tun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Wenn	KOUS	(CS(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Ihr	PPER	(NP*	ihr	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	die	ART	(NP*	der	sg	fem	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Christin	NN	*)	christin	sg	fem	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	durch	APPR	(PP*	durch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	die	ART	*	der	sg	fem	-	(0
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	zweite	ADJA	*	zweiter	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Hand	NN	*))	hand	sg	fem	-	0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Als	APPR	(VP(VP(PP*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Christin	NN	*)	christin	sg	fem	-	(233)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	auferziehen	VVINF	*)	auferziehen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	lassen	VVINF	*))	lassen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	aber	ADV	*	aber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	So	ADV	(S*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	hättet	VVFIN	*	hätten	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	das	ART	(NP*	der	sg	neut	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	Kindchen	NN	*	kindchen	sg	neut	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	Eures	PPOSAT	(NP*	dein	sg	masc	-	(256|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	Freunds	NN	*))	freund	sg	masc	-	256)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	Auch	ADV	(VP(AVP*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	geliebt	VVPP	*)))	lieben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kinder	NN	*	kind	pl	neut	-	(79)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	brauchen	VVFIN	*	brauchen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Liebe	NN	*	liebe	pl	*	-	(269)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Wärs	NN	*	wär	-	-	-	(269)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	eines	ART	*	ein	sg	neut	-	(270
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	wilden	ADJA	*	wild	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Tieres	NN	*	tier	*	*	-	270)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Lieb	NE	*	lieb	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	In	APPR	*	in	-	-	-	(20
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	solchen	PIAT	*	solcher	pl	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Jahren	NN	*	jahr	pl	neut	-	20)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	mehr	ADV	*	mehr	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	als	KOKOM	*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	Christentum	NN	*	christentum	sg	neut	-	(90)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zum	APPRART	(VROOT(PSEUDO(S(PP*	zu	-	-	-	(90
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Christentume	NN	*)	christentume	pl	masc	-	90)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	hats	VAFIN	*	hats	pl	masc	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	noch	ADV	(NP(AVP*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	immer	ADV	*)	immer	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Zeit	NN	*))	zeit	sg	fem	-	(271)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S(AVP(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	(NP*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	*	der	sg	neut	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Mädchen	NN	*)	mädchen	sg	neut	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	sonst	ADV	(VP*	sonst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	gesund	ADJD	(CAP*	gesund	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	fromm	ADJD	*)	fromm	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Vor	APPR	(PP*	vor	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Euern	NN	*	euer	pl	masc	-	(272|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Augen	NN	*)	auge	pl	neut	-	272)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	aufgewachsen	VVPP	*)	aufwachsen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	ist	VAFIN	*)	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	So	ADV	*)	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	bliebs	ADV	(PP*	blieb	-	-	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	vor	APPR	*	vor	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Gottes	NN	*	gott	sg	masc	(PER*)	(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Augen	NN	*)	auge	pl	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	was	PWS	(S*	was	sg	neut	-	(179
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	es	PPER	*	es	sg	neut	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	war	VAFIN	*))	sein	sg	-	-	179)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	(NP*	der	sg	neut	-	(90
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ganze	ADJA	*	ganz	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Christentum	NN	*	christentum	sg	neut	-	90)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Aufs	APPRART	(PP*	auf	sg	neut	-	(86
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Judentum	NN	*))	judentum	sg	neut	-	86)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	gebaut	VVPP	*)	bauen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(CS(S*	es	sg	neut	-	(273)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	(VP*	mich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	oft	ADV	*	oft	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Geärgert	VVPP	*))	geärgert	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	hat	VAFIN	(S*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	mir	PPER	(VP*	sich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Tränen	NN	*	träne	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	gnug	ADJD	*	gnug	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	gekostet	VVPP	*))	kosten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Wenn	KOUS	(S*	wenn	-	-	-	(273
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Christen	NN	*	christ	pl	masc	(MISC*)	(55)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	gar	ADV	(AVP*	gar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	sehr	ADV	*)	sehr	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	vergessen	VVINF	*	vergessen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	konnten	VMFIN	*)	können	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	Daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	unser	PPOSAT	(NP*	unser	sg	masc	-	(24|(55)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	Herr	NN	*)	herr	sg	masc	-	24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	ja	ADV	*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	selbst	ADV	(NP*	selbst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	ein	ART	*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	Jude	NN	*)	jude	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	war	VAFIN	*))))	sein	sg	-	-	273)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S(NP*	ihr	sg	masc	-	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	guter	ADJA	(NP*	gut	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Bruder	NN	*))	bruder	sg	masc	-	5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	müßt	VMFIN	*	müßen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	mein	PPOSAT	(VP(NP*	mein	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Fürsprach	NN	*)	fürsprach	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	sein	VAINF	*	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Wenn	KOUS	(CS(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Haß	NN	(CNP*	haß	sg	masc	-	(274)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Gleisnerei	NN	*)	gleisnerei	sg	masc	-	(275)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	sich	PRF	(VP*	sich	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	gegen	APPR	(PP*	gegen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	mich	PPER	*)	mich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Erheben	VVINF	*)	erheben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	sollten	VMFIN	*)	sollen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	–	NN	(S(NP*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	wegen	APPR	(PP*	wegen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	einer	ART	*	ein	sg	fem	-	(187
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	Tat	NN	*	tat	-	-	-	187)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	–	NE	(MPN*	–	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	Ah	NE	*)))	ah	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	wegen	APPR	(PP*	wegen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	einer	ART	*	ein	sg	fem	-	(187
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	Tat	NN	*)))))	tat	sg	fem	-	187)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	(S*)	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(S*	ihr	pl	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	*	ihr	pl	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	sollt	VVFIN	*	sollen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Sie	PPER	(VP*	sie	pl	*	-	(180)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	wissen	VVINF	*))	wissen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nehmt	VVFIN	(S*	nehmt	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(180)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	*)	aber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(NP(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ins	APPRART	*	in	sg	neut	-	(248
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Grab	NN	*))	grab	sg	neut	-	248)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(S*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nie	ADV	(VP*	nie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	die	ART	(NP*	der	sg	fem	-	(276
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Eitelkeit	NN	*)	eitelkeit	sg	fem	-	276)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	versucht	VVPP	*	versuchen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Sie	PPER	(VP(NP*	sie	pl	*	-	(180)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	jemand	PIS	*)	jemand	sg	masc	-	(22
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	andern	VVINF	*	anderer	-	-	-	22)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	erzählen	VVINF	*))))	erzählen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Euch	PPER	*	euch	-	-	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Allein	ADV	*	allein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	erzähl	VVFIN	*	erzähl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	sie	PPER	*	sie	sg	fem	-	(180)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	frommen	ADJA	*	fromm	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Einfalt	NN	*	einfalt	sg	-	-	5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Allein	ADV	*	allein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	erzähl	ADJD	*	erzähl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	sie	PPER	*	sie	sg	fem	-	(180)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Weil	KOUS	(VROOT(PSEUDO(S*	weil	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	(NP*	der	sg	fem	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	allein	ADV	(AP*	allein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Versteht	NN	*))	verstehen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	was	PWS	(S*	was	sg	neut	-	(277)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	*	sich	sg	-	-	(278)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	(VP(NP*	der	sg	masc	-	(278
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	gottergebne	ADJA	*	gottergebn	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Mensch	NN	*	mensch	sg	masc	-	278)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Für	APPR	(PP*	für	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Taten	NN	*))	tat	pl	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	abgewinnen	VVINF	*)	abgewinnen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	kann	VMFIN	*))	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(CS(S*	ihr	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Gerührt	NN	*)	gerührt	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Euer	PPOSAT	(S(NP*	euer	*	*	-	(272|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Auge	NN	*)	auge	-	-	-	272)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	steht	VVFIN	*	stehen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	voll	APPR	(PP*	voll	-	-	-	(279
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Wasser	NN	*)))	wasser	sg	neut	-	279)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	traft	VVFIN	*	trafen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	*	der	sg	neut	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Kinde	NN	*	kind	sg	neut	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Darun	NE	*)))	darun	-	-	-	(258)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(CS(S*	ihr	pl	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	wißt	VVFIN	*	wissen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	*	aber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	wenig	PIAT	(NP(NP*	wenig	*	*	-	(280
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Tage	NN	*)	tag	*	*	-	280)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Zuvor	NN	*	zuvor	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*)	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	in	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Gath	NE	*)	gath	sg	neut	(LOC*)	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	die	ART	(NP*	der	pl	masc	-	(55
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Christen	NN	*)	christ	pl	masc	(MISC*)	55)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	alle	PIAT	(VP(NP*	aller	pl	*	-	(281
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Juden	NN	*)	Jude	pl	*	-	281)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Weib	NN	(CNP*	weib	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	Kind	NN	*))	kind	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	ermordet	VVPP	*)	ermorden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	hatten	VAFIN	*))	haben	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	wißt	VVFIN	(S*	wissen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	Wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	unter	APPR	(PP*	unter	-	-	-	(281
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	diesen	PDAT	*	dieser	pl	*	-	281)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	meine	PPOSAT	(NP*	mein	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	Frau	NN	*	frau	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	33	Mit	APPR	(PP*	mit	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	34	sieben	CARD	*))	sieben	-	-	-	(282
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	35	hoffnungsvollen	ADJA	*	hoffnungsvoll	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	36	Söhnen	NN	*)	söhnen	sg	masc	-	282)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	37	sich	PRF	*	sich	sg	-	-	(283)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	38	Befunden	NN	(NP*	befunde	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	39	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	40	die	PRELS	(S*	der	pl	masc	-	(283
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	41	in	APPR	(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	42	meines	PPOSAT	*	mein	sg	masc	-	(284|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	43	Bruders	NN	*)	bruder	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	44	Hause	NN	(VP(NP*	haus	sg	neut	-	284)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	45	,	$,	*	--	-	-	-	283)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	46	Zu	APPR	(S(PP*	zu	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	47	dem	PRELS	*)	der	sg	neut	-	(284)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	48	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	49	sie	PPER	*	sie	sg	fem	-	(283)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	50	geflüchtet	VVPP	*	flüchten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	51	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	52	insgesamt	ADV	*	insgesamt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	53	Verbrennen	NN	*)))	verbrennen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	54	müssen	VMFIN	*)))))	müssen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	55	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Allgerechter	ADJD	(VROOT(PSEUDO*	allgerechter	-	-	-	(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Als	KOUS	*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	sg	neut	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	kamt	VVFIN	*	kamen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	hatt	VAFIN	*	hatt	-	-	-	(285
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	drei	CARD	*	drei	-	-	-	(280
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Tag	NN	*	tag	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	280)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Nächt	NN	*	nächt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	in	APPR	*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Asch	NE	*	asch	sg	neut	(LOC*)	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	'	$(	*	--	-	-	-	285)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Und	CARD	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Staub	NN	*	staub	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	vor	APPR	*	vor	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	Gott	NN	*	gott	sg	masc	-	(286)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	gelegen	VVPP	*	liegen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	geweint	VVPP	*	weinen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Geweint	NN	*	geweint	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Beiher	NN	(VROOT(PSEUDO(CS(S*	beiher	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Gott	NN	*)	gott	sg	masc	-	(286)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	gerechtet	VVPP	*))	rechten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Gezürnt	NN	(S*)	gezürnt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	getobt	VVPP	*	toben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	mich	PRF	(S(CNP*	mich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	die	ART	(NP*	der	sg	fem	-	(21
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Welt	NN	*))	welt	sg	fem	-	21)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	verwünscht	VVPP	*)	verwünschen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Der	ART	(S(NP*	der	sg	masc	-	(55
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Christenheit	NN	*)	christenheit	sg	masc	-	55)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	den	ART	(VP(NP*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	unversöhnlichsten	ADJA	*	unversöhnlich	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Haß	NN	*)	haß	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	zugeschworen	VVPP	*)))	zugeschwor	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	–	$.	*))	–	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ach	ITJ	(VROOT(PSEUDO(S*)	ach	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	glaubs	VVFIN	*	glaub	sg	-	-	(285)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*)	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	kam	VVFIN	*	kommen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	(NP*	der	sg	fem	-	(287
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Vernunft	NN	*)	vernunft	sg	fem	-	287)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	allmählig	ADJD	(AVP*	allmählig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	*))	wieder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	*	sie	sg	fem	-	(287)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	sprach	VVFIN	*	sprechen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	sanfter	ADJA	*	sanft	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Stimm	NN	*	stimm	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	»	$(	*	»	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Gott	NN	*	gott	sg	masc	-	(286)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	(VP(AP(AVP*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Gottes	NN	(NP*	gott	sg	masc	-	(286)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ratschluß	NN	*))	ratschluß	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	*)))	der	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wohlan	NN	(VROOT(PSEUDO*	wohlan	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Komm	VVIMP	*	komm	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	übe	XY	(VROOT(PSEUDO*	üben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	*	du	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	längst	ADV	(VP*	längst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	begriffen	VVPP	*)	begreifen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	hast	VAFIN	*)	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	sicherlich	ADV	*	sicherlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	(VP(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	üben	VVINF	*)	üben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	schwerer	ADJD	(S(VP*	schwer	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Als	NN	*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	begreifen	VVINF	*))	begreifen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	ist	VAFIN	*)	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	du	PPER	*	du	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	nur	ADV	*))	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	willst	VMFIN	*)	wollen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Steh	NE	*	steh	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	auf	PTKVZ	*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	«	XY	*	«	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	stand	VVFIN	*)	stehen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	rief	VVFIN	*	rufen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Gott	NN	*)	gott	-	-	-	(286)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	will	VMFIN	*)	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Willst	VVFIN	(VROOT(PSEUDO(CS(S*	willen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(286)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*)	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	will	VMFIN	*))	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Indem	PIS	*	indem	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	stiegt	VVFIN	*	stiegen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPOSAT	*	ihr	sg	neut	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Vom	APPRART	*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Pferd	NN	*	pferd	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	überreichtet	VVFIN	*	überreichten	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	mir	PPER	*	sich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	das	ART	*	der	sg	neut	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Kind	NN	*	kind	sg	neut	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	In	APPR	*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Euern	NN	*	euer	*	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Mantel	NE	*	mantel	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	eingehüllt	VVPP	*	einhüllen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Mir	NE	*	sich	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	damals	ADV	*	damals	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	sagtet	VVFIN	*	sagten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Euch	PPER	*	euch	sg	-	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	hab	VAFIN	*	hab	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Vergessen	VVPP	*	vergessen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	viel	PIS	*	viel	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	weiß	VVFIN	*	weißn	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	nahm	VVFIN	*	nehmen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Das	ART	*	der	sg	neut	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Kind	NN	*	kind	sg	neut	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	trugs	ADV	*	trug	-	-	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	auf	APPR	*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	mein	PPOSAT	*	mein	sg	neut	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Lager	NN	*	lager	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	küßt	VVFIN	*	küssen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	es	PPER	*	es	sg	neut	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	warf	VVFIN	*	werfen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Mich	NE	*	mich	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	auf	APPR	*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	die	ART	*	der	sg	fem	-	(288
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	Knie	NN	*	knie	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	'	$(	*	--	-	-	-	288)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	schluchzte	VVFIN	*	schluchzen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	Gott	NN	*	gott	-	-	-	(286)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	auf	APPR	(VROOT(PSEUDO(PP*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sieben	CARD	*)	sieben	-	-	-	(282)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Doch	KON	(S*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Eines	PIS	(AVP*	ein	sg	neut	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	*))	wieder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(MPN*	nathan	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(MPN*	nathan	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	(289
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Christ	NN	*))	christ	sg	masc	-	289)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Bei	APPR	(NP(PP*	bei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Gott	NN	*)	gott	sg	masc	(PER*)	(24)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	(S*	ihr	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	seid	VAFIN	*	sein	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	(NP*	ein	sg	masc	-	(289
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Christ	NN	*)))	christ	sg	masc	-	289)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(S(NP*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	beßrer	ADJA	*	beßrer	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Christ	NN	*)	christ	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nie	ADV	*)	nie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wohl	ADV	(VROOT(PSEUDO(NP*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	uns	PPER	*)	uns	pl	*	-	(290)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	(NP(S*	was	sg	neut	-	(291)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mich	PPER	*	mich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	zum	APPRART	(PP*	zu	sg	neut	-	(289
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Christen	NN	*)	christ	sg	neut	-	289)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	macht	VVFIN	*)	machen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	das	PDS	*)	der	sg	neut	-	(291)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	macht	VVFIN	*	machen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Euch	PPER	*	euch	pl	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	mir	PPER	*	sich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Zum	APPRART	(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Juden	NN	*))	Jude	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	(S*	aber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	laßt	VVIMP	*	lassen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	uns	PPER	*	uns	pl	*	-	(290)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	länger	ADJD	*	lang	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Einander	NN	(VP*	einander	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	erweichen	VVINF	*))	erweichen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hier	ADV	(VROOT(PSEUDO(S*	hier	-	-	-	(292
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	brauchts	VVFIN	*	brauchts	-	-	-	(293)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Tat	NN	*)	tat	-	-	-	(277)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	292)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ob	KOUS	*	ob	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	siebenfache	ADJA	*	siebenfach	sg	fem	-	(268
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Liebe	NN	*	liebe	sg	fem	-	268)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	schon	ADV	*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Bald	ADV	*	bald	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	an	APPR	*	an	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	dies	PDS	*	dieser	sg	neut	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	einz	ADV	*	einz	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	ge	ADJA	*	GE	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	fremde	ADJA	*	fremd	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Mädchen	NN	*	mädchen	-	-	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	band	VVFIN	*	binden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Ob	NN	*	ob	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	der	ART	*	der	pl	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Gedanke	NN	*	gedanke	pl	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	mich	PPER	*	mich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	schon	ADV	*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	tötet	VVFIN	*	töten	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	daß	KOUS	*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	Ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	meine	PPOSAT	*	mein	sg	-	-	(282|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	sieben	CARD	*	sieben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	Söhn	NN	*	söhn	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	'	$(	*	--	-	-	-	282)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	in	APPR	*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	aufs	APPRART	*	auf	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	neue	ADJA	*	neu	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	33	Verlieren	NN	*	verlieren	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	34	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	35	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	36	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	37	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	38	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	39	von	APPR	*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	40	meinen	PPOSAT	*	mein	pl	neut	-	(294|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	41	Händen	NN	*	hand	pl	neut	-	294)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	42	Die	ART	*	der	sg	fem	-	(295
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	43	Vorsicht	NN	*	vorsicht	sg	fem	-	295)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	44	wiederfodert	VVFIN	*	wierfodern	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	45	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	46	–	PWS	*	–	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	47	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	48	gehorche	VVFIN	*	gehorchen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	49	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	vollends	ADV	*	vollends	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Eben	NN	*	eben	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(292)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	bedacht	VVPP	*	bedacht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	mich	PRF	*	mich	sg	-	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	So	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	viel	PIS	*	viel	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Euch	PPER	*	euch	pl	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	anzuraten	VVIZU	*	anraten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	hats	VAFIN	*	hats	-	-	-	(292)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Euer	NE	(VP(NP*	euer	sg	*	-	(287|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	guter	ADJA	*	gut	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Geist	NN	*)	geist	sg	masc	-	287)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	schon	ADV	*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	angeraten	VVPP	*))	angerat	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	erste	ADJA	(AP*	erster	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	beste	ADJA	*))	gut	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	sie	PPER	*	sie	pl	*	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Entreißen	VVINF	*	entreißen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	wollen	VMFIN	*)	wollen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	(VROOT(PSEUDO(S*	nein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	gewiß	ADV	*	gewiß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	(296
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Auf	APPR	*	auf	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	*	*	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	größre	ADJA	*	größr	pl	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Rechte	NN	*	recht	pl	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	als	KOUS	*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	296)|(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Muß	NN	*	müssen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	frühere	VVFIN	*	früh	sg	masc	-	(210)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	zum	APPRART	*	zu	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	mindsten	ADJA	*	mind	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	haben	VAFIN	*	haben	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	–	XY	*	–	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Freilich	ADV	(VROOT(PSEUDO(S*)	freilich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(VP(NP*	der	sg	fem	-	(210)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihm	PPER	(CNP*	ihm	sg	masc	-	(296)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Natur	NN	*	natur	sg	fem	-	(297)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Blut	NN	*))	blut	sg	neut	-	(298)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	erteilen	VVINF	*)	erteilen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mein	PPOSAT	*	mein	sg	masc	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*	es	sg	neut	-	(292)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Drum	ADV	*	drum	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nennt	VVFIN	*	nennen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	geschwind	ADJD	*	geschwind	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Den	ART	*	der	sg	masc	-	(296
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Mann	NN	*	mann	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	der	PRELS	*	der	sg	masc	-	(296)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	ihr	PPER	*	ihr	sg	masc	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	als	APPR	*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Bruder	NN	*	bruder	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	oder	KON	*	oder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Ohm	NN	*	ohm	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	Als	APPR	*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Vetter	NN	*	vetter	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	oder	KON	*	oder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	sonst	ADV	*	sonst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	als	APPR	*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	Sipp	NN	*	sipp	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	verwandt	VVPP	*	verwanden	-	-	-	296)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	Ihm	PPER	*	ihm	sg	masc	-	(296)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	sie	PPER	*	sie	*	*	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	vorenthalten	ADJA	*	vorenthalten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	28	–	NN	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	29	Sie	PPER	*	sie	pl	*	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	30	,	$,	*	--	-	-	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	31	Die	PDS	*	der	pl	fem	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	32	jedes	PIAT	*	jeder	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	33	Hauses	NN	*	haus	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	34	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	35	jedes	PIAT	*	jeder	sg	neut	-	(44
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	36	Glaubens	NN	*	glauben	sg	neut	-	44)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	37	Zierde	NN	*	zierd	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	38	Zu	APPR	*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	39	sein	PPOSAT	*	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	40	erschaffen	VVPP	*	erschaffen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	41	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	42	erzogen	VVPP	*	erziehen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	43	ward	VVFIN	*	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	44	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	hoff	VVFIN	*	hoff	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	pl	*	-	(299|(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	wißt	VVFIN	*	wissen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	von	APPR	*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	diesem	PDAT	*	dieser	sg	masc	-	(256
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Euern	NN	*	euer	sg	masc	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Herrn	NN	*	herr	sg	masc	-	299)|256)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	dem	ART	*	der	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	Geschlechte	NN	*	geschlecht	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	dessen	PDS	*	der	sg	neut	-	(256)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	mehr	PIS	*	mehr	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	als	KOKOM	*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(299)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	guter	ADJA	(NP*	gut	*	*	-	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NN	*)	nathan	*	*	-	1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	schwerlich	ADJD	*)	schwerlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	habt	VAFIN	*	haben	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	(VP*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	schon	ADV	*	schon	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	gehört	VVPP	*	gehören	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	nur	ADV	(AVP*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	gar	ADV	*))))	gar	-	-	-	(259)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Zu	APPR	(VP(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	kurze	ADJA	*	kurz	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Zeit	NN	*)	zeit	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	ihm	PPER	*)	ihm	sg	masc	-	(256)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	gewesen	VAPP	*)	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wißt	VVFIN	(VROOT(PSEUDO(S*	wißen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	wenigstens	ADV	*	wenigstens	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	für	APPR	(PP*	für	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Geschlechts	NN	*)	geschlecht	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Die	ART	(NP*	der	pl	masc	-	(206
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Mutter	NN	*)	mutter	sg	fem	-	206)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	war	VAFIN	*))	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	War	VAFIN	(S*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(206)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	eine	ART	(NP*	ein	sg	fem	-	(300
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Stauffin	NN	*)	stauffin	sg	fem	-	300)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wohl	ADV	(VROOT(PSEUDO(S(ISU*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	möglich	ADJD	*))	möglich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ja	PTKANT	(S*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	dünkt	VVFIN	*)	dünken	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hieß	VVFIN	(VROOT(PSEUDO(S*	hieß	-	-	-	(301
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPOSAT	(NP*	ihr	sg	masc	-	(302|(206)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Bruder	NN	*	bruder	sg	masc	-	302)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Conrad	NE	*)	conrad	sg	masc	-	(303
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	von	APPR	(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Stauffen	NN	*))	stauff	pl	masc	-	303)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Tempelherr	NN	*)))	tempelherr	-	-	-	301)|(304)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	michs	PPER	*	michs	-	-	-	(301)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	triegt	VVFIN	*)	triegen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	halt	ADV	*)	halt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	*	da	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	fällt	VVFIN	*	fallen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ein	PTKVZ	*	ein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Daß	KOUS	*	daß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	vom	APPRART	*	von	sg	neut	-	(256
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	selgen	ADJA	*	selgen	pl	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Herrn	NN	*	herr	sg	masc	-	256)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	ein	ART	*	ein	sg	neut	-	(305
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Büchelchen	NN	*	büchelchen	sg	neut	-	305)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Noch	ADV	*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	hab	VAFIN	*	hab	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	zogs	VVFIN	*	zog	sg	-	-	(305)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	masc	-	(256)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Busen	NN	*)	busen	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	als	KOUS	(S*	als	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Wir	PPER	*	wir	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	ihn	PPER	*	ihn	sg	masc	-	(256)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Askalon	NN	*)	askalon	sg	neut	(PER*)	(260)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	verscharrten	VVFIN	*))	verscharren	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	sind	VAFIN	*	sein	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Gebete	NN	(NP*	gebet	pl	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	drin	ADV	*))	drin	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wir	PPER	(VROOT(PSEUDO(S(NP*	wir	pl	*	-	(55)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nennens	ADV	*)	nennens	pl	-	-	(305)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Brevier	NN	*))	brevier	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	*	der	sg	neut	-	(305)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	dacht	VVFIN	*	dacht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	ein	ART	*	ein	sg	masc	-	(55
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	Christenmensch	NN	*	christenmensch	sg	masc	(MISC*)	55)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Ja	NN	*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	noch	ADV	*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	brauchen	VVFIN	*	brauchen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	–	$(	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ich	PPER	*	ich	sg	masc	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	lesen	VVINF	*	lesen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	–	XY	*	–	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Tut	XY	*	tut	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	(AP(PP*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	zur	APPRART	*	zu	sg	fem	-	(306
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sache	NN	*))	sache	sg	fem	-	306)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	In	APPR	(VROOT(PSEUDO(S(PP*	in	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	diesem	PDAT	*	dieser	sg	neut	-	(305
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Büchelchen	NN	*)	büchelchen	sg	neut	-	305)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	stehn	VVFIN	*	stehn	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	vorn	ADV	(CAVP*	vorn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	hinten	ADV	*)	hinten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	mir	PPER	(VP(VP*	sich	sg	*	-	(5)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	sagen	VVINF	*)	sagen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	lassen	VVINF	*)	lassen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	mit	APPR	(CS(S(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	des	ART	*	der	sg	masc	-	(325
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	Herrn	NN	*)	herr	sg	masc	-	325)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	Selbsteigner	ADJA	(NP*	selbsteigner	sg	masc	(PER*)	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	Hand	NN	*))	hand	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	die	ART	(S(NP*	der	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	Angehörigen	NN	*)	angehörige	pl	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	Von	APPR	(VP(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	ihm	PPER	(CNP*	ihm	sg	masc	-	(256)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	24	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	25	ihr	PPER	*))	ihr	sg	fem	-	(206)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	26	geschrieben	VVPP	*)))))	schreiben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	27	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	KON	(VROOT(PSEUDO(VP(AP*	O	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	erwünscht	ADJD	*))	erwünschen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	*	gehen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	lauft	VVFIN	*	laufen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	holt	VVFIN	(VROOT(PSEUDO(S*	holen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	*	sich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(NP*	der	sg	neut	-	(305
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Büchelchen	NN	*))	büchelchen	sg	neut	-	305)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geschwind	NN	(VROOT(PSEUDO*	geschwind	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	bereit	ADJD	(AP*	bereit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Gold	NN	*	gold	sg	neut	-	(308)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	es	PPER	(CO(VP*	es	sg	neut	-	(305)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	aufzuwiegen	VVIZU	*)	auuwiegen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Und	KON	(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	tausend	CARD	(NP*	tausend	-	-	-	(309
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Dank	NN	*	dank	-	-	-	309)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	dazu	PROAV	*))))))	dazu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Eilt	VVIMP	*	eilt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	lauft	VVFIN	*	laufen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	KLOSTERBRUDER	NE	(VROOT(PSEUDO*	klosterbruder	sg	neut	(LOC*)	(5
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	5)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Recht	NN	(VROOT(PSEUDO(NP*	recht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	gern	ADV	*)	gern	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(305)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Arabisch	ADJD	*	arabisch	-	-	(MISC*)	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	*	aber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(NP*	der	sg	masc	-	(256
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Herr	NN	*)	herr	sg	masc	-	256)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Hineingeschrieben	NN	*))	hineingeschrieb	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ab	NN	(VROOT(PSEUDO*	ab	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Einerlei	PIS	*	einerlei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(AP*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	her	PTKVZ	*)	her	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*	gott	-	-	-	(286)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	(NP*	der	sg	neut	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Mädchen	NN	*)	mädchen	sg	neut	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	(CO*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	behalten	VVINF	*	behalten	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	Und	KON	(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	einen	ART	(NP*	ein	sg	masc	-	(296
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	solchen	PIAT	(NP*	solcher	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Eidam	NN	*))))	eidam	sg	masc	-	296)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	mir	PPER	(VP*	sich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	damit	PROAV	*	damit	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Erkaufen	VVINF	*)	erkaufen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	könnte	VMFIN	*)	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Schwerlich	ADJD	*	schwerlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	fall	FM	*	fall	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Es	PPER	*	es	sg	neut	-	(306)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	aus	PTKVZ	*	aus	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	wie	PWAV	*	wie	-	-	-	(306
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	s	PPER	*	--	-	-	-	306)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	will	VMFIN	*	wollen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wer	PWS	(S*	wer	sg	masc	-	(310
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	mag	VMFIN	*)	mögen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(311)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	aber	ADV	(NP(VP*	aber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	*	denn	-	-	-	310)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Gewesen	NN	*	gewesen	*	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	sein	VAINF	*)	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	der	PRELS	(S*	der	sg	masc	-	(311|(311)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	dem	ART	*	der	sg	masc	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Patriarchen	NN	*)	patriarch	sg	masc	-	311)|8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	So	ADV	(VP(AVP*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	etwas	ADV	*)	etwas	*	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	angebracht	VVPP	*)))	anbringen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(310)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Zu	APPR	(VP(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	fragen	ADJD	*)	fragen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	vergessen	VVPP	*))	vergessen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(310)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	gar	ADV	*)	gar	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Von	APPR	(S(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Daja	NE	*)	daja	-	-	(PER*)	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	käme	VVFIN	*)	kommen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daja	NE	(VROOT(PSEUDO(CNP*	daja	-	-	(PER*)	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nathan	NE	*)	nathan	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*))	daja	-	-	-	(0)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	eilig	ADJD	(VROOT(PSEUDO(CO*	eilig	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	verlegen	ADJD	*)	verlegen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denkt	VVIMP	(VROOT(PSEUDO(S*	denken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*)	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*	nathan	-	-	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	arme	ADJA	*	arm	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Kind	NN	*)	kind	sg	neut	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	erschrak	VVFIN	*	erschrecken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	recht	ADV	(AVP*	recht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	darüber	PROAV	*))	darüber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO*	da	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	schickt	VVFIN	*	schicken	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Patriarch	NN	*)	patriarch	sg	masc	-	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Des	ART	(VROOT(PSEUDO(NP*	der	-	-	-	(104|(7
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sultans	NN	*)	sultan	sg	neut	-	7)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Schwester	NN	(NP*	schwester	*	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Prinzessin	NN	(NP*	prinzessin	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Sittah	NE	*))))	sittah	sg	fem	-	104)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(NP*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Patriarch	NN	*)	patriarch	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	*	nein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*	sittah	pl	-	-	(104)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Hört	VVFIN	(S*	hören	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Prinzessin	NN	*	prinzessin	sg	fem	-	(104
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	(S(NP*	sittah	sg	fem	-	104)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Schickt	NE	*)	schickt	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	her	PTKVZ	*	her	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	läßt	VVFIN	(S*	lassen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	sie	PPER	*	sie	pl	*	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	zu	APPR	(VP(PP*	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	sich	PRF	*)	sich	sg	-	-	(104)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	holen	VVINF	*)))	holen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wen	PWS	*	wen	sg	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Läßt	VVFIN	*	lassen	*	*	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Recha	NE	*	recha	sg	neut	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	holen	VVINF	*	holen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sittah	NE	(S*	sittah	sg	*	-	(104)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	läßt	VVFIN	*	lassen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	(VP*	sie	sg	fem	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	holen	VVINF	*))	holen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	XY	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Sittah	NE	*	sittah	sg	masc	-	(104)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	holen	VVINF	*	holen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	läßt	VVFIN	*	lassen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	Der	ART	(NP*	der	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Patriarch	NN	*)))	patriarch	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	kommt	VVFIN	*	kommen	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	auf	APPR	(AVP*	auf	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	den	ART	*))	der	sg	masc	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	hast	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	kürzlich	ADV	(NP*	kürzlich	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	von	APPR	(PP*	von	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	ihm	PPER	*)	ihm	sg	masc	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	gehört	VVFIN	*)	gehören	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gewiß	ADV	(VROOT(PSEUDO(CO(AVP*	gewiß	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(VP(NP*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihm	PPER	*)	ihm	sg	masc	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	gesteckt	VVPP	*)	stecken	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	ihm	PPER	*	ihm	sg	masc	-	(8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	(VROOT(PSEUDO(S*	wo	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	sind	VAFIN	*	sein	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	pl	fem	-	(312
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Boten	NN	*))	bote	pl	fem	-	312)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Vorn	ADV	(VROOT(PSEUDO(S*)	vorn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	(VP*	sie	pl	*	-	(312)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Vorsicht	NN	*)	vorsicht	-	-	-	(295)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	selber	ADV	*	selber	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	sprechen	VVINF	*))	sprechen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Komm	VVIMP	*	komm	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vom	APPRART	(PP*	von	pl	fem	-	(8
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Patriarchen	NN	*)	patriarchen	pl	fem	-	8)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	nichts	PIS	(NP*	nichts	*	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	dahinter	PROAV	*))	dahinter	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	steckt	VVFIN	*	stecken	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ab	NN	(VROOT(PSEUDO*	ab	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	(313
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	–	VVFIN	*	–	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	(S*	ich	sg	*	-	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	fürchte	VVFIN	*	fürchen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ganz	ADV	(NP*	ganz	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	was	PIS	*)	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	anders	ADV	(AVP*	anders	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	noch	ADV	*)))	noch	-	-	-	313)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	gilts	ADV	*	gilt	-	-	-	(313)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	die	ART	*	der	sg	fem	-	(2
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	einzige	ADJA	*	einzig	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	vermeinte	ADJA	*	vermeint	sg	fem	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Tochter	NN	*	tochter	sg	fem	-	2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	So	ADV	*	so	-	-	-	(1
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	eines	ART	*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	reichen	ADJA	*	reich	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Juden	NN	*	Jude	sg	masc	-	1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	Für	APPR	*	für	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	einen	ART	*	ein	sg	masc	-	(183
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Muselmann	NN	*	muselmann	sg	masc	-	183)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	übel	ADV	*	übel	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Hui	NE	(NP*	hui	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Der	ART	(S(NP*	der	sg	masc	-	(16
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Tempelherr	NN	*)	tempelherr	sg	masc	-	16)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	drum	ADV	*))	drum	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	drum	ADV	*	drum	sg	neut	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	Den	ART	(NP*	der	sg	masc	-	(314
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	zweiten	ADJA	*	zweiter	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	Schritt	NN	*)	schritt	sg	masc	-	314)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	auch	ADV	(AVP*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	noch	ADV	*)	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	wage	NN	*	wagen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	Auch	ADV	*	auch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	15	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	16	noch	ADV	(AVP*	noch	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	17	selbst	ADV	*)	selbst	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	18	entdecke	VVFIN	*	entdecken	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	20	wer	PWS	(S*	wer	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	21	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	22	ist	VAFIN	*)))	sein	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	23	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	Getrost	NN	*	getrost	pl	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	KOUS	(VROOT(PSEUDO(S*	lassen	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*	mich	sg	*	-	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	(NP*	der	sg	masc	-	(315
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	ersten	ADJA	*	erster	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Augenblick	NN	*)	augenblick	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	315)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	Den	NE	*	der	sg	masc	-	(315)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	allein	ADV	(NP*	allein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	sie	PPER	*)	sie	sg	fem	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	dazu	PROAV	(VP*	dazu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	brauchen	VVINF	*))	brauchen	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	der	PDS	*	der	sg	masc	-	(315)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	sein	PPOSAT	(NP*	sein	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	–	NN	*)	–	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	*	nun	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	eben	ADV	*	eben	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	10	Ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	12	begleite	VVFIN	*))	begleiten	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO*	so	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	ein	ART	(S(NP*	ein	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	erster	ADJA	*	erster	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	Wink	NN	*	wink	sg	masc	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	4	Kann	NE	*)	können	sg	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	5	unterwegens	ADV	(VP*	unterwegens	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	6	wenigstens	ADV	(AVP*	wenigstens	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	8	schaden	VVINF	*))	schaden	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*)	ja	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(AP*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	zu	PTKVZ	*)	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Itzt	ADV	(VROOT(PSEUDO*	itzt	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	oder	KON	*	oder	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	nie	ADV	*	nie	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(AP*	nur	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	zu	PTKVZ	*)	zu	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihm	PPER	*	ihm	sg	*	-	(1)
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	1	nach	PTKVZ	*	nach	-	-	-	-
Nathan_Act4.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

#end document
