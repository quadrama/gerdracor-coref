#begin document (Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll); part 000
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Derwisch	NN	*	derwisch	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Al-Hafi	NE	*)	al-hafi	sg	-	(PER*)	3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO*	saladin	-	-	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sittah	NE	(VROOT(PSEUDO*	sittah	sg	-	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	pl	neut	-	(16
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gelder	NN	*	geld	pl	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ägypten	NE	(MPN*	ägypten	sg	neut	-	16)|(17)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Wenns	NE	*)))	wenn	sg	neut	-	(16)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	fein	ADJD	(AP*	fein	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	viel	PIS	*)	viel	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	ist	VAFIN	*)	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hast	VAFIN	(VROOT(PSEUDO(S*	haben	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nachricht	NN	*)	nachricht	sg	fem	-	(18)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	denke	VVFIN	*	denken	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	hier	ADV	*	hier	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	sie	PPER	*	sie	pl	*	-	(16)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	(PP*	in	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Empfang	NN	*)	empfang	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	nehmen	VVINF	*))	nehmen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zahl	NN	(VROOT(PSEUDO(NP*	zahl	sg	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	an	APPR	(PP*	an	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*	sittah	sg	-	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	tausend	CARD	*	tausend	-	-	-	(19)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Dinare	NN	*))	dinar	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	In	APPR	(VROOT(PSEUDO(CO(PP*	in	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gedanken	NN	*	gedanke	pl	*	-	(20)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	hin	ADV	*)	hin	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	her	ADV	(AP*	her	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	gehend	ADJD	*))	gehend	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zahl	NN	(VROOT(PSEUDO*	zahl	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	anstatt	KOUI	*	anstatt	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	empfang	FM	*	empfingen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(AP*	O	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	schön	ADJD	*)	schön	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	für	APPR	(PP*	für	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Was	PWS	(AP*	was	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	weniger	PIS	(AP*	weniger	*	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	als	KOKOM	(NP*	als	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Nichts	PIS	*)))))	nichts	*	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	An	APPR	*	an	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*	sittah	sg	-	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wiederum	ADV	*	wiederum	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	an	APPR	*	an	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sittah	NE	*	sittah	sg	masc	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Verloren	NN	*	verlor	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wiederum	ADV	*	wiederum	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	im	APPRART	(VP(PP*	in	sg	masc	-	(21
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Schach	NN	*)	schach	sg	masc	-	21)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	verloren	VVPP	*))	verlieren	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Da	ADV	(S*	da	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	steht	VVFIN	*	stehen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(22)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*)	noch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	(NP*	der	sg	neut	-	(22
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Spiel	NN	*)	spiel	sg	neut	-	22)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	gönnst	VVFIN	*	gönnen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Mein	PPOSAT	(NP*	mein	sg	neut	-	(19|(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Glück	NN	*))	glück	sg	neut	-	19)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*))	al-hafi	-	-	-	(3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	ART	(VROOT(PSEUDO(AP(NP*	der	sg	neut	-	(22
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Spiel	NN	*)	spiel	sg	neut	-	22)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	betrachtend	ADJD	*)	betrachtend	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	gönnen	VVINF	*	gönnen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	–	XY	*	–	pl	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wißt	VVFIN	*	wissen	pl	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*	ja	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*))	sittah	-	-	-	(15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	ihm	PPER	(VROOT(PSEUDO(AP*	ihm	sg	masc	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	winkend	ADJD	*)	winkend	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Bst	XY	*	bst	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hafi	NE	(VROOT(PSEUDO(MPN*	hafi	-	-	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	bst	XY	*	bst	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*))	al-hafi	-	-	-	(3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	noch	ADV	(VROOT(PSEUDO(VP(PP*	noch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	*	auf	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	*	der	sg	neut	-	(22
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Spiel	NN	*)	spiel	sg	neut	-	22)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	gerichtet	VVPP	*)	richten	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gönnts	NE	(VROOT(PSEUDO(S*	gönnt	-	-	-	(19)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*	euch	pl	*	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(AVP*	nur	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	selber	ADV	*	selber	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	erst	ADV	*))	erst	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	(VROOT(PSEUDO(MPN*	al-hafi	-	-	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	bst	XY	*	bst	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*))	al-hafi	-	-	-	(3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	zu	APPR	(VROOT(PSEUDO(MPN*	zu	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sittah	NE	*)	sittah	-	-	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	pl	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Weißen	NN	*)	weiße	pl	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	waren	VAFIN	*	sein	pl	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euer	NN	*)	euer	*	*	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bietet	VVFIN	*	bieten	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Schach	NE	*)	schach	sg	-	-	(22)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gut	ADJD	(VROOT(PSEUDO(DL*	gut	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	gehört	VVFIN	*))	gehören	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Zug	NN	*	zug	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	an	APPR	(PP*	an	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ihm	PPER	*)))	ihm	sg	masc	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*))	sittah	-	-	-	(15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	ihm	PPER	(VROOT(PSEUDO(AP*	ihm	sg	masc	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	näher	ADJD	*	nah	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	tretend	ADJD	*)	tretend	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sage	VVIMP	(S*	sagen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	mein	PPOSAT	(VP(NP*	mein	sg	neut	-	(19|(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Geld	NN	*)	geld	sg	neut	-	19)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	bekommen	VVINF	*)	bekommen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	kann	VMFIN	*))	können	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*))	al-hafi	-	-	-	(3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	noch	ADV	(VROOT(PSEUDO(VP*	noch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	*	der	sg	neut	-	(22
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Spiel	NN	*)	spiel	sg	neut	-	22)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	geheftet	VVPP	*)	heften	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ja	PTKANT	(S*	ja	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	(S*	ihr	pl	*	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	sollts	ADV	*	sollts	-	-	-	(19)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	bekommen	VVINF	*	bekommen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Ihrs	NE	*	ihr	sg	*	-	(89)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	stets	ADV	*	stets	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	bekommen	VVFIN	*)))	bekommen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	bist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	toll	FM	*	toll	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(21
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Spiel	NN	*)	spiel	sg	neut	-	21)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	aus	PTKVZ	*)	aus	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	habt	VAFIN	*	haben	pl	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*	ja	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(NP(VP*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	verloren	VVPP	*)	verloren	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Saladin	NN	*))	saladin	-	-	(PER*)	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	kaum	ADV	(VROOT(PSEUDO(AP*	kaum	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hinhörend	ADJD	*)	hinhörend	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	doch	ADV	(VROOT(PSEUDO(S*)	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Bezahl	NN	(VROOT(PSEUDO*	bezahl	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	bezahl	ADJD	(VROOT(PSEUDO*	bezahl	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Bezahl	NN	(VROOT(PSEUDO*	bezahl	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	bezahl	ADJD	(VROOT(PSEUDO*	bezahl	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO(S*	da	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	steht	VVFIN	*	stehen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*	ja	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Eure	PPOSAT	(NP*	euer	sg	fem	-	(24|(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Königin	NN	*))	königin	sg	fem	-	24)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	noch	ADV	(VROOT(PSEUDO(CO(AVP*	noch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*))	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gilt	VVFIN	(VROOT(PSEUDO(S*	gilt	sg	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Gehört	NN	(NP*	gehört	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	(PP(AVP*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	ADV	*)	mehr	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ins	APPRART	*	in	sg	neut	-	(22
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Spiel	NN	*)))	spiel	sg	neut	-	22)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	mach	VVFIN	*	machen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	sag	VVFIN	(S*	sag	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Daß	KOUS	(S*	daß	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	das	ART	(VP(NP*	der	sg	neut	-	(19
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Geld	NN	*	geld	sg	neut	-	19)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	mir	PPER	(S*	sich	sg	*	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	holen	VVINF	*))	holen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	lassen	VVINF	*))))	lassen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*))	al-hafi	-	-	-	(3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	noch	ADV	(VROOT(PSEUDO(VP*	noch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	immer	ADV	*	immer	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(PP*	in	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	*	der	sg	neut	-	(22
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Spiel	NN	*)	spiel	sg	neut	-	22)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	vertieft	VVPP	*)	vertiefen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Versteht	VVFIN	(VROOT(PSEUDO(AVP(S*	verstehen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sich	PRF	*)	sich	sg	-	-	(25)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	wie	KOKOM	(AVP*	wie	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	immer	ADV	*))	immer	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*	auch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	*	schon	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	auch	ADV	(NP*	auch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	*	der	sg	fem	-	(24
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Königin	NN	*)	königin	sg	fem	-	24)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	gilt	VVFIN	*))	gelten	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Ihr	PPER	(S*	ihr	pl	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	seid	VAFIN	*	sein	pl	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Doch	KON	(AP(AVP*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	darum	PROAV	*	darum	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	16	noch	ADV	*)	noch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	17	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	18	matt	ADJD	*))	matt	-	-	-	(26)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	tritt	VVFIN	(VROOT(PSEUDO(S*	treten	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hinzu	PTKVZ	*	hinzu	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wirft	VVFIN	(S*	werfen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	(NP*	der	sg	neut	-	(22
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Spiel	NN	*)	spiel	sg	neut	-	22)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	um	PTKVZ	*))	um	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(26)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Es	PPER	*	es	sg	neut	-	(26)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	sein	VAINF	*	sein	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Spiel	NN	*	spiel	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Gewinst	NN	*)	gewinst	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(VP(AVP*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Gewonnen	NN	*))	gewonne	pl	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	bezahlt	VVPP	*)	bezahlen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	zu	APPR	(VROOT(PSEUDO(MPN*	zu	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sittah	NE	*)	sittah	-	-	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*)	er	sg	masc	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	*	was	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*))	sittah	-	-	-	(15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	von	APPR	(VROOT(PSEUDO(AP(PP*	von	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Zeit	NN	*)	zeit	sg	fem	-	(27)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Zeit	NN	*)	zeit	sg	fem	-	(27)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	(NP*	der	sg	masc	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Hafi	NN	*)	hafi	sg	masc	-	3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	winkend	ADJD	*)	winkend	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	kennst	VVFIN	*	kennen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*)	ja	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sträubt	VVFIN	*	sträuben	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	*	sich	sg	-	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	gern	ADV	*	gern	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	läßt	VVFIN	(CS(S*	lassen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	gern	ADV	*	gern	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Sich	PRF	(NP*	sich	sg	-	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	bitten	ADV	*))	bitten	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	ist	VAFIN	(S*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	wohl	ADV	(AP*	wohl	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	gar	ADV	*	gar	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	ein	ART	(AVP*	ein	*	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	wenig	ADV	*)	wenig	*	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	neidisch	ADJD	*))))	neidisch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auf	APPR	(VROOT(PSEUDO(S*	auf	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PPER	*	dich	sg	*	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auf	APPR	(VROOT(PSEUDO(S*	auf	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	meine	PPOSAT	(NP*	mein	sg	fem	-	(15|(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Schwester	NN	*)	schwester	sg	fem	-	15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	hör	XY	*	hör	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Hafi	NE	*	hafi	sg	-	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Neidisch	ADJD	(VROOT(PSEUDO*	neidisch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sein	VAINF	*	sein	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sein	VAINF	*	sein	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	hätt	VAFIN	*	hätt	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihr	PPOSAT	*	ihr	sg	fem	-	(28|(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Hirn	NN	*	hirn	-	-	-	28)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	lieber	ADV	*	lieber	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Wär	NN	*	sein	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	lieber	ADV	*	lieber	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	gut	ADJD	*	gut	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	17	als	KOKOM	*	als	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	18	sie	PPER	*	sie	pl	masc	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Indes	ADV	(VROOT(PSEUDO(S*	ind	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	(VP*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	immer	ADV	(AP*	immer	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	richtig	ADJD	*)	richtig	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	noch	ADV	*	noch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	bezahlt	VVPP	*))	bezahlen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*	auch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	heut	ADV	*	heut	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	bezahlen	VVINF	*	bezahlen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	KOUS	(VROOT(PSEUDO(S*	lassen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*	ihn	sg	masc	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*)	nur	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	XY	*	geh	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(NP*	nur	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Al-Hafi	NE	*	al-hafi	sg	-	(LOC*)	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*)	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	geh	XY	*	geh	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(VP(VP(NP*	der	sg	neut	-	(19
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Geld	NN	*)	geld	sg	neut	-	19)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Schon	ADV	*	schon	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	holen	VVINF	*)	holen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	lassen	VVINF	*))	lassen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	(VROOT(PSEUDO(S*	nein	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(29|(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	spiele	VVFIN	*	spielen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	länger	ADJD	(AP*	lang	-	-	-	29)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Die	ART	(NP*	der	pl	neut	-	(25
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Mummerei	NN	*))	mummerei	pl	neut	-	25)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	mit	PTKVZ	*)	mit	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	(VP*	es	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Einmal	ADV	*	einmal	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	erfahren	VVINF	*))	erfahren	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	(VROOT(PSEUDO(MPN*	al-hafi	-	-	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dieses	PDS	(NP(AP*	dieser	sg	neut	-	(29)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	dein	PPOSAT	*)	dein	sg	neut	-	(30|(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Versprechen	NN	*))	versprechen	-	-	-	30)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hältst	VVFIN	(VROOT(PSEUDO(S*	hältst	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Mir	NE	(NP*	sich	sg	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Wort	NN	*))	wort	-	-	-	(30)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	konnt	ADJD	*	konnen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	glauben	VVFIN	*	glauben	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	*	daß	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	es	PPER	*	es	sg	neut	-	(25)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Weit	ADJD	*	weit	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	gehen	VVINF	*	gehen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	würde	VAFIN	*	werden	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	erfahr	ADJD	(VROOT(PSEUDO(S*	erfahr	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S(NP(S*	ich	sg	*	-	(31|(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bitte	VVFIN	*	bitten	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PPER	*)	dich	sg	masc	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Al-Hafi	NE	*	al-hafi	sg	*	(LOC*)	3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*)	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	sei	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	bescheiden	ADJD	*)	bescheiden	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	31)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(31)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(AP*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	sonderbar	ADJD	*))	sonderbar	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(CS(S*	was	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	könnte	VMFIN	*	können	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*	sittah	sg	-	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	So	ADV	(PP(AP*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	feierlich	ADJD	(CAP*	feierlich	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	(AP*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	warm	ADJD	*)))	warm	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	bei	APPR	*	bei	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	einem	ART	*	ein	sg	neut	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Fremden	NN	*))	fremde	sg	neut	-	3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Bei	NN	(S*	bei	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	einem	ART	(AP(NP*	ein	sg	neut	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Derwisch	NN	*)	derwisch	sg	neut	-	3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	lieber	ADJD	*)	lieber	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	17	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	18	bei	APPR	(VP(PP*	bei	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	19	mir	PPER	*)	sich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	21	Bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	22	ihrem	PPOSAT	*	ihr	sg	masc	-	(7|(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	23	Bruder	NN	*)	bruder	sg	masc	-	7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	24	sich	PRF	*	sich	sg	-	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	25	verbitten	VVINF	*)	verbitten	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	26	wollen	VMFIN	*)))	wollen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	27	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	*	al-hafi	-	-	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	befehl	ADJD	*	befehl	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Rede	NN	*	rede	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Derwisch	NN	*	derwisch	sg	masc	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	KOUS	(VROOT(PSEUDO(S*	lassen	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	eine	ART	(CNP(NP*	ein	sg	fem	-	(25
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Kleinigkeit	NN	*)	kleinigkeit	sg	fem	-	25)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mein	PPOSAT	(NP*	mein	sg	masc	-	(7|(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Bruder	NN	*))	bruder	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	dir	PPER	(VP*	dir	sg	*	-	7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Nicht	PTKNEG	(AP*	nicht	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	näher	ADJD	*)	nah	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	treten	VVINF	*)	treten	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	sie	PPER	*	sie	sg	fem	-	(25)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	würdig	ADJD	*	würdig	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	ist	VAFIN	*))	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	*	du	sg	*	-	(32|(33|(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	weißt	VVFIN	*	weißen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	verschiednen	VVINF	*	verschiednen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Malen	NE	*	mal	pl	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Dieselbe	PDAT	*	derselbe	sg	fem	-	(23
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Summ	NN	*	summ	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	23)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	im	APPRART	*	in	sg	masc	-	(34
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Schach	NN	*	schach	sg	masc	-	34)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	von	APPR	*	von	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	dir	PPER	*	dir	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	gewonnen	VVPP	*	gewinnen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	weil	KOUS	(S*	weil	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	itzt	VVFIN	(S*	itzen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	(NP*	der	sg	neut	-	(19
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Geld	NN	*)	geld	sg	neut	-	19)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nötig	ADJD	*))	nötig	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	habe	VAFIN	*)	haben	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Weil	NE	(S*	weil	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	itzt	ADJD	(AP*	itzt	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	in	APPR	(PP*	in	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Hafis	NE	(MPN*	hafis	sg	fem	-	(35|(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Kasse	NE	*)))	kasse	sg	fem	-	35)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	doch	ADV	*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	16	das	ART	(NP*	der	sg	neut	-	(36
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Geld	NN	*)	geld	sg	neut	-	36)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Nicht	PTKNEG	(AP(AVP*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	19	eben	ADV	*)	eben	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	20	allzuhäufig	ADJD	*)	allzuhäufig	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	21	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	22	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	23	so	ADV	(S*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	24	sind	VAFIN	*	sein	pl	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	25	Die	ART	(NP*	der	pl	masc	-	(37
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	26	Posten	NN	*	posten	pl	masc	-	37)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	27	stehn	CARD	*)	stehn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	28	geblieben	VVPP	*)))	bleiben	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	29	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	(VROOT(PSEUDO(S*	aber	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sorgt	VVFIN	*	sorgen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	pl	*	-	(37)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	weder	KON	(NP(CNP*	weder	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*	dir	sg	*	-	(7
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	mein	PPOSAT	(NP*	mein	sg	masc	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Bruder	NN	*))	bruder	sg	masc	-	7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Noch	NE	(MPN*	noch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Hafi	NE	*))	hafi	sg	masc	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	noch	ADV	*	noch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	der	ART	(VP(NP*	der	sg	masc	-	(35
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Kasse	NN	*)	kasse	sg	masc	-	35)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	schenken	VVINF	*))))	schenken	-	-	-	33)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wenns	NN	*	wenn	sg	-	-	(25)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*	der	sg	neut	-	(32)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	wäre	VAFIN	*)	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	ART	*	der	sg	neut	-	(32)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(NP*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	mehr	ADV	*	mehr	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	dergleichen	PIS	*)	dergleichen	-	-	-	(33)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Auch	ADV	(S*	auch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(37)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	(VP(PP*	in	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	*	der	sg	fem	-	(35
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Kasse	NN	*	kasse	sg	fem	-	35)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	stehn	CARD	*)	stehn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	geblieben	VVPP	*	bleiben	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	du	PPER	*	du	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	mir	PPER	*	sich	sg	*	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	einmal	ADV	(VP*	einmal	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	ausgeworfen	VVPP	*	auswerfen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*)	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	16	ist	VAFIN	*)))	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Seit	APPR	(VP*	seit	sg	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	18	wenig	PIAT	(NP*	wenig	*	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Monden	NN	*	monden	*	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	20	stehn	CARD	*)	stehn	sg	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	21	geblieben	VVPP	*)	bleiben	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO*	noch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	*)	alle	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(CO(AVP*	noch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wirst	VAFIN	*	wirst	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	(VP*	du	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	reden	VVINF	*))	reden	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Seit	APPR	*	seit	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	aus	APPR	*	aus	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ägypten	NE	*	ägypten	pl	-	-	(17)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wir	PPER	*	wir	pl	*	-	(38)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	*	der	sg	neut	-	(16
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Geld	NN	*	geld	sg	neut	-	16)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	erwarten	VVFIN	*	erwarten	pl	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	sie	PPER	*	sie	sg	fem	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*))	sittah	-	-	-	(15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Saladin	NE	*	saladin	-	-	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wozu	PWAV	(VROOT(PSEUDO(S*	wozu	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*	ihn	sg	masc	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	hören	VVFIN	*)	hören	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(PP*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nichts	NN	*	nichts	*	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Bekommen	NN	*)	bekommen	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gutes	ADJA	(VROOT(PSEUDO(NP*	gut	sg	neut	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mädchen	NN	*)	mädchen	sg	neut	-	15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Auch	ADV	(AVP*	auch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	beiher	ADV	*)	beiher	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	vorgeschossen	VVPP	*)	vorgeschießen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Den	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(39
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ganzen	ADJA	*	ganz	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Hof	NN	*)	hof	sg	masc	-	39)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Erhalten	NN	*	erhalten	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Euern	NN	(S(NP*	euer	sg	masc	-	(40|(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Aufwand	NN	*)	aufwand	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ganz	ADV	(AVP*	ganz	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	allein	ADV	*)	allein	-	-	-	40)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Bestritten	NN	*)	bestritten	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ha	XY	*	ha	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(40)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(40)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	meine	PPOSAT	(NP*	mein	sg	fem	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Schwester	NN	*))	schwester	sg	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(AP*	sie	sg	fem	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	umarmend	ADJD	*)	umarmend	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hatte	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	dies	PDS	(VP*	dieser	sg	neut	-	(40)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	können	VMINF	*)	können	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	mich	PPER	(VP*	mich	sg	*	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	reich	ADJD	*	reich	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Gemacht	VVPP	*))	gemacht	sg	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	du	PPER	*	du	sg	*	-	(7
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	mein	PPOSAT	(NP*	mein	sg	masc	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Bruder	NN	*)))	bruder	sg	masc	-	7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wird	VAFIN	(VROOT(PSEUDO(S*	werden	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	schon	ADV	(AP*	schon	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	(AVP*	auch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	So	ADV	*)	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	bettelarm	ADJD	*)	bettelarm	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	sie	PPER	*	sie	pl	*	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	(VP*	wieder	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	machen	VVINF	*	machen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	selber	ADV	*))	selber	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	ist	VAFIN	*)	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	arm	VVFIN	*)	arm	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(7
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Bruder	NN	*)	bruder	sg	masc	-	7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	arm	ADJD	*)	arm	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hab	VAFIN	*	hab	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mehr	ADV	*	mehr	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	weniger	ADV	*	weniger	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	gehabt	VAPP	*	haben	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ein	ART	(NP*	ein	sg	masc	-	(41
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Kleid	NN	*)	kleid	sg	masc	-	41)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ein	ART	(CNP(NP*	ein	sg	masc	-	(42
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Schwert	NN	*)	schwert	sg	masc	-	42)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ein	ART	(NP*	ein	sg	masc	-	(43
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Pferd	NN	*)	pferd	sg	masc	-	43)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	–	NN	*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Einen	ART	(NP*	ein	sg	masc	-	(44
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Gott	NN	*))	gott	sg	masc	-	44)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	brauch	ADV	*	brauch	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mehr	ADV	*	mehr	*	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	kanns	NE	*	kanns	pl	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	an	APPR	(AVP*	an	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	*)	der	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	fehlen	VVFIN	*)	fehlen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Al-Hafi	NE	*	al-hafi	-	-	(LOC*)	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	könnt	VVFIN	*	können	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	mit	APPR	*	mit	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	dir	PPER	*	dir	sg	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	schelten	VVFIN	*	scheln	pl	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Schilt	NE	(VROOT(PSEUDO(NP*	schilt	sg	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	mein	PPOSAT	(NP*	mein	sg	masc	-	(7|(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Bruder	NN	*)))	bruder	sg	masc	-	7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	unserm	PPOSAT	(NP*	unser	sg	-	-	(45|(46)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vater	NN	*)	vater	sg	masc	-	45)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Auch	ADV	*	auch	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	seine	PPOSAT	(VP(NP*	sein	pl	fem	-	(47|(45)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Sorgen	NN	*	sorge	pl	fem	-	47)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*)	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	erleichtern	VVINF	*)	erleichtern	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	könnte	VMFIN	*)	können	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	schlägst	VVFIN	*	schlägen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	meine	PPOSAT	(NP*	mein	sg	fem	-	(48|(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Freudigkeit	NN	*)	freudigkeit	sg	fem	-	48)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	einmal	ADV	*)	einmal	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nieder	PTKVZ	*)	nieder	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mir	PPER	(NP*	sich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	für	APPR	(S(PP*	für	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	*)	mich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Fehlt	VVFIN	*	fehlt	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	(S*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	nichts	PIS	(VP*	nichts	*	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	fehlen	VVINF	*))))	fehlen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	(VROOT(PSEUDO(CS(S*	aber	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihm	PPER	*	ihm	sg	masc	-	(45)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihm	PPER	*	ihm	sg	*	-	(45)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	fehlet	VVFIN	*)	fehlet	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	in	APPR	(S(PP*	in	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ihm	PPER	*)	ihm	sg	masc	-	(45)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	uns	PPER	(NP*	uns	pl	*	-	(49)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	allen	PIS	*)))	aller	pl	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sagt	VVFIN	*	sagen	pl	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	machen	VVINF	*	machen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Aus	APPR	*	aus	-	-	-	(50
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ägypten	NE	*	ägypten	sg	neut	-	(17)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	kommt	VVFIN	(S*	kommen	sg	-	-	50)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	(AVP*	noch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	lange	ADV	*)	lange	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Woran	PWAV	(VROOT(PSEUDO(S(S*	woran	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(50)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	liegt	VVFIN	*)	liegen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Weiß	NN	(S*	weiß	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Gott	NN	*))	gott	sg	masc	-	(44)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	da	ADV	(NP*	da	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	alles	PIS	*)	alle	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ruhig	ADJD	*)	ruhig	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Abbrechen	NN	(NP*	abbrechen	-	-	-	(51
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	einziehn	VVFIN	(S*	einziehn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	sparen	VVINF	*	sparen	-	-	-	51)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	will	VMFIN	(S*	wollen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	gern	ADV	*	gern	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Mir	PPER	(VP(VP*	sich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	gern	ADV	*	gern	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	gefallen	VVINF	*)	gefallen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	lassen	VVINF	*))))	lassen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	16	wenn	KOUS	(CS(S*	wenn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	17	es	PPER	*	es	sg	neut	-	(51)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	18	mich	PPER	*	mich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	20	Bloß	NN	*	bloß	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	21	mich	PPER	*	mich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	22	betrifft	VVFIN	*	betreffen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	23	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	24	bloß	ADV	(NP*	bloß	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	25	mich	PPER	*))	mich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	27	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	28	niemand	PIS	(S(NP*	niemand	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	29	sonst	ADV	*)	sonst	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	30	Darunter	PROAV	*	darunter	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	31	leidet	VVFIN	*))	leiden	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	32	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	(VP*	der	sg	neut	-	(51)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	machen	VVINF	*))	machen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(S(NP*	ein	sg	masc	-	(43
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Pferd	NN	*	pferd	sg	masc	-	43)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ein	ART	(NP*	ein	sg	masc	-	(41
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Kleid	NN	*	kleid	sg	masc	-	41)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ein	ART	(NP*	ein	sg	masc	-	(42
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Schwerd	NN	*)))	schwerd	sg	masc	-	42)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	ich	PPER	(VP*	ich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	doch	ADV	*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	haben	VAINF	*))	haben	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	meinem	PPOSAT	(NP*	mein	sg	masc	-	(44|(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Gott	NN	*)	gott	sg	masc	-	44)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	(VP(NP*	auch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	abzudingen	VVIZU	*))	audingen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihm	PPER	(VROOT(PSEUDO(S*	ihm	sg	*	-	(44)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	gnügt	VVFIN	*	gnügen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	schon	ADV	(AVP*	schon	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	wenigem	PIS	*)	wenig	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	genug	ADV	*)	genug	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	meinem	PPOSAT	*	mein	sg	masc	-	(52|(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Herzen	NN	*))	herz	sg	masc	-	52)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Auf	APPR	*	auf	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	*	der	sg	masc	-	(53
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Überschuß	NN	*	überschuß	sg	masc	-	53)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Von	APPR	*	von	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	deiner	PPOSAT	*	dein	sg	fem	-	(35|(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Kasse	NN	*	kasse	sg	fem	-	35)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Hafi	NE	*	hafi	sg	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	hatt	VAFIN	*	hatt	sg	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	sehr	ADV	*	sehr	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Gerechnet	ADJD	*	gerechnet	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Überschuß	NN	(VROOT(PSEUDO*	überschuß	sg	masc	-	(53)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sagt	NN	*	sagt	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	selber	ADV	*	selber	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ob	KOUS	*	ob	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	pl	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	mich	PRF	*	mich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	hättet	ADJD	*	hätten	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	spießen	VVINF	*	spießen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	wenigstens	ADV	*	wenigstens	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Mich	PPER	*	mich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	drosseln	VVINF	*	drosseln	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	lassen	VVINF	*	lassen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	16	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	17	auf	APPR	*	auf	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Überschuß	NN	*	überschuß	sg	masc	-	(53)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	20	von	APPR	*	von	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	21	Euch	PPER	*	euch	pl	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	22	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	23	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	24	ergriffen	VVPP	*	ergreifen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	25	worden	VAPP	*	werden	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Unterschleif	NN	*))	unterschleif	-	-	-	(54)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	*	der	sg	neut	-	(54)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wagen	VVINF	*	wagen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	machen	VVFIN	*	machen	pl	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	wir	PPER	*	wir	pl	*	-	(38)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	(AVP*	denn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	aber	ADV	*))	aber	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Konntest	NN	*	konntest	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vor	APPR	*	vor	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	erst	ADV	(AVP*	erst	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	niemand	PIS	*))	niemand	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	andern	VVINF	(S*	anderer	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	borgen	VVFIN	*	borgen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	als	KOKOM	(PP*	als	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Bei	APPR	*	bei	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Sittah	NE	*))	sittah	sg	-	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Würd	VAFIN	*	würd	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	dieses	PDAT	*	dieser	sg	neut	-	(55
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Vorrecht	NN	*	vorrecht	sg	neut	-	55)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Bruder	NN	*	bruder	sg	masc	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Mir	NE	*	sich	sg	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	haben	VAFIN	*	haben	pl	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	nehmen	VVINF	*	nehmen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	lassen	VVINF	*	lassen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mir	PPER	(VROOT(PSEUDO(NP*	sich	sg	*	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*)	ihm	sg	masc	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*)))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	*	auch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	noch	ADV	*	noch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	besteh	VVFIN	*	besteh	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	drauf	PTKVZ	*	drauf	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(S*	noch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Dem	ART	(AP(NP*	der	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Trocknen	NN	*)	trocknen	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	völlig	ADJD	*))	völlig	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(CO(AVP(AVP*	nur	-	-	-	(56
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	völlig	ADJD	*)	völlig	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	56)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(56)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	fehlte	VVFIN	*	fehlen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	*)	noch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	XY	*	geh	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	gleich	ADV	(NP*	gleich	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mach	APPR	(NP(PP*	machen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Anstalt	NN	*)	anstalt	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Hafi	NE	*))	hafi	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nimm	VVIMP	*	nimm	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	auf	PTKVZ	*	auf	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	bei	APPR	*	bei	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wem	PWS	*	wem	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	kannst	VMFIN	*	können	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wie	PWAV	*	wie	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	kannst	VMFIN	*)	können	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geh	XY	(VROOT(PSEUDO*	geh	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	borg	VVFIN	(S*	borg	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	versprich	VVFIN	*)	versprich	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Hafi	NE	(NP*	hafi	sg	masc	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	borge	VVFIN	(S*	borgen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	denen	PDS	*	der	pl	fem	-	(57
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	die	PRELS	(S*	der	pl	fem	-	(57)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	reich	ADJD	(VP*	reich	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	gemacht	VVPP	*)))))	machen	-	-	-	57)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	borgen	VVFIN	*	borgen	pl	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Von	APPR	*	von	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	diesen	PDS	*	dieser	pl	*	-	(57)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	möchte	VMFIN	*	möchten	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	wiederfodern	VVINF	*	wiederfodern	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	heißen	VVINF	*	heißen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geh	NN	(VROOT(PSEUDO(S(NP*	geh	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	*	der	pl	fem	-	(58
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Geizigsten	NN	*))	geizigst	pl	fem	-	58)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	(S*	der	pl	fem	-	(58)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	werden	VAFIN	*	werden	pl	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Am	NN	*	an	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	liebsten	ADJD	(VP*	lieb	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	leihen	VVINF	*)))	leihen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	pl	*	-	(58)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wissen	VVFIN	*	wissen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Wie	PWAV	(S(AP*	wie	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	gut	ADJD	*)	gut	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ihr	PPOSAT	(NP*	ihr	sg	neut	-	(58)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Geld	NN	*)	geld	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	in	APPR	(PP*	in	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	meinen	PPOSAT	*	mein	pl	neut	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Händen	NN	*)	hand	pl	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	wuchert	VVFIN	*))	wuchern	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	kenne	VVFIN	*	kennen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	deren	PDS	*	der	pl	masc	-	(58)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	keine	PIAT	*	kein	sg	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Eben	ADV	(VROOT(PSEUDO(S*	eben	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	fällt	VVFIN	*	fallen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mir	PPER	*	sich	sg	*	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ein	PTKVZ	*	ein	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	gehört	VVPP	(VP*	gehören	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	haben	VAINF	*)	haben	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Hafi	NN	(NP*	hafi	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Dein	NE	(VP(NP*	dein	sg	masc	-	(1|(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Freund	NN	*)	freund	sg	masc	-	1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	zurückgekommen	VVPP	*)))))	zurückkommen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*))	al-hafi	-	-	-	(3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	betroffen	VVPP	*	betreffen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Freund	NN	(VROOT(PSEUDO*	freund	-	-	-	(59)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(59|(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Freund	NN	*)	freund	sg	masc	-	59)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	*	der	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dein	PPOSAT	(VROOT(PSEUDO(NP*	dein	sg	masc	-	(1|(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hochgepriesner	ADJA	*	hochgepriesn	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Jude	NN	*)	jude	sg	masc	-	1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gepriesner	ADJA	(VROOT(PSEUDO(NP*	gepriesner	-	-	-	(60
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Jude	NN	*)	jude	pl	-	-	60)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	hoch	ADJD	(VROOT(PSEUDO(PP*	hoch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	*	von	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*)	sich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dem	ART	*	der	sg	neut	-	(1
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*	gott	sg	-	(PER*)	1)|(44)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	–	$.	*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	–	CARD	*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Mich	PPER	*	mich	sg	*	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	denkt	VVFIN	*	denken	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	des	ART	*	der	sg	masc	-	(61
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Ausdrucks	NN	*	ausdruck	sg	masc	-	61)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	noch	ADV	*	noch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	recht	ADV	*	recht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	des	ART	*	der	-	-	-	(61)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	einst	ADV	*	einst	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Du	PPER	*	du	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	16	selber	ADV	*	selber	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	17	dich	PRF	*	dich	sg	-	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	18	von	APPR	*	von	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	19	ihm	PPER	*	ihm	sg	masc	-	(61)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	20	bedientest	VVFIN	*	bedientest	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	22	–	XY	*	–	-	-	-	(61
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	23	dem	ART	*	der	sg	neut	-	61)|(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	24	Sein	PPOSAT	*	sein	sg	masc	-	(62
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	25	Gott	NN	*	gott	sg	masc	-	62)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	26	von	APPR	*	von	-	-	-	(63
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	27	allen	PIAT	*	aller	pl	masc	-	(88
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	28	Gütern	NN	*	gut	pl	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	29	dieser	PDAT	*	dieser	sg	masc	-	(66
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	30	Welt	NN	*	welt	sg	fem	-	63)|88)|66)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	31	Das	ART	*	der	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	32	kleinst	ADJD	*	kleinst	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	33	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	34	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	35	größte	VVFIN	*	groß	sg	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	36	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	37	in	APPR	*	in	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	38	vollem	ADJA	*	voll	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	39	Maß	NN	*	maß	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	40	Erteilet	VVPP	*	erteilet	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	41	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	42	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sagt	VVFIN	*	sagen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	meint	VVFIN	*	meinen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	*	denn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	damit	PROAV	*	damit	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(64
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	kleinste	ADJA	*)	klein	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Reichtum	NN	*)	reichtum	sg	neut	-	64)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(CS*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(63
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	größte	VVFIN	*)	groß	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Weisheit	NN	*)	weisheit	sg	fem	-	63)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	von	APPR	(VROOT(PSEUDO(PP*	von	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	einem	ART	*	ein	sg	masc	-	(60
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Juden	NN	*)	Jude	sg	masc	-	60)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	*	von	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	einem	ART	*	ein	sg	masc	-	(60
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Juden	NN	*	Jude	sg	masc	-	60)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	hätt	VAFIN	*	hätt	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	das	PDS	*	der	sg	neut	-	(61)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	gesagt	VVPP	*	sagen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(61)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hättest	VVFIN	*	hättest	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(VP(PP*	von	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	deinem	PPOSAT	*	dein	sg	masc	-	(1|(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Nathan	NN	*)	nathan	sg	masc	-	1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Gesagt	VVPP	*))	sagen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	von	APPR	(VROOT(PSEUDO(CO(AVP*	von	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dem	ART	*))	der	sg	neut	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	vom	APPRART	(VROOT(PSEUDO(PP*	von	sg	masc	-	(1
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NN	*)	nathan	sg	masc	-	1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Fiel	NN	*	fiel	pl	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mir	PPER	*	sich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(S*	der	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	gar	ADV	(AVP*	gar	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	bei	PTKVZ	*)	bei	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wahrhaftig	NN	*	wahrhaftig	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(VP(NP*	der	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	NN	*)	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	endlich	ADV	*	endlich	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	heim	ADJD	*	heim	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	gekommen	VVPP	*)	kommen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	*	ei	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	mags	ADV	*	mags	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(AP*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	gar	ADV	*	gar	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	schlecht	ADJD	*	schlecht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ihm	PPER	*))	ihm	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	stehn	VVFIN	*)	stehn	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ganz	NN	*	ganz	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	recht	ADV	*	recht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	*	der	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nannt	FM	*	nennen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	einmal	ADV	*	einmal	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	das	ART	*	der	sg	neut	-	(67
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Volk	NN	*	volk	sg	neut	-	67)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	*	der	sg	masc	-	(68
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Weisen	NN	*	weise	sg	masc	-	68)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Den	ART	(VROOT(PSEUDO(NP*	der	pl	masc	-	(69
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Reichen	NN	*	reiche	pl	masc	-	69)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*)	auch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Den	ART	(VROOT(PSEUDO(S(NP*	der	pl	masc	-	(69
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Reichen	NN	*)	reiche	pl	masc	-	69)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nennt	VVFIN	*	nennen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(67)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihn	PPER	(NP*	ihn	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Itzt	NN	*)	itzt	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	mehr	PIS	(AP*	mehr	*	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	als	KOKOM	(AVP*	als	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	je	ADV	*)))	je	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(VP(NP*	der	sg	fem	-	(67
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ganze	ADJA	*	ganz	sg	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Stadt	NN	*)	stadt	sg	fem	-	67)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	erschallt	VVPP	*	erschallen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Was	PWS	(S*	was	sg	neut	-	(70
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	für	APPR	(PP*	für	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Kostbarkeiten	NN	*)	kostbarkeit	pl	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	für	APPR	(PP*	für	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Schätze	NN	*)	schatz	pl	masc	-	70)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Er	PPER	(S(VP*	er	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	mitgebracht	VVPP	*)))))	mitbringen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(VP*	nun	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ists	FM	(NP*	ists	-	-	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(NP*	der	sg	masc	-	(69
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Reiche	NN	*)	reiche	sg	masc	-	69)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	So	ADV	(S*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	wirds	ADV	*	wirdsen	-	-	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	auch	ADV	*	auch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	wohl	ADV	*))	wohl	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	der	ART	(NP*	der	sg	masc	-	(68
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Weise	NN	*)	weise	sg	masc	-	68)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	sein	VAINF	*)	sein	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	meinst	ADV	*	meinst	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Hafi	NE	*	hafi	-	-	-	3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	diesen	PDS	*	dieser	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	angingst	VVFIN	*))	angingen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	bei	APPR	*	bei	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	(S*	wohl	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	borgen	VVINF	*)	borgen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Da	ADV	*	da	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	pl	*	-	(15)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Erborgen	NN	*	erborgen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Seine	PPOSAT	(S(NP*	sein	sg	fem	-	(71|(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Weisheit	NN	*)	weisheit	sg	fem	-	71)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	eben	ADV	*	eben	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	niemand	PIS	*))	niemand	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	borgt	VVFIN	*	borgen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hast	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mir	PPER	*	sich	sg	*	-	(6)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	sonst	ADV	*	sonst	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ganz	ADV	(NP*	ganz	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	*	ein	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ander	ADJA	*	ander	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Bild	NN	*)	bild	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	ihm	PPER	*)	ihm	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Gemacht	NN	*)	gemacht	sg	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zur	APPRART	(VROOT(PSEUDO(S(PP*	zu	sg	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Not	NN	*)	not	sg	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	(VP*	euch	pl	*	-	(46)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Waren	NN	*	sein	pl	fem	-	(72)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	borgen	VVINF	*))	borgen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geld	NN	(VROOT(PSEUDO(NP*	geld	sg	neut	-	(73)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	aber	ADV	*	aber	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Geld	NN	*)	geld	sg	neut	-	(73)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geld	NN	(VROOT(PSEUDO(NP*	geld	sg	neut	-	(73)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nimmermehr	ADV	*)	nimmermehr	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	*	es	sg	neut	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ein	ART	*	ein	sg	masc	-	(74
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Jude	NN	*	jude	sg	masc	-	74)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	übrigens	ADV	*	übrigens	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	wie	PWAV	*	wie	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	s	PPER	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Viel	NN	*	viel	*	*	-	(60
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Juden	NN	*	Jude	pl	masc	-	60)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	gibt	VVFIN	*	geben	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Verstand	NN	*	verstand	sg	masc	-	(75)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	(S*	er	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Zu	NN	(VP*	zu	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	leben	VVINF	*)))	leben	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	spielt	VVFIN	(S*	spielen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	gut	ADJD	*))	gut	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Schach	NE	*	schach	-	-	-	(34)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	zeichnet	VVFIN	*	zeichnen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Im	APPRART	(PP*	in	sg	neut	-	(76
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Schlechten	NN	*)	schlecht	sg	neut	-	76)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	sich	PRF	*	sich	sg	-	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	minder	ADJD	*)	minder	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	als	KOKOM	(PP*	als	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	im	APPRART	*	in	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Guten	NN	*)	gut	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Von	APPR	(PP*	von	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	allen	PIAT	*	aller	pl	masc	-	(60
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	andern	ADJA	*	anderer	pl	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Juden	NN	*)	Jude	pl	masc	-	60)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	16	aus	PTKVZ	*)	aus	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Auf	APPR	*	auf	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	*	der	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Auf	APPR	(S(PP*	auf	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	den	PRELS	*)	der	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	rechnet	VVFIN	*	rechnen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Den	ART	(S(NP*	der	pl	masc	-	(77
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Armen	NN	*)	arme	pl	masc	-	77)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	gibt	VVFIN	*)	geben	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Er	PPER	(S*	er	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	zwar	ADV	*	zwar	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	(S*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	gibt	VVFIN	*	geben	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Trotz	APPR	(PP*	trotz	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Saladin	NN	*)))	saladin	-	-	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S(S*	wenn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	schon	ADV	*	schon	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ganz	ADV	(AVP*	ganz	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*)	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	viel	PIS	*	viel	*	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	doch	ADV	*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	ganz	ADV	*	ganz	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	(AVP*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	gern	ADV	*)))	gern	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Doch	KON	(S*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	ganz	ADV	(AVP*	ganz	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	so	ADV	*)	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	sonder	KON	*	sonder	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Ansehn	NN	*))	ansehn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Jud	XY	*	jud	-	-	-	(60
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	60)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Christ	NE	*	christ	sg	masc	-	(78)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Und	KON	*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Muselmann	NE	*	muselmann	sg	masc	-	(79)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Parsi	NE	*	parsi	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	alles	PIS	*	alle	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	eins	PIS	*	eins	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	(NP(AP*	so	-	-	-	(80
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	*)	ein	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Mann	NN	*))	mann	sg	masc	-	80)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(81)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Daß	KOUS	(S*	daß	sg	-	-	(81
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	diesem	PDAT	*	dieser	sg	masc	-	(1
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Manne	NN	*)	manne	sg	masc	-	1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	nie	ADV	*	nie	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	gehört	VVFIN	*))	gehören	sg	-	-	81)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	PDS	(VROOT(PSEUDO(S*	der	sg	masc	-	(80)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sollte	VMFIN	*	sollen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Saladin	NE	*	saladin	sg	*	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	borgen	VVINF	*)	borgen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Dem	ART	*	der	sg	neut	-	(7
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Saladin	NN	*	saladin	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	der	PRELS	*	der	sg	masc	-	(7)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	für	APPR	*	für	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	andre	PIS	*	andre	pl	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	braucht	VVFIN	*	brauchen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Nicht	PTKNEG	*	nicht	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	sich	PRF	*	sich	sg	-	-	7)|(7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO(S*	da	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	seht	VVFIN	*	sehen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	gleich	ADV	(NP*	gleich	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	*	der	sg	masc	-	(60
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Juden	NN	*)	Jude	sg	masc	(MISC*)	60)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Den	ART	(NP*	den	sg	masc	-	(60
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	ganz	ADV	(AP*	ganz	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	gemeinen	ADJA	*)	gemein	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Juden	NN	*))	Jude	-	-	-	60)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Glaubt	VVFIN	(S*	glauben	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	mirs	PPER	*	mir	-	-	-	(82)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*)	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	(S*	er	sg	masc	-	(82|(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	aufs	APPRART	(PP*	auf	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Geben	NN	*)	geben	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	(NP(AP*	euch	-	-	-	(46)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	eifersüchtig	ADJD	*)	eifersüchtig	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	So	ADV	(S(VP(AP*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	neidisch	ADJD	*)	neidisch	-	-	-	82)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Der	ART	(NP*	der	sg	masc	-	(66
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Welt	NN	*)	welt	sg	masc	-	66)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	gesagt	VVPP	*)	sagen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	wird	VAFIN	*))	werden	sg	-	-	83)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Allein	ADV	*)	allein	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S(AVP*	nur	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	darum	PROAV	*)	darum	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	eben	ADV	*	eben	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	leiht	VVFIN	*	leihen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	keinem	PIS	(NP*	kein	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Damit	KOUS	(S*	damit	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	(VP*	er	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	stets	ADV	*	stets	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	geben	VVINF	*))	geben	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	habe	VAFIN	*)))	haben	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Weil	KOUS	*	weil	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	*	der	sg	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mild	NN	*	mild	sg	fem	-	(84
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	84)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	im	APPRART	*	in	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Gesetz	NN	*	gesetz	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	geboten	VVPP	*	bieten	pl	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	die	ART	*	der	sg	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Gefälligkeit	NN	*	gefälligkeit	sg	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	aber	ADV	*	aber	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	geboten	VVPP	*	bieten	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	16	macht	VVFIN	*	machen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Die	ART	*	der	sg	fem	-	(85
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Mild	NN	*	mild	sg	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	19	'	$(	*	--	-	-	-	85)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	20	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	21	zu	APPR	*	zu	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	22	dem	ART	*	der	sg	masc	-	(86
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	23	ungefälligsten	ADJA	*	ungefällig	sg	masc	-	86)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	24	Gesellen	NN	*	geselle	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	25	auf	APPR	*	auf	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	26	der	ART	*	der	sg	fem	-	(66
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	27	Welt	NN	*	welt	sg	fem	-	66)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	28	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zwar	ADV	(VROOT(PSEUDO(CS(S*	zwar	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	seit	APPR	(VP(PP*	seit	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Geraumer	NN	*	geraumer	*	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Zeit	NN	*)	zeit	sg	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	(NP*	ein	*	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	wenig	PIS	*)	wenig	*	*	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	übern	VVINF	*)	übern	pl	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Fuß	NN	(VP(NP*	fuß	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Mit	APPR	(PP*	mit	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ihm	PPER	*))	ihm	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	gespannt	VVPP	*))	gespannt	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	doch	KON	*	doch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	denkt	VVFIN	(S*	denken	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	16	nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	17	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	19	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	20	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	21	Ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	22	darum	PROAV	*	darum	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	23	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	24	Gerechtigkeit	NN	*	gerechtigkeit	sg	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	25	erzeige	VVFIN	*)))	erzeigen	sg	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(1)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(AP(PP*	zu	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	allem	PIS	*)	alle	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	gut	ADJD	*))	gut	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	bloß	ADV	(S*	bloß	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	dazu	PROAV	*	dazu	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Bloß	ADV	(S*	bloß	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	dazu	PROAV	*	dazu	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	wahrlich	ADV	*	wahrlich	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*)))	nicht	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*	auch	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	gleich	ADV	*	gleich	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	gehn	VVPP	*	gehn	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	an	APPR	*	an	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	andre	ADJA	*	andren	pl	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Türen	NN	*	tür	pl	fem	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	10	klopfen	VVINF	*	klopfen	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Da	ADV	*	da	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Besinn	NN	*	besinn	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	17	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	18	mich	PRF	*	mich	sg	-	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	19	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	20	eben	ADV	*	eben	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	21	eines	ART	*	ein	sg	masc	-	(87
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	22	Mohren	NN	*	mohr	sg	masc	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	87)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	24	Der	PRELS	*	der	sg	masc	-	(87)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	25	reich	ADJD	*	reich	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	26	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	27	geizig	ADJD	*	geizig	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	28	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	29	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	geh	XY	*	geh	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	6	geh	XY	*	geh	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(15
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	15)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	eilst	VVFIN	*	eilen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	(NP*	du	sg	*	-	(3
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Hafi	NE	*))	hafi	*	*	-	3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	KOUS	*	lassen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*	ihn	sg	masc	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	0	laß	VVFIN	(VROOT(PSEUDO(S*	lassen	sg	-	-	-
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*)	ihn	sg	masc	-	(3)
Nathan_Act2_Scene2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

#end document
