#begin document (Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll); part 000
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Szene	NN	*)	szene	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	des	ART	(NP*	der	sg	neut	-	(15|(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Sultans	NE	(MPN*	sultan	sg	neut	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Palast	NE	*)))	palast	sg	*	-	15)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO(S(CNP*	saladin	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*)	sittah	sg	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	spielen	VVFIN	*	spielen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Schach	NE	*)	schach	sg	masc	-	(17)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	(VROOT(PSEUDO(S*	wo	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	(NP*	du	sg	*	-	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Saladin	NN	*))	saladin	*	*	(LOC*)	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	spielst	VVFIN	*	spielen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	(NP*	du	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	heut	ADV	*))	heuen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(AP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	gut	ADJD	*)	gut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dächte	VVFIN	*	dächen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*)	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Für	APPR	(VROOT(PSEUDO(S(PP*	für	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*)	mich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	kaum	ADV	*))	kaum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nimm	NE	(VROOT(PSEUDO(S*	nimm	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	diesen	PDAT	(NP*	dieser	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Zug	NN	*)	zug	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	zurück	PTKVZ	*)	zurück	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Warum	PWAV	(VROOT(PSEUDO*	warum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(18
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Springer	NN	*)	springer	sg	masc	-	18)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	unbedeckt	ADJD	*)	unbedeckt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wahr	ADJD	*)	wahr	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*)	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	zieh	VVIMP	*	zieh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	*	der	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Gabel	NN	*	gabel	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wieder	ADV	(VROOT(PSEUDO(S(ISU*	wieder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wahr	ADJD	*))	wahr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(CNP*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Schach	NE	*	schach	-	-	-	(19
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	dann	ADV	*)	dann	-	-	-	19)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hilft	VVFIN	*	helfen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	dir	PPER	*	dir	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*	der	sg	neut	-	(19)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CS(S*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	setze	VVFIN	*	setzen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	vor	PTKVZ	*)	vor	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	du	PPER	(S*	du	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Bist	NN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	wie	KOKOM	(S*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	du	PPER	*	du	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	warst	VVFIN	*)))	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Aus	APPR	*	aus	-	-	-	(20
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dieser	PDAT	*	dieser	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Klemme	NN	*	klemme	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	seh	XY	*	seh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	wohl	ADV	*	wohl	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	ohne	APPR	*	ohne	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Buße	NN	*	buße	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	kommen	VVINF	*	kommen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	20)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mags	NE	(VROOT(PSEUDO*	mag	-	-	-	(20)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	nimm	ADJD	(VROOT(PSEUDO(S*	nimm	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	den	ART	(NP*	der	sg	masc	-	(18
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Springer	NE	*)	springer	sg	masc	(PER*)	18)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*)	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(18)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	geh	XY	*	geh	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	vorbei	ADV	*	vorbei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	schenkst	VVFIN	*	schenken	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dir	PPER	(VROOT(PSEUDO(S*	dir	sg	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	liegt	VVFIN	*	liegen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	An	APPR	(PP*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	diesem	PDAT	*	dieser	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Platze	NN	*)	platz	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	ADV	*	mehr	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	als	KOKOM	(PP*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	an	APPR	*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	dem	ART	*	der	sg	neut	-	(18
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Springer	NE	*))	springer	sg	neut	(LOC*)	18)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	VMFIN	*	können	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sein	VAINF	*	sein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mach	APPR	(VROOT(PSEUDO(S(PP*	mach	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	deine	PPOSAT	*	dein	sg	fem	-	(21|(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Rechnung	NN	*)	rechnung	sg	fem	-	21)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	(AVP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ohne	APPR	(PP*	ohne	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Den	ART	*	der	sg	masc	-	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Wirt	NN	*))	wirt	sg	masc	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sieh	VVIMP	*	sieh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S(NP(AP*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	gilts	ADV	*	gilt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	(S*	der	sg	neut	-	(22)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	warst	VVFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	du	PPER	*	du	sg	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Vermuten	NN	*))	vermuten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Freilich	ADV	(VROOT(PSEUDO(CO(AVP*	freilich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	konnt	ADJD	*	konnen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Vermuten	NN	*	vermuten	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	du	PPER	*	du	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	deiner	PPOSAT	*	dein	sg	fem	-	(23|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Königin	NN	*	königin	sg	fem	-	23)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	So	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	müde	ADJD	*	müde	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	wärst	VVFIN	*	wärst	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(NP*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	meiner	PPOSAT	(NP*	mein	sg	-	-	(23|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Königin	NN	*))	königin	*	*	-	23)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	seh	VVFIN	*	seh	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*	schon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	heut	ADV	*	heut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	meine	PPOSAT	*	mein	sg	fem	-	(24|(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	tausend	CARD	*	tausend	-	-	-	24)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Dinar	NN	*	dinar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	kein	PIAT	*	kein	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Naserinchen	NN	*	naserinchen	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	mehr	ADV	*	mehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	gewinnen	VVINF	*	gewinnen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Frag	NE	(VROOT(PSEUDO(NP*	frag	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	noch	ADV	*)	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Weil	KOUS	(S*	weil	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Fleiß	NN	*)	fleiß	sg	masc	-	(25)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	aller	PIAT	*	aller	sg	fem	-	(25)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Gewalt	NN	*)	gewalt	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	verlieren	VVINF	*)	verlieren	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	willst	VMFIN	*)	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	dabei	PROAV	*	dabei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	find	VAFIN	*	find	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	meine	PPOSAT	*	mein	sg	-	-	(21|(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Rechnung	NN	*	rechnung	sg	fem	-	21)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	außer	APPR	*	außer	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ein	ART	*	ein	sg	neut	-	(17
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	solches	PIAT	*	solcher	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Spiel	NN	*	spiel	sg	neut	-	17)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	das	ART	*	der	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	unterhaltendste	ADJA	*	unterhaltend	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Nicht	NN	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	gewann	VVFIN	*	gewinnen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	immer	ADV	*	immer	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	am	PTKA	*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	meisten	PIS	*	meister	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Mit	APPR	*	mit	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	dir	PPER	*	dir	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	verlor	VVFIN	*	verlieren	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(CS(S*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hast	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Den	ART	(NP*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Satz	NN	*)	satz	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	mich	PPER	*	mich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	des	ART	(NP*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	verlornen	ADJA	*	verlorn	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Spieles	NN	*	spiele	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	wegen	APPR	(PP*	wegen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Zu	NN	*))	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	trösten	VVFIN	*)	trösen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	doppelt	VVFIN	(S*	doppelt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	hernach	ADJD	*	hernach	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	geschenkt	VVPP	*)))	schenken	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	*	ei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sieh	XY	*	sieh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	so	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hättest	VVFIN	*	hättest	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*	du	sg	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Verlorst	NN	(NP*	verlorst	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Fleiß	NN	*)	fleiß	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	verloren	VVPP	*))	verlieren	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Schwesterchen	NN	*))	schwesterchen	pl	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zum	APPRART	(VROOT(PSEUDO(S(PP*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wenigsten	PIS	*)	wenigster	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	gar	ADV	(VP(AP*	gar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*)	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*)	sein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	deine	PPOSAT	(NP*	dein	sg	fem	-	(287)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Freigebigkeit	NN	*)	freigebigkeit	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	mein	PPOSAT	(NP*	mein	sg	neut	-	(7|(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	liebes	ADJA	*	lieb	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Brüderchen	NN	*)	brüderchen	sg	neut	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Schuld	NN	*	schuld	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	besser	ADJD	(VP(VP*	gut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	spielen	VVINF	*)	spielen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	lernen	VVINF	*))))	lernen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wir	PPER	(VROOT(PSEUDO(S*	wir	pl	*	-	(26)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	kommen	VVFIN	*	kommen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ab	PTKVZ	*	ab	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	vom	APPRART	(PP*	von	sg	neut	-	(17
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Spiele	NN	*))	spiel	sg	neut	-	17)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mach	APPR	(VROOT(PSEUDO(PP*	mach	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ein	ART	*	ein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ende	NN	*)	ende	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*)	es	sg	neut	-	(22)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dann	ADV	(NP*	dann	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Schach	NE	*	schach	sg	neut	-	(27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	doppelt	VVFIN	*	doppelt	-	-	-	(27
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Schach	NE	*)	schach	-	-	-	27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	dieses	PDAT	*	dieser	sg	neut	-	(27
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Abschach	NN	*	abschach	sg	neut	-	27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	hab	VAFIN	*	hab	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Gesehn	NN	*	gesehn	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	das	PRELS	*	der	sg	neut	-	(27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	meine	PPOSAT	*	mein	sg	neut	-	(23|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Königin	NN	*	königin	sg	neut	-	23)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	zugleich	ADV	*	zugleich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Mit	APPR	*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	niederwirft	VVFIN	*	niederwerfen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	War	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dem	PDS	(VP*	der	sg	masc	-	(27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	abzuhelfen	VVIZU	*))	abhelfen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	ADJD	(VROOT(PSEUDO(NP(AP*	lassen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sehn	CARD	*))	sehn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	*	nein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nein	PTKANT	*	nein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nimm	ADJD	*	nimm	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	*	der	sg	fem	-	(23
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Königin	NN	*	königin	sg	fem	-	23)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(AP(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	diesem	PDAT	*	dieser	sg	masc	-	(28
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Steine	NN	*	stein	sg	masc	-	28)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nie	ADV	*)	nie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	recht	ADV	*	recht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	glücklich	ADJD	*))	glücklich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Bloß	ADV	(VROOT(PSEUDO(PP*	bloß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	mit	APPR	*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	dem	ART	*	der	sg	masc	-	(28
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Steine	NN	*)	stein	sg	masc	-	28)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Fort	NN	(VROOT(PSEUDO(NP*	fort	-	-	-	(29
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	damit	PROAV	*)	damit	-	-	-	29)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(29)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	tut	VVFIN	*	tun	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Mir	PPER	*	sich	sg	fem	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	alles	PIS	(VP*	alle	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	wiederum	ADV	*	wiederum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Geschützt	VVPP	*))	geschützt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S(S(AP*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	höflich	ADJD	*)	höflich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	man	PIS	*	man	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Königinnen	NN	*)	königin	pl	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Verfahren	NN	*)	verfahren	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	müsse	VMFIN	*)	müssen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	mein	PPOSAT	(NP*	mein	sg	masc	-	(7|(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Bruder	NN	*)	bruder	sg	masc	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	mich	PPER	(VP*	mich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Zu	NN	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	gelehrt	VVPP	*))	lehren	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	läßt	VVFIN	*	lassen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	(VP*	sie	*	*	-	(23)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	stehen	VVINF	*))	stehen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nimm	ADJD	(VROOT(PSEUDO(S*	nimm	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	oder	KON	*	oder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nimm	VVIMP	(S*	nimm	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	sg	fem	-	(23)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	keine	PIAT	(NP*	kein	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	PIS	*))	mehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wozu	PWAV	(VROOT(PSEUDO(S*	wozu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	pl	*	-	(23)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nehmen	VVFIN	*)	nehmen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Schach	NE	(VROOT(PSEUDO(MPN*	schach	sg	neut	-	(27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Schach	NE	*	schach	-	-	-	(27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(AVP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	weiter	ADV	*)	weiter	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Schach	NE	(VROOT(PSEUDO(MPN*	schach	sg	neut	-	(27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(CNP*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Schach	NE	*)	schach	sg	neut	-	(27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(CNP*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Schach	NE	*)	schach	sg	neut	-	(27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(VP(AP*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	matt	ADJD	*))	matt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(S(AVP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ganz	ADV	*)	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	*	du	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ziehst	VVFIN	*	ziehsen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	den	ART	(NP*	der	sg	masc	-	(18
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Springer	NE	*)	springer	sg	masc	(PER*)	18)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	noch	ADV	*)	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Dazwischen	PROAV	(S*	dazwischen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	oder	KON	(S*	oder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	du	PPER	(VP*	du	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	machen	VVINF	*)	machen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	willst	VMFIN	*))	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gleichviel	NN	(VROOT(PSEUDO*	gleichviel	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ganz	ADV	(VROOT(PSEUDO(S(ISU*	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	recht	ADJD	*))	recht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	(S*	du	sg	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	hast	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	gewonnen	VVPP	*)	gewinnen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Al-Hafi	NE	*	al-hafi	sg	*	(LOC*)	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	zahlt	VVFIN	*)	zahlen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Man	PIS	(S*	man	sg	*	-	(30)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	laß	VVFIN	*	lassen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	(VP*	ihn	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	rufen	VVINF	*))	rufen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	gleich	ADV	(VROOT(PSEUDO(S*)	gleich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	(S*	du	sg	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	hattest	VAFIN	*	hattest	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Sittah	NN	*	sittah	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*))	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	unrecht	ADJD	(S*	unrecht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	War	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	ganz	ADV	*)	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	beim	APPRART	(PP*	bei	-	-	-	(17
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Spiele	NN	*	spiel	pl	neut	-	17)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	;	$.	*)	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	zerstreut	VVPP	*)	zerstreuen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dann	ADV	*	dann	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wer	PWS	*	wer	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	gibt	VVFIN	*	geben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	uns	PPER	*	uns	pl	*	-	(26)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	denn	ADV	(NP*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	*	der	pl	masc	-	(28
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	glatten	ADJA	*	glatt	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Steine	NN	*)	stein	pl	masc	-	28)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Beständig	NN	*)	beständig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	die	ART	(VROOT(PSEUDO(NP*	der	sg	fem	-	(28)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	an	APPR	(VP(PP*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	erinnern	VVINF	*)	erinnern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nichts	PIS	(NP*	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Bezeichnen	NN	*	bezeichnen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hab	XY	*	hab	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Iman	NN	*	iman	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	denn	KON	*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Gespielt	NN	*	gespielt	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Verlust	NN	(VROOT(PSEUDO*	verlust	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Vorwand	NN	*	vorwand	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(CNP(NP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	*	der	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ungeformten	ADJA	*	ungeformt	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Steine	NN	*)	stein	pl	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Sittah	NE	(NP*	sittah	pl	masc	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	sinds	FM	*	sinds	pl	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Die	ART	(S*	der	pl	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	mich	PPER	*	mich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	verlieren	VVINF	*	verlieren	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	machten	VVFIN	*	machen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	deine	PPOSAT	(NP*	dein	sg	fem	-	(31|(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Kunst	NN	*	kunst	sg	fem	-	31)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Dein	NN	(CO*	dein	sg	masc	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	ruhiger	ADJD	*	ruhig	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	schneller	ADJA	(NP*	schnell	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	Blick	NN	*))))	blick	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*)	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*)	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(S(AVP*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*)	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Willst	VVFIN	*	willst	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	*	du	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	(VP(NP*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Stachel	NN	*	stachel	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	des	ART	(NP*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Verlusts	NN	*))	verlust	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	stumpfen	VVINF	*))	stumpfen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Genug	ADV	(VROOT(PSEUDO(S*	genug	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	warst	VVFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	zerstreut	VVPP	*	zerstreuen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	(NP*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	mehr	PIS	*	mehr	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	als	KOKOM	(NP*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*)))	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Als	KOUS	*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hätte	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PPER	(VP*	dich	sg	-	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	zerstreuet	VVPP	*))	zerstreuet	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Deine	PPOSAT	(VROOT(PSEUDO(S(NP*	dein	sg	fem	-	(32|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Zerstreuung	NN	*	zerstreuung	sg	fem	-	32)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wenn	NE	*)	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	werden	VAFIN	*	werden	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	wir	PPER	(VP*	wir	pl	*	-	(26)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	(AP*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	fleißig	ADJD	*)	fleißig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	spielen	VVINF	*))	spielen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	spielen	VVFIN	*	spielen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wir	PPER	*	wir	pl	*	-	(26)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	um	KOUI	(AVP*	um	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*)	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	viel	ADV	*	viel	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	gieriger	ADJD	*)	gierig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	*	ah	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	weil	KOUS	(VROOT(PSEUDO(S(S*	weil	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	es	PPER	*	es	sg	neut	-	(33)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wieder	ADV	(AP*	wieder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	los	ADJD	*)	los	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	geht	VVFIN	*)	gehen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	meinst	ADV	(NP*	meinst	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*))	du	sg	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mags	NE	*	mag	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKVZ	*)	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	zuerst	ADV	*	zuerst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	gezogen	VVPP	*))	ziehen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ich	PPER	(CS(S*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	hätte	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	gern	ADV	*	gern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	(NP*	der	sg	masc	-	(34
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Stillestand	NN	*	stillestand	sg	masc	-	34)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	aufs	APPRART	(PP*	auf	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	neue	ADJA	*	neu	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Verlängert	NN	*)))	verlängern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	hätte	VAFIN	(S*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	meiner	PPOSAT	(NP*	mein	sg	fem	-	(16|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Sittah	NN	*)	sittah	sg	*	-	16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	gern	ADV	*	gern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	Gern	NN	(VP*	gern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	einen	ART	(NP*	ein	sg	masc	-	(35
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	guten	ADJA	*	gut	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	Mann	NN	*)	mann	sg	masc	-	35)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	zugleich	ADV	*	zugleich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	verschafft	VVPP	*)))	verschaffen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(CS(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(35)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Richards	NE	(VP(NP*	richard	sg	*	(PER*)	(36|(37)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Bruder	NN	*)	bruder	sg	masc	-	36)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*))	sein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	er	PPER	(S*	er	sg	masc	-	(36)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Ja	NN	(NP*	ja	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Richards	NE	(MPN*	richard	sg	*	(PER*)	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Bruder	NE	*))))	bruder	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	deinen	PPOSAT	(VP(NP*	dein	sg	masc	-	(37|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Richard	NE	*)	richard	sg	masc	-	37)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	loben	VVINF	*)	loben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	kannst	VMFIN	*)	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	unserm	PPOSAT	*	unser	*	*	-	(38|(26)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Bruder	NN	*	bruder	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Melek	NE	*	melek	*	*	-	38)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Dann	NE	*	dann	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Richards	NE	*	richard	sg	*	-	(39|(37)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Schwester	NN	*	schwester	sg	masc	-	39)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	zu	APPR	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Teile	NN	*	teil	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	worden	VAPP	*	werden	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Ha	NE	*	ha	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	welch	PWAT	*	welcher	*	*	-	(40
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ein	ART	*	ein	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Haus	NN	*	haus	sg	neut	-	40)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	zusammen	PTKVZ	*	zusammen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ha	NE	(VROOT(PSEUDO(NP(MPN*	ha	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	sg	masc	-	(40
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ersten	ADJA	*)	erster	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	40)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Der	ART	(NP*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	besten	ADJA	*	gut	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Häuser	NN	*	haus	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	in	APPR	(PP*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	*	der	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Welt	NN	*)))	welt	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	das	ART	(NP*	der	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	beste	ADJA	*)	gut	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	(AP(S*	du	sg	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	hörst	VVFIN	*	hörst	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	(S*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	mich	PPER	(VP*	mich	sg	-	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	loben	VVINF	*))))	loben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	auch	ADV	*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	faul	ADJD	*))	faul	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dünk	VVFIN	*	dünk	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	-	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	meiner	PPOSAT	*	mein	sg	fem	-	(41|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Freunde	NN	*	freund	sg	fem	-	41)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	wert	ADJD	*	wert	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(40)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	hätte	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Menschen	NN	*	mensch	pl	masc	-	(42)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	geben	VVINF	*	geben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	sollen	VMFIN	*)	sollen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	ART	*	der	sg	neut	-	(40)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hab	XY	*	hab	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	des	ART	*	der	sg	neut	-	(40
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	schönen	ADJA	*	schön	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Traums	NN	*	traum	sg	neut	-	40)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	gleich	ADV	*	gleich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	gelacht	VVPP	*	lachen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(DL(S*	du	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	kennst	VVFIN	*	kennen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	pl	fem	-	(43
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Christen	NN	*)	christ	pl	fem	(MISC*)	43)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	willst	VVFIN	(S*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	sie	PPER	*	sie	sg	fem	-	(43)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	kennen	VVINF	*))	kennen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPOSAT	(VROOT(PSEUDO(S(NP*	ihr	sg	masc	-	(44|(43)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Stolz	NN	*)	stolz	sg	masc	-	44)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Christen	NN	(S(VP*	christ	sg	masc	-	(45)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*)	sein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Menschen	NN	*	mensch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*)))))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(CS(S*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Selbst	ADV	(NP*	selbst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(46
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	was	PRELS	(S*	was	sg	neut	-	(46)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	noch	ADV	(PP*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	von	APPR	*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihrem	PPOSAT	*	ihr	sg	neut	-	(47|(43)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Stifter	NN	*)	stifter	sg	neut	-	47)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	her	PTKVZ	*))	her	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	46)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Mit	APPR	(S*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Menschlichkeit	NN	*	menschlichkeit	sg	fem	-	(46)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	den	ART	(NP*	der	pl	fem	-	(48
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Aberglauben	NN	*)	aberglaube	pl	fem	-	48)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	wirzt	VVFIN	*))	wirzen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Das	PDS	(S*	der	sg	neut	-	(46)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	lieben	VVFIN	*	lieben	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	sie	PPER	*	sie	pl	*	-	(43)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	weil	KOUS	(S*	weil	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	es	PPER	*	es	sg	neut	-	(46)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	menschlich	ADJD	*	menschlich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	ist	VAFIN	*)	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	28	Weils	NE	(S(MPN*	weils	-	-	-	(46)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	29	Christus	NE	*)	christus	-	-	-	(47)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	30	lehrt	VVFIN	*	lehren	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	31	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	32	weils	ADV	(S(NP*	weils	-	-	-	(46)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	33	Christus	NN	*)	christus	-	-	(PER*)	(47)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	34	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	35	getan	VVPP	*))))	tun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	36	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wohl	NN	(NP*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihnen	PPER	(NP*	ihnen	pl	*	-	(43)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	*	er	sg	masc	-	(47)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	(NP*	ein	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	(AP*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	guter	ADJA	*)	gut	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Mensch	NN	*)	mensch	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Noch	ADV	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	war	VAFIN	*)))	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wohl	ADV	(VROOT(PSEUDO(S*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihnen	PPER	*	ihnen	pl	*	-	(43)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	sg	fem	-	(43)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	seine	PPOSAT	(VP(CNP(NP*	sein	sg	fem	-	(47)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Tugend	NN	*	tugend	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Treu	NN	*))	treu	-	-	-	(49)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Glaube	NN	*)	glaube	sg	-	-	(48)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	nehmen	VVINF	*)	nehmen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	können	VMFIN	*))	können	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Tugend	NN	*	tugend	sg	neut	-	(46)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Seine	PPOSAT	(NP(VP(NP*	sein	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Tugend	NN	*)	tugend	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*	sein	-	-	-	(50|(47)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Name	NN	(S*	name	sg	masc	-	50)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	überall	ADV	(VP(VP*	überall	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	verbreitet	VVPP	*)	verbreiten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	werden	VAINF	*))	werden	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	soll	VMFIN	(S*	sollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Die	ART	(NP*	der	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Namen	NN	*	name	pl	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	aller	PIAT	(NP*	aller	pl	masc	-	(42
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	guten	ADJA	*	gut	pl	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Menschen	NN	*))	mensch	pl	masc	-	42)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	schänden	VVFIN	*))	schinden	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	Verschlingen	NN	*)	verschlingen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Um	KOUI	(VROOT(PSEUDO(S(PP*	um	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	den	ART	*	der	sg	masc	-	(50
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Namen	NN	*)	name	sg	masc	-	50)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	um	KOUI	(PP*	um	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	den	ART	*	der	sg	masc	-	(50
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Namen	NN	*)	name	sg	masc	-	50)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihnen	PPER	(VP*	ihnen	pl	masc	-	(43)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	tun	VVINF	*)))	tun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(CS(S*	du	sg	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	meinst	VVFIN	*)	meinst	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	warum	PWAV	(S*	warum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Sie	PPER	*	sie	pl	*	-	(43)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	sonst	ADV	*	sonst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	verlangen	VVINF	*	verlangen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	würden	VAFIN	*	werden	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	daß	KOUS	(CS(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	auch	ADV	*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ihr	PPER	(NP*	ihr	sg	fem	-	(51)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Auch	NN	*)	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	du	PPER	(CNP*	du	sg	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Melek	NE	(NP*	melek	sg	neut	-	(38)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Christen	NN	*))	christ	pl	masc	(MISC*)	(52)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	hießet	VVFIN	*)	hießen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	eh	ADV	(S(VP(PP*	eh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	Als	APPR	*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	Ehgemahl	NN	*)	ehgemahl	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	ihr	PPOSAT	(NP*	ihr	sg	fem	-	(51)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	Christen	NN	*)	christ	pl	masc	(MISC*)	(43)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	lieben	VVINF	*)	lieben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	wolltet	VMFIN	*))))	wollten	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	28	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Als	APPR	*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Christen	NN	*	christ	pl	masc	(MISC*)	(43)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	als	APPR	*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Christen	NN	*	christ	pl	masc	-	(52)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Die	ART	*	der	pl	masc	-	(53
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Liebe	NN	*	liebe	pl	masc	-	53)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	gewärtigen	VVINF	*	gewärtig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	womit	PWAV	*	womit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Der	ART	*	der	sg	masc	-	(54
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Schöpfer	NN	*	schöpfer	sg	masc	-	54)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Mann	NN	*	mann	sg	masc	-	(55)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	Männin	NN	*	männin	sg	neut	-	(56)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	ausgestattet	VVPP	*	ausstatten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	*	der	pl	masc	-	(43
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Christen	NN	*	christ	pl	masc	(MISC*)	43)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	glauben	VVFIN	*	glauben	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	PIAT	*	mehr	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Armseligkeiten	NN	*	armseligkeit	pl	fem	-	(48)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Als	KOKOM	*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	sie	PPER	*	sie	pl	masc	-	(43)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	die	ART	*	der	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	auch	ADV	*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	noch	ADV	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	glauben	VVINF	*	glauben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	könnten	VMFIN	*	können	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	gleichwohl	ADV	*	gleichwohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	irrst	ADV	*	irrst	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	dich	PRF	*	dich	sg	-	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	(S(NP*	der	pl	masc	-	(57
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Tempelherren	NN	*)	tempelherr	pl	masc	-	57)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Die	ART	(NP*	der	pl	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Christen	NN	*)	christ	pl	masc	(MISC*)	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	sind	VAFIN	(S*	sein	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Schuld	NN	*	schuld	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	sind	VAFIN	(S*	sein	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	als	APPR	(PP*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Christen	NN	*)	christ	pl	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Als	APPR	(PP*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Tempelherren	NN	*))))	tempelherr	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Schuld	NN	*	schuld	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Durch	APPR	(VROOT(PSEUDO(S(PP*	durch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	*	der	sg	fem	-	(57)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	allein	ADV	(AP*	allein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Wird	NN	*))	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	aus	APPR	(NP(PP*	aus	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	*	der	sg	fem	-	(40
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Sache	NN	*)	sache	sg	fem	-	40)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nichts	PIS	*))	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S(S*	sie	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wollen	VMFIN	*	wollen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Acca	NE	(MPN*	acca	-	-	-	(58
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	58)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Das	NE	*	der	sg	neut	-	(58)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Richards	NE	*	richard	sg	*	-	(39|(37)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Schwester	NE	*)	schwester	sg	fem	-	39)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	unserm	PPOSAT	(NP*	unser	*	*	-	(38|(26)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Bruder	NN	*	bruder	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Melek	NE	*))	melek	*	*	-	38)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Zum	APPRART	(VP(PP*	zu	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Brautschatz	NN	*)	brautschatz	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	bringen	VVINF	*)	bringen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	müßte	VMFIN	*	müssen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	schlechterdings	ADV	*	schlechterdings	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Nicht	PTKNEG	(VP(VP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	fahren	VVINF	*)	fahren	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	lassen	VVINF	*))	lassen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	des	ART	(NP*	der	sg	masc	-	(59|(57
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ritters	NN	*)	ritter	sg	masc	-	57)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vorteil	NN	*	vorteil	sg	masc	-	59)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Gefahr	NN	*	gefahr	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	laufe	VVFIN	*)	laufen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	spielen	VVFIN	*	spielen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	sie	PPER	*	sie	pl	*	-	(57)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	(NP*	der	sg	masc	-	(60
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Mönch	NN	*	mönch	sg	masc	-	60)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Den	NE	*)	der	pl	masc	-	(60
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	albern	ADJD	*	albern	pl	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Mönch	NN	*)	mönch	pl	masc	-	60)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ob	KOUS	(S*	ob	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	im	APPRART	(PP*	in	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Fluge	NN	*	flug	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ein	ART	(NP*	ein	sg	masc	-	(59
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	guter	ADJA	*	gut	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Streich	NN	*))	streich	sg	masc	-	59)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	gelänge	VVFIN	*)	gelingen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	haben	VAFIN	*	haben	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	pl	*	-	(57)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Des	ART	(VP(VP(NP*	der	sg	neut	-	(34
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Waffenstillestandes	NN	*	waffenstillestand	sg	neut	-	34)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Ablauf	NN	*	ablauf	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	kaum	ADV	*)	kaum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Erwarten	VVINF	*)	erwarten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	können	VMINF	*))	können	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Lustig	NE	*	lustig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(AP(AVP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*)	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	weiter	ADV	*)	weiter	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPOSAT	(VROOT(PSEUDO(S(NP*	ihr	pl	*	-	(57
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Herren	NN	*)	herr	pl	-	-	57)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	weiter	PTKVZ	*)	weiter	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	schon	ADV	(AVP*	schon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	recht	ADV	*))	recht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wär	NN	*	sein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	(CS(S*	alle	sg	neut	-	(61)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	sonst	ADV	*	sonst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*)	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	es	PPER	*	es	sg	neut	-	(61)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	müßte	VMFIN	*))	müssen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	irrte	VVFIN	*	irren	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PPER	*	dich	sg	-	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	sonst	ADV	*)	sonst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	könnte	VMFIN	*	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	sonst	ADV	*	sonst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Dich	PRF	(VP*	dich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	*	der	sg	fem	-	(62
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Fassung	NN	*)	fassung	sg	fem	-	62)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	bringen	VVINF	*))	bringen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	je	ADV	(AP*	je	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Mich	ADV	*	mich	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	immer	ADV	*))	immer	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	*	der	sg	fem	-	(62
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Fassung	NN	*)	fassung	sg	fem	-	62)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	gebracht	VVPP	*)	bringen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Libanon	NE	*)	libanon	sg	masc	-	(63)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	unserm	PPOSAT	*	unser	sg	masc	-	(64|(26)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Vater	NN	*))	vater	sg	masc	-	64)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(64)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	unterliegt	VVFIN	*	unterliegen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	(NP*	der	pl	fem	-	(65
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sorgen	NN	*)	sorge	pl	fem	-	65)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*)	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	XY	*	O	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	weh	XY	*	weh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(64)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	durch	PTKVZ	*	durch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	es	PPER	(S*	es	sg	neut	-	(66)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	klemmt	VVFIN	*	klemmen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	sich	PRF	*	sich	sg	-	-	(66)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	aller	PIAT	(NP*	aller	pl	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Orten	NN	*)))	ort	pl	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Es	PPER	(S*	es	sg	neut	-	(66)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	fehlt	VVFIN	*	fehlen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	bald	ADV	*	bald	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	da	ADV	*	da	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	bald	ADV	*	bald	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	dort	ADV	(NP*	dort	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	–	CARD	*)))))	–	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	klemmt	VVFIN	*)	klemmen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	fehlt	VVFIN	*)	fehlen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sonst	ADV	*	sonst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	als	KOKOM	*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	was	PWS	*	was	sg	neut	-	(67
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	kaum	ADV	*	kaum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nennen	VVINF	*	nennen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	würd	VAFIN	*	würd	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ge	FM	*	GE	-	-	-	67)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	(67
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ichs	NE	*	ichs	-	-	-	(67)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	überflüssig	ADJD	*	überflüssig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	hab	VAFIN	*	hab	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	ichs	ADV	*	ichs	-	-	-	(67)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	unentbehrlich	ADJD	*	unentbehrlich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	scheint	VVFIN	*	scheinen	sg	-	-	67)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Wo	PWAV	*	wo	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	Al-Hafi	NE	*	al-hafi	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	denn	ADV	*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	niemand	PIS	*	niemand	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nach	APPR	(PP*	nach	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ihm	PPER	*)	ihm	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	aus	PTKVZ	*)	aus	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(NP*	der	sg	neut	-	(67
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	leidige	ADJA	(PP*	leidig	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	verwünschte	ADJA	*	verwünschen	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Geld	NN	*))	geld	sg	neut	-	67)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gut	ADJD	*	gut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Hafi	NE	(NP*	hafi	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	du	PPER	*	du	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	kömmst	VVFIN	*))	kömmsen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Derwisch	NN	*	derwisch	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Al-Hafi	NE	*)	al-hafi	sg	-	(PER*)	3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO*	saladin	-	-	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sittah	NE	(VROOT(PSEUDO*	sittah	sg	-	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	pl	neut	-	(68
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gelder	NN	*	geld	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ägypten	NE	(MPN*	ägypten	sg	neut	-	68)|(69)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Wenns	NE	*)))	wenn	sg	neut	-	(68)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	fein	ADJD	(AP*	fein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	viel	PIS	*)	viel	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	ist	VAFIN	*)	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hast	VAFIN	(VROOT(PSEUDO(S*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nachricht	NN	*)	nachricht	sg	fem	-	(70)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	denke	VVFIN	*	denken	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	hier	ADV	*	hier	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	sie	PPER	*	sie	pl	*	-	(68)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	(PP*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Empfang	NN	*)	empfang	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	nehmen	VVINF	*))	nehmen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zahl	NN	(VROOT(PSEUDO(NP*	zahl	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	an	APPR	(PP*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*	sittah	sg	-	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	tausend	CARD	*	tausend	-	-	-	(24)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Dinare	NN	*))	dinar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	In	APPR	(VROOT(PSEUDO(CO(PP*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gedanken	NN	*	gedanke	pl	*	-	(32)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	hin	ADV	*)	hin	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	her	ADV	(AP*	her	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	gehend	ADJD	*))	gehend	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zahl	NN	(VROOT(PSEUDO*	zahl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	anstatt	KOUI	*	anstatt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	empfang	FM	*	empfingen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(AP*	O	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	schön	ADJD	*)	schön	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	für	APPR	(PP*	für	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Was	PWS	(AP*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	weniger	PIS	(AP*	weniger	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	als	KOKOM	(NP*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Nichts	PIS	*)))))	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	An	APPR	*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*	sittah	sg	-	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wiederum	ADV	*	wiederum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	an	APPR	*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sittah	NE	*	sittah	sg	masc	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Verloren	NN	*	verlor	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wiederum	ADV	*	wiederum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	im	APPRART	(VP(PP*	in	sg	masc	-	(17
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Schach	NN	*)	schach	sg	masc	-	17)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	verloren	VVPP	*))	verlieren	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Da	ADV	(S*	da	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	steht	VVFIN	*	stehen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*)	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	(NP*	der	sg	neut	-	(27
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Spiel	NN	*)	spiel	sg	neut	-	27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	gönnst	VVFIN	*	gönnen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Mein	PPOSAT	(NP*	mein	sg	neut	-	(24|(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Glück	NN	*))	glück	sg	neut	-	24)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*))	al-hafi	-	-	-	(3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	ART	(VROOT(PSEUDO(AP(NP*	der	sg	neut	-	(27
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Spiel	NN	*)	spiel	sg	neut	-	27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	betrachtend	ADJD	*)	betrachtend	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	gönnen	VVINF	*	gönnen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	–	XY	*	–	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wißt	VVFIN	*	wissen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*))	sittah	-	-	-	(16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	ihm	PPER	(VROOT(PSEUDO(AP*	ihm	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	winkend	ADJD	*)	winkend	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Bst	XY	*	bst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hafi	NE	(VROOT(PSEUDO(MPN*	hafi	-	-	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	bst	XY	*	bst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*))	al-hafi	-	-	-	(3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	noch	ADV	(VROOT(PSEUDO(VP(PP*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	*	der	sg	neut	-	(27
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Spiel	NN	*)	spiel	sg	neut	-	27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	gerichtet	VVPP	*)	richten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gönnts	NE	(VROOT(PSEUDO(S*	gönnt	-	-	-	(24)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*	euch	pl	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(AVP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	selber	ADV	*	selber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	erst	ADV	*))	erst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	(VROOT(PSEUDO(MPN*	al-hafi	-	-	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	bst	XY	*	bst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*))	al-hafi	-	-	-	(3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	zu	APPR	(VROOT(PSEUDO(MPN*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sittah	NE	*)	sittah	-	-	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Weißen	NN	*)	weiße	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	waren	VAFIN	*	sein	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euer	NN	*)	euer	*	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bietet	VVFIN	*	bieten	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Schach	NE	*)	schach	sg	-	-	(27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gut	ADJD	(VROOT(PSEUDO(DL*	gut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	gehört	VVFIN	*))	gehören	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Zug	NN	*	zug	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	an	APPR	(PP*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ihm	PPER	*)))	ihm	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*))	sittah	-	-	-	(16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	ihm	PPER	(VROOT(PSEUDO(AP*	ihm	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	näher	ADJD	*	nah	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	tretend	ADJD	*)	tretend	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sage	VVIMP	(S*	sagen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	mein	PPOSAT	(VP(NP*	mein	sg	neut	-	(24|(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Geld	NN	*)	geld	sg	neut	-	24)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	bekommen	VVINF	*)	bekommen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	kann	VMFIN	*))	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*))	al-hafi	-	-	-	(3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	noch	ADV	(VROOT(PSEUDO(VP*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	*	der	sg	neut	-	(27
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Spiel	NN	*)	spiel	sg	neut	-	27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	geheftet	VVPP	*)	heften	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ja	PTKANT	(S*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	(S*	ihr	pl	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	sollts	ADV	*	sollts	-	-	-	(24)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	bekommen	VVINF	*	bekommen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Ihrs	NE	*	ihr	sg	*	-	(293)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	stets	ADV	*	stets	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	bekommen	VVFIN	*)))	bekommen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	bist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	toll	FM	*	toll	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(17
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Spiel	NN	*)	spiel	sg	neut	-	17)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	aus	PTKVZ	*)	aus	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	habt	VAFIN	*	haben	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(NP(VP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	verloren	VVPP	*)	verloren	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Saladin	NN	*))	saladin	-	-	(PER*)	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	kaum	ADV	(VROOT(PSEUDO(AP*	kaum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hinhörend	ADJD	*)	hinhörend	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	doch	ADV	(VROOT(PSEUDO(S*)	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Bezahl	NN	(VROOT(PSEUDO*	bezahl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	bezahl	ADJD	(VROOT(PSEUDO*	bezahl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Bezahl	NN	(VROOT(PSEUDO*	bezahl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	bezahl	ADJD	(VROOT(PSEUDO*	bezahl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO(S*	da	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	steht	VVFIN	*	stehen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Eure	PPOSAT	(NP*	euer	sg	fem	-	(23|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Königin	NN	*))	königin	sg	fem	-	23)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	noch	ADV	(VROOT(PSEUDO(CO(AVP*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*))	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gilt	VVFIN	(VROOT(PSEUDO(S*	gilt	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Gehört	NN	(NP*	gehört	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	(PP(AVP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	ADV	*)	mehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ins	APPRART	*	in	sg	neut	-	(27
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Spiel	NN	*)))	spiel	sg	neut	-	27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	mach	VVFIN	*	machen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	sag	VVFIN	(S*	sag	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Daß	KOUS	(S*	daß	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	das	ART	(VP(NP*	der	sg	neut	-	(24
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Geld	NN	*	geld	sg	neut	-	24)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	mir	PPER	(S*	sich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	holen	VVINF	*))	holen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	lassen	VVINF	*))))	lassen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*))	al-hafi	-	-	-	(3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	noch	ADV	(VROOT(PSEUDO(VP*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	immer	ADV	*	immer	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(PP*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	*	der	sg	neut	-	(27
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Spiel	NN	*)	spiel	sg	neut	-	27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	vertieft	VVPP	*)	vertiefen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Versteht	VVFIN	(VROOT(PSEUDO(AVP(S*	verstehen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sich	PRF	*)	sich	sg	-	-	(72)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	wie	KOKOM	(AVP*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	immer	ADV	*))	immer	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	*	schon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	auch	ADV	(NP*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	*	der	sg	fem	-	(23
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Königin	NN	*)	königin	sg	fem	-	23)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	gilt	VVFIN	*))	gelten	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Ihr	PPER	(S*	ihr	pl	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	seid	VAFIN	*	sein	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Doch	KON	(AP(AVP*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	darum	PROAV	*	darum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	noch	ADV	*)	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	matt	ADJD	*))	matt	-	-	-	(73)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	tritt	VVFIN	(VROOT(PSEUDO(S*	treten	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hinzu	PTKVZ	*	hinzu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wirft	VVFIN	(S*	werfen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	(NP*	der	sg	neut	-	(27
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Spiel	NN	*)	spiel	sg	neut	-	27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	um	PTKVZ	*))	um	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(73)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Es	PPER	*	es	sg	neut	-	(73)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	sein	VAINF	*	sein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Spiel	NN	*	spiel	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Gewinst	NN	*)	gewinst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(VP(AVP*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Gewonnen	NN	*))	gewonne	pl	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	bezahlt	VVPP	*)	bezahlen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	zu	APPR	(VROOT(PSEUDO(MPN*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sittah	NE	*)	sittah	-	-	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*)	er	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*))	sittah	-	-	-	(16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	von	APPR	(VROOT(PSEUDO(AP(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Zeit	NN	*)	zeit	sg	fem	-	(74)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Zeit	NN	*)	zeit	sg	fem	-	(74)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	(NP*	der	sg	masc	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Hafi	NN	*)	hafi	sg	masc	-	3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	winkend	ADJD	*)	winkend	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	kennst	VVFIN	*	kennen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*)	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sträubt	VVFIN	*	sträuben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	*	sich	sg	-	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	gern	ADV	*	gern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	läßt	VVFIN	(CS(S*	lassen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	gern	ADV	*	gern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Sich	PRF	(NP*	sich	sg	-	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	bitten	ADV	*))	bitten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	ist	VAFIN	(S*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	wohl	ADV	(AP*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	gar	ADV	*	gar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	ein	ART	(AVP*	ein	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	wenig	ADV	*)	wenig	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	neidisch	ADJD	*))))	neidisch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auf	APPR	(VROOT(PSEUDO(S*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PPER	*	dich	sg	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auf	APPR	(VROOT(PSEUDO(S*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	meine	PPOSAT	(NP*	mein	sg	fem	-	(16|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Schwester	NN	*)	schwester	sg	fem	-	16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	hör	XY	*	hör	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Hafi	NE	*	hafi	sg	-	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Neidisch	ADJD	(VROOT(PSEUDO*	neidisch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sein	VAINF	*	sein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sein	VAINF	*	sein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	hätt	VAFIN	*	hätt	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihr	PPOSAT	*	ihr	sg	fem	-	(31|(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Hirn	NN	*	hirn	-	-	-	31)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	lieber	ADV	*	lieber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Wär	NN	*	sein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	lieber	ADV	*	lieber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	gut	ADJD	*	gut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	als	KOKOM	*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	sie	PPER	*	sie	pl	masc	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Indes	ADV	(VROOT(PSEUDO(S*	ind	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	(VP*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	immer	ADV	(AP*	immer	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	richtig	ADJD	*)	richtig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	noch	ADV	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	bezahlt	VVPP	*))	bezahlen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	heut	ADV	*	heut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	bezahlen	VVINF	*	bezahlen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	KOUS	(VROOT(PSEUDO(S*	lassen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*	ihn	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*)	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	XY	*	geh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(NP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Al-Hafi	NE	*	al-hafi	sg	-	(LOC*)	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*)	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	geh	XY	*	geh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(VP(VP(NP*	der	sg	neut	-	(24
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Geld	NN	*)	geld	sg	neut	-	24)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Schon	ADV	*	schon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	holen	VVINF	*)	holen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	lassen	VVINF	*))	lassen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	(VROOT(PSEUDO(S*	nein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(75|(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	spiele	VVFIN	*	spielen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	länger	ADJD	(AP*	lang	-	-	-	75)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Die	ART	(NP*	der	pl	neut	-	(72
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Mummerei	NN	*))	mummerei	pl	neut	-	72)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	mit	PTKVZ	*)	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	(VP*	es	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Einmal	ADV	*	einmal	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	erfahren	VVINF	*))	erfahren	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	(VROOT(PSEUDO(MPN*	al-hafi	-	-	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dieses	PDS	(NP(AP*	dieser	sg	neut	-	(75)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	dein	PPOSAT	*)	dein	sg	neut	-	(76|(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Versprechen	NN	*))	versprechen	-	-	-	76)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hältst	VVFIN	(VROOT(PSEUDO(S*	hältst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Mir	NE	(NP*	sich	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Wort	NN	*))	wort	-	-	-	(76)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	konnt	ADJD	*	konnen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	glauben	VVFIN	*	glauben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	es	PPER	*	es	sg	neut	-	(72)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Weit	ADJD	*	weit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	gehen	VVINF	*	gehen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	würde	VAFIN	*	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	erfahr	ADJD	(VROOT(PSEUDO(S*	erfahr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S(NP(S*	ich	sg	*	-	(77|(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bitte	VVFIN	*	bitten	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PPER	*)	dich	sg	masc	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Al-Hafi	NE	*	al-hafi	sg	*	(LOC*)	3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*)	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	sei	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	bescheiden	ADJD	*)	bescheiden	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	77)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(77)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(AP*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	sonderbar	ADJD	*))	sonderbar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(CS(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	könnte	VMFIN	*	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*	sittah	sg	-	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	So	ADV	(PP(AP*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	feierlich	ADJD	(CAP*	feierlich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	(AP*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	warm	ADJD	*)))	warm	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	bei	APPR	*	bei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	einem	ART	*	ein	sg	neut	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Fremden	NN	*))	fremde	sg	neut	-	3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Bei	NN	(S*	bei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	einem	ART	(AP(NP*	ein	sg	neut	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Derwisch	NN	*)	derwisch	sg	neut	-	3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	lieber	ADJD	*)	lieber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	bei	APPR	(VP(PP*	bei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	mir	PPER	*)	sich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	Bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	ihrem	PPOSAT	*	ihr	sg	masc	-	(7|(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	Bruder	NN	*)	bruder	sg	masc	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	sich	PRF	*	sich	sg	-	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	verbitten	VVINF	*)	verbitten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	wollen	VMFIN	*)))	wollen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	*	al-hafi	-	-	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	befehl	ADJD	*	befehl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Rede	NN	*	rede	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Derwisch	NN	*	derwisch	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	KOUS	(VROOT(PSEUDO(S*	lassen	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	eine	ART	(CNP(NP*	ein	sg	fem	-	(72
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Kleinigkeit	NN	*)	kleinigkeit	sg	fem	-	72)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mein	PPOSAT	(NP*	mein	sg	masc	-	(7|(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Bruder	NN	*))	bruder	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	dir	PPER	(VP*	dir	sg	*	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Nicht	PTKNEG	(AP*	nicht	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	näher	ADJD	*)	nah	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	treten	VVINF	*)	treten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	sie	PPER	*	sie	sg	fem	-	(72)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	würdig	ADJD	*	würdig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	ist	VAFIN	*))	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	*	du	sg	*	-	(78|(79|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	weißt	VVFIN	*	weißen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	verschiednen	VVINF	*	verschiednen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Malen	NE	*	mal	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Dieselbe	PDAT	*	derselbe	sg	fem	-	(71
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Summ	NN	*	summ	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	71)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	im	APPRART	*	in	sg	masc	-	(80
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Schach	NN	*	schach	sg	masc	-	80)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	von	APPR	*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	dir	PPER	*	dir	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	gewonnen	VVPP	*	gewinnen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	weil	KOUS	(S*	weil	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	itzt	VVFIN	(S*	itzen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	(NP*	der	sg	neut	-	(24
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Geld	NN	*)	geld	sg	neut	-	24)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nötig	ADJD	*))	nötig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	habe	VAFIN	*)	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Weil	NE	(S*	weil	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	itzt	ADJD	(AP*	itzt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	in	APPR	(PP*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Hafis	NE	(MPN*	hafis	sg	fem	-	(81|(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Kasse	NE	*)))	kasse	sg	fem	-	81)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	das	ART	(NP*	der	sg	neut	-	(82
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Geld	NN	*)	geld	sg	neut	-	82)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Nicht	PTKNEG	(AP(AVP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	eben	ADV	*)	eben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	allzuhäufig	ADJD	*)	allzuhäufig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	so	ADV	(S*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	sind	VAFIN	*	sein	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	Die	ART	(NP*	der	pl	masc	-	(83
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	Posten	NN	*	posten	pl	masc	-	83)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	stehn	CARD	*)	stehn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	28	geblieben	VVPP	*)))	bleiben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	29	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	(VROOT(PSEUDO(S*	aber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sorgt	VVFIN	*	sorgen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	pl	*	-	(83)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	weder	KON	(NP(CNP*	weder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*	dir	sg	*	-	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	mein	PPOSAT	(NP*	mein	sg	masc	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Bruder	NN	*))	bruder	sg	masc	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Noch	NE	(MPN*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Hafi	NE	*))	hafi	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	noch	ADV	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	der	ART	(VP(NP*	der	sg	masc	-	(81
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Kasse	NN	*)	kasse	sg	masc	-	81)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	schenken	VVINF	*))))	schenken	-	-	-	79)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wenns	NN	*	wenn	sg	-	-	(72)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*	der	sg	neut	-	(78)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	wäre	VAFIN	*)	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	ART	*	der	sg	neut	-	(78)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(NP*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	mehr	ADV	*	mehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	dergleichen	PIS	*)	dergleichen	-	-	-	(79)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Auch	ADV	(S*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(83)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	(VP(PP*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	*	der	sg	fem	-	(81
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Kasse	NN	*	kasse	sg	fem	-	81)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	stehn	CARD	*)	stehn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	geblieben	VVPP	*	bleiben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	du	PPER	*	du	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	mir	PPER	*	sich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	einmal	ADV	(VP*	einmal	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	ausgeworfen	VVPP	*	auswerfen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*)	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	ist	VAFIN	*)))	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Seit	APPR	(VP*	seit	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	wenig	PIAT	(NP*	wenig	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Monden	NN	*	monden	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	stehn	CARD	*)	stehn	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	geblieben	VVPP	*)	bleiben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	*)	alle	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(CO(AVP*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wirst	VAFIN	*	wirst	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	(VP*	du	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	reden	VVINF	*))	reden	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Seit	APPR	*	seit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	aus	APPR	*	aus	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ägypten	NE	*	ägypten	pl	-	-	(69)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wir	PPER	*	wir	pl	*	-	(84)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	*	der	sg	neut	-	(68
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Geld	NN	*	geld	sg	neut	-	68)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	erwarten	VVFIN	*	erwarten	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	sie	PPER	*	sie	sg	fem	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*))	sittah	-	-	-	(16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Saladin	NE	*	saladin	-	-	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wozu	PWAV	(VROOT(PSEUDO(S*	wozu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*	ihn	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	hören	VVFIN	*)	hören	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(PP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nichts	NN	*	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Bekommen	NN	*)	bekommen	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gutes	ADJA	(VROOT(PSEUDO(NP*	gut	sg	neut	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mädchen	NN	*)	mädchen	sg	neut	-	16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Auch	ADV	(AVP*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	beiher	ADV	*)	beiher	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	vorgeschossen	VVPP	*)	vorgeschießen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Den	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(15
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ganzen	ADJA	*	ganz	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Hof	NN	*)	hof	sg	masc	-	15)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Erhalten	NN	*	erhalten	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Euern	NN	(S(NP*	euer	sg	masc	-	(85|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Aufwand	NN	*)	aufwand	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ganz	ADV	(AVP*	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	allein	ADV	*)	allein	-	-	-	85)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Bestritten	NN	*)	bestritten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ha	XY	*	ha	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(85)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(85)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	meine	PPOSAT	(NP*	mein	sg	fem	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Schwester	NN	*))	schwester	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(AP*	sie	sg	fem	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	umarmend	ADJD	*)	umarmend	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hatte	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	dies	PDS	(VP*	dieser	sg	neut	-	(85)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	können	VMINF	*)	können	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	mich	PPER	(VP*	mich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	reich	ADJD	*	reich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Gemacht	VVPP	*))	gemacht	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	du	PPER	*	du	sg	*	-	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	mein	PPOSAT	(NP*	mein	sg	masc	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Bruder	NN	*)))	bruder	sg	masc	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wird	VAFIN	(VROOT(PSEUDO(S*	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	schon	ADV	(AP*	schon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	(AVP*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	So	ADV	*)	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	bettelarm	ADJD	*)	bettelarm	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	sie	PPER	*	sie	pl	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	(VP*	wieder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	machen	VVINF	*	machen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	selber	ADV	*))	selber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	ist	VAFIN	*)	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	arm	VVFIN	*)	arm	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Bruder	NN	*)	bruder	sg	masc	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	arm	ADJD	*)	arm	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hab	VAFIN	*	hab	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mehr	ADV	*	mehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	weniger	ADV	*	weniger	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	gehabt	VAPP	*	haben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ein	ART	(NP*	ein	sg	masc	-	(86
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Kleid	NN	*)	kleid	sg	masc	-	86)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ein	ART	(CNP(NP*	ein	sg	masc	-	(87
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Schwert	NN	*)	schwert	sg	masc	-	87)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ein	ART	(NP*	ein	sg	masc	-	(88
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Pferd	NN	*)	pferd	sg	masc	-	88)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	–	NN	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Einen	ART	(NP*	ein	sg	masc	-	(54
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Gott	NN	*))	gott	sg	masc	-	54)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	brauch	ADV	*	brauch	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mehr	ADV	*	mehr	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	kanns	NE	*	kanns	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	an	APPR	(AVP*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	*)	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	fehlen	VVFIN	*)	fehlen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Al-Hafi	NE	*	al-hafi	-	-	(LOC*)	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	könnt	VVFIN	*	können	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	mit	APPR	*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	dir	PPER	*	dir	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	schelten	VVFIN	*	scheln	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Schilt	NE	(VROOT(PSEUDO(NP*	schilt	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	mein	PPOSAT	(NP*	mein	sg	masc	-	(7|(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Bruder	NN	*)))	bruder	sg	masc	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	unserm	PPOSAT	(NP*	unser	sg	-	-	(64|(26)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vater	NN	*)	vater	sg	masc	-	64)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Auch	ADV	*	auch	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	seine	PPOSAT	(VP(NP*	sein	pl	fem	-	(65|(64)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Sorgen	NN	*	sorge	pl	fem	-	65)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*)	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	erleichtern	VVINF	*)	erleichtern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	könnte	VMFIN	*)	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	schlägst	VVFIN	*	schlägen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	meine	PPOSAT	(NP*	mein	sg	fem	-	(89|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Freudigkeit	NN	*)	freudigkeit	sg	fem	-	89)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	einmal	ADV	*)	einmal	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nieder	PTKVZ	*)	nieder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mir	PPER	(NP*	sich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	für	APPR	(S(PP*	für	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	*)	mich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Fehlt	VVFIN	*	fehlt	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	nichts	PIS	(VP*	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	fehlen	VVINF	*))))	fehlen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	(VROOT(PSEUDO(CS(S*	aber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihm	PPER	*	ihm	sg	masc	-	(64)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihm	PPER	*	ihm	sg	*	-	(64)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	fehlet	VVFIN	*)	fehlet	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	in	APPR	(S(PP*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ihm	PPER	*)	ihm	sg	masc	-	(64)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	uns	PPER	(NP*	uns	pl	*	-	(90)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	allen	PIS	*)))	aller	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sagt	VVFIN	*	sagen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	machen	VVINF	*	machen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Aus	APPR	*	aus	-	-	-	(91
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ägypten	NE	*	ägypten	sg	neut	-	(69)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	kommt	VVFIN	(S*	kommen	sg	-	-	91)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	(AVP*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	lange	ADV	*)	lange	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Woran	PWAV	(VROOT(PSEUDO(S(S*	woran	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(91)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	liegt	VVFIN	*)	liegen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Weiß	NN	(S*	weiß	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Gott	NN	*))	gott	sg	masc	-	(54)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	da	ADV	(NP*	da	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	alles	PIS	*)	alle	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ruhig	ADJD	*)	ruhig	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Abbrechen	NN	(NP*	abbrechen	-	-	-	(92
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	einziehn	VVFIN	(S*	einziehn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	sparen	VVINF	*	sparen	-	-	-	92)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	will	VMFIN	(S*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	gern	ADV	*	gern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Mir	PPER	(VP(VP*	sich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	gern	ADV	*	gern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	gefallen	VVINF	*)	gefallen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	lassen	VVINF	*))))	lassen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	wenn	KOUS	(CS(S*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	es	PPER	*	es	sg	neut	-	(92)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	mich	PPER	*	mich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	Bloß	NN	*	bloß	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	mich	PPER	*	mich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	betrifft	VVFIN	*	betreffen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	bloß	ADV	(NP*	bloß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	mich	PPER	*))	mich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	28	niemand	PIS	(S(NP*	niemand	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	29	sonst	ADV	*)	sonst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	30	Darunter	PROAV	*	darunter	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	31	leidet	VVFIN	*))	leiden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	32	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	(VP*	der	sg	neut	-	(92)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	machen	VVINF	*))	machen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(S(NP*	ein	sg	masc	-	(88
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Pferd	NN	*	pferd	sg	masc	-	88)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ein	ART	(NP*	ein	sg	masc	-	(86
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Kleid	NN	*	kleid	sg	masc	-	86)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ein	ART	(NP*	ein	sg	masc	-	(87
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Schwerd	NN	*)))	schwerd	sg	masc	-	87)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	ich	PPER	(VP*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	haben	VAINF	*))	haben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	meinem	PPOSAT	(NP*	mein	sg	masc	-	(54|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Gott	NN	*)	gott	sg	masc	-	54)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	(VP(NP*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	abzudingen	VVIZU	*))	audingen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihm	PPER	(VROOT(PSEUDO(S*	ihm	sg	*	-	(54)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	gnügt	VVFIN	*	gnügen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	schon	ADV	(AVP*	schon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	wenigem	PIS	*)	wenig	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	genug	ADV	*)	genug	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	meinem	PPOSAT	*	mein	sg	masc	-	(93|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Herzen	NN	*))	herz	sg	masc	-	93)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Auf	APPR	*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	*	der	sg	masc	-	(94
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Überschuß	NN	*	überschuß	sg	masc	-	94)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Von	APPR	*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	deiner	PPOSAT	*	dein	sg	fem	-	(81|(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Kasse	NN	*	kasse	sg	fem	-	81)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Hafi	NE	*	hafi	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	hatt	VAFIN	*	hatt	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	sehr	ADV	*	sehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Gerechnet	ADJD	*	gerechnet	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Überschuß	NN	(VROOT(PSEUDO*	überschuß	sg	masc	-	(94)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sagt	NN	*	sagt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	selber	ADV	*	selber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ob	KOUS	*	ob	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	pl	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	mich	PRF	*	mich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	hättet	ADJD	*	hätten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	spießen	VVINF	*	spießen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	wenigstens	ADV	*	wenigstens	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Mich	PPER	*	mich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	drosseln	VVINF	*	drosseln	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	lassen	VVINF	*	lassen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	auf	APPR	*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Überschuß	NN	*	überschuß	sg	masc	-	(94)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	von	APPR	*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	Euch	PPER	*	euch	pl	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	ergriffen	VVPP	*	ergreifen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	worden	VAPP	*	werden	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Unterschleif	NN	*))	unterschleif	-	-	-	(95)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	*	der	sg	neut	-	(95)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wagen	VVINF	*	wagen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	machen	VVFIN	*	machen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	wir	PPER	*	wir	pl	*	-	(84)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	(AVP*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	aber	ADV	*))	aber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Konntest	NN	*	konntest	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vor	APPR	*	vor	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	erst	ADV	(AVP*	erst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	niemand	PIS	*))	niemand	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	andern	VVINF	(S*	anderer	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	borgen	VVFIN	*	borgen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	als	KOKOM	(PP*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Bei	APPR	*	bei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Sittah	NE	*))	sittah	sg	-	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Würd	VAFIN	*	würd	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	dieses	PDAT	*	dieser	sg	neut	-	(96
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Vorrecht	NN	*	vorrecht	sg	neut	-	96)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Bruder	NN	*	bruder	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Mir	NE	*	sich	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	haben	VAFIN	*	haben	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	nehmen	VVINF	*	nehmen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	lassen	VVINF	*	lassen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mir	PPER	(VROOT(PSEUDO(NP*	sich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*)	ihm	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*)))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	noch	ADV	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	besteh	VVFIN	*	besteh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	drauf	PTKVZ	*	drauf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(S*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Dem	ART	(AP(NP*	der	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Trocknen	NN	*)	trocknen	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	völlig	ADJD	*))	völlig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(CO(AVP(AVP*	nur	-	-	-	(97
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	völlig	ADJD	*)	völlig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	97)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(97)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	fehlte	VVFIN	*	fehlen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	*)	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	XY	*	geh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	gleich	ADV	(NP*	gleich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mach	APPR	(NP(PP*	machen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Anstalt	NN	*)	anstalt	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Hafi	NE	*))	hafi	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nimm	VVIMP	*	nimm	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	auf	PTKVZ	*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	bei	APPR	*	bei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wem	PWS	*	wem	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	kannst	VMFIN	*	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wie	PWAV	*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	kannst	VMFIN	*)	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geh	XY	(VROOT(PSEUDO*	geh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	borg	VVFIN	(S*	borg	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	versprich	VVFIN	*)	versprich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Hafi	NE	(NP*	hafi	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	borge	VVFIN	(S*	borgen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	denen	PDS	*	der	pl	fem	-	(98
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	die	PRELS	(S*	der	pl	fem	-	(98)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	reich	ADJD	(VP*	reich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	gemacht	VVPP	*)))))	machen	-	-	-	98)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	borgen	VVFIN	*	borgen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Von	APPR	*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	diesen	PDS	*	dieser	pl	*	-	(98)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	möchte	VMFIN	*	möchten	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	wiederfodern	VVINF	*	wiederfodern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	heißen	VVINF	*	heißen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geh	NN	(VROOT(PSEUDO(S(NP*	geh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	*	der	pl	fem	-	(99
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Geizigsten	NN	*))	geizigst	pl	fem	-	99)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	(S*	der	pl	fem	-	(99)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	werden	VAFIN	*	werden	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Am	NN	*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	liebsten	ADJD	(VP*	lieb	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	leihen	VVINF	*)))	leihen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	pl	*	-	(99)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wissen	VVFIN	*	wissen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Wie	PWAV	(S(AP*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	gut	ADJD	*)	gut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ihr	PPOSAT	(NP*	ihr	sg	neut	-	(99)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Geld	NN	*)	geld	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	in	APPR	(PP*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	meinen	PPOSAT	*	mein	pl	neut	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Händen	NN	*)	hand	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	wuchert	VVFIN	*))	wuchern	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	kenne	VVFIN	*	kennen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	deren	PDS	*	der	pl	masc	-	(99)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	keine	PIAT	*	kein	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Eben	ADV	(VROOT(PSEUDO(S*	eben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	fällt	VVFIN	*	fallen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mir	PPER	*	sich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ein	PTKVZ	*	ein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	gehört	VVPP	(VP*	gehören	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	haben	VAINF	*)	haben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Hafi	NN	(NP*	hafi	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Dein	NE	(VP(NP*	dein	sg	masc	-	(1|(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Freund	NN	*)	freund	sg	masc	-	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	zurückgekommen	VVPP	*)))))	zurückkommen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*))	al-hafi	-	-	-	(3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	betroffen	VVPP	*	betreffen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Freund	NN	(VROOT(PSEUDO*	freund	-	-	-	(100)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(100|(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Freund	NN	*)	freund	sg	masc	-	100)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	*	der	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dein	PPOSAT	(VROOT(PSEUDO(NP*	dein	sg	masc	-	(1|(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hochgepriesner	ADJA	*	hochgepriesn	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Jude	NN	*)	jude	sg	masc	-	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gepriesner	ADJA	(VROOT(PSEUDO(NP*	gepriesner	-	-	-	(101
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Jude	NN	*)	jude	pl	-	-	101)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	hoch	ADJD	(VROOT(PSEUDO(PP*	hoch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*)	sich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dem	ART	*	der	sg	neut	-	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*	gott	sg	-	(PER*)	1)|(54)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	–	$.	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	–	CARD	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Mich	PPER	*	mich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	denkt	VVFIN	*	denken	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	des	ART	*	der	sg	masc	-	(102
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Ausdrucks	NN	*	ausdruck	sg	masc	-	102)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	noch	ADV	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	recht	ADV	*	recht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	des	ART	*	der	-	-	-	(102)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	einst	ADV	*	einst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Du	PPER	*	du	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	selber	ADV	*	selber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	dich	PRF	*	dich	sg	-	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	von	APPR	*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	ihm	PPER	*	ihm	sg	masc	-	(102)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	bedientest	VVFIN	*	bedientest	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	–	XY	*	–	-	-	-	(102
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	dem	ART	*	der	sg	neut	-	102)|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	Sein	PPOSAT	*	sein	sg	masc	-	(103
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	Gott	NN	*	gott	sg	masc	-	103)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	von	APPR	*	von	-	-	-	(104
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	allen	PIAT	*	aller	pl	masc	-	(288
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	28	Gütern	NN	*	gut	pl	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	29	dieser	PDAT	*	dieser	sg	masc	-	(107
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	30	Welt	NN	*	welt	sg	fem	-	104)|288)|107)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	31	Das	ART	*	der	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	32	kleinst	ADJD	*	kleinst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	33	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	34	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	35	größte	VVFIN	*	groß	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	36	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	37	in	APPR	*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	38	vollem	ADJA	*	voll	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	39	Maß	NN	*	maß	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	40	Erteilet	VVPP	*	erteilet	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	41	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	42	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sagt	VVFIN	*	sagen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	meint	VVFIN	*	meinen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	damit	PROAV	*	damit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(105
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	kleinste	ADJA	*)	klein	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Reichtum	NN	*)	reichtum	sg	neut	-	105)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(CS*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(104
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	größte	VVFIN	*)	groß	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Weisheit	NN	*)	weisheit	sg	fem	-	104)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	von	APPR	(VROOT(PSEUDO(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	einem	ART	*	ein	sg	masc	-	(101
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Juden	NN	*)	Jude	sg	masc	-	101)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	einem	ART	*	ein	sg	masc	-	(101
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Juden	NN	*	Jude	sg	masc	-	101)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	hätt	VAFIN	*	hätt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	das	PDS	*	der	sg	neut	-	(102)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	gesagt	VVPP	*	sagen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(102)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hättest	VVFIN	*	hättest	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(VP(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	deinem	PPOSAT	*	dein	sg	masc	-	(1|(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Nathan	NN	*)	nathan	sg	masc	-	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Gesagt	VVPP	*))	sagen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	von	APPR	(VROOT(PSEUDO(CO(AVP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dem	ART	*))	der	sg	neut	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	vom	APPRART	(VROOT(PSEUDO(PP*	von	sg	masc	-	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NN	*)	nathan	sg	masc	-	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Fiel	NN	*	fiel	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mir	PPER	*	sich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(S*	der	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	gar	ADV	(AVP*	gar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	bei	PTKVZ	*)	bei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wahrhaftig	NN	*	wahrhaftig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(VP(NP*	der	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	NN	*)	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	endlich	ADV	*	endlich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	heim	ADJD	*	heim	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	gekommen	VVPP	*)	kommen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	*	ei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	mags	ADV	*	mags	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(AP*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	gar	ADV	*	gar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	schlecht	ADJD	*	schlecht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ihm	PPER	*))	ihm	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	stehn	VVFIN	*)	stehn	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ganz	NN	*	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	recht	ADV	*	recht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	*	der	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nannt	FM	*	nennen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	einmal	ADV	*	einmal	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	das	ART	*	der	sg	neut	-	(108
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Volk	NN	*	volk	sg	neut	-	108)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	*	der	sg	masc	-	(109
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Weisen	NN	*	weise	sg	masc	-	109)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Den	ART	(VROOT(PSEUDO(NP*	der	pl	masc	-	(110
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Reichen	NN	*	reiche	pl	masc	-	110)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*)	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Den	ART	(VROOT(PSEUDO(S(NP*	der	pl	masc	-	(110
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Reichen	NN	*)	reiche	pl	masc	-	110)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nennt	VVFIN	*	nennen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(108)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihn	PPER	(NP*	ihn	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Itzt	NN	*)	itzt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	mehr	PIS	(AP*	mehr	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	als	KOKOM	(AVP*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	je	ADV	*)))	je	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(VP(NP*	der	sg	fem	-	(108
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ganze	ADJA	*	ganz	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Stadt	NN	*)	stadt	sg	fem	-	108)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	erschallt	VVPP	*	erschallen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Was	PWS	(S*	was	sg	neut	-	(111
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	für	APPR	(PP*	für	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Kostbarkeiten	NN	*)	kostbarkeit	pl	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	für	APPR	(PP*	für	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Schätze	NN	*)	schatz	pl	masc	-	111)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Er	PPER	(S(VP*	er	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	mitgebracht	VVPP	*)))))	mitbringen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(VP*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ists	FM	(NP*	ists	-	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(NP*	der	sg	masc	-	(110
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Reiche	NN	*)	reiche	sg	masc	-	110)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	So	ADV	(S*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	wirds	ADV	*	wirdsen	-	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	auch	ADV	*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	wohl	ADV	*))	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	der	ART	(NP*	der	sg	masc	-	(109
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Weise	NN	*)	weise	sg	masc	-	109)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	sein	VAINF	*)	sein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	meinst	ADV	*	meinst	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Hafi	NE	*	hafi	-	-	-	3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	diesen	PDS	*	dieser	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	angingst	VVFIN	*))	angingen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	bei	APPR	*	bei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	(S*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	borgen	VVINF	*)	borgen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Da	ADV	*	da	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	pl	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Erborgen	NN	*	erborgen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Seine	PPOSAT	(S(NP*	sein	sg	fem	-	(112|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Weisheit	NN	*)	weisheit	sg	fem	-	112)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	eben	ADV	*	eben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	niemand	PIS	*))	niemand	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	borgt	VVFIN	*	borgen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hast	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mir	PPER	*	sich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	sonst	ADV	*	sonst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ganz	ADV	(NP*	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	*	ein	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ander	ADJA	*	ander	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Bild	NN	*)	bild	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	ihm	PPER	*)	ihm	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Gemacht	NN	*)	gemacht	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zur	APPRART	(VROOT(PSEUDO(S(PP*	zu	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Not	NN	*)	not	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	(VP*	euch	pl	*	-	(26)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Waren	NN	*	sein	pl	fem	-	(113)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	borgen	VVINF	*))	borgen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geld	NN	(VROOT(PSEUDO(NP*	geld	sg	neut	-	(67)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	aber	ADV	*	aber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Geld	NN	*)	geld	sg	neut	-	(67)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geld	NN	(VROOT(PSEUDO(NP*	geld	sg	neut	-	(67)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nimmermehr	ADV	*)	nimmermehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	*	es	sg	neut	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ein	ART	*	ein	sg	masc	-	(114
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Jude	NN	*	jude	sg	masc	-	114)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	übrigens	ADV	*	übrigens	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	wie	PWAV	*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	s	PPER	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Viel	NN	*	viel	*	*	-	(101
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Juden	NN	*	Jude	pl	masc	-	101)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	gibt	VVFIN	*	geben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Verstand	NN	*	verstand	sg	masc	-	(115)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	(S*	er	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Zu	NN	(VP*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	leben	VVINF	*)))	leben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	spielt	VVFIN	(S*	spielen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	gut	ADJD	*))	gut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Schach	NE	*	schach	-	-	-	(80)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	zeichnet	VVFIN	*	zeichnen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Im	APPRART	(PP*	in	sg	neut	-	(116
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Schlechten	NN	*)	schlecht	sg	neut	-	116)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	sich	PRF	*	sich	sg	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	minder	ADJD	*)	minder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	als	KOKOM	(PP*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	im	APPRART	*	in	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Guten	NN	*)	gut	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Von	APPR	(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	allen	PIAT	*	aller	pl	masc	-	(101
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	andern	ADJA	*	anderer	pl	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Juden	NN	*)	Jude	pl	masc	-	101)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	aus	PTKVZ	*)	aus	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Auf	APPR	*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	*	der	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Auf	APPR	(S(PP*	auf	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	den	PRELS	*)	der	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	rechnet	VVFIN	*	rechnen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Den	ART	(S(NP*	der	pl	masc	-	(117
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Armen	NN	*)	arme	pl	masc	-	117)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	gibt	VVFIN	*)	geben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Er	PPER	(S*	er	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	zwar	ADV	*	zwar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	gibt	VVFIN	*	geben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Trotz	APPR	(PP*	trotz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Saladin	NN	*)))	saladin	-	-	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S(S*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	schon	ADV	*	schon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ganz	ADV	(AVP*	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*)	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	viel	PIS	*	viel	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	ganz	ADV	*	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	(AVP*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	gern	ADV	*)))	gern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Doch	KON	(S*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	ganz	ADV	(AVP*	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	so	ADV	*)	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	sonder	KON	*	sonder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Ansehn	NN	*))	ansehn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Jud	XY	*	jud	-	-	-	(101
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	101)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Christ	NE	*	christ	sg	masc	-	(43)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Muselmann	NE	*	muselmann	sg	masc	-	(118)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Parsi	NE	*	parsi	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	alles	PIS	*	alle	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	eins	PIS	*	eins	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	(NP(AP*	so	-	-	-	(119
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	*)	ein	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Mann	NN	*))	mann	sg	masc	-	119)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(120)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Daß	KOUS	(S*	daß	sg	-	-	(120
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	diesem	PDAT	*	dieser	sg	masc	-	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Manne	NN	*)	manne	sg	masc	-	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	nie	ADV	*	nie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	gehört	VVFIN	*))	gehören	sg	-	-	120)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	PDS	(VROOT(PSEUDO(S*	der	sg	masc	-	(119)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sollte	VMFIN	*	sollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Saladin	NE	*	saladin	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	borgen	VVINF	*)	borgen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Dem	ART	*	der	sg	neut	-	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Saladin	NN	*	saladin	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	der	PRELS	*	der	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	für	APPR	*	für	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	andre	PIS	*	andre	pl	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	braucht	VVFIN	*	brauchen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Nicht	PTKNEG	*	nicht	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	sich	PRF	*	sich	sg	-	-	7)|(7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO(S*	da	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	seht	VVFIN	*	sehen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	gleich	ADV	(NP*	gleich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	*	der	sg	masc	-	(101
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Juden	NN	*)	Jude	sg	masc	(MISC*)	101)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Den	ART	(NP*	den	sg	masc	-	(101
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	ganz	ADV	(AP*	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	gemeinen	ADJA	*)	gemein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Juden	NN	*))	Jude	-	-	-	101)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Glaubt	VVFIN	(S*	glauben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	mirs	PPER	*	mir	-	-	-	(121)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*)	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	(S*	er	sg	masc	-	(121|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	aufs	APPRART	(PP*	auf	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Geben	NN	*)	geben	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	(NP(AP*	euch	-	-	-	(26)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	eifersüchtig	ADJD	*)	eifersüchtig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	So	ADV	(S(VP(AP*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	neidisch	ADJD	*)	neidisch	-	-	-	121)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Der	ART	(NP*	der	sg	masc	-	(107
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Welt	NN	*)	welt	sg	masc	-	107)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	gesagt	VVPP	*)	sagen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	wird	VAFIN	*))	werden	sg	-	-	122)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Allein	ADV	*)	allein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S(AVP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	darum	PROAV	*)	darum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	eben	ADV	*	eben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	leiht	VVFIN	*	leihen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	keinem	PIS	(NP*	kein	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Damit	KOUS	(S*	damit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	(VP*	er	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	stets	ADV	*	stets	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	geben	VVINF	*))	geben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	habe	VAFIN	*)))	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Weil	KOUS	*	weil	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	*	der	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mild	NN	*	mild	sg	fem	-	(123
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	123)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	im	APPRART	*	in	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Gesetz	NN	*	gesetz	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	geboten	VVPP	*	bieten	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	die	ART	*	der	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Gefälligkeit	NN	*	gefälligkeit	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	aber	ADV	*	aber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	geboten	VVPP	*	bieten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	macht	VVFIN	*	machen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Die	ART	*	der	sg	fem	-	(124
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Mild	NN	*	mild	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	'	$(	*	--	-	-	-	124)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	zu	APPR	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	dem	ART	*	der	sg	masc	-	(125
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	ungefälligsten	ADJA	*	ungefällig	sg	masc	-	125)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	Gesellen	NN	*	geselle	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	auf	APPR	*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	der	ART	*	der	sg	fem	-	(107
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	Welt	NN	*	welt	sg	fem	-	107)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	28	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zwar	ADV	(VROOT(PSEUDO(CS(S*	zwar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	seit	APPR	(VP(PP*	seit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Geraumer	NN	*	geraumer	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Zeit	NN	*)	zeit	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	(NP*	ein	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	wenig	PIS	*)	wenig	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	übern	VVINF	*)	übern	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Fuß	NN	(VP(NP*	fuß	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Mit	APPR	(PP*	mit	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ihm	PPER	*))	ihm	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	gespannt	VVPP	*))	gespannt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	doch	KON	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	denkt	VVFIN	(S*	denken	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	Ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	darum	PROAV	*	darum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	Gerechtigkeit	NN	*	gerechtigkeit	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	erzeige	VVFIN	*)))	erzeigen	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(AP(PP*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	allem	PIS	*)	alle	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	gut	ADJD	*))	gut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	bloß	ADV	(S*	bloß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	dazu	PROAV	*	dazu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Bloß	ADV	(S*	bloß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	dazu	PROAV	*	dazu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	wahrlich	ADV	*	wahrlich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*)))	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	gleich	ADV	*	gleich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	gehn	VVPP	*	gehn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	an	APPR	*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	andre	ADJA	*	andren	pl	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Türen	NN	*	tür	pl	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	klopfen	VVINF	*	klopfen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Da	ADV	*	da	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Besinn	NN	*	besinn	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	mich	PRF	*	mich	sg	-	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	eben	ADV	*	eben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	eines	ART	*	ein	sg	masc	-	(126
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	Mohren	NN	*	mohr	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	126)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	Der	PRELS	*	der	sg	masc	-	(126)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	reich	ADJD	*	reich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	geizig	ADJD	*	geizig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	28	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	29	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	geh	XY	*	geh	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	geh	XY	*	geh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	eilst	VVFIN	*	eilen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	(NP*	du	sg	*	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Hafi	NE	*))	hafi	*	*	-	3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	KOUS	*	lassen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*	ihn	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	laß	VVFIN	(VROOT(PSEUDO(S*	lassen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*)	ihn	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sittah	NE	(VROOT(PSEUDO*	sittah	sg	-	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO*	saladin	-	-	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Eilt	VVFIN	(VROOT(PSEUDO(S*	eilt	-	-	-	(127
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	(NP*	er	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ob	KOUS	*	ob	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	mir	PPER	*	sich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	(AVP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	gern	ADV	*))))	gern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	entkäme	FM	*	entkommen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	127)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	heißt	VVFIN	*	heißen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*)	der	sg	neut	-	(127)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Hat	VAFIN	*	haben	sg	-	-	(128
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wirklich	ADJD	*	wirklich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	sich	PRF	*	sich	sg	-	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	in	APPR	*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ihm	PPER	*	ihm	sg	neut	-	128)|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Betrogen	NN	*	betroge	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	oder	KON	*	oder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	–	PPER	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	möcht	VMFIN	*	möchen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	er	PPER	*	er	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	uns	PPER	*	uns	pl	*	-	(26)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	gern	ADV	*	gern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Betriegen	NN	*	betriegen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	*	der	sg	neut	-	(128)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	fragst	VVFIN	*	fragen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ja	PTKANT	*	ja	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	kaum	ADV	*	kaum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	von	APPR	*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	wem	PWS	*	wem	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	*	der	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Rede	NN	*	rede	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	höre	PPOSAT	*	hören	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Von	APPR	*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	euerm	PPOSAT	*	euer	-	-	-	(1|(129)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Juden	NN	*	Jude	-	-	(MISC*)	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	euerm	APPRART	*	euer	*	*	-	(1|(129)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Nathan	NE	*	nathan	sg	neut	-	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	heut	ADV	*	heut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	Zum	APPRART	*	zu	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	erstenmal	ADV	*	erstenmal	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ists	ADV	(VROOT(PSEUDO(S(ISU*	ist	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	möglich	ADJD	*))	möglich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	daß	KOUS	(VROOT(PSEUDO(S(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ein	ART	(NP*	ein	sg	masc	-	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mann	NN	*)	mann	sg	masc	-	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Dir	PPER	(VP*	dir	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	verborgen	VVPP	*)	verbergen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	blieb	VVFIN	*	bleiben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	von	APPR	(S(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	dem	PRELS	*)	der	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	es	PPER	*	es	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	heißt	VVFIN	*))	heißen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Er	PPER	*	er	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Salomons	NE	(CNP*	salomon	-	-	(LOC*)	(130
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Davids	NE	(MPN*	david	pl	neut	(LOC*)	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Gräber	NE	*))	grab	pl	neut	-	130)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Erforscht	VVFIN	*	erforschen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	und	KON	(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	wisse	VVFIN	*	wissen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	deren	PDS	*	der	sg	fem	-	(130)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	Siegel	NN	(NP*	siegel	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	durch	APPR	(PP*	durch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	Ein	ART	*	ein	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	mächtiges	ADJA	*	mächtig	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	28	geheimes	ADJA	*	geheim	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	29	Wort	NN	*))	wort	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	30	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	31	lösen	VVINF	*)))	lösen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	32	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Aus	APPR	*	aus	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihnen	PPER	*	ihnen	pl	*	-	(130)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	bring	VVFIN	*	bring	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	dann	ADV	*	dann	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Zeit	NN	*	zeit	sg	fem	-	(74)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	APPR	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Zeit	NN	*	zeit	sg	fem	-	(74)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Die	ART	*	der	sg	fem	-	(131
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	unermeßlichen	ADJA	*	unermeßlich	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Reichtümer	NN	*	reichtum	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	an	APPR	*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Den	ART	*	der	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Tag	NN	*	tag	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	die	PRELS	*	der	pl	masc	-	(131)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	keinen	PIAT	*	kein	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	mindern	VVFIN	*	mindern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	Quell	NN	*	quell	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	verrieten	VVINF	*	verrieten	-	-	-	131)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hat	VAFIN	(VROOT(PSEUDO(S(S*	haben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	seinen	PPOSAT	(NP*	sein	sg	masc	-	(131|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Reichtum	NN	*)	reichtum	sg	masc	-	131)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	dieser	PDAT	(NP*	dieser	sg	masc	-	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Mann	NN	*)	mann	sg	masc	-	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Gräbern	NN	*))	gräber	pl	masc	-	(132)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	So	ADV	(AVP*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	warens	ADV	*	warens	-	-	-	(132)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	sicherlich	ADV	*	sicherlich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Salomons	NE	*	salomon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Nicht	NN	(NP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Davids	NE	(MPN*	david	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Gräber	NE	*)))	grab	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Narren	NN	(VROOT(PSEUDO(S*	narr	-	-	-	(133)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	lagen	VVFIN	*	liegen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	da	ADV	*	da	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Begraben	NN	*)	begraben	pl	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Oder	KON	(VROOT(PSEUDO*	oder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Bösewichter	NN	*	bösewichter	-	-	-	(133)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Auch	ADV	(S*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	seines	PPOSAT	(NP*	sein	sg	neut	-	(131|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Reichtums	NN	*	reichtum	sg	neut	-	131)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Quelle	NN	*))	quelle	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	weit	ADJD	*	weit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ergiebiger	ADJA	(S(NP*	ergiebig	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Weit	NN	*)	weit	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	unerschöpflicher	ADJD	*	unerschöpflich	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	als	KOUS	(S*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	so	ADV	*	so	-	-	-	(130
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	ein	ART	(NP*	ein	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Grab	NN	*	grab	sg	masc	-	130)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Voll	NE	(MPN*	voll	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Mammon	NE	*))))	mammon	sg	*	-	(67)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	handelt	VVFIN	*	handeln	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	wie	KOKOM	(S*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	hörte	VVFIN	*))	hören	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sein	PPOSAT	(VROOT(PSEUDO(CS(S(NP*	sein	sg	masc	-	(134|(135|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Saumtier	NN	*)	saumtier	sg	masc	-	135)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	treibt	VVFIN	*	treiben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	allen	PIAT	*	aller	pl	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Straßen	NN	*))	straße	pl	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	zieht	VVFIN	(S*	ziehen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Durch	APPR	(CO(S(PP*	durch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	alle	PIAT	(NP*	aller	pl	fem	-	(136
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Wüsten	NN	*)	wüste	pl	fem	-	136)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	seine	PPOSAT	(NP*	sein	pl	neut	-	(137|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Schiffe	NN	*))	schiff	pl	neut	-	137)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	liegen	VVFIN	*	liegen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	In	APPR	(VP(PP*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	allen	PIAT	*	aller	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Häfen	NN	*	hafen	pl	*	-	134)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Al-Hafi	NE	(NP*	al-hafi	pl	*	(LOC*)	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	selbst	ADV	*))	selbst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	gesagt	VVPP	*	sagen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	;	$.	*))	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	voll	APPR	(VP(PP*	voll	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	Entzücken	NN	*)	entzück	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	Hinzugefügt	VVPP	*))	hinzugefügt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	28	groß	ADJD	*	groß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	29	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	30	wie	KOKOM	(S(AP*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	31	edel	ADJD	*)	edel	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	32	dieser	PDAT	(NP*	dieser	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	33	Sein	NN	*	sein	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	34	Freund	NN	*)	freund	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	35	anwende	VVFIN	*	anwenden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	36	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	37	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	38	so	ADV	(AP*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	39	klug	ADJD	(CAP*	klug	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	40	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	41	emsig	ADJD	(AP*	emsig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	42	Er	PPER	(VP*	er	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	43	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	44	erwerben	VVINF	*)))))	erwerben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	45	für	APPR	(PP*	für	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	46	zu	PTKA	(AP*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	47	klein	ADJD	*))	klein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	48	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	49	achte	VVFIN	*))))	achter	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	50	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	51	Hinzugefügt	VVPP	(S(VP*	hinzufügen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	52	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	53	wie	KOKOM	(S(AP*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	54	frei	ADJD	*)	frei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	55	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	56	Vorurteilen	NN	*)	vorurteil	pl	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	57	Sein	PPOSAT	(NP*	sein	sg	masc	-	(115|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	58	Geist	NN	*	geist	sg	masc	-	115)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	59	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	60	sein	PPOSAT	(NP*	sein	-	-	-	(138|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	61	Herz	NN	*))	herz	-	-	-	138)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	62	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	63	offen	ADJD	(AP*	offen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	64	jeder	PIAT	*)	jeder	sg	masc	-	(139
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	65	Tugend	NN	*)	tugend	sg	masc	-	139)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	66	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	67	Wie	KOKOM	(VP*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	68	eingestimmt	VVPP	*	einstimmen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	69	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	70	jeder	PIAT	*	jeder	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	71	Schönheit	NN	*))))	schönheit	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	72	sei	VAFIN	*))	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	73	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	itzt	ADV	*	itzt	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	sprach	VVFIN	*	sprechen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Hafi	NE	*	hafi	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	(AP*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ungewiß	ADJD	(CAP*	ungewiß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	So	ADV	(AP*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	kalt	ADJD	*)))	kalt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ihm	PPER	*))	ihm	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kalt	VVIMP	(VROOT(PSEUDO(S*	kalt	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	(AVP*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*)	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	verlegen	VVINF	*))	verlegen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Als	APPR	*	als	-	-	-	(140
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	halt	ADV	*	halt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ers	ADV	*	ers	-	-	-	(286)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	für	APPR	*	für	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	gefährlich	ADJD	*	gefährlich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ihn	PPER	*	ihn	sg	masc	-	(141|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	loben	VVINF	*	loben	-	-	-	141)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	woll	VMFIN	*	woll	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	unverdient	ADJD	*	unverdient	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	auch	ADV	*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	tadeln	VVINF	*	tadeln	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	oder	KON	*	oder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	wirklich	ADJD	*	wirklich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Der	ART	*	der	sg	masc	-	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Beste	NN	*	gut	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	seines	PPOSAT	*	sein	sg	neut	-	(142|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Volkes	NN	*	volk	sg	neut	-	1)|142)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	seinem	PPOSAT	*	sein	sg	masc	-	(142|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Volke	NN	*	volk	sg	masc	-	142)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	ganz	ADV	*	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	entfliehen	VVINF	*	entfliehen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wirklich	ADJD	(VP*	wirklich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	*	sich	sg	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Al-Hafi	NE	(NP*	al-hafi	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	seines	PPOSAT	(NP*	sein	sg	masc	-	(1|(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Freunds	NN	*))	freund	sg	masc	-	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	dieser	PDAT	*	dieser	sg	fem	-	(116
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Seite	NN	*)	seite	sg	fem	-	116)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Zu	NN	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	schämen	VVINF	*)	schämen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	hätte	VAFIN	*)	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	140)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Jude	NN	*	jude	sg	masc	-	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	sei	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	ADV	*	mehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	oder	KON	*	oder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	weniger	ADV	*	weniger	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Als	APPR	*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Jud	NE	*	jud	-	-	-	(114)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	reich	ADJD	*	reich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	genug	PIAT	*	genug	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	für	APPR	*	für	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	uns	PPER	*	uns	pl	*	-	(26)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	willst	VVFIN	*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	*	aber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	(VP(NP*	der	sg	neut	-	(131
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Seine	NE	*	seine	sg	neut	-	131)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Gewalt	NN	*))	gewalt	sg	fem	-	(143)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	nehmen	VVINF	*)	nehmen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Schwester	NN	*)	schwester	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	heißt	VVFIN	*	heißen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	dir	PPER	(AP*	dir	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Gewalt	NN	*)))	gewalt	sg	fem	-	(143)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mit	APPR	*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Feu	NN	*	feu	sg	neut	-	(144
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	r	NN	*	--	-	-	-	144)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Schwert	NN	*	schwert	sg	masc	-	(145)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	(VROOT(PSEUDO(S*	nein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nein	PTKANT	(AVP(S*	nein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	braucht	VVFIN	*	brauchen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	es	PPER	*)	es	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	den	ART	*	der	pl	*	-	(146
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Schwachen	NN	*	schwache	pl	*	-	146)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	für	APPR	(PP*	für	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Gewalt	NN	*))	gewalt	sg	fem	-	(143)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Als	KOUS	(PP*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	ihre	PPOSAT	*	ihr	sg	fem	-	(146)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Schwäche	NN	*)))	schwäche	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Komm	NN	*	komm	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	vor	APPR	*	vor	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	itzt	ADV	(AVP*	itzen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*)	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	mit	APPR	(S(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	In	NN	*)	in	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	meinen	VVFIN	*	meinen	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Haram	NE	*	haram	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	eine	ART	(VP(NP*	ein	sg	fem	-	(147
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Sängerin	NN	*)	sängerin	sg	fem	-	147)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	hören	VVINF	*)	hören	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	die	PRELS	(S*	der	sg	fem	-	(147)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	ich	PPER	(NP*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	gestern	ADV	*)	gestern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	erst	ADV	(VP*	erst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	gekauft	VVPP	*))))	kaufen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	reift	VVFIN	*	reifen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	indes	ADV	*	indes	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*)	sich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	(NP*	ein	sg	masc	-	(148
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Anschlag	NN	*	anschlag	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	148)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Den	NE	*)	der	sg	masc	-	(148)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	diesen	PDAT	*	dieser	sg	masc	-	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Nathan	NN	*)	nathan	sg	masc	-	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	habe	VAFIN	*)	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Komm	NN	*	komm	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Szene	NN	(VROOT(PSEUDO(S*	szene	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	vor	APPR	(PP*	vor	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	*	der	sg	neut	-	(149
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Hause	NN	*	haus	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	des	ART	(NP*	der	sg	masc	-	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Nathan	NE	*))	nathan	sg	masc	-	149)|1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	wo	PWAV	(S*	wo	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	es	PPER	*	es	sg	neut	-	(149)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	an	APPR	(PP*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	die	ART	*	der	pl	fem	-	(150
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Palmen	NN	*)	palme	pl	fem	-	150)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	stößt	VVFIN	*))	stoßen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Recha	NE	(VROOT(PSEUDO(S(CNP*	recha	-	-	-	(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nathan	NE	*)	nathan	-	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	kommen	VVFIN	*	kommen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	heraus	PTKVZ	*)	heraus	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zu	APPR	(VROOT(PSEUDO(PP*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihnen	PPER	*)	ihnen	pl	*	-	(151)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*	daja	-	-	(PER*)	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S(S*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	habt	VAFIN	*	haben	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	(VP*	euch	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	sehr	ADV	*	sehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	verweilt	VVPP	*))	verweilen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	mein	PPOSAT	(NP*	mein	sg	masc	-	(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Vater	NN	*))	vater	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	kaum	ADV	(VP(VP*	kaum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	noch	ADV	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mehr	PIS	*	mehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	treffen	VVINF	*))	treffen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	sein	VAINF	*))	sein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Wenn	KOUS	(S(S*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	hier	ADV	*	hier	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	hier	ADV	(S*	hier	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	untern	VVFIN	*	untern	-	-	-	(150
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Palmen	NE	*	palme	pl	fem	-	150)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	schon	ADV	*	schon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	mehr	ADV	*)))	mehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Doch	KON	(S*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	anderwärts	ADV	*)))	anderwärts	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sei	NN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	itzt	VVFIN	(S*	itzen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ruhig	ADJD	*)	ruhig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sieh	NE	*	sieh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kömmt	VVFIN	(VROOT(PSEUDO(S*	kömmen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dort	ADV	*	dort	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Daja	NE	*	daja	-	-	-	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	uns	PPER	*)	uns	pl	*	-	(151)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKVZ	*)	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihn	PPER	(VP(VP*	ihn	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ganz	ADV	(AVP*	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	gewiß	ADV	*)	gewiß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	verloren	VVPP	*)	verlieren	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	haben	VAINF	*))	haben	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(AVP*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	würde	VAFIN	*	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	sonst	ADV	(VP*	sonst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	geschwinder	ADJD	*	geschwind	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	kommen	VVINF	*))	kommen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	uns	PPER	(VP*	uns	pl	*	-	(151)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	gesehn	VVPP	*))	gesehn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sieht	VVFIN	*	sehen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sie	PPER	*	sie	sg	fem	-	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	uns	PPER	*	uns	pl	*	-	(151)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	doppelt	VVFIN	*	doppelt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihre	PPOSAT	(NP*	ihr	pl	masc	-	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Schritte	NN	*))	schritt	pl	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sieh	NE	(VROOT(PSEUDO*	sieh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sei	VAFIN	(S*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	(AP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ruhig	ADJD	*))	ruhig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	ruhig	ADJD	(VROOT(PSEUDO*	ruhig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wolltet	VMFIN	(VROOT(PSEUDO(S*	wollten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPOSAT	(NP*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wohl	NN	*)	wohl	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	eine	ART	(NP*	ein	sg	fem	-	(153
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Tochter	NN	*	tochter	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	die	PRELS	(S*	der	sg	fem	-	(153)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	hier	ADV	(AP*	hier	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	ruhig	ADJD	*)	ruhig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	wäre	VAFIN	*)))	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	153)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sich	PRF	(VROOT(PSEUDO(S(AP*	sich	pl	-	-	(153)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	unbekümmert	ADJD	*	unbekümmert	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ließe	VVFIN	(S*	lassen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	wessen	PRELAT	(NP*	wessen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Wohltat	NN	*)))	wohltat	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPOSAT	(NP*	ihr	pl	*	-	(154|(153)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Leben	NN	*)	leben	sg	neut	-	154)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	sei	VAFIN	*)	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPOSAT	(VROOT(PSEUDO(NP*	ihr	sg	neut	-	(154|(153)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Leben	NN	*	leben	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	–	KOUS	(S*	–	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	(NP*	der	sg	neut	-	(154)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ihr	PPOSAT	*	ihr	sg	fem	-	(153)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	(AP*	nur	-	-	-	154)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	So	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	lieb	ADJD	*)	leiben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	weil	KOUS	(S*	weil	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	sg	fem	-	(153)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	es	PPER	*	es	sg	neut	-	(154)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	erst	ADV	*)))	erst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	verdanket	VVFIN	*))	verdanket	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CS(S*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	möchte	VMFIN	*	möchten	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PRF	*	dich	sg	-	-	(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	anders	ADV	*	anders	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*	du	sg	*	-	(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	bist	VAFIN	*))	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Auch	ADV	(S*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	wüßte	VVFIN	*	wissen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	in	APPR	(PP*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	deiner	PPOSAT	*	dein	sg	fem	-	(155|(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Seele	NN	*)	seele	sg	fem	-	155)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Ganz	ADV	(AVP(AVP*	ganz	-	-	-	(156
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	etwas	ADV	*)	etwas	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	anders	ADV	*	anders	-	-	-	156)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	noch	ADV	*)	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	sich	PRF	*	sich	sg	-	-	(156)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	rege	VVFIN	*)))	regen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mein	PPOSAT	(NP*	mein	sg	masc	-	(1|(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vater	NN	*))	vater	sg	masc	-	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Fragst	VVFIN	*	fragen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	so	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	schüchtern	VVFIN	*	schüchtern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*)	mich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S(S*	was	sg	neut	-	(156
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	auch	ADV	*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(PP*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	deinem	PPOSAT	*	dein	sg	neut	-	(155
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Innern	NN	*)	innere	pl	masc	-	155)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	vorgeht	VVFIN	*)	vorgehen	sg	-	-	156)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Natur	NN	(CNP*	natur	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Unschuld	NN	*))	unschuld	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	VVFIN	(VROOT(PSEUDO(S*	lassen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	es	PPER	*	es	sg	neut	-	(156)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	keine	PIAT	(NP*	kein	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sorge	NN	*)	sorge	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Dir	PPER	(VP*	dir	sg	*	-	(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	machen	VVINF	*))	machen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mir	NE	(VROOT(PSEUDO(NP(AP(NP*	sich	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	(S*	sich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	macht	VVFIN	*	machen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*))	es	sg	neut	-	(156)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	keine	PIAT	*))	kein	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S(NP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Versprich	NN	*)	versprich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	dein	PPOSAT	(VP(NP(AP(NP*	dein	sg	masc	-	(155
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Herz	NN	*)	herz	sg	masc	-	155)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	vernehmlicher	ADJA	*))	vernehmlich	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Sich	PRF	*	sich	sg	masc	-	(155)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	einst	ADV	*	einst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	erklärt	VVPP	*)	erklären	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	mir	PPER	(VP*	sich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	seiner	PPOSAT	(NP*	sein	sg	fem	-	(157|(155)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Wünsche	NN	*)	wunsch	sg	fem	-	157)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	keinen	PIAT	(NP*	kein	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Zu	NN	*)	zu	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	bergen	VVINF	*)))	bergen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Schon	ADV	(VROOT(PSEUDO(VP(NP*	schon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	*	der	sg	fem	-	(158
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Möglichkeit	NN	*	möglichkeit	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mein	PPOSAT	(S(NP*	mein	sg	masc	-	(155|(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Herz	NN	*)	herz	sg	masc	-	158)|155)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Euch	PPER	(VP*	euch	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	lieber	ADV	*	lieber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	verhüllen	VVINF	*))	verhüllen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	macht	VVFIN	(S*	machen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	mich	PPER	*)))	mich	sg	*	-	(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	zittern	VVINF	*)	zittern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nichts	PIS	(VROOT(PSEUDO(AVP(AVP*	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	mehr	ADV	*)	mehr	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	hiervon	PROAV	*)	hiervon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(VP(NP*	der	sg	neut	-	(158)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ein	PIS	*)	ein	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	für	APPR	(PP*	für	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	allemal	ADV	*)	allemal	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ist	NN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	abgetan	VVPP	*)	abtun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Da	ADV	(S*	da	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	(NP*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Daja	NE	*))	daja	-	-	(PER*)	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(S*)	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(CS(S*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wandelt	VVFIN	*	wandeln	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	hier	ADV	*	hier	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	untern	APPR	(PP*	untern	-	-	-	(150
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Palmen	NN	*))	palme	-	-	-	150)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Wird	VAFIN	(S*	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	gleich	ADV	*	gleich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	um	APPR	(VP(PP*	um	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	jene	PDAT	*	jener	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Mauer	NN	*)	mauer	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	kommen	VVINF	*)))	kommen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Seht	VVFIN	(S*	sehen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Da	ADV	(S*	da	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	*))	er	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	scheinet	VVFIN	*	scheinen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	unentschlossen	ADJD	*	unentschlossen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Wohin	PWAV	*	wohin	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	ob	KOUS	*	ob	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	weiter	ADV	*	weiter	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	ob	KOUS	*	ob	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hinab	PTKVZ	*	hinab	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	ob	KOUS	*	ob	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	rechts	ADV	*	rechts	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ob	KOUS	*	ob	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	links	ADV	*	links	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	(VROOT(PSEUDO(S*	nein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nein	PTKANT	(AVP(S*	nein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	macht	VVFIN	*	machen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	den	ART	(NP*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Weg	NN	*))	weg	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	ums	APPRART	(PP*	um	sg	neut	-	(159
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Kloster	NN	*)	kloster	sg	neut	-	159)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Gewiß	ADV	*	gewiß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	noch	ADV	*))	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	öfter	PIS	(S*	öfter	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	und	KON	(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	dann	ADV	*	dann	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	er	PPER	*	er	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	hier	ADV	*	hier	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Vorbei	ADV	*))	vorbei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	gilts	ADV	*	gilt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Recht	NN	(VROOT(PSEUDO*	recht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	recht	ADV	(VROOT(PSEUDO(S*)	recht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Hast	VAFIN	(S*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*	ihn	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*)	schon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Gesprochen	NN	*	sprechen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wie	PWAV	*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	(NP*	er	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	heut	ADV	*))	heut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(AVP*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	immer	ADV	*)	immer	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	macht	VVFIN	*	machen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	*	er	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	euch	PPER	*	euch	pl	*	-	(160)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	hier	ADV	*	hier	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	gewahr	ADJD	*)	gewahr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Wird	VAFIN	*))	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Tretet	VVFIN	(VROOT(PSEUDO(S*	treten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	mehr	PIS	*	mehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	zurück	PTKVZ	*)	zurück	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	(VROOT(PSEUDO(S*	gehen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	lieber	ADV	(AVP*	lieber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ganz	ADV	*)	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Hinein	PTKVZ	*)	hinein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(NP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	einen	ART	*	ein	sg	masc	-	(161
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Blick	NN	*	blick	sg	masc	-	161)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	noch	ADV	*)	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	*	ah	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	(162
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Hecke	NN	*)	hecke	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	162)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Die	NN	(S*	der	sg	fem	-	(162)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*	sich	sg	*	-	(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ihn	PPER	*	ihn	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	stiehlt	VVFIN	*))	stehlen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kommt	VVFIN	*	kommen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Vater	NN	*)	vater	sg	masc	-	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ganz	ADV	*	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	recht	NN	*)	recht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	lauft	VVFIN	*	laufen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Gefahr	NN	*	gefahr	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	*	er	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Euch	PPER	*	euch	pl	-	-	(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	sieht	VVFIN	*	sehen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Daß	KOUS	*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	auf	APPR	*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	der	ART	*	der	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Stell	NN	*	stellen	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	er	PPER	*	er	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	umkehrt	VVFIN	*	umkehren	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	die	ART	(VROOT(PSEUDO(NP*	der	sg	fem	-	(162
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Hecke	NN	*)	hecke	sg	fem	-	162)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	plötzlich	ADJD	*	plötzlich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	dort	ADV	*	dort	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ihr	PPER	*)	ihr	sg	fem	-	(162)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	hervor	PTKVZ	*	hervor	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	So	ADV	(S*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	er	PPER	*	er	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	anders	ADV	*	anders	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	er	PPER	*	er	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	muß	VMFIN	*))	müssen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	euch	PPER	*	euch	pl	*	-	(160)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	sehn	CARD	*	sehn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Drum	ADV	(VROOT(PSEUDO(S*	drum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	geht	VVFIN	*	gehen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*)	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kommt	VVFIN	*	kommen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*	weißn	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	(163
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Fenster	NN	*	fenster	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	163)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Aus	APPR	(S(PP*	aus	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	dem	PRELS	*)	der	sg	masc	-	(163)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	wir	PPER	*	wir	pl	*	-	(160)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	sie	PPER	*	sie	pl	*	-	(164)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	bemerken	VVINF	*	bemerken	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	können	VMFIN	*)))	können	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Beide	PIS	*	beide	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hinein	PTKVZ	*	hinein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(CNP*	nathan	-	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	bald	ADV	(NP(AVP*	bald	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	darauf	PROAV	*)	darauf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	*	der	sg	fem	-	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Tempelherr	NN	*))	tempelherr	sg	fem	-	152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Fast	ADV	*	fast	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	scheu	ADJD	*	scheu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PPER	*	mich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	des	ART	*	der	sg	masc	-	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Sonderlings	NN	*	sonderling	sg	masc	-	152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Fast	ADV	(VROOT(PSEUDO(S*	fast	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	macht	VVFIN	*	machen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mich	PPER	*	mich	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	seine	PPOSAT	(VP(NP*	sein	sg	fem	-	(165|(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	rauhe	ADJA	*	rauh	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Tugend	NN	*)	tugend	-	-	-	165)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	stutzen	VVINF	*))	stutzen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ein	ART	(NP*	ein	sg	masc	-	(166
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mensch	NN	*)	mensch	sg	masc	-	166)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	(VP*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	einen	ART	(NP*	ein	sg	masc	-	(166
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Menschen	NN	*)	mensch	sg	masc	-	166)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	verlegen	VVINF	*)	verlegen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Soll	NN	(VP*	soll	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	machen	VVINF	*)	machen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	können	VMFIN	*)	können	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ha	NE	*	ha	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	kömmt	VVFIN	*)	kömmen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Bei	APPR	*	bei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Gott	NN	*	gott	-	-	-	(103)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	masc	-	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Jüngling	NN	*	jüngling	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ein	ART	*	ein	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Mann	NN	*))	mann	sg	masc	-	152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	mag	VMFIN	*	mögen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Den	ART	(NP*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	guten	ADJA	*	gut	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	trotzgen	ADJA	*	trotzgen	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Blick	NN	*))	blick	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	den	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(167
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	prallen	ADJA	*	prall	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Gang	NN	*)	gang	sg	masc	-	167)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	(168
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Schale	NN	*)	schale	sg	fem	-	168)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	(VP(AP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	bitter	ADJD	*)	bitter	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*)	sein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	(NP*	der	sg	masc	-	(169
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Kern	NN	*	kern	sg	masc	-	169)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Ists	NE	*)	ist	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	sicher	ADV	*	sicher	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wo	PWAV	*	wo	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	sah	VVFIN	*	sehen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	fem	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	dergleichen	PIS	*	dergleichen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Verzeihet	VVFIN	*	verzeihet	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	edler	ADJA	(NP*	edel	-	-	-	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Franke	NN	*)	franke	-	-	(PER*)	152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Erlaubt	VVPP	(VROOT(PSEUDO(VP*	erlauben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	(S(ISU*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*)))))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Jude	NN	*)	jude	sg	fem	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	*	daß	-	-	-	(170
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PRF	*	mich	sg	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	untersteh	VVFIN	*	untersteh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Euch	PPER	*	euch	pl	-	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	anzureden	VVIZU	*	anreden	-	-	-	170)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ichs	CARD	*	ich	-	-	-	(170)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wehren	VVINF	*	wehren	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	kurz	ADJD	*)	kurz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Verzieht	VVFIN	(VROOT(PSEUDO(CS(S*	verziehen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	eilet	VVFIN	(S*	eilet	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*)	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	stolz	ADJD	*))	stolz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Nicht	PTKNEG	(S(AVP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	*)	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	verächtlich	ADJD	(AP*	verächtlich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	einem	ART	(PP*	ein	sg	masc	-	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Mann	NN	*	mann	sg	masc	-	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	vorüber	APPO	*)))	vorüber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Den	NE	(S*	der	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Ihr	PPER	*	ihr	sg	fem	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	auf	APPR	(VP(PP*	auf	-	-	-	(171
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	ewig	ADJD	*)	ewig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Euch	PPER	*	euch	pl	*	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	verbunden	VVPP	*)	verbinden	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	habt	VAFIN	*))	haben	pl	-	-	171)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(171)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	*	ah	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	fast	ADV	*	fast	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	errat	VVFIN	*	errat	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ichs	PTKVZ	*	ichs	-	-	-	(172)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	*	ihr	pl	*	-	(172|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	172)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	heiße	VVFIN	*	heiß	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nathan	NE	*	nathan	*	*	-	(173)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	des	ART	*	der	sg	masc	-	(174|(2
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Mädchens	NN	*	mädchen	sg	masc	-	2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Vater	NN	*	vater	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	174)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Das	ART	*	der	sg	neut	-	(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Eure	ADJA	*	euer	sg	neut	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Großmut	NN	*	großmut	sg	neut	(PER*)	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	aus	APPR	*	aus	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	dem	ART	*	der	sg	neut	-	(175
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Feu	NN	*	feu	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	r	PPER	*	--	-	-	-	175)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	gerettet	VVPP	*	retten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	komme	VVFIN	*	kommen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	zu	PTKZU	(VZ*	zu	-	-	-	(176
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	danken	VVINF	*)	danken	-	-	-	176)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	–	PPER	(NP*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	sparts	ADV	*))	sparts	-	-	-	(176)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hab	VAFIN	*	hab	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Um	APPR	*	um	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	diese	PDAT	*	dieser	pl	fem	-	(177
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Kleinigkeit	NN	*	kleinigkeit	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	des	ART	*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Dankes	NN	*	dank	sg	masc	-	177)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	schon	ADV	*	schon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Zu	APPR	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	viel	PIS	*	viel	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	erdulden	VVINF	*	erdulden	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	müssen	VMINF	*	müssen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Vollends	NN	*	vollends	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(S*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	seid	VAFIN	*	sein	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	gar	ADV	(NP*	gar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	schuldig	ADJD	*)	schuldig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wußt	VVIMP	*	wußt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Daß	KOUS	*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	dieses	PDAT	*	dieser	sg	masc	-	(2
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Mädchen	NN	*	mädchen	sg	masc	-	2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Eure	PPOSAT	*	euer	sg	fem	-	(178
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Tochter	NN	*	tochter	sg	fem	-	178)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(179)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(180|(57
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Tempelherren	NN	*	tempelherr	-	-	-	57)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Pflicht	NE	*	pflicht	sg	fem	-	180)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	dem	ART	(VP(NP*	der	sg	masc	-	(289
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ersten	ADJA	*	erster	sg	masc	-	289)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Dem	NN	*)	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	besten	ADJD	*	gut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	beizuspringen	VVIZU	*))	beizpringen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	dessen	PRELAT	(NP*	der	sg	masc	-	(181|(166)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Not	NN	*)	not	sg	-	-	181)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Sie	PPER	(NP*	sie	sg	fem	-	(57)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	sehn	CARD	*	sehn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(S(NP*	mein	sg	neut	-	(182|(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Leben	NN	*)	leben	sg	neut	-	182)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	(AP*	sich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ohnedem	ADV	(PP*	ohnedem	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	In	APPR	*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	diesem	PDAT	*	dieser	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Augenblicke	NN	*)	augenblick	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	lästig	ADJD	*))	lästig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gern	ADV	(VROOT(PSEUDO(S*	gern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sehr	ADV	(AVP*	sehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	gern	ADV	*)	gern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ergriff	VVFIN	*	ergreifen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	(NP*	der	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Gelegenheit	NN	*	gelegenheit	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Es	PPER	(S(VP(NP*	es	sg	neut	-	(182)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	für	APPR	(PP*	für	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ein	ART	*	ein	sg	neut	-	(183
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	andres	ADJA	*	andr	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Leben	NN	*)	leben	sg	neut	-	183)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	in	APPR	(PP*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	die	ART	*	der	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Schanze	NN	*))	schanze	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	schlagen	VVINF	*)	schlagen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	für	APPR	(PP*	für	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	ein	ART	*	ein	sg	neut	-	(183
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	andres	ADJA	*	andres	sg	neut	-	183)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	–	NN	*))	–	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	wenns	ADV	*	wenns	sg	neut	-	(183)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	auch	ADV	(NP*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	Das	ART	*	der	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	28	Leben	NN	*	leben	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	29	einer	ART	(NP*	ein	sg	fem	-	(184
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	30	Jüdin	NN	*))	jüdin	sg	fem	-	184)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	31	wäre	VAFIN	*)))	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	32	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Groß	ADJD	(VROOT(PSEUDO*	groß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Groß	ADJD	(VROOT(PSEUDO(CAP*	groß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	abscheulich	ADJD	*)	abscheulich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(S*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	sg	fem	-	(185
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Wendung	NN	*)	wendung	sg	fem	-	185)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	läßt	VVFIN	*)	lassen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Sich	PRF	(VP*	sich	sg	-	-	(185)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	denken	VVINF	*)	denken	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	(186
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bescheidne	ADJA	*	bescheidn	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Größe	NN	*)	größe	sg	-	-	186)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	flüchtet	VVFIN	*	flüchten	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Sich	PRF	*	sich	sg	-	-	(186)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	hinter	APPR	(PP*	hinter	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	das	ART	*	der	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Abscheuliche	NN	*)	abscheulich	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	um	KOUI	(VP*	um	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	der	ART	(NP*	der	sg	fem	-	(187)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Bewundrung	NN	*)	bewundrung	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	auszuweichen	VVIZU	*))	auuweichen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	(S*	aber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sie	PPER	*	sie	sg	*	-	(186)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	(NP*	der	sg	neut	-	(187
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Opfer	NN	*	opfer	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	(NP*	der	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Bewunderung	NN	*)))	bewunderung	sg	fem	-	187)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Verschmäht	NN	*	verschmäht	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	für	APPR	(PP*	für	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	ein	ART	*	ein	sg	neut	-	(188
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Opfer	NN	*	opfer	sg	neut	-	188)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	denn	ADV	*)	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	verschmäht	VVFIN	*	verschmähen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Sie	PPER	*	sie	sg	fem	-	(186)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	minder	PTKVZ	*)	minder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ritter	NN	*	ritter	pl	-	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	*	ihr	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	hier	ADV	*	hier	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	fremd	ADJD	*	fremd	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	gefangen	VVPP	*	fangen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	wäret	VVFIN	*	wäret	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	würd	VAFIN	*	würd	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Euch	PPER	*	euch	pl	*	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	So	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	dreist	ADV	*	dreist	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	fragen	VVINF	*	fragen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sagt	VVFIN	(VROOT(PSEUDO(S*	sagen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	befehlt	VVFIN	(S*	befehlen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	womit	PWAV	(S*	womit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	man	PIS	*	man	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	(VP*	euch	pl	*	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	dienen	VVINF	*))))	dienen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	*	ihr	sg	neut	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mit	APPR	(VROOT(PSEUDO(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ein	ART	(NP*	ein	sg	masc	-	(110
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	reicher	ADJA	*	reich	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Mann	NN	*))	mann	sg	masc	-	110)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(189|(190
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	reichre	ADJA	*	reichr	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Jude	NN	*)	jude	sg	masc	-	190)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Mir	NE	*	sich	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nie	ADV	*	nie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(NP*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	beßre	ADJA	*	beßren	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Jude	NN	*))))	jude	sg	masc	-	189)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dürft	VVFIN	(VROOT(PSEUDO(S*	dürft	-	-	-	(191
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	(VP*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Darum	PROAV	*	darum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nützen	VVINF	*	nützen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	dem	ART	(NP*	der	sg	neut	-	(189)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	ungeachtet	APPR	(PP*	ungeachtet	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Er	PPER	*))	er	sg	masc	-	(190)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Beßres	NN	*))	beßr	sg	neut	-	(105)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	hat	VAFIN	*)	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	nicht	PTKNEG	(VROOT(PSEUDO(VP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	seinen	PPOSAT	(NP*	sein	sg	masc	-	(105|(190)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Reichtum	NN	*)	reichtum	sg	masc	-	105)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nützen	VVINF	*)))	nützen	-	-	-	191)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S(AP*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	gut	ADJD	*	gut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	(S*	der	sg	neut	-	(191)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	auch	ADV	*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	(VP(AVP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	ganz	ADV	*)	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	verreden	VVINF	*)))	verreden	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Um	APPR	(PP*	um	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	meines	PPOSAT	*	mein	sg	masc	-	(192|(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Mantels	NN	*	mantel	sg	masc	-	192)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	willen	APZR	*)	willen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sobald	KOUS	*	sobald	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	*	der	sg	masc	-	(192)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ganz	ADV	*	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	gar	ADV	*	gar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	verschlissen	VVPP	*	verschlissen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	weder	KON	*	weder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Stich	NN	*	stich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Noch	NE	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Fetze	NE	*	fetz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	länger	ADJD	*	lang	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	halten	VVINF	*	halten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	komm	VVIMP	*	kommen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	borge	VVFIN	*	borgen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	bei	APPR	*	bei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	zu	APPR	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	einem	ART	*	ein	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	neuen	ADJA	*	neu	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	Tuch	NN	*	tuch	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	28	oder	KON	*	oder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	29	Geld	NN	*	geld	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	30	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Seht	VVFIN	(S*	seht	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	eins	CARD	*))	eins	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	(S(ISU*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	finster	ADJD	*))	finster	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(S*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	sicher	ADJD	(AP*	sicher	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	(AVP(AVP*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ists	ADV	*)	ist	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*))	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	weit	ADJD	*	weit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ihm	PPER	*)))	ihm	sg	masc	-	(192)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	seht	VVFIN	*	sehen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	(S*	er	sg	masc	-	(192)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	(AVP*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ziemlich	ADV	*)	ziemlich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	noch	ADV	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Im	APPRART	(PP*	in	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Stande	NN	*)))	stand	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S(NP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	*	der	sg	fem	-	(193
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	eine	ART	(NP*	ein	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Zipfel	NN	*))	zipfel	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	da	ADV	*	da	-	-	-	193)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	einen	ART	(NP*	ein	sg	masc	-	(194
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	garstgen	ADJA	*	garstg	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Fleck	NN	*)	fleck	sg	masc	-	194)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	er	PPER	(S*	er	sg	masc	-	(193)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	versengt	VVPP	*))	versengen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(194)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	bekam	VVFIN	*	bekommen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(192)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	als	KOUS	(S*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Eure	PPOSAT	(NP*	euer	sg	-	-	(2|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Tochter	NN	*)	tochter	*	*	-	2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Durchs	APPRART	(PP*	durch	sg	masc	-	(175
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Feuer	NN	*)	feuer	sg	neut	-	175)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	trug	VVFIN	*))	tragen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*))	nathan	-	-	-	(1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(CO(S*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nach	APPR	(PP*	nach	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	dem	ART	*	der	sg	neut	-	(193
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Zipfel	NN	*)	zipfel	sg	neut	-	193)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	greift	VVFIN	*)	greifen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ihn	PPER	(S*	ihn	sg	masc	-	(193)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	betrachtet	VVFIN	*))	betrachten	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(AP*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	sonderbar	ADJD	*	sonderbar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	(194
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ein	ART	(NP*	ein	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	böser	ADJA	*	böse	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Fleck	NN	*)	fleck	sg	masc	-	194)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	so	ADV	*	so	-	-	-	(194
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	ein	ART	(NP*	ein	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Brandmal	NN	*	brandmal	sg	neut	-	194)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Dem	ART	(NP*	der	sg	neut	-	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Mann	NN	*))	mann	sg	-	-	152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	ein	ART	(NP*	ein	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	beßres	ADJA	*	beßr	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Zeugnis	NN	*)	zeugnis	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	redet	VVFIN	*	reden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	als	APPR	(PP*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	Sein	NN	*	sein	sg	masc	-	(195|(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	eigner	ADJA	(NP*	eign	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	Mund	NN	*))))))	mund	sg	masc	-	195)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CS(S*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	möcht	VMFIN	*	möchen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(196|(194)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	küssen	VMFIN	*)	küssen	-	-	-	196)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	gleich	ADV	(S*	gleich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	–	NN	(NP*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Den	ART	(NP*	der	pl	masc	-	(194
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Flecken	NN	*))))	flecken	pl	masc	-	194)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	(S*	ah	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	verzeiht	VVFIN	*)	verzeihen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	tat	VVFIN	*	taten	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(196)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ungern	ADV	*)	ungern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Eine	ART	*	ein	sg	fem	-	(197
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Träne	NN	*	träne	sg	fem	-	197)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	fiel	VVFIN	*	fallen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	darauf	PROAV	*	darauf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Tut	XY	*	tut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	fem	-	(197
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Tropfen	NN	*	tropfen	pl	masc	-	197)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mehr	ADV	*))	mehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	(	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Bald	ADV	*	bald	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	*	aber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	fängt	VVFIN	*	fangen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Mich	PPER	*	mich	sg	masc	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	dieser	PDAT	*	dieser	sg	masc	-	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Jud	NN	*	jud	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	an	APPR	*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	verwirren	VVINF	*	verwirren	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	)	$(	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wär	XY	*	sein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	t	XY	*	T	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	gut	ADJD	*	gut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	schicktet	VVFIN	*	schickten	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Euern	NN	*	euer	-	-	-	(192|(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Mantel	NE	*	mantel	sg	fem	-	192)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Auch	ADV	*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	einmal	ADV	*	einmal	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	meinem	PPOSAT	*	mein	sg	masc	-	(2|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Mädchen	NN	*	mädchen	sg	masc	-	2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	damit	PROAV	*	damit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(VP(NP*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihren	PPOSAT	*	ihr	sg	masc	-	(198|(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mund	NN	*	mund	sg	masc	-	198)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	diesen	PDAT	*	dieser	sg	masc	-	(194
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Fleck	NN	*))	fleck	sg	masc	-	194)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	drücken	VVINF	*))	drücken	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Eure	PPOSAT	(VP(NP*	euer	-	-	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Kniee	NN	*)	kniee	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	selber	ADV	*	selber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	umfassen	VVINF	*))	umfassen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Wünscht	VVFIN	*	wünscht	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	nun	ADV	*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	vergebens	ADV	*)	vergebens	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	(VROOT(PSEUDO(NP*	aber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Jude	NN	(NP*	jude	sg	fem	-	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	–	CARD	*))	–	pl	-	-	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	(S*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	heißet	VVFIN	*	heißen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Nathan	NE	*)	nathan	-	-	-	(173)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	*	aber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*	nathan	-	-	(PER*)	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	–	CARD	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Setzt	VVFIN	*	setzen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Eure	PPOSAT	*	euer	pl	neut	-	(199|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Worte	NN	*	wort	pl	neut	-	199)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	sehr	ADV	*	sehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	–	ADJD	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	sehr	ADV	*	sehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	gut	ADJD	*	gut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	–	ADJD	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	sehr	ADV	*	sehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	spitz	ADJD	*	spitz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	–	$(	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	betreten	VVPP	*	betreten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	–	$(	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	Allerdings	ADV	*	allerdings	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	–	$(	*	–	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	hätte	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Stellt	NN	(VROOT(PSEUDO(S*	stellen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	verstellt	VVFIN	(S*	verstellen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	*	ihr	pl	*	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	wollt	VMFIN	*)))	wollen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	find	VVFIN	*	find	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Auch	ADV	*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	hier	ADV	*	hier	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	pl	*	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	aus	PTKVZ	*	aus	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wart	VVFIN	*	sein	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKA	(AA*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	gut	ADJD	*)	gut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	bieder	ADJD	*)	bieder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Um	KOUI	(VP*	um	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	höflicher	ADJD	*	höflich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	sein	VAINF	*)))	sein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	ART	(NP*	der	sg	neut	-	(2
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mädchen	NN	*	mädchen	sg	neut	-	2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ganz	ADV	(S(CNP(NP*	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Gefühl	NN	*)	gefühl	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	(NP*	der	sg	masc	-	(0
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	weibliche	ADJA	*	weiblich	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Gesandte	NN	*)	gesandter	pl	*	-	0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ganz	ADV	(NP*	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Dienstfertigkeit	NN	*))	dienstfertigkeit	sg	fem	-	(200)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	der	ART	(NP*	der	sg	masc	-	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Vater	NN	*)	vater	sg	masc	-	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	weit	ADJD	*	weit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	entfernt	ADJD	*	entfernt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	–	$.	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Ihr	PPER	(S*	ihr	pl	*	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	trugt	VVFIN	*	trugen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	für	APPR	(PP*	für	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	ihren	PPOSAT	*	ihr	sg	masc	-	(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	guten	ADJA	*	gut	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	Namen	NN	*))))	name	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	Sorge	NN	*	sorge	sg	fem	-	(201)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	Floht	VVFIN	(CS(S*	floht	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	28	ihre	PPOSAT	(NP*	ihr	sg	fem	-	(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	29	Prüfung	NN	*))	prüfung	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	30	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	31	floht	VVFIN	(S*	flohen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	32	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	33	um	KOUI	(VP*	um	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	34	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	35	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	36	siegen	VVINF	*))))	siegen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	37	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dafür	PROAV	*	dafür	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	dank	APPR	*	dank	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	pl	*	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	–	XY	*	–	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	gestehn	VVPP	(VP*	gestehn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	(S*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	wißt	VVFIN	*	wissen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Tempelherren	NN	*	tempelherr	pl	fem	-	(57)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	denken	VVINF	*	denken	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	sollten	VMFIN	*))))	sollen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(NP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherren	NN	*)	tempelherr	pl	fem	-	(57)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	sollten	VMFIN	*	sollen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bloß	ADV	*	bloß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bloß	ADV	(AVP*	bloß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Weil	KOUS	(S*	weil	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	die	ART	(NP*	der	pl	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ordensregeln	NN	*)))	ordensregel	pl	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	gebieten	VVFIN	*)	gebieten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	gute	ADJA	(NP*	gut	pl	masc	-	(42
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Menschen	NN	*)	mensch	pl	masc	-	42)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	denken	VVINF	*	denken	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	weiß	VVFIN	(S*	weiß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	alle	PIAT	(NP*	aller	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Länder	NN	*)	land	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	gute	ADJA	(VP(NP*	gut	pl	masc	-	(42
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Menschen	NN	*)	mensch	pl	masc	-	42)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	tragen	VVINF	*)))))	tragen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mit	APPR	(VROOT(PSEUDO(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Unterschied	NN	*	unterschied	sg	-	-	(202)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	(AP*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	hoffentlich	ADJD	*))	hoffentlich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	An	APPR	*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Farb	NN	*	farb	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	an	APPR	*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Kleidung	NN	*	kleidung	sg	fem	-	(203)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	an	APPR	*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Gestalt	NN	*	gestalt	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	verschieden	VVPP	*	verschieden	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(S(AVP*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hier	ADV	*)	hier	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	bald	ADV	*	bald	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	ADV	*	mehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	bald	ADV	(NP*	bald	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	weniger	PIS	*	weniger	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	als	KOKOM	(AVP*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	dort	ADV	*)))	dort	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mit	APPR	(VROOT(PSEUDO(AP(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	diesem	PDAT	*	dieser	sg	masc	-	(202
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Unterschied	NN	*	unterschied	sg	masc	-	202)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ists	ADV	*)	ists	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	weit	ADJD	*	weit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	her	ADV	*)	her	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(CS(S(NP*	der	sg	masc	-	(186
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	große	ADJA	*	groß	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mann	NN	*)	mann	sg	masc	-	186)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	braucht	VVFIN	*	brauchen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	überall	ADV	(NP(AP*	überall	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	viel	PIAT	*)	viel	*	*	-	(204
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Boden	NN	*	boden	sg	masc	-	204)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Und	KON	(VP*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	mehrere	PIAT	(AP*	mehrere	pl	neut	-	(186)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKA	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	nah	ADJD	*)	nah	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	gepflanzt	VVPP	*)))	pflanzen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	zerschlagen	VVFIN	(S*	zerschlagen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Sich	PRF	*	sich	pl	-	-	(186)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	die	ART	(NP*	der	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Äste	NN	*)))	äst	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mittelgut	ADJD	(VROOT(PSEUDO(S(AP*	mittelgut	-	-	-	(205)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wir	PPER	*))	wir	pl	*	-	(164)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Findt	VVFIN	*	findt	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	*	sich	sg	-	-	(205)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	hingegen	ADV	*	hingegen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	überall	ADV	(PP*	überall	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	in	APPR	*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Menge	NN	*))	menge	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(205
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	eine	PIS	*)	ein	sg	masc	-	205)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	den	ART	(VP(NP*	der	pl	masc	-	(205
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	andern	PIS	*)	anderer	-	-	-	205)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	mäkeln	VVINF	*))	mäkeln	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(205
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Knorr	NN	*)	knorr	sg	masc	-	205)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	(VP(NP*	der	sg	masc	-	(205
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Knuppen	NN	*)	knuppe	sg	masc	-	205)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	hübsch	ADJD	*	hübsch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	vertragen	VVINF	*))	vertragen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	neut	-	(205
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Gipfelchen	NN	*)	gipfelchen	sg	neut	-	205)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	sich	PRF	*	sich	sg	-	-	(205)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	vermessen	VVINF	(VP*	vermessen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	es	PPER	*	es	sg	neut	-	(205)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	allein	ADV	(VP*	allein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	der	ART	(NP*	der	sg	fem	-	(107
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Erde	NN	*)	erde	sg	fem	-	107)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	entschossen	VVPP	*))))	entschießen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sehr	ADV	(VROOT(PSEUDO(VP*	sehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	gesagt	VVPP	*)	sagen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(S*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	sg	fem	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*)	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	(NP*	der	sg	neut	-	(142
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Volk	NN	*	volk	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	142)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Das	KOUS	(S*	der	sg	neut	-	(142)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	diese	PDAT	(NP*	dieser	sg	fem	-	(206
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Menschenmäkelei	NN	*)	menschenmäkelei	sg	fem	-	206)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	erst	ADV	(AP*	erst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Getrieben	NN	*))))	getrieb	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wißt	VVFIN	(VROOT(PSEUDO(S*	wißen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	(NP*	ihr	pl	*	-	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	(NP*	nathan	-	-	-	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	welches	PWAT	(S(NP*	welcher	sg	neut	-	(207
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Volk	NN	*)	volk	sg	neut	-	207)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Zu	PPER	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	erst	ADV	(NP*	erst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	das	ART	*	der	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	auserwählte	ADJA	*	auserwählt	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Volk	NN	*)	volk	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	sich	PRF	*	sich	sg	-	-	(207)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	nannte	VVFIN	*))))	nennen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	dieses	PDAT	(NP*	dieser	sg	neut	-	(142
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Volk	NN	*)	volk	sg	neut	-	142)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	(AVP*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	zwar	ADV	*	zwar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	haßte	VVFIN	*	hassen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Doch	KON	(S*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	wegen	APPR	(VP(PP*	wegen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	seines	PPOSAT	*	sein	sg	masc	-	(208|(142)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Stolzes	NN	*)	stolz	sg	masc	-	208)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	verachten	VVINF	*))	verachten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Mich	PPER	(S*	mich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	entbrechen	VVINF	*	entbrechen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	könnte	VMFIN	*)))	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Seines	PPOSAT	(VROOT(PSEUDO(DL(NP*	sein	sg	masc	-	(208|(142)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Stolzes	NN	*)	stolz	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	208)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Den	VAFIN	(S*	der	sg	masc	-	(208)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*	es	sg	neut	-	(142)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Christ	NE	(CNP*	christ	sg	masc	-	(43)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Muselmann	NE	*))	muselmann	sg	*	-	(118)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	vererbte	VVFIN	*	vererben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Nur	ADV	(S(NP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	sein	PPOSAT	*	sein	sg	masc	-	(103|(142)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Gott	NN	*)	gott	sg	masc	(PER*)	103)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	sei	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	der	ART	(NP*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	rechte	ADJA	*	rechter	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Gott	NN	*))))	gott	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	(S*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	stutzt	VVFIN	*)	stutzen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ein	ART	(NP*	ein	sg	masc	-	(209
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Christ	NN	*)	christ	sg	masc	-	209)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	ein	ART	(NP*	ein	sg	masc	-	(210
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Tempelherr	NN	*)	tempelherr	sg	masc	-	210)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	rede	VVFIN	*)	reden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	wo	PWAV	*	wo	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	(VP(NP*	der	sg	fem	-	(211
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	fromme	ADJA	*	fromm	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Raserei	NN	*	raserei	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	211)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Den	NE	*)	der	pl	masc	-	(212
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	bessern	VVINF	*)	bessern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Gott	NN	(VP*	gott	-	-	-	212)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	haben	VAINF	*))	haben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	diesen	PDS	(VP(S*	dieser	pl	masc	-	(212
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	bessern	VVFIN	*	bessern	-	-	-	212)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Der	ART	(NP*	der	sg	fem	-	(107
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	ganzen	ADJA	*	ganz	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Welt	NN	*)	welt	sg	fem	-	107)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	als	APPR	(PP*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	besten	ADJA	*))	gut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	aufzudringen	VVIZU	*	aufdringen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	In	APPR	(S(PP*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	ihrer	PPOSAT	*	ihr	sg	fem	-	(211)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	schwärzesten	ADJA	*	schwarz	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	Gestalt	NN	*)	gestalt	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	28	sich	PRF	*	sich	sg	-	-	(211)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	29	mehr	PIAT	(NP*	mehr	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	30	Gezeigt	NN	*)	gezeigt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	31	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	32	als	KOKOM	(AVP*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	33	hier	ADV	*)	hier	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	34	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	35	als	KOKOM	(AP*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	36	itzt	ADJD	*)))))	itzt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	37	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wem	PWS	(VROOT(PSEUDO(S*	wem	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hier	ADV	*	hier	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wem	PWS	*	wem	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	itzt	VVFIN	*	itzen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Die	ART	(NP*	der	pl	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Schuppen	NN	*)	schuppe	pl	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	vom	APPRART	(VP(PP*	von	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Auge	NN	*)	auge	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	fallen	VVINF	*))	fallen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Doch	KON	(S*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Sei	NN	*	sei	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	blind	ADJD	*	blind	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	wer	PWS	(S*	wer	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	will	VMFIN	*))	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Vergeßt	VVPP	*	vergeßt	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	gesagt	VVPP	*	sagen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	laßt	VVIMP	*	lassen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	mich	PRF	*	mich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Will	VMFIN	*	wollen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	gehen	VVINF	*	gehen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ha	XY	*	ha	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wißt	VVFIN	*	wissen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	wie	PWAV	(S(AVP*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	viel	ADV	*)	viel	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	fester	ADJD	*))	fest	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ich	PPER	(S*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nun	ADV	*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	mich	PRF	(VP*	mich	sg	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	an	APPR	(PP*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Euch	PPER	*)	euch	pl	*	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	drängen	VVINF	*)	drängen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	werde	VAFIN	*)	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kommt	VVFIN	(S*	kommen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Wir	PPER	*	wir	pl	*	-	(164)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	müssen	VMFIN	*)	müssen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	müssen	VMFIN	(S*	müssen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Freunde	NN	(VP*	freund	pl	masc	-	(213)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	sein	VAINF	*))	sein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Verachtet	VVFIN	*	verachten	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mein	PPOSAT	(S(NP*	mein	sg	neut	-	(142|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Volk	NN	*)	volk	sg	neut	-	142)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	(AVP*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	sehr	ADV	*)	sehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	*	ihr	pl	*	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	wollt	VMFIN	*)	wollen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wir	PPER	(VROOT(PSEUDO(S*	wir	pl	*	-	(164)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	haben	VAFIN	*	haben	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	beide	PIAT	(VP(NP*	beide	pl	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Uns	NN	*)	uns	pl	*	-	(164)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	unser	PPOSAT	(NP*	unser	sg	neut	-	(207
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Volk	NN	*)	volk	sg	neut	-	207)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	auserlesen	VVINF	*))	auserlesen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sind	VAFIN	(VROOT(PSEUDO(S*	sein	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wir	PPER	(NP*	wir	pl	*	-	(164)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	unser	PPOSAT	*	unser	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Volk	NN	*))	volk	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	heißt	VVFIN	*	heißen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Volk	NN	*)	volk	sg	neut	-	(207)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sind	NE	(VROOT(PSEUDO(NP*	sein	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Christ	NN	(CNP*	christ	sg	masc	-	(43)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Jude	NN	*)	jude	sg	masc	-	(101)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	eher	ADV	(NP*	eher	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Christ	NN	(CNP*	christ	-	-	-	(45)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Jude	NN	*))	jude	sg	-	-	(214)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Als	APPR	(PP*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Mensch	NN	*))	mensch	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	einen	PIS	(NP*	ein	sg	masc	-	(215|(216
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	ADV	*)	mehr	-	-	-	216)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	(NP(PP*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*)	euch	pl	*	-	215)|(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Gefunden	NN	*)	gefunde	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	hätte	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	dem	PRELS	(S*	der	sg	masc	-	(216)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	es	PPER	*	es	sg	neut	-	(217)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	gnügt	VVFIN	*	gnügen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	ein	ART	(VP(NP*	ein	sg	masc	-	(217
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Mensch	NN	*)	mensch	sg	masc	-	217)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	heißen	VVINF	*))))	heißen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S(S*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Gott	NN	*))	gott	sg	masc	(PER*)	(218)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	das	PDS	*	der	sg	neut	-	(215)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	habt	VAFIN	*	haben	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ihr	PPER	(NP*	ihr	pl	*	-	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Nathan	NE	*	nathan	-	-	-	1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	*	der	sg	neut	-	(215)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	habt	VAFIN	*	haben	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Eure	PPOSAT	(NP*	euer	sg	fem	-	(219|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Hand	NN	*)	hand	sg	fem	-	219)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	schäme	VVFIN	*	schämen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PRF	*	mich	sg	-	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	einen	ART	(VP(VP(NP*	ein	sg	masc	-	(220
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Augenblick	NN	*)	augenblick	sg	masc	-	220)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	verkannt	VVPP	*)	verkennen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	haben	VAINF	*)))	haben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	stolz	ADJD	(AVP*	stolz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	darauf	PROAV	*))	darauf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(AP(NP(PP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	ART	*	der	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Gemeine	NN	*	gemein	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Verkennt	NN	*)	verkennen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	man	PIS	*)	man	sg	*	-	(166)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	selten	ADJD	*)	selten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(AP(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	ART	(NP*	der	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Seltene	NN	*)	seltener	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vergißt	VVFIN	*	vergissen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	man	PIS	*)	man	sg	*	-	(166)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	schwerlich	ADJD	*)	schwerlich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*	nathan	-	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Wir	PPER	(S*	wir	pl	*	-	(164)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	müssen	VMFIN	*	müssen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	müssen	VMFIN	(S*	müssen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Freunde	NN	(VP*	freund	pl	masc	-	(213)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	werden	VAINF	*)))	werden	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sind	VAFIN	(VROOT(PSEUDO(S*	sein	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	*	es	sg	neut	-	(213)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	schon	ADV	*)	schon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	sich	PRF	(VP*	sich	sg	-	-	(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	meine	PPOSAT	(NP*	mein	sg	fem	-	(2|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Recha	NN	*)	recha	sg	fem	-	2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	freuen	VVINF	*))	freuen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(CNP*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ah	XY	*)	ah	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	welch	PWAT	(VROOT(PSEUDO(S(NP(AP*	welcher	-	-	-	(221
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	eine	ART	*	ein	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	heitre	ADJA	*)	heitr	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ferne	NN	*)	ferne	sg	fem	-	221)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	schließt	VVFIN	*	schließen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Sich	PRF	*	sich	sg	-	-	(221)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	meinen	PPOSAT	(NP*	mein	pl	neut	-	(222|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Blicken	NN	*)	blick	pl	fem	-	222)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	auf	PTKVZ	*)	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kennt	VVFIN	(S*	kennt	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*)	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	erst	ADV	*	erst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	brenne	VVFIN	*	brennen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	vor	APPR	(PP*	vor	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Verlangen	NN	*	verlangen	pl	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	–	CARD	*)	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Wer	PWS	(NP(AVP(S*	wer	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	stürzt	VVFIN	*)	stürzen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	dort	ADV	*	dort	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Aus	APPR	(AP(PP*	aus	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Euerm	NN	*)))	euerm	*	*	-	(149|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Hause	NN	*))	haus	sg	neut	-	149)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ists	ADV	(VROOT(PSEUDO(S*	ist	-	-	-	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihre	PPOSAT	(NP*	ihr	sg	fem	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Daja	NE	*	daja	sg	fem	(PER*)	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S(ISU*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ängstlich	ADJD	*))	ängstlich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Unsrer	NE	(VROOT(PSEUDO(S(MPN*	unsrer	*	*	-	(2|(164)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Recha	NE	*)	recha	sg	neut	(PER*)	2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Doch	NE	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	(VP*	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	begegnet	VVPP	*))	begegnen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(AP(NP*	der	pl	*	-	(164
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Vorigen	NN	(CNP*	vorige	pl	*	-	164)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Daja	NE	*))	daja	-	-	(PER*)	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	eilig	ADJD	*)	eilig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(MPN*	nathan	-	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(MPN*	nathan	-	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Verzeihet	VVPP	(VROOT(PSEUDO(S(CVP*	verzeihet	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	edler	ADJA	(VP(NP*	edel	pl	masc	-	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ritter	NN	*	ritter	pl	masc	-	152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	*	euch	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Muß	VMFIN	*))	müssen	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	unterbrechen	VVINF	*)))	unterbrechen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ists	ADV	*	ists	-	-	-	(223)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ists	ADV	*	ist	-	-	-	(223)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sultan	NN	*)	sultan	sg	masc	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	geschickt	VVPP	*)	schicken	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sultan	NN	*)	sultan	sg	masc	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	(VP*	euch	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	sprechen	VVINF	*))	sprechen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gott	NN	(VROOT(PSEUDO(NP*	gott	sg	masc	(PER*)	(218)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sultan	NN	*))	sultan	sg	masc	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mich	PPER	*	mich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sultan	NN	*)	sultan	sg	masc	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	begierig	ADJD	(VP*	begierig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	sein	VAINF	*	sein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	(VP(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	sehen	VVINF	*)	sehen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	was	PWS	(S*	was	sg	neut	-	(111)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Neues	NN	(VP*	neue	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	mitgebracht	VVPP	*)))))	mitbringen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sag	XY	(VROOT(PSEUDO*	sag	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	(S*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(111)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	sei	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Noch	ADV	(AVP*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	wenig	ADV	*))	wenig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	oder	KON	(VP*	oder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	gar	ADV	*	gar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	ausgepackt	VVPP	*)	auspacken	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	(VROOT(PSEUDO(CS(S*	nein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nein	PTKANT	(CO(S(CS(S*	nein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	(S*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nichts	PIS	(VP*	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	sehen	VVINF	*)))	sehen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	will	VMFIN	(S*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Euch	PPER	(VP*	euch	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	sprechen	VVINF	*)))	sprechen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	in	APPR	(PP*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Person	NN	*)	person	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*)	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	bald	ADV	*))	bald	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	sobald	ADV	(S*	sobald	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	könnt	VVFIN	*))	können	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	werde	VAFIN	*	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	kommen	VVINF	*	kommen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	NN	*	geh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(AVP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wieder	ADV	*)	wieder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	geh	XY	*	geh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nehmt	VVFIN	(VROOT(PSEUDO(CO(S*	nehmt	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ja	ADV	*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	übel	ADJD	*	übel	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	auf	PTKVZ	*)	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	gestrenger	ADJA	(NP*	gestreng	pl	masc	-	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ritter	NN	*))	ritter	pl	masc	-	152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	(NP*	gott	sg	masc	(PER*)	(218)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wir	PPER	(S*	wir	pl	*	-	(160)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	sind	VAFIN	*	sein	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	(VP*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	bekümmert	VVPP	*	bekümmern	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	(NP*	der	sg	masc	-	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Sultan	NE	*	sultan	sg	masc	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Doch	NE	*)	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	will	VMFIN	*))))	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(224)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	(VP*	sich	sg	-	-	(224)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	zeigen	VVINF	*))	zeigen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geh	XY	(VROOT(PSEUDO*	geh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	(S*)	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	geh	XY	*	geh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(CNP*	nathan	-	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	fem	-	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Tempelherr	NN	*))	tempelherr	sg	fem	-	152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*	ihn	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	(AVP*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	(S*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	meine	VVFIN	*	mein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Person	NN	*))	person	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Den	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Saladin	NN	*)	saladin	sg	masc	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(CO(AVP*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihn	PPER	(VP*	ihn	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	vermieden	VVPP	*	vermeiden	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(VP(VP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	gesucht	VVPP	*)	suchen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	kennen	VVINF	*))))	kennen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(225
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	allgemeine	ADJA	*	allgemein	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ruf	NN	*)	ruf	sg	masc	-	225)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	sprach	VVFIN	*	sprechen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	viel	ADV	(AP*	viel	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKA	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	gut	ADJD	*)	gut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Von	APPR	(NP(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihm	PPER	*)	ihm	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	lieber	ADV	*	lieber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	glauben	VVINF	*	glauben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	wollte	VMFIN	*))	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Als	APPR	(PP*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	sehn	CARD	*))	sehn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(CS(S*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*)	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	–	KON	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	anders	ADV	*	anders	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	dem	PDS	*	der	sg	neut	-	(226)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	–	NN	(S*	–	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Hat	VAFIN	*	haben	sg	-	-	(226
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	durch	APPR	(PP*	durch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Sparung	NN	*	sparung	sg	fem	-	(227
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Eures	NE	(MPN*	dein	sg	neut	-	(182|(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Lebens	NE	*)))))	leben	sg	neut	-	227)|182)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	226)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(S*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Dem	PDS	(S*	der	sg	neut	-	(226)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	allerdings	ADV	*	allerdings	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*))	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	*	der	sg	neut	-	(182
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Leben	NN	*	leben	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	PRELS	*	der	sg	neut	-	182)|(182)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	leb	VVFIN	*	leb	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	sein	PPOSAT	*	sein	sg	neut	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Geschenk	NN	*	geschenk	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Durch	APPR	(VROOT(PSEUDO*	durch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	ART	*	der	sg	neut	-	(227)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	(S*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ein	ART	(NP*	ein	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	doppelt	ADJD	*	doppelt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	dreifach	ADJD	*	dreifach	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Leben	NN	*)	leben	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	schenkte	VVFIN	*)	schenken	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dies	PDS	(VROOT(PSEUDO(CS(S*	dieser	sg	neut	-	(227)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	(VP*	alle	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	zwischen	APPR	(PP*	zwischen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	uns	PPER	*)	uns	pl	*	-	(228)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	verändert	VVPP	*))	verändern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	hat	VAFIN	(S*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	eins	PIS	*	einer	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	ein	ART	(NP*	ein	sg	masc	-	(229
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Seil	NN	*))	seil	sg	masc	-	229)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	mir	PPER	*	sich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	umgeworfen	VVPP	*))	umgewerfen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	das	ART	(S*	der	sg	neut	-	(229)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Mich	PPER	*	mich	sg	neut	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	seinem	PPOSAT	(NP*	sein	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Dienst	NN	*)	dienst	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	ewig	ADJD	*)	ewig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	fesselt	VVFIN	*))	fesseln	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kaum	ADV	(VROOT(PSEUDO(AVP*	kaum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Und	KON	(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	kaum	ADV	*	kaum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	es	PPER	(VP*	es	sg	neut	-	(230)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nun	ADV	*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	erwarten	VVINF	*	erwarten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	was	PWS	(S*	was	sg	neut	-	(230)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Er	PPER	(VP*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	mir	PPER	*	sich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	zuerst	ADV	*	zuerst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	befehlen	VVINF	*)	befehlen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	wird	VAFIN	*))))	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S(S*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Bereit	NN	(NP*	bereit	-	-	-	(231
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	allem	PIS	*)	alle	sg	neut	-	231)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*))	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	bereit	ADJD	*	bereit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Gestehn	NN	*)	gestehn	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	es	PPER	*	es	sg	neut	-	(231)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Euertwegen	NN	*	euertwegen	pl	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	bin	VAFIN	*))	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(S*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hab	VVFIN	*	hab	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	(NP*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	selber	ADV	*)	selber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	(VP(VP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	danken	VVINF	*)	danken	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	können	VMINF	*	können	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	So	ADV	(AVP*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	oft	ADV	*))	oft	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	(NP*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	auch	ADV	*)	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	ihm	PPER	(VP*	ihm	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	in	APPR	(PP*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	den	ART	*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Weg	NN	*)	weg	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	getreten	VVPP	*))	treten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(232
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Eindruck	NN	*	eindruck	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	den	PRELS	(S*	der	sg	masc	-	(232)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ihn	PPER	*)	ihn	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	machte	VVFIN	*))	machen	sg	-	-	232)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	kam	VVFIN	*	kommen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	So	ADV	(AP*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	schnell	ADJD	*)	schnell	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	schnell	ADJD	*	schnell	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	er	PPER	(NP*	er	sg	masc	-	(232)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	wiederum	ADV	*)	wiederum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	verschwunden	VVPP	*))	verschwinden	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S(AVP(S*	wer	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*)	weiß	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ob	KOUS	*)	ob	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	sich	PRF	(VP*	sich	sg	-	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	meiner	PIS	*	mein	sg	fem	-	(291)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	gar	ADV	*	gar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	erinnert	VVPP	*))	erinnern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dennoch	ADV	*	dennoch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	einmal	ADV	(AVP*	einmal	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	wenigstens	ADV	*)	wenigstens	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Sich	PRF	(VP*	sich	sg	fem	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	meiner	PIS	*	mein	sg	fem	-	(291)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	noch	ADV	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	erinnern	VVINF	*	erinnern	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	um	KOUI	(VP*	um	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	mein	PPOSAT	(NP*	mein	sg	neut	-	(233|(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Schicksal	NN	*	schicksal	sg	neut	-	233)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Ganz	ADV	*)	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	entscheiden	VVINF	*))))	entscheiden	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	genug	ADV	*	genug	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Auf	APPR	*	auf	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	sein	PPOSAT	*	sein	sg	neut	-	(234|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Geheiß	NN	*	geheiß	sg	neut	-	234)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	noch	ADV	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	mit	APPR	*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	seinem	PPOSAT	*	sein	sg	masc	-	(235|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Willen	NN	*	wille	sg	masc	-	235)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Noch	ADV	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	leb	VVFIN	*	leb	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	nun	ADV	*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	auch	ADV	*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	von	APPR	*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	erwarten	VVFIN	*	erwarten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	Nach	APPR	*	nach	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	wessen	PWAT	*	wessen	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	28	Willen	NN	*	wille	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	29	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	30	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	31	leben	VVINF	*	leben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	32	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	33	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(S(AVP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	anders	ADV	*)	anders	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	um	KOUI	(AVP(AVP*	um	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*)	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	ADV	*)	mehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	säumen	VVINF	*)	säumen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	(S*	es	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	fällt	VVFIN	*	fallen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	(NP*	ein	sg	neut	-	(236
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Wort	NN	*	wort	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	das	PRELS	(S*	der	sg	neut	-	(236)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	mir	PPER	(VP*	sich	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Euch	PPER	*)	euch	pl	*	-	236)|(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	kommen	VVINF	*)))))	kommen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Anlaß	NN	*	anlaß	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	gibt	VVFIN	*	geben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Erlaubt	VVFIN	*	erlauben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	verzeiht	VVFIN	*	verzeihen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	–	PPER	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	eile	PIS	*	eilen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	–	$(	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	aber	ADV	*	aber	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	sehn	CARD	*	sehn	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	wir	PPER	*	wir	pl	*	-	(237)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Euch	PRF	*	euch	pl	*	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Bei	APPR	*	bei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	uns	PPER	*	uns	pl	*	-	(237)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bald	ADV	*	bald	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	darf	VMFIN	*)	dürfen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bald	ADV	*	bald	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wollt	VMFIN	*)	wollen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(S*)	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	heut	VVFIN	*	heuen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Euer	PPOSAT	(NP*	euer	sg	*	-	(238|(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Name	NN	*))	name	sg	*	-	238)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	(S*	müssen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	(VP*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	bitten	VVINF	*))	bitten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(CS(S(NP*	mein	sg	masc	-	(238|(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Name	NN	*)	name	sg	masc	-	238)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	–	ADJD	*)	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	(S*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Curd	NE	*	curd	sg	masc	-	(239
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Stauffen	NN	*)))	stauffen	pl	masc	-	239)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Curd	NE	*	curd	-	-	-	(239)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	(VROOT(PSEUDO(PP*	von	-	-	-	(238
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Stauffen	NN	*)	stauffen	pl	masc	-	238)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Stauffen	NN	*	stauffen	-	-	-	(238)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Stauffen	NN	*	stauffen	-	-	-	(238)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Warum	PWAV	(VROOT(PSEUDO(S*	warum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	fällt	VVFIN	*	fallen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	sg	neut	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*	der	sg	neut	-	(238)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	auf	PTKVZ	*)	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	(VROOT(PSEUDO(PP*	von	-	-	-	(240
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Stauffen	NN	*)	stauffen	pl	masc	-	240)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Des	ART	(S(NP*	der	-	-	-	(240
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Geschlechts	NN	*)	geschlecht	-	-	-	240)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sind	VAFIN	*	sein	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	schon	ADV	*)	schon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	mehrere	PIS	*	mehrere	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(AVP(S*)	O	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ja	ADV	*)	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	hier	ADV	(VROOT(PSEUDO(S*	hier	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	waren	VAFIN	*	sein	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Hier	ADV	(S*	hier	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	faulen	VVFIN	*	faulen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	des	ART	(NP*	der	sg	masc	-	(240
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Geschlechts	NN	*)	geschlecht	sg	masc	-	240)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	schon	ADV	*	schon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	mehrere	VVFIN	*))	mehrere	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(S(NP*	mein	sg	neut	-	(241|(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Oheim	NE	*	oheim	sg	neut	-	241)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	–	NN	(NP*	–	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	mein	PPOSAT	(NP*	mein	sg	masc	-	(241|(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Vater	NN	*)))	vater	sg	masc	-	241)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	(VP*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	sagen	VVINF	*))	sagen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Doch	NE	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	warum	PWAV	(S*	warum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	schärft	VVFIN	*)	schärfen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	sich	PRF	(NP(AP*	sich	sg	-	-	(222)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Euer	ADJA	*)	euer	sg	*	-	(222|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Blick	NN	*	blick	-	-	-	222)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	mich	PPER	*))	mich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	Je	ADV	(AVP*	je	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	mehr	ADV	*)	mehr	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	und	KON	(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	mehr	ADV	*)	mehr	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	XY	*	O	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	o	XY	*	O	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	(VP*	euch	pl	*	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	sehn	CARD	*)	sehn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ermüden	VVINF	*))	ermüden	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(152
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	152)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Drum	ADV	(VROOT(PSEUDO(S*	drum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	verlaß	VVFIN	*	verlaß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	sg	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	zuerst	ADV	*)	zuerst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Blick	NN	*	blick	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	des	ART	(NP*	der	sg	masc	-	(242
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Forschers	NN	*))	forscher	sg	masc	-	242)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	fand	VVFIN	*	finden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Nicht	NN	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	selten	ADJD	(NP*	selten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	mehr	PIS	*	mehr	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	als	KOKOM	(VP(NP*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	er	PPER	*)	er	sg	masc	-	(242)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	finden	VVINF	*)))	finden	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	wünschte	VVFIN	*)	wünschen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	fürcht	VVFIN	*	fürchen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*	ihn	sg	masc	-	(222)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Nathan	NE	*	nathan	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laßt	VVIMP	(VROOT(PSEUDO(CS(S*	lassen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	(NP*	der	sg	fem	-	(243
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Zeit	NN	*)	zeit	sg	fem	-	243)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	allmählig	ADJD	*)	allmählig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Und	KON	(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	(NP*	der	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Neugier	NN	*)	neugier	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	unsre	ADJA	(NP*	unsr	sg	fem	-	(164)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Kundschaft	NN	*)	kundschaft	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	machen	VVINF	*)))	machen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	geht	VVFIN	*)	gehen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*))	nathan	-	-	-	(1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(S*	der	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihm	PPER	*	ihm	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Erstaunen	NN	*)	erstaunen	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nachsieht	VVFIN	*)	nachsehen	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	»	XY	(VROOT(PSEUDO*	»	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	(PP*	der	sg	masc	-	(242
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Forscher	NN	*	forscher	sg	masc	-	242)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	fand	VVFIN	(NP(S*	finden	sg	-	-	(244)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	selten	ADJD	*))	selten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	mehr	ADV	(PP*	mehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	er	PPER	(VP*	er	sg	masc	-	(242)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	finden	VVINF	*))	finden	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	wünschte	VVFIN	*))	wünschen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	«	XY	*))	«	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(245)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	als	KOKOM	*	als	-	-	-	(245
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ob	KOUS	*	ob	-	-	-	245)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	In	APPR	*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	meiner	PPOSAT	*	mein	sg	fem	-	(138|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Seel	NN	*	seel	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	138)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	er	PPER	*	er	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	lese	VVFIN	*	lesen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wahrlich	NN	(NP*	wahrlich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	*)	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Das	PDS	(S*	der	sg	neut	-	(244)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	könnt	VVFIN	*	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	auch	ADV	*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	mir	PPER	*	sich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	begegnen	VVFIN	*)	begegnen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nicht	PTKNEG	(NP(AVP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	allein	ADV	*)	allein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Wolfs	NE	(MPN*	wolf	sg	masc	-	(246)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Wuchs	NE	*)	wuchs	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Wolfs	NE	*)	wolf	sg	masc	(PER*)	(167|(246)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Gang	NN	*	gang	sg	masc	-	167)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	auch	ADV	(NP*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	seine	PPOSAT	*	sein	sg	fem	-	(247|(246)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Stimme	NN	*)	stimme	sg	fem	-	247)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Vollkommen	NN	*	vollkommen	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	warf	VVFIN	*	werfen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Wolf	NE	*	wolf	sg	*	(PER*)	(246)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	sogar	ADV	*	sogar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	den	ART	*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Kopf	NN	*	kopf	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Trug	NN	*	trug	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Wolf	NE	*	wolf	-	-	(PER*)	(246)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	sogar	ADV	*	sogar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	das	ART	*	der	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Schwerd	NN	*	schwerd	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	im	APPRART	*	in	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Arm	NN	*	arm	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	strich	VVFIN	*	streichen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	Wolf	NE	*	wolf	-	-	(PER*)	(246)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	Sogar	NE	*	sogar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	die	ART	*	der	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	Augenbraunen	NN	*	augenbraune	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	mit	APPR	*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	der	ART	*	der	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	Hand	NN	*	hand	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	28	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	29	Gleichsam	NN	*	gleichsam	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	30	das	ART	*	der	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	31	Feuer	NN	*	feuer	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	32	seines	PPOSAT	*	sein	sg	neut	-	(246)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	33	Blicks	NN	*	blick	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	34	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	35	bergen	VVINF	*	bergen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	36	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	solche	PIAT	(NP*	solcher	sg	fem	-	(248
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	tiefgeprägte	ADJA	*	tiefgeprägt	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Bilder	NN	*)	bild	pl	neut	-	248)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Zeiten	NN	*)	zeit	pl	fem	-	(74)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	in	APPR	(VP(PP*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	uns	PPER	*)	uns	pl	*	-	(166)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	schlafen	VVINF	*)	schlafen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	können	VMFIN	*)	können	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	bis	APPR	*	bis	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Ein	ART	(NP*	ein	sg	neut	-	(249
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Wort	NN	*	wort	sg	neut	-	249)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	ein	ART	(S(NP*	ein	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Laut	NN	*)	laut	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	sie	PPER	*	sie	sg	fem	-	(248)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	weckt	VVFIN	*))	wecken	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Von	APPR	*	von	-	-	-	(240
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Stauffen	NN	*	stauffen	pl	masc	-	240)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ganz	NN	*	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	recht	ADJD	(CS*	recht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ganz	ADV	(S(NP*	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	recht	NN	*)	recht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Filneck	NN	(CNP*	filneck	-	-	-	(246)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Stauffen	NN	*)))	stauffen	-	-	-	(250)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	(VP(AP(AVP*	der	sg	neut	-	(251)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	bald	ADV	*)	bald	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	genauer	ADJD	*)	genau	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	wissen	VVINF	*))	wissen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	bald	ADV	*	bald	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(PP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	erst	ADV	*	erst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	zum	APPRART	*	zu	-	-	-	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Saladin	NN	*)	saladin	-	-	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wie	PWAV	*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	lauscht	VVFIN	(VROOT(PSEUDO(S*	lauschen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dort	ADV	*	dort	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Daja	NE	*	daja	-	-	-	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(AVP*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*)	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	komm	VVIMP	(S*	komm	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	näher	ADJD	*)	nah	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Daja	NE	*	daja	-	-	(PER*)	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daja	NE	(VROOT(PSEUDO*	daja	-	-	(PER*)	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO*	nathan	-	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	gilts	ADV	*	gilt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	nun	ADV	*	nun	-	-	-	(252
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	drückts	ADV	*	drückt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	euch	PPER	*	euch	pl	*	-	(160)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	beiden	PIS	*	beide	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*	schon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	*	der	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Herz	NN	*	herz	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	252)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Noch	ADV	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	ganz	ADV	*	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	was	PIS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	anders	ADV	*	anders	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	erfahren	VVINF	*	erfahren	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	als	KOKOM	*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Was	PWS	*	was	sg	neut	-	(224
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Saladin	NN	*	saladin	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	mir	PPER	*	sich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	will	VMFIN	*	wollen	sg	-	-	224)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Verdenkt	NN	*	verdenken	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihrs	NE	*	ihr	pl	-	-	(292)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	fingt	VVFIN	*	fingen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	eben	ADV	*	eben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	an	PTKVZ	*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	vertraulicher	ADJA	(NP*	vertraulich	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Mit	NN	*)	mit	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihm	PPER	(VP*	ihm	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	sprechen	VVINF	*)	sprechen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	als	APPR	(PP*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	des	ART	*	der	sg	neut	-	(253|(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Sultans	NE	(MPN*	sultan	sg	neut	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Botschaft	NE	*	botschaft	sg	neut	-	253)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Uns	NE	*)))	uns	sg	neut	-	(160)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	dem	ART	*	der	sg	neut	-	(163
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Fenster	NN	*)	fenster	sg	neut	-	163)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	scheuchte	VVFIN	*)	scheuchen	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S(AVP*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*)	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	sag	VVFIN	*	sag	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	(NP*	ihr	sg	masc	-	(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	sie	PPER	*	sie	pl	*	-	(2)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihn	PPER	*	ihn	sg	masc	-	(152)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	jeden	PIAT	(VP(NP*	jeder	sg	masc	-	(254
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Augenblick	NN	*)	augenblick	sg	masc	-	254)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Erwarten	VVINF	*)	erwarten	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	darf	VMFIN	*)))	dürfen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gewiß	ADV	(VROOT(PSEUDO(S*)	gewiß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	gewiß	ADV	(VROOT(PSEUDO(S*)	gewiß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(255|(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mich	PRF	*	mich	sg	fem	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	auf	APPR	*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	dich	PPER	*	dich	sg	*	-	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	verlassen	VVFIN	*	verlassen	-	-	-	255)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Auf	APPR	*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	deiner	PPOSAT	*	dein	sg	fem	-	(256|(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Hut	NN	*	hut	-	-	-	256)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	bitte	ADV	*	bitte	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	dich	PRF	*	dich	sg	-	-	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(255)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Dich	PPER	*	dich	sg	-	-	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	gereuen	VVINF	*)	gereuen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dein	PPOSAT	(VROOT(PSEUDO(S(NP*	dein	sg	masc	-	(257|(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gewissen	NN	*	gewissen	sg	masc	-	257)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	selbst	ADV	*)	selbst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	seine	PPOSAT	(NP*	sein	sg	fem	-	(257)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Rechnung	NN	*)	rechnung	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	dabei	PROAV	(VP*	dabei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	finden	VVINF	*))	finden	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Verdirb	VVFIN	*	verdirb	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	(PP*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	meinem	PPOSAT	*	mein	sg	neut	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Plane	NN	*))	plane	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(CS(NP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Erzähl	NN	*)	erzähl	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	frage	VVFIN	(S*	fragen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Bescheidenheit	NN	*)	bescheidenheit	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Rückhalt	NN	*)))	rückhalt	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	noch	ADV	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	erst	ADV	*	erst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	(S*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	*	was	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Erinnern	NN	*	erinnern	pl	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	könnt	VVFIN	*))	können	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	geh	XY	*	geh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	geht	VVFIN	(S*	gehen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	sg	neut	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	(AVP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	auch	ADV	*))	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	seht	VVFIN	*	sehen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	glaube	VVFIN	*	glauben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	gar	ADV	*	gar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	da	ADV	*	da	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	vom	APPRART	*	von	sg	masc	-	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Sultan	NN	*	sultan	sg	masc	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Ein	ART	*	ein	sg	masc	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	zweiter	ADJA	*	zweiter	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Bot	NN	*	bot	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Al-Hafi	NE	*	al-hafi	-	-	(LOC*)	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Euer	NE	*	euer	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Derwisch	NE	*	derwisch	sg	*	-	3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	(VROOT(PSEUDO(S*	gehen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ab	PTKVZ	*)	ab	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO*	nathan	-	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ha	XY	*	ha	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	ha	XY	*	ha	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	zu	APPR	(VROOT(PSEUDO(S(PP*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*)	euch	-	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wollt	VMFIN	*	wollen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	eben	ADV	*	eben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	*)	wieder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ists	NE	(VROOT(PSEUDO(S*	ist	-	-	-	(253)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	denn	ADV	(AP*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	eilig	ADJD	*))	eilig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	verlangt	VVFIN	*	verlangen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Von	APPR	(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*))	sich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO*	saladin	-	-	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	komm	VVIMP	*	kommen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	komme	VVFIN	*	kommen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zu	APPR	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wem	PWS	*	wem	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zum	APPRART	(VROOT(PSEUDO(PP*	zu	-	-	-	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Saladin	NN	*)	saladin	sg	*	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Schickt	NN	(VROOT(PSEUDO(S*	schicken	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Saladin	NE	(NP*	saladin	sg	fem	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Dich	NE	*)	dich	sg	fem	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mich	PPER	*	mich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	nein	PTKANT	*	nein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hat	VAFIN	(VROOT(PSEUDO(S*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	(VP*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	*	schon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	geschickt	VVPP	*))	schicken	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*	es	sg	neut	-	(258)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	richtig	ADJD	*)	richtig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	richtig	ADJD	*)	richtig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Schuld	NN	*	schuld	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Gott	NN	(S*	gott	sg	masc	-	(54)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	ich	PPER	*	ich	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	bin	VAFIN	*))	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Schuld	NN	*	schuld	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	hab	VAFIN	*	hab	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Von	APPR	*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Euch	PPER	*	euch	-	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	gesagt	VVPP	*	sagen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	gelogen	VVPP	*	gelogen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	um	KOUI	*	um	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	es	PPER	*	es	sg	neut	-	(258)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	abzuwenden	VVIZU	*	abwenden	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	abzuwenden	VVIZU	*	abwenden	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	richtig	ADJD	*)	richtig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	*	daß	-	-	-	(258
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	sein	PPOSAT	*	sein	-	-	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Defterdar	NN	*	defterdar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	geworden	VAPP	*	werden	-	-	-	258)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Betaur	NN	*	betaur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	mit	APPR	*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ansehn	NE	*	ansehn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ichs	NE	*	ichs	-	-	-	(258)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	geh	XY	*	gehn	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Stund	NN	*	stund	sg	masc	-	(254)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	an	PTKVZ	*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	geh	XY	*	geh	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	habt	VAFIN	*	haben	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	es	PPER	*	es	sg	neut	-	(259)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	schon	ADV	*	schon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Gehört	VVPP	*	hören	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	wohin	PWAV	*	wohin	-	-	-	(259)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	wißt	VVFIN	*	wissen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	den	ART	*	der	sg	masc	-	(260
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Weg	NN	*	weg	sg	masc	-	260)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Habt	VAFIN	(S*	haben	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPOSAT	(NP*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Des	ART	(NP*	der	sg	masc	-	(260
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Wegs	NN	*	weg	sg	masc	-	260)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	was	PIS	(VP*	was	sg	neut	-	(261
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	bestellen	VVINF	*)))	bestellen	-	-	-	261)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	sagt	VVFIN	(S*	sagen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	(S*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Diensten	NN	*)))))	dienst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Freilich	ADV	(VROOT(PSEUDO(S*	freilich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(261)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	PIS	(VP*	mehr	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*	sein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Als	KOUS	(S*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	was	PIS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	ein	ART	(VP(NP*	ein	sg	masc	-	(262
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Nackter	NN	*)	nackter	sg	masc	-	262)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	mit	APPR	(PP*	mit	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	sich	PRF	*)	sich	sg	-	-	(262)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	schleppen	VVINF	*)	schleppen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	kann	VMFIN	*)))	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	geh	XY	*	gehn	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	bald	ADV	*	bald	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Besinn	NN	(VROOT(PSEUDO(NP*	besinn	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PPER	(NP*	dich	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Al-Hafi	NE	*))	al-hafi	sg	masc	(LOC*)	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Besinn	NN	(VROOT(PSEUDO(S*	besinn	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PPER	*	dich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	gar	ADV	(AP*	gar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nichts	PIS	*))	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	weiß	VVFIN	*))	weiß	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	plauderst	VVFIN	*	plauderst	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	da	PTKVZ	*)	da	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S(S*	ihr	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bringt	VVFIN	*	bringen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Gleich	ADV	*	gleich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	mit	PTKVZ	*)	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	(NP*	der	pl	*	-	(263
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Beutel	NN	*))	beutel	pl	*	-	263)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Beutel	NN	(VROOT(PSEUDO*	beutel	-	-	-	(263)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(NP*	der	sg	neut	-	(263
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Geld	NN	*	geld	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	263)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Das	KOUS	(S*	der	sg	neut	-	(263)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	dem	ART	(VP(NP*	der	sg	neut	-	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Saladin	NN	*)	saladin	sg	neut	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	vorschießen	VVINF	*)	vorschießen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	sollt	VMFIN	*)))	sollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	weiter	ADV	*	weiter	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(253)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sollt	VVFIN	*	sollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(264)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Mit	APPR	(CPP(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ansehn	CARD	*	ansehn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	wie	PWAV	(S*	wie	-	-	-	(264
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Euch	PPER	*	euch	pl	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Tag	NN	*)	tag	sg	masc	-	(265)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Tag	NN	*	tag	sg	masc	-	264)|(265)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Aushöhlen	NN	*)	aushöhlen	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	wird	VAFIN	*))	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	bis	APPR	(PP*	bis	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	auf	APPR	*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	die	ART	*	der	pl	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Zehen	NN	*)))	zehe	pl	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sollt	VMFIN	*	sollen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Es	PPER	*	es	sg	neut	-	(266)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ansehn	CARD	*	ansehn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	*	daß	-	-	-	(266
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Verschwendung	NN	*	verschwendung	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	aus	APPR	*	aus	-	-	-	266)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Der	ART	*	der	sg	fem	-	(124
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	weisen	ADJA	*	weisen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Milde	NN	*	milde	sg	*	-	124)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	sonst	ADV	*	sonst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	nie	ADV	*	nie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	leeren	ADJA	*	leer	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Scheuern	NN	*	scheuer	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	So	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	lange	ADV	*	lange	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	borgt	VVFIN	*	borgen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	borgt	VVFIN	*	borgen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	borgt	VVFIN	*	borgen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	bis	APPR	*	bis	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	28	auch	ADV	*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	29	Die	ART	*	der	pl	masc	-	(160
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	30	armen	ADJA	*	arm	pl	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	31	eingebornen	ADJA	*	eingeborn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	32	Mäuschen	NN	*	mäusch	pl	masc	-	160)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	33	drin	ADV	*	drin	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	34	Verhungern	NN	*	verhunger	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	35	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Bildet	VVFIN	*	bilden	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(S(NP(S*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ein	PTKVZ	*	ein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Wer	PWS	(S*	wer	sg	masc	-	(117
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Euers	NN	(AP(NP*	euer	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Gelds	NE	*)	geld	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	bedürftig	ADJD	*)	bedürftig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	sei	VAFIN	*))	sein	sg	-	-	117)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	der	PDS	*)	der	sg	masc	-	(117)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	werde	VAFIN	*	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Doch	NE	(NP*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Euerm	NN	*))	euerm	sg	masc	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Rate	NN	(S*	rate	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	wohl	ADV	(VP*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	auch	ADV	*	auch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	folgen	VVINF	*))	folgen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ja	XY	*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Er	PPER	(S(VP*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Rate	NN	*	rate	pl	neut	-	(267)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	folgen	VVINF	*))	folgen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Saladin	NN	*	saladin	sg	*	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sich	PRF	(VP(VP*	sich	sg	-	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	raten	VVINF	*)	raten	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	lassen	VVINF	*))	lassen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Denkt	VVFIN	(S*	denkt	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Nathan	NE	*	nathan	-	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Mir	PPER	*	sich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	eben	ADV	*	eben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	itzt	ADV	*	itzt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ihm	PPER	*)))	ihm	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	begegnet	VVFIN	*	begegnen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO*	da	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	komm	VVIMP	(CS(S*	kommen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*))	ihm	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	eben	ADV	*	eben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Schach	NE	*	schach	sg	neut	-	(80)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Gespielt	VVFIN	*	gespielt	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	seiner	PPOSAT	*	sein	sg	fem	-	(16|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Schwester	NN	*)))	schwester	sg	fem	-	16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sittah	NE	(VROOT(PSEUDO(CS(CS(S*	sittah	sg	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	spielt	VVFIN	*	spielen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nicht	NN	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	übel	PTKVZ	*)	übel	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	das	ART	(S(VP(NP*	der	sg	neut	-	(17
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Spiel	NN	*	spiel	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	das	PRELS	(S*	der	sg	neut	-	(17)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Saladin	NE	(NP*	saladin	sg	neut	-	17)|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	Verloren	NN	*)	verlor	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	glaubte	VVFIN	*))	glauben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	schon	ADV	*	schon	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	gegeben	VVPP	*)	geben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	hatte	VAFIN	*))	haben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Das	PDS	(S*	der	sg	neut	-	(17)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	stand	VVFIN	*	stehen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	noch	ADV	(AVP*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	ganz	ADV	*)	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	da	PTKVZ	*))	da	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S(AVP(S*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	seh	VVFIN	*	seh	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PRF	*	euch	pl	*	-	(166)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	hin	PTKVZ	*)	hin	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Und	KON	*)	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	sehe	VVFIN	*	sehen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	das	ART	(NP*	der	sg	neut	-	(17
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Spiel	NN	*)	spiel	sg	neut	-	17)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	noch	ADV	(AVP*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	lange	ADV	*)	lange	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Verloren	NN	*	verloren	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	*	ei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	für	APPR	(NP(PP*	für	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	dich	PPER	*)	dich	-	-	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	*	ein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Fund	NN	*))	Fund	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(290|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	durfte	VMFIN	*	dürfen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	König	NN	*	könig	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	an	APPR	(PP*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	den	ART	*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Bauer	NN	*	bauer	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Nur	ADV	*))	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	rücken	VVINF	*))	rücken	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	auf	APPR	(S(VP(PP*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	ihr	PPOSAT	*	ihr	sg	neut	-	(27|(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Schach	NN	*)	schach	sg	neut	-	290)|27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	zeigen	VVINF	*)	zeigen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	könnte	VMFIN	*))	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	KON	(VROOT(PSEUDO(S*	O	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	traue	VVFIN	*	trauen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	dir	PPER	*)	dir	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	bekam	VVFIN	*	bekommen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(NP*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Roche	NN	*	roche	*	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Feld	NN	(S*	feld	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	sie	PPER	*	sie	pl	*	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	War	VAFIN	*)))	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	hin	PTKVZ	*)	hin	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	*	der	sg	neut	-	(269
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	*	alle	sg	neut	-	269)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	weisen	VVINF	*	weisen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	ruf	FM	*	ruf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ihn	PPER	*	ihn	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Denkt	VVIMP	*	denkt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	deiner	PPOSAT	(NP*	dein	sg	fem	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Meinung	NN	*))	meinung	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(270|(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hört	VVFIN	*	hören	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	gar	ADV	(AVP*	gar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	an	PTKVZ	*)	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	wirft	VVFIN	(S*	werfen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	verächtlich	ADJD	*	verächtlich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Das	ART	(NP*	der	sg	neut	-	(27
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	ganze	ADJA	*	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Spiel	NN	*	spiel	sg	neut	-	27)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	in	APPR	(PP*	in	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Klumpen	NE	*))))))	klumpen	sg	neut	-	270)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(270)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	möglich	ADJD	*	möglich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	(S*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	wolle	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	matt	ADJD	(VP(AP*	matt	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	einmal	ADV	*)	einmal	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	sein	VAINF	*)	sein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	wolle	VMFIN	*))	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Heißt	VVFIN	(VROOT(PSEUDO(S*	heißen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(25)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	spielen	VVFIN	*)	spielen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Schwerlich	ADJD	(VROOT(PSEUDO(S*	schwerlich	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Heißt	NN	(VP*	heißt	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	dem	ART	*	der	sg	neut	-	(80
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Spiele	NN	*)	spiel	sg	neut	-	80)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	spielen	VVINF	*))	spielen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gleichwohl	ADV	(VROOT(PSEUDO(S*	gleichwohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	galt	VVFIN	*	gelten	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Es	PPER	(NP*	es	sg	neut	-	(17)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	keine	PIAT	(NP*	kein	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	taube	ADJA	*	taub	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Nuß	NN	*)))	nuß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geld	NN	(VROOT(PSEUDO(CNP(NP*	geld	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	hin	ADV	*)	hin	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Geld	NN	*	geld	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	her	ADV	*)	her	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(271)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(NP*	der	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wenigste	ADJA	*))	wenig	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Allein	ADV	(VROOT(PSEUDO(VP(NP*	allein	-	-	-	(271
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PPER	*)	dich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	gar	ADV	(NP*	gar	-	-	-	271)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nicht	NN	*)	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	anzuhören	VVIZU	*)	anhören	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	über	APPR	(VROOT(PSEUDO(VP(PP*	über	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	einen	ART	*	ein	sg	masc	-	(269
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Punkt	NN	*)	punkt	sg	masc	-	269)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Von	APPR	(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	solcher	PIAT	*	solcher	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Wichtigkeit	NN	*)	wichtigkeit	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	dich	PRF	*	dich	sg	-	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	einmal	ADV	*)	einmal	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Zu	NN	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	hören	VVINF	*)	hören	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	deinen	PPOSAT	(VROOT(PSEUDO(NP*	dein	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Adlerblick	NN	*	adlerblick	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	(PP*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Bewundern	NN	*))	bewundern	pl	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	(VROOT(PSEUDO(NP*	der	sg	neut	-	(271)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	PRELS	(S*	der	sg	neut	-	(271)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	schreit	ADJD	*	schreit	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	um	APPR	(PP*	um	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Rache	NN	*	rache	sg	fem	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*)	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ach	ITJ	*	ach	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	sag	VVFIN	*	sögen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*	der	sg	neut	-	(270)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	(AVP*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*)	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	damit	KOUS	(S*	damit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	sehen	VVINF	*	sehen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	könnt	VVFIN	*	können	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	für	APPR	(PP*	für	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	ein	ART	*	ein	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Kopf	NN	*)	kopf	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	ist	VAFIN	*)))	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kurz	ADJD	(VROOT(PSEUDO(S*	kurz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	halts	VVFIN	*	halts	sg	-	-	(272)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ihm	PPER	*)	ihm	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	länger	ADJD	*	lang	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	aus	PTKVZ	*)	aus	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO(CS(S*	da	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	lauf	VVFIN	*	lauf	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	allen	PIAT	*	aller	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	schmutzgen	ADJA	*	schmutzg	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Mohren	NN	*	mohr	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Herum	NE	*))	herum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	frage	VVFIN	(S*	fragen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	wer	PWS	(S*	wer	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	ihm	PPER	(VP*	ihm	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	borgen	VVINF	*)	borgen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	will	VMFIN	*)))	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S(NP*	ich	sg	*	-	(3|(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	PRELS	(S*	der	sg	-	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nie	ADV	(VP(AVP*	nie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	für	APPR	(PP*	für	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	mich	PPER	*))	mich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	gebettelt	VVPP	*)	betteln	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	habe	VAFIN	*))	haben	sg	-	-	3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	nun	ADV	*	nun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	für	APPR	(VP(PP*	für	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	andre	ADJA	*)	andre	pl	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	borgen	VVINF	*))	borgen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Borgen	NN	*	borgen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Viel	NN	*	viel	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	besser	ADJD	*	gut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	als	KOKOM	*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	betteln	VVINF	*	betteln	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	:	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	wie	KOKOM	*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	leihen	VVINF	*	leihen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Auf	APPR	*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	Wucher	NN	*	wucher	pl	masc	-	(273)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	leihen	VVINF	*	leihen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	viel	ADV	*	viel	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	besser	ADJD	*	gut	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	Als	KOKOM	*	als	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	stehlen	VVINF	*	stehlen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Unter	APPR	(VROOT(PSEUDO(S(PP*	unter	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	meinen	PPOSAT	*	mein	pl	masc	-	(274|(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ghebern	NN	*)	gheber	pl	masc	-	274)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	an	APPR	(PP*	an	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Dem	NE	(MPN*	der	sg	masc	-	(275
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ganges	NE	*))	gange	sg	neut	-	275)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	brauch	VVFIN	*	brauch	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	(VP(VP*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	beides	PIS	*	beide	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	(S*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	brauche	VVFIN	*	brauchen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Das	ART	(NP*	der	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	Werkzeug	NN	*	werkzeug	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	beider	ADV	*)	beide	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	sein	VAINF	*)))	sein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Am	APPRART	(VROOT(PSEUDO(CO(PP*	an	-	-	-	(275
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ganges	NN	*)	gange	-	-	-	275)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Am	APPRART	(NP(PP*	an	-	-	-	(275
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ganges	NE	*)	gange	sg	*	-	275)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	gibts	CARD	*	gibt	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Menschen	NN	*))	mensch	sg	*	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hier	ADV	*	hier	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Der	ART	*	der	sg	masc	-	(276
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	einzige	ADJA	*	einzig	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	der	PRELS	*	der	sg	masc	-	(276)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	noch	ADV	*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	würdig	ADJD	*	würdig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	wäre	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Daß	KOUS	*	daß	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	er	PPER	*	er	sg	masc	-	(276)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	am	APPRART	*	an	-	-	-	(275
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	Ganges	NN	*	gange	sg	masc	-	275)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	lebte	VVFIN	*	leben	sg	-	-	276)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Laßt	VVIMP	*	lassen	pl	-	-	(278
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	mit	APPR	*	mit	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	eins	PIS	*	einer	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	den	ART	*	der	sg	masc	-	(263
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	22	Plunder	NN	*	plunder	sg	masc	-	263)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	23	ganz	ADV	*	ganz	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	24	im	APPRART	*	in	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	25	Stiche	NN	*	stich	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	27	Um	KOUI	*	um	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	28	den	ART	*	der	sg	masc	-	(263)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	29	es	PPER	*	es	sg	neut	-	(224)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	30	ihm	PPER	*	ihm	sg	masc	-	(7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	31	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	32	tun	VVINF	*	tun	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	33	.	$.	*	--	-	-	-	278)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nach	APPR	*	nach	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(AP*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	drum	ADV	*)	drum	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	*	der	sg	fem	-	(96
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Plackerei	NN	*	plackerei	sg	fem	-	96)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Auf	APPR	*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	einmal	ADV	*	einmal	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	aus	PTKVZ	*	aus	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	schaff	VVFIN	*	schaff	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	einen	ART	(NP*	ein	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Delk	NN	*))	delk	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kommt	VVFIN	*	kommen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	dächte	VVFIN	*	dächen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	zwar	ADV	*	zwar	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	(S*	der	sg	neut	-	(278)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	blieb	VVFIN	*	bleiben	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	uns	PPER	*	uns	pl	*	-	(279)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	ja	ADV	*	ja	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	Noch	ADV	(AP(AVP*	noch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	immer	ADV	*)	immer	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	übrig	ADJD	*)))	übrig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Al-Hafi	NE	*	al-hafi	sg	masc	(LOC*)	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ichs	NE	*	ichs	sg	*	-	(277)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	überlegen	VVINF	*	überlegen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Warte	NN	(VROOT(PSEUDO*	warte	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Überlegen	NN	(VROOT(PSEUDO*	überlegen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	*	nein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	(277
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	was	PIS	*	was	*	neut	-	277)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	überlegt	VVFIN	*	überlegen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	sich	PRF	*	sich	sg	-	-	(277)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S*	nur	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bis	APPR	(PP*	bis	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	*)	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	*	der	sg	neut	-	(7
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Sultan	NN	*)	sultan	sg	neut	-	7)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	wiederkomme	VVFIN	*)	wiederkommen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	bis	APPR	*	bis	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Ich	PPER	(NP*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	Abschied	NN	*	abschied	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	erst	ADV	*)	erst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	(280
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	überlegt	VVPP	*	überlegen	sg	-	-	280)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	*	der	sg	masc	-	(280)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	sucht	PTKNEG	*	suchen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Bewegungsgründe	NN	*	bewegungsgrund	pl	masc	-	(281)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	dürfen	VMINF	*	dürfen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(CS(S*	wer	sg	masc	-	(282)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sich	PRF	*	sich	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Knall	NN	(NP(CNP*	knall	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Fall	NN	*)	fall	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ihm	PPER	(VP(NP*	ihm	sg	masc	-	(282)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	selbst	ADV	*)	selbst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	leben	VVINF	*)))	leben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Entschließen	VVINF	*	entschließen	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	kann	VMFIN	*)	können	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	der	ART	(S(NP*	der	sg	masc	-	(282)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	lebet	ADJD	(AP*	lebet	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	andrer	ADJA	*)	andr	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	Sklav	NN	*)	sklav	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	immer	ADV	*)))	immer	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	wollt	VMFIN	*)	wollen	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(CNP*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Lebt	NE	*	leben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*)	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	wies	VVFIN	(VROOT(PSEUDO(S*	weisen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wohl	ADV	(AP*	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	dünkt	ADJD	*))	dünken	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mein	PPOSAT	*	mein	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Weg	NN	*	weg	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	liegt	VVFIN	*	liegen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	dort	ADV	*	dort	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Eurer	PPOSAT	*	eurer	-	-	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	da	ADV	*	da	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Al-Hafi	NE	(VROOT(PSEUDO(MPN*	al-hafi	-	-	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(283|(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wirst	VAFIN	*	werden	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	erst	ADV	(NP*	erst	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	*	der	sg	neut	-	(272
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	Deine	ADJA	*	dein	sg	neut	-	283)|272)|(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Berichtigen	NN	*))	berichtig	sg	neut	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	AL-HAFI	NE	(VROOT(PSEUDO*	al-hafi	-	-	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	3)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ach	ITJ	(VROOT(PSEUDO(S*)	ach	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Possen	NE	*	posse	-	-	-	(283)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Bestand	NN	*	bestand	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	Von	APPR	*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	meiner	PPOSAT	*	mein	sg	fem	-	(81|(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	Kaß	NN	*	kaß	sg	fem	-	81)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	des	ART	*	der	sg	masc	-	(272
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	Zählens	NN	*	zählen	sg	masc	-	272)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	wert	ADJD	*	wert	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	Und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	13	meine	PPOSAT	*	mein	sg	fem	-	(95|(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	14	Rechnung	NN	*	rechnung	sg	fem	-	95)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	15	bürgt	VVFIN	*	bürgen	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	16	–	$.	*	–	pl	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	17	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	18	oder	KON	*	oder	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	19	Sittah	NE	*	sittah	sg	-	-	(16)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Lebt	VVPP	(VROOT(PSEUDO(VP*	leben	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	(S*))	wohl	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ab	NN	(VROOT(PSEUDO*	ab	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*))	nathan	-	-	-	(1)

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	ihm	PPER	(VROOT(PSEUDO(AP*	ihm	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	nachsehend	ADJD	*)	nachsehend	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	*	der	sg	fem	-	(95)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	bürg	NE	*	bürg	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wilder	NN	*	wild	pl	neut	-	(3
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	guter	ADJA	*	gut	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	edler	ADJA	*	edel	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	–	NN	*	–	-	-	-	3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	Wie	KOKOM	*	wie	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	nenn	ADV	*	nenn	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	ihn	PPER	*	ihn	sg	masc	-	(3)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	(S(NP*	der	sg	masc	-	(284
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	wahre	ADJA	*	wahr	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Bettler	NN	*)	bettler	sg	masc	-	284)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	Doch	NE	(CO*	doch	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	6	einzig	ADJD	*	einzig	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	8	allein	ADV	*))	allein	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	(NP*	der	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	10	wahre	ADJA	*	wahr	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	11	König	NN	*)	könig	sg	masc	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	(VROOT(PSEUDO(S*	von	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	1	einer	ART	(NP*	ein	sg	masc	-	(285
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	2	andern	ADJA	*	anderer	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	3	Seite	NN	*)	seite	sg	fem	-	285)
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	4	ab	PTKVZ	*)	ab	-	-	-	-
Nathan_Act2.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

#end document
