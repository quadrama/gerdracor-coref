#begin document (Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll); part 000
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Szene	NN	*)	szene	sg	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	des	ART	(NP*	der	sg	neut	-	(15|(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Sultans	NE	(MPN*	sultan	sg	neut	-	7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	Palast	NE	*)))	palast	sg	*	-	15)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO(S(CNP*	saladin	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*)	sittah	sg	*	-	(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	spielen	VVFIN	*	spielen	pl	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Schach	NE	*)	schach	sg	masc	-	(17)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	(VROOT(PSEUDO(S*	wo	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	bist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	(NP*	du	sg	*	-	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Saladin	NN	*))	saladin	*	*	(LOC*)	7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	spielst	VVFIN	*	spielen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	(NP*	du	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	heut	ADV	*))	heuen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(AP*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	gut	ADJD	*)	gut	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	dächte	VVFIN	*	dächen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*)	doch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Für	APPR	(VROOT(PSEUDO(S(PP*	für	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*)	mich	sg	*	-	(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	(S*	und	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	kaum	ADV	*))	kaum	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nimm	NE	(VROOT(PSEUDO(S*	nimm	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	diesen	PDAT	(NP*	dieser	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Zug	NN	*)	zug	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	zurück	PTKVZ	*)	zurück	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Warum	PWAV	(VROOT(PSEUDO*	warum	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(18
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Springer	NN	*)	springer	sg	masc	-	18)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	unbedeckt	ADJD	*)	unbedeckt	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	wahr	ADJD	*)	wahr	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*)	so	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	zieh	VVIMP	*	zieh	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	*	in	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	*	der	sg	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	Gabel	NN	*	gabel	sg	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wieder	ADV	(VROOT(PSEUDO(S(ISU*	wieder	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	wahr	ADJD	*))	wahr	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(CNP*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Schach	NE	*	schach	-	-	-	(19
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	dann	ADV	*)	dann	-	-	-	19)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	hilft	VVFIN	*	helfen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	dir	PPER	*	dir	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*	der	sg	neut	-	(19)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CS(S*	ich	sg	*	-	(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	setze	VVFIN	*	setzen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	vor	PTKVZ	*)	vor	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	du	PPER	(S*	du	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	Bist	NN	*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	wie	KOKOM	(S*	wie	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	du	PPER	*	du	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	warst	VVFIN	*)))	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Aus	APPR	*	aus	-	-	-	(20
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	dieser	PDAT	*	dieser	sg	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Klemme	NN	*	klemme	sg	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	seh	XY	*	seh	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	wohl	ADV	*	wohl	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	ohne	APPR	*	ohne	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	Buße	NN	*	buße	pl	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	kommen	VVINF	*	kommen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	20)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mags	NE	(VROOT(PSEUDO*	mag	-	-	-	(20)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	nimm	ADJD	(VROOT(PSEUDO(S*	nimm	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	den	ART	(NP*	der	sg	masc	-	(18
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Springer	NE	*)	springer	sg	masc	(PER*)	18)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*)	nur	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(18)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	geh	XY	*	geh	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	vorbei	ADV	*	vorbei	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	schenkst	VVFIN	*	schenken	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dir	PPER	(VROOT(PSEUDO(S*	dir	sg	*	-	(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	liegt	VVFIN	*	liegen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	An	APPR	(PP*	an	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	diesem	PDAT	*	dieser	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Platze	NN	*)	platz	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	ADV	*	mehr	*	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	als	KOKOM	(PP*	als	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	an	APPR	*	an	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	dem	ART	*	der	sg	neut	-	(18
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	Springer	NE	*))	springer	sg	neut	(LOC*)	18)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	VMFIN	*	können	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	sein	VAINF	*	sein	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mach	APPR	(VROOT(PSEUDO(S(PP*	mach	pl	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	deine	PPOSAT	*	dein	sg	fem	-	(21|(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Rechnung	NN	*)	rechnung	sg	fem	-	21)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	(AVP*	nur	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	ohne	APPR	(PP*	ohne	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	Den	ART	*	der	sg	masc	-	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	Wirt	NN	*))	wirt	sg	masc	-	7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	sieh	VVIMP	*	sieh	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S(NP(AP*	was	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	gilts	ADV	*	gilt	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	(S*	der	sg	neut	-	(22)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	warst	VVFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	du	PPER	*	du	sg	*	-	(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	Vermuten	NN	*))	vermuten	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Freilich	ADV	(VROOT(PSEUDO(CO(AVP*	freilich	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	konnt	ADJD	*	konnen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*	auch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	Vermuten	NN	*	vermuten	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	*	daß	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	du	PPER	*	du	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	deiner	PPOSAT	*	dein	sg	fem	-	(23|(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	Königin	NN	*	königin	sg	fem	-	23)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	So	ADV	*	so	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	müde	ADJD	*	müde	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	wärst	VVFIN	*	wärst	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(NP*	ich	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	meiner	PPOSAT	(NP*	mein	sg	-	-	(23|(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Königin	NN	*))	königin	*	*	-	23)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	seh	VVFIN	*	seh	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*	schon	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	heut	ADV	*	heut	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	meine	PPOSAT	*	mein	sg	fem	-	(24|(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	tausend	CARD	*	tausend	-	-	-	24)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	Dinar	NN	*	dinar	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	kein	PIAT	*	kein	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	Naserinchen	NN	*	naserinchen	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	16	mehr	ADV	*	mehr	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	17	gewinnen	VVINF	*	gewinnen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Frag	NE	(VROOT(PSEUDO(NP*	frag	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	noch	ADV	*)	noch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Weil	KOUS	(S*	weil	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Fleiß	NN	*)	fleiß	sg	masc	-	(25)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	aller	PIAT	*	aller	sg	fem	-	(25)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	Gewalt	NN	*)	gewalt	sg	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	verlieren	VVINF	*)	verlieren	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	willst	VMFIN	*)	wollen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	dabei	PROAV	*	dabei	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	find	VAFIN	*	find	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	meine	PPOSAT	*	mein	sg	-	-	(21|(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	Rechnung	NN	*	rechnung	sg	fem	-	21)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	außer	APPR	*	außer	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	*	daß	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ein	ART	*	ein	sg	neut	-	(17
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	solches	PIAT	*	solcher	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	Spiel	NN	*	spiel	sg	neut	-	17)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	das	ART	*	der	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	unterhaltendste	ADJA	*	unterhaltend	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	Nicht	NN	*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	gewann	VVFIN	*	gewinnen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	immer	ADV	*	immer	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	16	am	PTKA	*	an	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	17	meisten	PIS	*	meister	*	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	18	Mit	APPR	*	mit	sg	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	19	dir	PPER	*	dir	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	21	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	22	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	23	verlor	VVFIN	*	verlieren	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	24	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(CS(S*	wenn	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	hast	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Den	ART	(NP*	der	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	Satz	NN	*)	satz	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	mich	PPER	*	mich	sg	*	-	(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	des	ART	(NP*	der	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	verlornen	ADJA	*	verlorn	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	Spieles	NN	*	spiele	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	wegen	APPR	(PP*	wegen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	Zu	NN	*))	zu	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	trösten	VVFIN	*)	trösen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	doppelt	VVFIN	(S*	doppelt	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	16	nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	17	hernach	ADJD	*	hernach	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	18	geschenkt	VVPP	*)))	schenken	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	19	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	*	ei	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	sieh	XY	*	sieh	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	so	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	hättest	VVFIN	*	hättest	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*	du	sg	*	-	(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	Verlorst	NN	(NP*	verlorst	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	Fleiß	NN	*)	fleiß	sg	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	verloren	VVPP	*))	verlieren	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	Schwesterchen	NN	*))	schwesterchen	pl	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zum	APPRART	(VROOT(PSEUDO(S(PP*	zu	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	wenigsten	PIS	*)	wenigster	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	gar	ADV	(VP(AP*	gar	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*)	wohl	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*)	sein	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	deine	PPOSAT	(NP*	dein	sg	fem	-	(68)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	Freigebigkeit	NN	*)	freigebigkeit	sg	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	mein	PPOSAT	(NP*	mein	sg	neut	-	(7|(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	liebes	ADJA	*	lieb	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	Brüderchen	NN	*)	brüderchen	sg	neut	-	7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	Schuld	NN	*	schuld	sg	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	16	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	18	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	19	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	20	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	21	besser	ADJD	(VP(VP*	gut	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	22	spielen	VVINF	*)	spielen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	23	lernen	VVINF	*))))	lernen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wir	PPER	(VROOT(PSEUDO(S*	wir	pl	*	-	(26)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	kommen	VVFIN	*	kommen	pl	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	ab	PTKVZ	*	ab	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	vom	APPRART	(PP*	von	sg	neut	-	(17
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Spiele	NN	*))	spiel	sg	neut	-	17)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mach	APPR	(VROOT(PSEUDO(PP*	mach	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	ein	ART	*	ein	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ende	NN	*)	ende	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*)	es	sg	neut	-	(22)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	dann	ADV	(NP*	dann	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	Schach	NE	*	schach	sg	neut	-	(27)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	doppelt	VVFIN	*	doppelt	-	-	-	(27
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Schach	NE	*)	schach	-	-	-	27)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	*	nun	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	dieses	PDAT	*	dieser	sg	neut	-	(27
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Abschach	NN	*	abschach	sg	neut	-	27)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	hab	VAFIN	*	hab	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	Gesehn	NN	*	gesehn	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	das	PRELS	*	der	sg	neut	-	(27)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	meine	PPOSAT	*	mein	sg	neut	-	(23|(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	Königin	NN	*	königin	sg	neut	-	23)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	zugleich	ADV	*	zugleich	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	Mit	APPR	*	mit	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	16	niederwirft	VVFIN	*	niederwerfen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	War	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	dem	PDS	(VP*	der	sg	masc	-	(27)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	*	noch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	abzuhelfen	VVIZU	*))	abhelfen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	ADJD	(VROOT(PSEUDO(NP(AP*	lassen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	sehn	CARD	*))	sehn	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	*	nein	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	nein	PTKANT	*	nein	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	nimm	ADJD	*	nimm	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	*	der	sg	fem	-	(23
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	Königin	NN	*	königin	sg	fem	-	23)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	masc	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(AP(PP*	mit	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	diesem	PDAT	*	dieser	sg	masc	-	(28
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Steine	NN	*	stein	sg	masc	-	28)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	nie	ADV	*)	nie	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	recht	ADV	*	recht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	glücklich	ADJD	*))	glücklich	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Bloß	ADV	(VROOT(PSEUDO(PP*	bloß	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	mit	APPR	*	mit	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	dem	ART	*	der	sg	masc	-	(28
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	Steine	NN	*)	stein	sg	masc	-	28)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Fort	NN	(VROOT(PSEUDO(NP*	fort	-	-	-	(29
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	damit	PROAV	*)	damit	-	-	-	29)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(29)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	tut	VVFIN	*	tun	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	Mir	PPER	*	sich	sg	fem	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	alles	PIS	(VP*	alle	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	wiederum	ADV	*	wiederum	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	Geschützt	VVPP	*))	geschützt	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S(S(AP*	wie	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	höflich	ADJD	*)	höflich	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	man	PIS	*	man	sg	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Königinnen	NN	*)	königin	pl	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	Verfahren	NN	*)	verfahren	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	müsse	VMFIN	*)	müssen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	mein	PPOSAT	(NP*	mein	sg	masc	-	(7|(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	Bruder	NN	*)	bruder	sg	masc	-	7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	mich	PPER	(VP*	mich	sg	*	-	(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	Zu	NN	*	zu	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	gelehrt	VVPP	*))	lehren	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	läßt	VVFIN	*	lassen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	(VP*	sie	*	*	-	(23)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	stehen	VVINF	*))	stehen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nimm	ADJD	(VROOT(PSEUDO(S*	nimm	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	oder	KON	*	oder	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	nimm	VVIMP	(S*	nimm	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	sg	fem	-	(23)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	keine	PIAT	(NP*	kein	sg	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	PIS	*))	mehr	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wozu	PWAV	(VROOT(PSEUDO(S*	wozu	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	pl	*	-	(23)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	nehmen	VVFIN	*)	nehmen	pl	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Schach	NE	(VROOT(PSEUDO(MPN*	schach	sg	neut	-	(27)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Schach	NE	*	schach	-	-	-	(27)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(AVP*	nur	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	weiter	ADV	*)	weiter	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Schach	NE	(VROOT(PSEUDO(MPN*	schach	sg	neut	-	(27)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(CNP*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Schach	NE	*)	schach	sg	neut	-	(27)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(CNP*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Schach	NE	*)	schach	sg	neut	-	(27)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(VP(AP*	und	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	matt	ADJD	*))	matt	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(S(AVP*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	ganz	ADV	*)	ganz	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	*	du	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	ziehst	VVFIN	*	ziehsen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	den	ART	(NP*	der	sg	masc	-	(18
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	Springer	NE	*)	springer	sg	masc	(PER*)	18)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	noch	ADV	*)	noch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	Dazwischen	PROAV	(S*	dazwischen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	oder	KON	(S*	oder	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	was	PWS	*	was	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	du	PPER	(VP*	du	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	machen	VVINF	*)	machen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	willst	VMFIN	*))	wollen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gleichviel	NN	(VROOT(PSEUDO*	gleichviel	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ganz	ADV	(VROOT(PSEUDO(S(ISU*	ganz	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	recht	ADJD	*))	recht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	(S*	du	sg	*	-	(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	hast	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	gewonnen	VVPP	*)	gewinnen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	(S*	und	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	Al-Hafi	NE	*	al-hafi	sg	*	(LOC*)	(3)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	zahlt	VVFIN	*)	zahlen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	*	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Man	PIS	(S*	man	sg	*	-	(30)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	laß	VVFIN	*	lassen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	(VP*	ihn	sg	masc	-	(3)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	rufen	VVINF	*))	rufen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	gleich	ADV	(VROOT(PSEUDO(S*)	gleich	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	(S*	du	sg	*	-	(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	hattest	VAFIN	*	hattest	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Sittah	NN	*	sittah	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*))	so	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	unrecht	ADJD	(S*	unrecht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	War	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	ganz	ADV	*)	ganz	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	beim	APPRART	(PP*	bei	-	-	-	(17
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	16	Spiele	NN	*	spiel	pl	neut	-	17)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	17	;	$.	*)	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	18	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	19	zerstreut	VVPP	*)	zerstreuen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	dann	ADV	*	dann	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	wer	PWS	*	wer	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	gibt	VVFIN	*	geben	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	uns	PPER	*	uns	pl	*	-	(26)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	denn	ADV	(NP*	denn	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	*	der	pl	masc	-	(28
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	glatten	ADJA	*	glatt	pl	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	Steine	NN	*)	stein	pl	masc	-	28)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	Beständig	NN	*)	beständig	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	die	ART	(VROOT(PSEUDO(NP*	der	sg	fem	-	(28)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	an	APPR	(VP(PP*	an	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	erinnern	VVINF	*)	erinnern	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	nichts	PIS	(NP*	nichts	*	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	Bezeichnen	NN	*	bezeichnen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hab	XY	*	hab	*	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	*	mit	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	dem	ART	*	der	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	Iman	NN	*	iman	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	denn	KON	*	denn	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	Gespielt	NN	*	gespielt	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	*	was	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Verlust	NN	(VROOT(PSEUDO*	verlust	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Vorwand	NN	*	vorwand	sg	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(CNP(NP*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	*	der	pl	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	ungeformten	ADJA	*	ungeformt	pl	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	Steine	NN	*)	stein	pl	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	Sittah	NE	(NP*	sittah	pl	masc	-	(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	sinds	FM	*	sinds	pl	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	Die	ART	(S*	der	pl	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	mich	PPER	*	mich	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	verlieren	VVINF	*	verlieren	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	machten	VVFIN	*	machen	pl	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	deine	PPOSAT	(NP*	dein	sg	fem	-	(31|(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	Kunst	NN	*	kunst	sg	fem	-	31)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	16	Dein	NN	(CO*	dein	sg	masc	-	(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	17	ruhiger	ADJD	*	ruhig	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	18	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	19	schneller	ADJA	(NP*	schnell	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	20	Blick	NN	*))))	blick	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*)	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*)	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(S(AVP*	auch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*)	so	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Willst	VVFIN	*	willst	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	*	du	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	(VP(NP*	der	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	Stachel	NN	*	stachel	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	des	ART	(NP*	der	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	Verlusts	NN	*))	verlust	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	stumpfen	VVINF	*))	stumpfen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Genug	ADV	(VROOT(PSEUDO(S*	genug	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	warst	VVFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	zerstreut	VVPP	*	zerstreuen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	(NP*	und	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	mehr	PIS	*	mehr	*	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	als	KOKOM	(NP*	als	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*)))	ich	sg	*	-	(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Als	KOUS	*	als	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	hätte	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PPER	(VP*	dich	sg	-	-	(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	zerstreuet	VVPP	*))	zerstreuet	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Deine	PPOSAT	(VROOT(PSEUDO(S(NP*	dein	sg	fem	-	(32|(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Zerstreuung	NN	*	zerstreuung	sg	fem	-	32)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wenn	NE	*)	wenn	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	werden	VAFIN	*	werden	pl	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	wir	PPER	(VP*	wir	pl	*	-	(26)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	(AP*	so	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	fleißig	ADJD	*)	fleißig	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	spielen	VVINF	*))	spielen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	spielen	VVFIN	*	spielen	pl	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	wir	PPER	*	wir	pl	*	-	(26)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	um	KOUI	(AVP*	um	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*)	so	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	viel	ADV	*	viel	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	gieriger	ADJD	*)	gierig	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	*	ah	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	weil	KOUS	(VROOT(PSEUDO(S(S*	weil	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	es	PPER	*	es	sg	neut	-	(33)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	wieder	ADV	(AP*	wieder	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	los	ADJD	*)	los	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	geht	VVFIN	*)	gehen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	meinst	ADV	(NP*	meinst	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*))	du	sg	*	-	(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mags	NE	*	mag	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKVZ	*)	zu	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	zuerst	ADV	*	zuerst	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	gezogen	VVPP	*))	ziehen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ich	PPER	(CS(S*	ich	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	hätte	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	gern	ADV	*	gern	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	(NP*	der	sg	masc	-	(34
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	Stillestand	NN	*	stillestand	sg	masc	-	34)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	aufs	APPRART	(PP*	auf	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	neue	ADJA	*	neu	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	Verlängert	NN	*)))	verlängern	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	16	hätte	VAFIN	(S*	haben	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	17	meiner	PPOSAT	(NP*	mein	sg	fem	-	(16|(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	18	Sittah	NN	*)	sittah	sg	*	-	16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	19	gern	ADV	*	gern	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	21	Gern	NN	(VP*	gern	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	22	einen	ART	(NP*	ein	sg	masc	-	(35
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	23	guten	ADJA	*	gut	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	24	Mann	NN	*)	mann	sg	masc	-	35)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	25	zugleich	ADV	*	zugleich	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	26	verschafft	VVPP	*)))	verschaffen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	27	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(CS(S*	und	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(35)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	Richards	NE	(VP(NP*	richard	sg	*	(PER*)	(36|(37)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Bruder	NN	*)	bruder	sg	masc	-	36)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*))	sein	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	er	PPER	(S*	er	sg	masc	-	(36)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	Ja	NN	(NP*	ja	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	Richards	NE	(MPN*	richard	sg	*	(PER*)	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	Bruder	NE	*))))	bruder	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	deinen	PPOSAT	(VP(NP*	dein	sg	masc	-	(37|(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	Richard	NE	*)	richard	sg	masc	-	37)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	loben	VVINF	*)	loben	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	kannst	VMFIN	*)	können	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	unserm	PPOSAT	*	unser	*	*	-	(38|(26)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Bruder	NN	*	bruder	*	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	Melek	NE	*	melek	*	*	-	38)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Dann	NE	*	dann	*	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	Richards	NE	*	richard	sg	*	-	(39|(37)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	Schwester	NN	*	schwester	sg	masc	-	39)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	zu	APPR	*	zu	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	Teile	NN	*	teil	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	worden	VAPP	*	werden	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	Ha	NE	*	ha	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	welch	PWAT	*	welcher	*	*	-	(40
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	ein	ART	*	ein	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Haus	NN	*	haus	sg	neut	-	40)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	zusammen	PTKVZ	*	zusammen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ha	NE	(VROOT(PSEUDO(NP(MPN*	ha	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	sg	masc	-	(40
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	ersten	ADJA	*)	erster	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	40)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	Der	ART	(NP*	der	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	besten	ADJA	*	gut	pl	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	Häuser	NN	*	haus	pl	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	in	APPR	(PP*	in	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	*	der	sg	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	Welt	NN	*)))	welt	sg	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	das	ART	(NP*	der	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	beste	ADJA	*)	gut	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	(AP(S*	du	sg	*	-	(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	hörst	VVFIN	*	hörst	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	(S*	ich	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	mich	PPER	(VP*	mich	sg	-	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	loben	VVINF	*))))	loben	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	auch	ADV	*	auch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	Nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	faul	ADJD	*))	faul	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	dünk	VVFIN	*	dünk	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	-	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	meiner	PPOSAT	*	mein	sg	fem	-	(41|(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	Freunde	NN	*	freund	sg	fem	-	41)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	wert	ADJD	*	wert	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(40)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	hätte	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	Menschen	NN	*	mensch	pl	masc	-	(42)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	geben	VVINF	*	geben	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	sollen	VMFIN	*)	sollen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	ART	*	der	sg	neut	-	(40)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hab	XY	*	hab	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	des	ART	*	der	sg	neut	-	(40
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	schönen	ADJA	*	schön	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	Traums	NN	*	traum	sg	neut	-	40)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	gleich	ADV	*	gleich	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	gelacht	VVPP	*	lachen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(DL(S*	du	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	kennst	VVFIN	*	kennen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	pl	fem	-	(43
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	Christen	NN	*)	christ	pl	fem	(MISC*)	43)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	willst	VVFIN	(S*	wollen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	sie	PPER	*	sie	sg	fem	-	(43)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	kennen	VVINF	*))	kennen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPOSAT	(VROOT(PSEUDO(S(NP*	ihr	sg	masc	-	(44|(43)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Stolz	NN	*)	stolz	sg	masc	-	44)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Christen	NN	(S(VP*	christ	sg	masc	-	(45)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*)	sein	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	Menschen	NN	*	mensch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*)))))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(CS(S*	denn	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Selbst	ADV	(NP*	selbst	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(46
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	was	PRELS	(S*	was	sg	neut	-	(46)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	noch	ADV	(PP*	noch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	von	APPR	*	von	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihrem	PPOSAT	*	ihr	sg	neut	-	(47|(43)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	Stifter	NN	*)	stifter	sg	neut	-	47)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	her	PTKVZ	*))	her	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	46)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	Mit	APPR	(S*	mit	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	Menschlichkeit	NN	*	menschlichkeit	sg	fem	-	(46)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	den	ART	(NP*	der	pl	fem	-	(48
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	Aberglauben	NN	*)	aberglaube	pl	fem	-	48)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	16	wirzt	VVFIN	*))	wirzen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	18	Das	PDS	(S*	der	sg	neut	-	(46)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	19	lieben	VVFIN	*	lieben	pl	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	20	sie	PPER	*	sie	pl	*	-	(43)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	22	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	23	weil	KOUS	(S*	weil	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	24	es	PPER	*	es	sg	neut	-	(46)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	25	menschlich	ADJD	*	menschlich	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	26	ist	VAFIN	*)	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	27	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	28	Weils	NE	(S(MPN*	weils	-	-	-	(46)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	29	Christus	NE	*)	christus	-	-	-	(47)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	30	lehrt	VVFIN	*	lehren	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	31	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	32	weils	ADV	(S(NP*	weils	-	-	-	(46)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	33	Christus	NN	*)	christus	-	-	(PER*)	(47)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	34	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	35	getan	VVPP	*))))	tun	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	36	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wohl	NN	(NP*	wohl	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihnen	PPER	(NP*	ihnen	pl	*	-	(43)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	*	er	sg	masc	-	(47)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	(NP*	ein	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	(AP*	so	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	guter	ADJA	*)	gut	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	Mensch	NN	*)	mensch	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	Noch	ADV	*	noch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	war	VAFIN	*)))	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wohl	ADV	(VROOT(PSEUDO(S*	wohl	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihnen	PPER	*	ihnen	pl	*	-	(43)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	sg	fem	-	(43)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	seine	PPOSAT	(VP(CNP(NP*	sein	sg	fem	-	(47)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	Tugend	NN	*	tugend	sg	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	Auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	Treu	NN	*))	treu	-	-	-	(49)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	Glaube	NN	*)	glaube	sg	-	-	(48)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	nehmen	VVINF	*)	nehmen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	können	VMFIN	*))	können	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	Tugend	NN	*	tugend	sg	neut	-	(46)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Seine	PPOSAT	(NP(VP(NP*	sein	sg	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Tugend	NN	*)	tugend	sg	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*	sein	-	-	-	(50|(47)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	Name	NN	(S*	name	sg	masc	-	50)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	Soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	überall	ADV	(VP(VP*	überall	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	verbreitet	VVPP	*)	verbreiten	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	werden	VAINF	*))	werden	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	soll	VMFIN	(S*	sollen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	Die	ART	(NP*	der	sg	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	Namen	NN	*	name	pl	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	aller	PIAT	(NP*	aller	pl	masc	-	(42
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	16	guten	ADJA	*	gut	pl	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	17	Menschen	NN	*))	mensch	pl	masc	-	42)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	18	schänden	VVFIN	*))	schinden	pl	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	20	Verschlingen	NN	*)	verschlingen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Um	KOUI	(VROOT(PSEUDO(S(PP*	um	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	den	ART	*	der	sg	masc	-	(50
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Namen	NN	*)	name	sg	masc	-	50)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	um	KOUI	(PP*	um	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	den	ART	*	der	sg	masc	-	(50
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	Namen	NN	*)	name	sg	masc	-	50)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihnen	PPER	(VP*	ihnen	pl	masc	-	(43)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	tun	VVINF	*)))	tun	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(CS(S*	du	sg	*	-	(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	meinst	VVFIN	*)	meinst	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	warum	PWAV	(S*	warum	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Sie	PPER	*	sie	pl	*	-	(43)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	sonst	ADV	*	sonst	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	verlangen	VVINF	*	verlangen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	würden	VAFIN	*	werden	pl	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	daß	KOUS	(CS(S*	daß	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	auch	ADV	*	auch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	ihr	PPER	(NP*	ihr	sg	fem	-	(51)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	Auch	NN	*)	auch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	du	PPER	(CNP*	du	sg	*	-	(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	16	Melek	NE	(NP*	melek	sg	neut	-	(38)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	18	Christen	NN	*))	christ	pl	masc	(MISC*)	(52)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	19	hießet	VVFIN	*)	hießen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	21	eh	ADV	(S(VP(PP*	eh	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	22	Als	APPR	*	als	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	23	Ehgemahl	NN	*)	ehgemahl	sg	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	24	ihr	PPOSAT	(NP*	ihr	sg	fem	-	(51)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	25	Christen	NN	*)	christ	pl	masc	(MISC*)	(43)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	26	lieben	VVINF	*)	lieben	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	27	wolltet	VMFIN	*))))	wollten	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	28	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Als	APPR	*	als	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	*	von	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Christen	NN	*	christ	pl	masc	(MISC*)	(43)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	als	APPR	*	als	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	Christen	NN	*	christ	pl	masc	-	(52)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	Die	ART	*	der	pl	masc	-	(53
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	Liebe	NN	*	liebe	pl	masc	-	53)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	gewärtigen	VVINF	*	gewärtig	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	womit	PWAV	*	womit	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	16	Der	ART	*	der	sg	masc	-	(54
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	17	Schöpfer	NN	*	schöpfer	sg	masc	-	54)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	18	Mann	NN	*	mann	sg	masc	-	(55)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	19	und	KON	*	und	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	20	Männin	NN	*	männin	sg	neut	-	(56)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	21	ausgestattet	VVPP	*	ausstatten	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	22	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	*	der	pl	masc	-	(43
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Christen	NN	*	christ	pl	masc	(MISC*)	43)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	glauben	VVFIN	*	glauben	pl	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	PIAT	*	mehr	*	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Armseligkeiten	NN	*	armseligkeit	pl	fem	-	(48)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	Als	KOKOM	*	als	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	*	daß	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	sie	PPER	*	sie	pl	masc	-	(43)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	die	ART	*	der	pl	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	auch	ADV	*	auch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	noch	ADV	*	noch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	glauben	VVINF	*	glauben	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	könnten	VMFIN	*	können	pl	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	gleichwohl	ADV	*	gleichwohl	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	irrst	ADV	*	irrst	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	dich	PRF	*	dich	sg	-	-	(16)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	(S(NP*	der	pl	masc	-	(57
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Tempelherren	NN	*)	tempelherr	pl	masc	-	57)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Die	ART	(NP*	der	pl	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	Christen	NN	*)	christ	pl	masc	(MISC*)	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	sind	VAFIN	(S*	sein	pl	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	Schuld	NN	*	schuld	sg	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	sind	VAFIN	(S*	sein	pl	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	als	APPR	(PP*	als	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	Christen	NN	*)	christ	pl	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	17	Als	APPR	(PP*	als	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	18	Tempelherren	NN	*))))	tempelherr	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	19	Schuld	NN	*	schuld	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Durch	APPR	(VROOT(PSEUDO(S(PP*	durch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	*	der	sg	fem	-	(57)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	allein	ADV	(AP*	allein	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	Wird	NN	*))	werden	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	aus	APPR	(NP(PP*	aus	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	*	der	sg	fem	-	(40
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	Sache	NN	*)	sache	sg	fem	-	40)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	nichts	PIS	*))	nichts	*	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S(S*	sie	pl	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	wollen	VMFIN	*	wollen	pl	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Acca	NE	(MPN*	acca	-	-	-	(58
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	58)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Das	NE	*	der	sg	neut	-	(58)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	Richards	NE	*	richard	sg	*	-	(39|(37)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	Schwester	NE	*)	schwester	sg	fem	-	39)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	unserm	PPOSAT	(NP*	unser	*	*	-	(38|(26)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	Bruder	NN	*	bruder	*	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	Melek	NE	*))	melek	*	*	-	38)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	Zum	APPRART	(VP(PP*	zu	*	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	Brautschatz	NN	*)	brautschatz	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	bringen	VVINF	*)	bringen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	müßte	VMFIN	*	müssen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	schlechterdings	ADV	*	schlechterdings	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	16	Nicht	PTKNEG	(VP(VP*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	17	fahren	VVINF	*)	fahren	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	18	lassen	VVINF	*))	lassen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S(S*	daß	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	des	ART	(NP*	der	sg	masc	-	(59|(57
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ritters	NN	*)	ritter	sg	masc	-	57)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vorteil	NN	*	vorteil	sg	masc	-	59)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Gefahr	NN	*	gefahr	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	laufe	VVFIN	*)	laufen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	spielen	VVFIN	*	spielen	pl	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	sie	PPER	*	sie	pl	*	-	(57)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	(NP*	der	sg	masc	-	(60
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	Mönch	NN	*	mönch	sg	masc	-	60)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	Den	NE	*)	der	pl	masc	-	(60
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	albern	ADJD	*	albern	pl	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	Mönch	NN	*)	mönch	pl	masc	-	60)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	ob	KOUS	(S*	ob	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	im	APPRART	(PP*	in	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Fluge	NN	*	flug	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ein	ART	(NP*	ein	sg	masc	-	(59
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	guter	ADJA	*	gut	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	Streich	NN	*))	streich	sg	masc	-	59)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	gelänge	VVFIN	*)	gelingen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	:	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	haben	VAFIN	*	haben	pl	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	pl	*	-	(57)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	Des	ART	(VP(VP(NP*	der	sg	neut	-	(34
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	Waffenstillestandes	NN	*	waffenstillestand	sg	neut	-	34)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	Ablauf	NN	*	ablauf	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	kaum	ADV	*)	kaum	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	16	Erwarten	VVINF	*)	erwarten	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	17	können	VMINF	*))	können	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Lustig	NE	*	lustig	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(AP(AVP*	nur	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*)	so	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	weiter	ADV	*)	weiter	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPOSAT	(VROOT(PSEUDO(S(NP*	ihr	pl	*	-	(57
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Herren	NN	*)	herr	pl	-	-	57)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	weiter	PTKVZ	*)	weiter	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	schon	ADV	(AVP*	schon	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	recht	ADV	*))	recht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wär	NN	*	sein	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	(CS(S*	alle	sg	neut	-	(61)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	sonst	ADV	*	sonst	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*)	nur	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	es	PPER	*	es	sg	neut	-	(61)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	müßte	VMFIN	*))	müssen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*)	nun	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	irrte	VVFIN	*	irren	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PPER	*	dich	sg	-	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	sonst	ADV	*)	sonst	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	könnte	VMFIN	*	können	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	sonst	ADV	*	sonst	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	Dich	PRF	(VP*	dich	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	*	der	sg	fem	-	(62
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	Fassung	NN	*)	fassung	sg	fem	-	62)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	bringen	VVINF	*))	bringen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	(PP*	von	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	je	ADV	(AP*	je	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	Mich	ADV	*	mich	sg	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	immer	ADV	*))	immer	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	*	der	sg	fem	-	(62
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	Fassung	NN	*)	fassung	sg	fem	-	62)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	gebracht	VVPP	*)	bringen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	Libanon	NE	*)	libanon	sg	masc	-	(63)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	unserm	PPOSAT	*	unser	sg	masc	-	(64|(26)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	Vater	NN	*))	vater	sg	masc	-	64)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(64)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	unterliegt	VVFIN	*	unterliegen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	(NP*	der	pl	fem	-	(65
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sorgen	NN	*)	sorge	pl	fem	-	65)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*)	noch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	XY	*	O	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	weh	XY	*	weh	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(64)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	durch	PTKVZ	*	durch	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	es	PPER	(S*	es	sg	neut	-	(66)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	klemmt	VVFIN	*	klemmen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	sich	PRF	*	sich	sg	-	-	(66)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	aller	PIAT	(NP*	aller	pl	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	Orten	NN	*)))	ort	pl	fem	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	Es	PPER	(S*	es	sg	neut	-	(66)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	fehlt	VVFIN	*	fehlen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	bald	ADV	*	bald	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	da	ADV	*	da	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	16	bald	ADV	*	bald	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	17	dort	ADV	(NP*	dort	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	18	–	CARD	*)))))	–	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(16
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	16)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	klemmt	VVFIN	*)	klemmen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	fehlt	VVFIN	*)	fehlen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	sonst	ADV	*	sonst	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	als	KOKOM	*	als	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	was	PWS	*	was	sg	neut	-	(67
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	kaum	ADV	*	kaum	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	nennen	VVINF	*	nennen	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	würd	VAFIN	*	würd	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	ge	FM	*	GE	-	-	-	67)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	(67
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	ichs	NE	*	ichs	-	-	-	(67)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	überflüssig	ADJD	*	überflüssig	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	10	Und	KON	*	und	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	11	hab	VAFIN	*	hab	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	13	ichs	ADV	*	ichs	-	-	-	(67)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	16	so	ADV	*	so	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	17	unentbehrlich	ADJD	*	unentbehrlich	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	18	scheint	VVFIN	*	scheinen	sg	-	-	67)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	19	Wo	PWAV	*	wo	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	20	bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	21	Al-Hafi	NE	*	al-hafi	sg	masc	-	(3)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	22	denn	ADV	*	denn	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	23	?	$.	*	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	niemand	PIS	*	niemand	sg	masc	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	nach	APPR	(PP*	nach	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ihm	PPER	*)	ihm	sg	masc	-	(3)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	aus	PTKVZ	*)	aus	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(NP*	der	sg	neut	-	(67
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	leidige	ADJA	(PP*	leidig	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	verwünschte	ADJA	*	verwünschen	sg	neut	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	Geld	NN	*))	geld	sg	neut	-	67)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gut	ADJD	*	gut	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	3	Hafi	NE	(NP*	hafi	sg	*	-	(3)
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	5	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	6	du	PPER	*	du	sg	*	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	7	kömmst	VVFIN	*))	kömmsen	sg	-	-	-
Nathan_Act2_Scene1.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

#end document
