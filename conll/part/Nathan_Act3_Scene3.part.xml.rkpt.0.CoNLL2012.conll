#begin document (Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll); part 000
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Recha	NE	(VROOT(PSEUDO(CNP*	recha	-	-	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*)	daja	-	-	(PER*)	(0)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	(NP*	der	sg	neut	-	(15)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Daja	NE	*))	daja	-	-	(PER*)	(0)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(S(ISU*	so	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	schnell	ADJD	*))	schnell	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ihm	PPER	*	ihm	sg	masc	-	(16)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	an	PTKVZ	*)	an	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	fiel	VVFIN	*	fallen	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	masc	-	(16)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	auf	PTKVZ	*)	auf	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	jagt	VVFIN	*	jagen	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*)	ihn	sg	masc	-	(16)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laßt	VVIMP	*	lassen	pl	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	laßt	VVIMP	*	lassen	pl	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	denk	VVFIN	*	denk	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*	es	sg	neut	-	(15)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Kein	PIAT	*	kein	sg	neut	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	7	schlimmes	ADJA	*	schlimm	sg	neut	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Zeichen	NN	*	zeichen	sg	neut	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zeichen	NN	(VROOT(PSEUDO*	zeichen	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	*	und	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wovon	PWAV	*	wovon	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	etwas	PIS	*	etwas	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	vorgeht	VVFIN	*)	vorgehen	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	innerhalb	APPR	*	innerhalb	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(17)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	kocht	VVFIN	*	kochen	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Und	KON	(S*	und	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	6	überkochen	VVINF	*))	überkochen	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laßt	VVIMP	(VROOT(PSEUDO(S*	lassen	pl	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*	ihn	sg	masc	-	(16)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*)	nur	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(AVP*	nun	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ists	ADV	*	ists	-	-	-	(18)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	an	APPR	(PP*	an	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*))	euch	sg	masc	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	an	APPR	(PP*	an	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*))	sich	sg	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(0)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wirst	VVFIN	*	werden	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(16)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	(AP*	sich	sg	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	7	unbegreiflich	ADJD	*)))	unbegreiflich	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Bald	ADV	(VROOT(PSEUDO(S*	bald	-	-	-	(18
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*	nun	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	könnt	VVFIN	*	können	pl	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*	ihm	sg	masc	-	(16)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	(NP*	der	sg	fem	-	(19
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Unruh	NN	*))	unruh	sg	fem	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	7	all	PIAT	*	all	*	*	-	19)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	8	vergelten	VVFIN	*	vergeln	pl	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	10	die	ART	*	der	pl	neut	-	(19)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Er	PPER	(S*	er	sg	masc	-	(16)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Euch	PPER	(S(VP*	euch	pl	*	-	(16)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	13	gemacht	VVPP	*)	machen	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	14	hat	VAFIN	*)	haben	sg	-	-	18)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	16	allzustreng	ADJD	*)	allzustreng	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	18	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	19	allzu	PTKA	*	allzu	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	20	rachbegierig	ADJD	*))	rachbegierig	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wovon	PWAV	(VROOT(PSEUDO(S*	wovon	-	-	-	(20
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	(NP*	du	sg	*	-	(0)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sprichst	ADV	*)	sprichst	sg	-	-	20)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	(S*	der	sg	neut	-	(20)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	magst	VVFIN	*	magen	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	6	du	PPER	(VP*	du	sg	*	-	(0)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	7	selber	ADV	*	selber	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	8	wissen	VVINF	*)))	wissen	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	bereits	ADV	(AP(AVP*	bereits	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*)	so	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ruhig	ADJD	*	ruhig	-	-	-	(21)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	7	wieder	ADV	*))	wieder	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(21)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	(S(NP*	ja	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	das	PDS	*)	der	sg	neut	-	(21)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	6	bin	VAFIN	*))	sein	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenigstens	ADV	*	wenigstens	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gesteht	VVFIN	*	gesteht	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	*	daß	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	pl	-	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	6	seiner	PPOSAT	*	sein	sg	fem	-	(22|(16)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Unruh	NN	*	unruh	sg	fem	-	22)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	8	freut	VVFIN	*	freuen	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Und	KON	*	und	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	11	seiner	PPOSAT	*	sein	sg	fem	-	(22|(16)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Unruh	NN	*	unruh	sg	fem	-	22)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	13	danket	VVFIN	*	danket	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	15	was	PWS	*	was	sg	neut	-	(23
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	17	itzt	VVFIN	*	itzen	sg	-	-	23)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Von	APPR	*	von	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Ruh	NE	*	ruh	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	20	'	$(	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	21	genießt	VVFIN	*	genießen	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mir	PPER	(VROOT(PSEUDO(AP*	sich	sg	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	völlig	ADJD	*	völlig	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	unbewußt	ADJD	*)	unbewußt	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	(24
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	höchstens	ADV	*	höchstens	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*	dir	sg	*	-	(0)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	gestehen	VVINF	*	gestehen	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	6	könnte	VMFIN	*	können	sg	-	-	24)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Wär	NN	*	sein	sg	masc	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	11	daß	KOUS	*	daß	-	-	-	(24
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	12	es	PPER	*	es	sg	neut	-	(25)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	13	mich	PPER	*	mich	sg	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	14	–	VVFIN	*	–	pl	masc	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	15	mich	PPER	*	mich	sg	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	16	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	17	befremdet	VVFIN	*	befremdet	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	19	wie	KOKOM	*	wie	-	-	-	24)|(25)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Auf	APPR	*	auf	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	21	einen	ART	*	ein	sg	masc	-	(19
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	22	solchen	PIAT	*	solcher	sg	masc	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	23	Sturm	NN	*	sturm	sg	masc	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	24	in	APPR	*	in	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	25	meinem	PPOSAT	*	mein	sg	masc	-	(26|(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	26	Herzen	NN	*	herz	sg	masc	-	19)|26)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	27	So	ADV	*	so	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	28	eine	ART	*	ein	sg	fem	-	(23
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	29	Stille	NN	*	stille	sg	fem	-	23)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	30	plötzlich	ADJD	*	plötzlich	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	31	folgen	VVINF	*	folgen	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	32	können	VMINF	*	können	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	33	.	$.	*	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sein	NN	(VROOT(PSEUDO(CS(S(NP*	sein	sg	masc	-	(27|(16)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	voller	APPR	(PP*	voll	sg	masc	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Anblick	NN	*))	anblick	sg	masc	-	27)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	sein	PPOSAT	(NP*	sein	sg	neut	-	(16)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Gespräch	NN	*))	gespräch	sg	neut	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	7	sein	PPOSAT	(S(NP*	sein	-	-	-	(16)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Tun	NN	*)	tun	*	*	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Hat	VAFIN	*))	haben	sg	*	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	10	mich	PPER	*	mich	sg	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gesättigt	VVPP	(VROOT(PSEUDO(VP*	gesättigt	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	schon	ADV	(S*))	schon	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gesättigt	VVPP	*	gesättigen	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	*	nun	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	6	sagen	VVINF	*	sagen	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	8	nein	PTKANT	*	nein	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	9	–	XY	*	–	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	10	bei	APPR	*	bei	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	11	weitem	ADJA	*	weit	sg	neut	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	13	–	XY	*	–	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Den	NE	(VROOT(PSEUDO(S*	der	pl	masc	-	(28
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	heißen	VVFIN	*	heiß	pl	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Hunger	NN	(VP*	hunger	pl	masc	-	28)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	gestillt	VVPP	*))	stillen	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ja	ADV	(VP*	ja	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(0)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*))	so	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	6	willst	VMFIN	*)	wollen	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(0)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	eben	ADV	*	eben	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(16)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mir	NE	(VP*	sich	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ewig	ADJD	(AP*	ewig	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wert	ADJD	*	wert	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ewig	ADJD	*	ewig	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	8	werter	ADJD	(AP*	wert	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	10	als	KOKOM	(NP*	als	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Mein	PPOSAT	*	mein	sg	neut	-	(29|(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Leben	NN	*)))	leben	sg	neut	-	29)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	13	bleiben	VVINF	*))	bleiben	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	14	:	$.	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	15	wenn	ADV	(S*	wenn	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	16	auch	ADV	*	auch	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	17	schon	ADV	*	schon	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	18	mein	PPOSAT	(NP*	mein	sg	neut	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Puls	NN	*)	pul	sg	neut	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	21	mehr	ADV	*)	mehr	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	22	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	23	seinem	PPOSAT	*	sein	sg	masc	-	(30|(16)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	24	bloßen	ADJA	*	bloß	sg	masc	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	25	Namen	NN	*)	name	sg	masc	-	30)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	26	wechselt	VVFIN	*)	wechseln	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	27	;	$.	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	28	Nicht	PTKNEG	(S(AVP*	nicht	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	29	mehr	ADV	*)	mehr	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	30	mein	PPOSAT	(NP*	mein	-	-	-	(26|(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	31	Herz	NN	*)	herz	-	-	-	26)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	32	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	33	so	ADV	(CS(S(AVP*	so	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	34	oft	ADV	*)	oft	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	35	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	36	an	APPR	(PP*	an	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	37	ihn	PPER	*)	ihn	sg	masc	-	(16)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	38	denke	VVFIN	*)	denken	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	39	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	40	Geschwinder	NN	(S*	geschwind	pl	neut	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	41	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	42	stärker	ADJD	*	stark	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	43	schlägt	VVFIN	*))))	schlagen	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	44	.	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	schwatz	VVFIN	*	schwatz	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Komm	NN	(VROOT(PSEUDO(S(CNP*	komm	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Komm	NN	*	komm	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	liebe	NN	(NP*	lieben	-	-	-	(0
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Daja	NE	*))	daja	-	-	(PER*)	0)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	7	wieder	ADV	(PP*	wieder	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	8	an	APPR	*	an	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	9	das	ART	*	der	sg	neut	-	(31
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Fenster	NN	*)	fenster	sg	neut	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	31)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Das	PRELS	(S*	der	sg	neut	-	(31)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	13	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	14	die	ART	*	der	pl	fem	-	(32
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Palmen	NN	*)	palme	pl	fem	-	32)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	16	sieht	VVFIN	*))	sehen	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(16)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Wohl	ADV	(AVP*	wohl	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	*)	noch	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ganz	ADV	*	ganz	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	8	gestillt	VVPP	*)	stillen	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	10	der	ART	(NP*	der	sg	masc	-	(28
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	11	heiße	ADJA	*	heiß	sg	masc	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Hunger	NN	*))	hunger	sg	masc	-	28)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	*	nun	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	werd	VVFIN	*	werden	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	*	auch	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	die	ART	*	der	pl	fem	-	(32
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Palmen	NN	*	palme	pl	fem	-	32)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	7	sehn	CARD	*	sehn	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	10	ihn	PPER	*	ihn	sg	masc	-	(16)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	11	bloß	ADV	*	bloß	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	12	untern	ADJD	*	untern	-	-	-	(32
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Palmen	NN	*	palme	-	-	-	32)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Diese	PDAT	(VROOT(PSEUDO(S(NP*	dieser	sg	fem	-	(23
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kälte	NN	*)	kälte	sg	fem	-	23)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Beginnt	VVFIN	*	beginnen	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	*	auch	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ein	ART	(NP*	ein	sg	neut	-	(28
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	6	neues	ADJA	*	neu	sg	neut	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Fieber	NN	*)	fieber	sg	neut	-	28)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	*)	nur	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	(23
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kält	NN	*	kält	pl	-	-	23)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	kalt	ADJD	*))	kalt	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	1	sehe	VVFIN	*	sehen	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wahrlich	ADJD	*	wahrlich	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nicht	PTKNEG	(AVP(AVP*	nicht	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	4	minder	ADV	*)	minder	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	5	gern	ADV	*)	gern	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	9	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Ruhe	NN	*)	ruhe	sg	fem	-	(23)
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	11	sehe	VVFIN	*))	sehen	sg	-	-	-
Nathan_Act3_Scene3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

#end document
