#begin document (Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll); part 000
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Szene	NN	(VROOT(PSEUDO*	szene	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nathans	NE	*	nathan	sg	*	-	(15|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Hause	NN	*)	haus	sg	neut	-	15)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Recha	NE	(VROOT(PSEUDO(CNP*	recha	-	-	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*)	daja	-	-	(PER*)	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*	daja	-	-	(PER*)	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	drückte	VVFIN	*	drücken	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	sich	PRF	*	sich	sg	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	mein	PPOSAT	(NP*	mein	sg	masc	-	(1|(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Vater	NN	*)	vater	sg	masc	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	aus	PTKVZ	*)	aus	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	»	XY	*	»	-	-	-	(16
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dürf	VMFIN	*	dürf	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihn	PPER	*	ihn	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	jeden	PIAT	*	jeder	sg	masc	-	(18
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Augenblick	NN	*	augenblick	sg	masc	-	18)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	erwarten	VVINF	*	erwarten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	«	XY	*	«	-	-	-	16)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(16)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	klingt	VVFIN	*	klingen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	–	NE	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wahr	PTKVZ	*)	wahr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ob	KOUS	*	ob	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*)	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	bald	ADV	(S*	bald	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Erscheinen	NN	*	erscheinen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	werde	VAFIN	*)	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	viel	PIAT	(NP*	viel	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Augenblicke	NN	*)	augenblick	*	*	-	(19)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Sind	VAFIN	*)	sein	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	aber	ADV	(AVP*	aber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	schon	ADV	*)	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	vorbei	ADV	*	vorbei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	*	ah	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	(S*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wer	PWS	(S*	wer	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	denkt	VVFIN	*))	denken	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	An	APPR	*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	(NP*	der	pl	fem	-	(20
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	verflossenen	ADJA	*)	verflossen	pl	fem	-	20)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	allein	ADV	(VP(PP*	allein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	In	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	jedem	PIAT	*	jeder	sg	masc	-	(21
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nächsten	ADJA	*	nächster	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Augenblicke	NN	*)	augenblick	pl	*	-	21)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	leben	VVINF	*))	leben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(22)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(VP(AVP*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	einmal	ADV	*)	einmal	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	kommen	VVINF	*	kommen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	der	PRELS	(S*	der	sg	masc	-	(22)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ihn	PPER	*	ihn	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	bringt	VVFIN	*)))	bringen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	KON	(VROOT(PSEUDO(S*	O	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	(NP*	der	sg	fem	-	(23
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	verwünschten	ADJA	*	verwünscht	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Botschaft	NN	*)	botschaft	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	dem	ART	*	der	sg	masc	-	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Sultan	NE	*))	sultan	sg	masc	-	23)|7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*	nathan	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	hätte	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	sicher	ADJD	*	sicher	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ohne	APPR	(PP*	ohne	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	sie	PPER	*)	sie	pl	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ihn	PPER	*	ihn	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	gleich	ADV	*	gleich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	hergebracht	VVPP	*))	herbringen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(22)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Gekommen	NN	*	gekommen	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	dieser	PDAT	*	dieser	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Augenblick	NN	*	augenblick	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	denn	ADV	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	meiner	PIAT	*	mein	pl	masc	-	(24|(25|(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Wünsche	NN	*	wunsch	pl	masc	-	25)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	wärmster	ADJD	*	wärmster	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	innigster	ADJA	*	innig	sg	masc	-	24)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Erfüllet	NN	*	erfüllet	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	dann	ADV	*	dann	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dann	ADV	*	dann	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	dann	ADV	*	dann	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dann	ADV	*	dann	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	hoff	VVFIN	*	hoff	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	daß	KOUS	*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	meiner	PPOSAT	*	mein	pl	masc	-	(26|(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Wünsche	NN	*	wunsch	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	wärmster	ADJA	*	wärmster	pl	masc	-	26)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Soll	NN	*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	in	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Erfüllung	NN	*	erfüllung	sg	fem	-	(27)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	gehen	VVINF	*	gehen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(CS(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dann	ADV	*	dann	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	In	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	meiner	PPOSAT	*	mein	sg	fem	-	(28|(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Brust	NN	*	brust	sg	fem	-	28)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	an	APPR	(PP*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	dessen	PDS	*))	der	sg	masc	-	(29|(24)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Stelle	NN	*	stelle	sg	fem	-	29)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	treten	VVFIN	*)	treten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Die	ART	(S*	der	sg	fem	-	(28)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	schon	ADV	*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	verlernt	VVPP	*	verlernen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	ohn	PPER	(VP*	ohn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	einen	ART	(PP*	ein	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	herrschenden	ADJA	*	herrschend	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Wunsch	NN	*	wunsch	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	aller	PIAT	(NP*	aller	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Wünsche	NN	*))	wunsch	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	sich	PRF	*	sich	pl	-	-	(28)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	dehnen	VVINF	*))))	dehnen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(DL*	ah	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	(S*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	erschrecke	VVFIN	*))	erschrecken	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PTKANT	*	mein	sg	masc	-	(26
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mein	PPOSAT	*	mein	sg	masc	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Wunsch	NN	*	wunsch	sg	masc	-	26)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	dann	ADV	*	dann	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	An	APPR	*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	des	ART	*	der	sg	masc	-	(29|(24
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	erfüllten	ADJA	*	erfüllt	sg	masc	-	24)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Stelle	NN	*	stelle	sg	fem	-	29)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	treten	VVINF	*	treten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	meiner	PIS	*	mein	sg	fem	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	*	mein	sg	masc	-	(26|(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wunsch	NN	*	wunsch	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	dich	PRF	*	dich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Europa	NE	*	europa	sg	neut	(LOC*)	(30)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	dich	PRF	*	dich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	in	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Händen	NN	*	hand	pl	fem	-	(31)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	wissen	VVINF	*	wissen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	welche	PWAT	*	welcher	sg	fem	-	(31)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	deiner	PPOSAT	*	dein	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	würdig	ADJD	*	würdig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	sind	VAFIN	*	sein	pl	-	-	26)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	irrst	VVFIN	*)	irrst	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	diesen	PDAT	(NP*	dieser	sg	masc	-	(26
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Wunsch	NN	*)	wunsch	sg	masc	-	26)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	deinem	ADJD	*))	dein	sg	masc	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	macht	VVFIN	(S*	machen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Das	ART	(VP(NP*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	nämliche	ADJA	*)	nämlich	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	verhindert	VVPP	*	verhindern	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	er	PPER	*	er	sg	masc	-	(26)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	meiner	PPOSAT	(VP(NP*	mein	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Je	NN	*)	je	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	werden	VAINF	*)	werden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	kann	VMFIN	*)))	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dich	PPER	*	dich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	zieht	VVFIN	*	ziehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dein	PPOSAT	*	dein	sg	neut	-	(32|(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vaterland	NN	*	vaterland	sg	neut	-	32)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	meines	PIS	*	mein	sg	masc	-	(353)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	meines	PPOSS	*	mein	sg	masc	-	(353)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	sollte	VMFIN	*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	mich	PPER	*	mich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	halten	VVINF	*	halten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	neut	-	(34
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Bild	NN	*	bild	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Deinen	NN	*)	dein	pl	fem	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	das	PRELS	(S*	der	sg	neut	-	(34)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	deiner	PPOSAT	*	dein	sg	fem	-	(35|(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Seele	NN	*)	seele	sg	fem	-	35)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Noch	ADV	(AVP*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	verloschen	ADJA	(NP*	verlosch	-	-	-	34)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Als	NN	*)	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	die	ART	(S*	der	sg	fem	-	(36
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	sehn	CARD	*	sehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	und	KON	(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	greifen	VVINF	*	greifen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	kann	VMFIN	*))	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	und	KON	(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	hören	VVINF	*	hören	-	-	-	36)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	Die	ART	(NP*	der	pl	neut	-	(36
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	Meinen	NN	*))))	meinen	pl	neut	-	36)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sperre	VVFIN	(VROOT(PSEUDO(S*	sperre	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	dich	PPER	*	dich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	(NP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	viel	PIS	*)	viel	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	du	PPER	*	du	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	willst	VMFIN	*)	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Des	ART	(VROOT(PSEUDO(S(NP*	der	-	-	-	(37|(38
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Himmels	NN	*	himmel	pl	masc	-	38)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wege	NN	*)	weg	pl	masc	-	37)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	sind	VAFIN	*	sein	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	des	ART	(NP*	der	sg	masc	-	(38
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Himmels	NN	*	himmel	sg	masc	-	38)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Wege	NN	*))	weg	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(39)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	dein	PIAT	(NP*	dein	sg	masc	-	(17|(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Retter	NN	*	retter	sg	masc	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	selber	ADV	*)	selber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	wäre	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Durch	NN	*	durch	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	(NP*	der	sg	masc	-	(39)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	sein	PPOSAT	*	sein	sg	masc	-	(38|(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Gott	NN	*)	gott	sg	masc	(PER*)	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	für	APPR	(S(PP*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	den	PRELS	*)	der	sg	masc	-	(38)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	er	PPER	*	er	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	kämpft	VVFIN	*	kämpfen	sg	-	-	38)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	dich	PPER	*	dich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	Das	ART	(NP*	der	sg	neut	-	(40
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	Land	NN	*))	land	sg	neut	-	40)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	dich	PPER	(VP*	dich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	dem	ART	*	der	sg	neut	-	(41
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	Volke	NN	*)	volk	sg	neut	-	41)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	führen	VVINF	*)	führen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	wollte	VMFIN	*)	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	Für	APPR	(S(PP*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	welche	PRELS	*)	welcher	pl	masc	-	(41)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	du	PPER	*	du	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	34	geboren	VVPP	*	gebären	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	35	wurdest	VAFIN	*))	wurdest	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	36	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daja	NE	(VROOT(PSEUDO(MPN*	daja	-	-	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S(S*	was	sg	neut	-	(42
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	sprichst	ADV	*	sprichen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	da	ADV	*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	wieder	ADV	*)	wieder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	liebe	VVFIN	*	lieben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Daja	NE	*)	daja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	hast	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	wahrlich	ADJD	*	wahrlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	deine	PPOSAT	(NP*	dein	-	-	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	sonderbaren	ADJA	*	sonderbar	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Begriffe	NN	*))	begreifen	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	»	XY	(VROOT(PSEUDO*	»	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sein	NN	*	sein	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	sein	PPOSAT	(NP*	sein	sg	masc	-	(38|(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Gott	NN	*)	gott	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	für	APPR	*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	den	ART	*	der	sg	masc	-	(38)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	kämpft	VVFIN	*	kämpfen	sg	-	-	38)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	«	XY	*	«	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wem	PWS	(VROOT(PSEUDO(S*	wem	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	eignet	VVFIN	*	eignen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Gott	NN	*)	gott	sg	masc	-	(43)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(38)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	für	APPR	(VP(PP*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	*	ein	sg	neut	-	(364
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Gott	NN	*	gott	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	364)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Der	PRELS	(S*	der	sg	masc	-	(44)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	einem	ART	(NP*	ein	sg	neut	-	(46
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Menschen	NN	*)	mensch	sg	neut	-	46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	eignet	VVFIN	*))	eignen	sg	-	-	42)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Muß	NN	(VP*	müssen	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	kämpfen	VVINF	*)	kämpfen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	lassen	VVINF	*))	lassen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(S*	und	-	-	-	(47
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wie	PWAV	*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	weiß	VVFIN	*	weiß	sg	-	-	47)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Man	PIS	(AVP*	man	sg	*	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	*)	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	für	APPR	(S(PP*	für	-	-	-	(48
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	welchen	PWAT	*	welcher	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Erdkloß	NN	*)	erdkloß	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	man	PIS	*	man	sg	*	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	geboren	VVPP	*	gebären	-	-	-	48)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	mans	PIS	(S*	man	sg	*	-	(367)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	für	APPR	(AVP(AVP*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	den	ART	*)	der	sg	masc	-	(49)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	ist	VAFIN	*)	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	auf	APPR	(NP(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	welchem	PRELS	*)	welcher	sg	masc	-	(49)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	man	PIS	*))))	man	sg	*	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	Geboren	NN	*	gebären	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mein	PPOSAT	(NP*	mein	sg	masc	-	(1|(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vater	NN	*)	vater	sg	masc	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	dich	PPER	*	dich	sg	-	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	hörte	VVFIN	*)	hören	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	tat	VVFIN	*	taten	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*	dir	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	immer	ADV	(AVP*	immer	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	*))	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	mein	PPOSAT	(NP*	mein	sg	neut	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Glück	NN	*	glück	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	So	ADV	(VP(AP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	weit	ADJD	*)	weit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	ihm	PPER	*)	ihm	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	als	APPR	(PP*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	möglich	ADJD	*)	möglich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	vorzuspiegeln	VVIZU	*))	vorspiegeln	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	tat	VVFIN	*	taten	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	dir	PPER	*	dir	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	den	ART	(NP*	der	sg	masc	-	(50
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Samen	NN	*	samen	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	(NP*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Vernunft	NN	*))	vernunft	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	50)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Den	NE	(S*	der	sg	masc	-	(50)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	so	ADV	(AP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	rein	ADJD	*	rein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	meine	PPOSAT	*	mein	sg	fem	-	(51|(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Seele	NN	*))	seele	sg	fem	-	51)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	streute	VVFIN	*	streuen	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Mit	APPR	(VP(PP*	mit	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	deines	PPOSAT	*	dein	sg	neut	-	(32|(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	Landes	NN	*)	land	sg	neut	-	32)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	Unkraut	NN	(CNP*	unkraut	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	oder	KON	*	oder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	Blumen	NN	*)	blume	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	So	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	gern	ADV	*	gern	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	mischen	VVINF	*))))	mischen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Liebe	NN	(NP*	liebe	pl	*	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	liebe	VVFIN	(S*	lieben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Daja	NE	*	daja	-	-	(PER*)	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Er	PPER	(S*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	deine	PPOSAT	(NP*	dein	pl	*	-	(52|(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	bunten	ADJA	*	bunt	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Blumen	NN	*)	blume	pl	fem	-	52)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*)))	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Auf	APPR	*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	meinem	PPOSAT	(NP*	mein	sg	masc	-	(51|(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Boden	NN	*)	boden	sg	masc	-	51)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*	dir	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	sagen	VVINF	(VP*	sagen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ich	PPER	(VP(AVP(S(NP*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	selber	ADV	*)	selber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	fühle	VVFIN	*	fühlen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	meinen	PPOSAT	(NP*	meinen	sg	masc	-	(51|(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Boden	NN	*)	boden	sg	masc	-	51)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Sie	PPER	*	sie	sg	*	-	(52)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	noch	ADV	(AP*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	schön	ADJD	*)	schön	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	ihn	PPER	*	ihn	sg	masc	-	(51)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	kleiden	VVFIN	*))	kleiden	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	so	ADV	*)	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	entkräftet	VVPP	*	entkräften	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	So	ADV	(VP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	ausgezehrt	VVPP	*	auszehren	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	durch	APPR	(PP*	durch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	deine	PPOSAT	*	dein	pl	masc	-	(52|(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	Blumen	NN	*)))))	blume	pl	masc	-	52)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	fühle	VVFIN	(S*	fühlen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	In	APPR	(NP(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	ihrem	PPOSAT	*	ihr	sg	masc	-	(53|(53)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	Dufte	NN	*)	dufte	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	34	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	35	sauersüßem	ADJA	*	sauersüß	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	36	Dufte	NN	*)	dufte	sg	masc	-	53)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	37	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	38	Mich	PPER	*	mich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	39	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	40	betäubt	VVFIN	*	betäuben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	41	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	42	so	ADV	(AP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	43	schwindelnd	ADJD	*))	schwindelnd	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	44	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Dein	PPOSAT	(S(NP*	dein	-	-	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Gehirn	NN	*)	gehirn	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	dessen	PDS	(VP*	der	sg	neut	-	(53)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	ADV	*	mehr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	gewohnt	VVPP	*))	wohnen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	tadle	VVFIN	*	tadlen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	drum	ADV	*	drum	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Die	ART	(NP*	der	pl	*	-	(54
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	stärkern	TRUNC	*	stärkern	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Nerven	NN	*)	nerv	pl	masc	-	54)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	die	PRELS	(S*	der	pl	masc	-	(54)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	ihn	PPER	*	ihn	sg	masc	-	(53)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	vertragen	VVFIN	*))	vertragen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(CS(S*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	schlägt	VVFIN	*	schlagen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(53)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKVZ	*)	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	schon	ADV	(S(NP*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	dein	PPOSAT	*	dein	-	-	-	(55|(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Engel	NN	*	engel	sg	*	-	55)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	wenig	PIS	*	wenig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	fehlte	VVFIN	*	fehlen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	er	PPER	*	er	sg	masc	-	(55)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	mich	PPER	(NP*	mich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	zur	APPRART	(PP*	zu	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Närrin	NN	*)))))	närrin	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	Gemacht	VVPP	*))	gemacht	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Noch	ADV	*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	schäm	VVFIN	*	schäm	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	mich	PRF	*	mich	sg	-	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	vor	APPR	*	vor	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	meinem	PPOSAT	*	mein	sg	masc	-	(1|(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Vater	NN	*	vater	sg	masc	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Der	ART	*	der	sg	masc	-	(56
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Posse	NN	*	posse	sg	masc	-	56)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Posse	NN	(VROOT(PSEUDO*	posse	-	-	-	(56)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Als	KOKOM	*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ob	KOUS	*	ob	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	*	der	sg	masc	-	(50
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Verstand	NN	*	verstand	sg	masc	-	50)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	hier	ADV	*	hier	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	zu	APPR	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Hause	NN	*	haus	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	wäre	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Posse	NN	(VROOT(PSEUDO*	posse	-	-	-	(47)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Posse	NN	(VROOT(PSEUDO*	posse	-	-	-	(47)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	reden	VVINF	*	reden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	dürfte	VMFIN	*)	dürfen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Darfst	VVFIN	(VROOT(PSEUDO(S*	darfst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S(AVP(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ganz	ADV	*	ganz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ohr	NN	*)	ohr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	oft	ADV	*)	oft	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	es	PPER	*	es	sg	neut	-	(57)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	dir	PPER	*	dir	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Gefiel	NN	*	gefiel	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	von	APPR	(S(PP*	von	-	-	-	(57
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	deinen	PPOSAT	*	dein	pl	masc	-	(58|(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Glaubenshelden	NN	*)	glaubensheld	pl	masc	-	58)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	mich	PPER	*	mich	sg	*	-	57)|(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	unterhalten	ADJA	*)))	unterhalten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hab	XY	*	hab	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ihren	PPOSAT	*	ihr	sg	masc	-	(58)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Taten	NN	*	tat	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	stets	ADV	*	stets	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Bewunderung	NN	*	bewunderung	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	ihren	PPOSAT	*	ihr	pl	neut	-	(58)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Leiden	NN	*	leid	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Nicht	PTKNEG	*	nicht	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	immer	ADV	*	immer	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Tränen	NN	*	träne	pl	fem	-	(59)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	gern	ADV	*	gern	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	gezollt	VVPP	*	zollen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPOSAT	(VROOT(PSEUDO(S(NP*	ihr	sg	masc	-	(52|(58)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Glaube	NN	*	glaube	sg	masc	-	52)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Schien	NE	*)	schien	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*	sich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	(NP*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Heldenmäßigste	NN	*)	heldenmäßigster	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	An	APPR	(S(PP*	an	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihnen	PPER	*)	ihnen	pl	*	-	(58)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	nie	ADV	*))	nie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	(AVP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	viel	PIAT	(NP*	viel	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	tröstender	ADJA	*	tröstend	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	War	NN	*))	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	(NP*	der	sg	fem	-	(60
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Lehre	NN	*)	lehre	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Ergebenheit	NN	*	ergebenheit	sg	fem	-	60)|(61)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	In	APPR	(VP(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Gott	NN	*)	gott	sg	masc	-	(43)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	unserm	PPOSAT	*	unser	sg	masc	-	(62|(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Wähnen	NN	*	wähnen	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	über	APPR	(PP*	über	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Gott	NN	*))	gott	sg	neut	-	62)|(43)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	So	ADV	(CAVP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	ganz	ADV	*	ganz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	gar	ADV	(AVP*	gar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	abhängt	VVPP	*)))	abhängen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Liebe	NN	(NP*	liebe	sg	fem	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*	daja	sg	fem	(PER*)	0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Das	PDS	(CO(S*	der	sg	neut	-	(60)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	mein	PPOSAT	(VP(NP*	mein	sg	masc	-	(1|(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Vater	NN	*)	vater	sg	masc	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	uns	PPER	*	uns	pl	*	-	(63)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	(AVP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	oft	ADV	*)	oft	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	gesagt	VVPP	*))	sagen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Darüber	PROAV	(S*	darüber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	hast	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	du	PPER	(NP*	du	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	selbst	ADV	*)	selbst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	ihm	PPER	*)	ihm	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	oft	ADV	*	oft	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	Dich	PPER	*	dich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	einverstanden	ADJD	*)))	einverstanden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	warum	PWAV	(S(S*	warum	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	untergräbst	ADV	*	untergräbst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	Du	PPER	*	du	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	denn	ADV	(AVP*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	allein	ADV	*))	allein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	du	PPER	*	du	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	ihm	PPER	*)	ihm	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	34	zugleich	ADV	*	zugleich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	35	Gebauet	NN	*)	gebauet	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	36	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Liebe	NN	*	liebe	sg	fem	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*	daja	sg	fem	(PER*)	0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	*	der	sg	neut	-	(42)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	kein	PIAT	*	kein	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Gespräch	NN	*	gespräch	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	womit	PWAV	*	womit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	wir	PPER	*	wir	pl	*	-	(63)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	unserm	PPOSAT	*	unser	sg	masc	-	(17|(63)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Freund	NN	*	freund	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	'	$(	*	--	-	-	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	am	PTKA	*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	besten	ADJD	*	gut	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Entgegen	APPR	*	entgegen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	sehn	CARD	*	sehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Für	APPR	(VROOT(PSEUDO(S(PP*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*)	mich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	zwar	ADV	(NP*	zwar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*))	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S(AVP(S*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	*	sich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Mir	PPER	*	sich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	liegt	VVFIN	*	liegen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	daran	PROAV	(AP*	daran	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	unendlich	ADJD	*))	unendlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	ob	KOUS	*)	ob	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	auch	ADV	(NP*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	er	PPER	*))	er	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Horch	NE	(NP*	horch	-	-	(PER*)	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Daja	NE	*)	daja	-	-	(PER*)	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kommt	VVFIN	(S*	kommen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	an	APPR	*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	unsre	ADJA	(NP*	unsr	-	-	-	(64|(65)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Türe	NN	*)	türe	-	-	-	64)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	*	er	sg	masc	-	(66)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	wäre	VAFIN	*)	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	horch	PTKVZ	*	horch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Recha	NE	(VROOT(PSEUDO*	recha	-	-	(PER*)	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daja	NE	(VROOT(PSEUDO(S(CNP*	daja	-	-	(PER*)	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	masc	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Tempelherr	NN	*	tempelherr	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	dem	ART	(NP*	der	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	jemand	PIS	*	jemand	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	außen	ADV	(AP*	außen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	die	ART	*)	der	pl	neut	-	(64
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Türe	NN	*))))	türe	pl	neut	-	64)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	öffnet	VVFIN	*	öffnen	sg	-	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	den	ART	*	der	pl	neut	-	(67
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Worten	NN	*))	wort	pl	neut	-	67)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*))	recha	-	-	-	(2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	fährt	VVFIN	(VROOT(PSEUDO(CS(S*	fahren	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	zusammen	PTKVZ	*	zusammen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	faßt	VVFIN	(S*	fassen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	sich	PRF	*))	sich	sg	-	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	will	VMFIN	(S*	wollen	sg	-	-	(68
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihm	PPER	(VP*	ihm	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Füßen	NN	*)	fuß	pl	masc	-	(69)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	fallen	VVINF	*)))	fallen	-	-	-	68)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(NP*	er	sg	masc	-	(66)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ists	ADV	*)	ist	-	-	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mein	PPOSAT	(NP*	mein	sg	masc	-	(17|(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Retter	NN	*	retter	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*)	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ah	NE	*	ah	-	-	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dies	PDS	*	dieser	sg	neut	-	(68)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	vermeiden	VVINF	*	vermeiden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Erschien	VVFIN	*	erschien	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	bloß	ADV	*	bloß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	spät	ADJD	*	spät	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	–	XY	*	–	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CS(S*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ja	NN	(VP*	ja	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	*	der	pl	fem	-	(69
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Füßen	NN	*	fuß	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	dieses	PDAT	(NP*	dieser	sg	neut	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	stolzen	ADJA	*	stolz	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Mannes	NN	*	mann	sg	neut	-	69)|17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Nur	ADV	(NP*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Gott	NN	*)))	gott	sg	masc	(PER*)	(70)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	noch	ADV	(AVP*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	einmal	ADV	*)	einmal	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	danken	VVINF	*))	danken	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	(S(NP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	dem	ART	*	der	sg	masc	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Manne	NN	*)))	manne	sg	masc	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mann	NN	*)	mann	sg	masc	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	keinen	PIAT	(NP*	kein	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Dank	NN	*)	dank	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	will	VMFIN	(S*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ihn	PPER	*	ihn	sg	masc	-	(71)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	(AVP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	wenig	PIAT	*)))	wenig	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Als	KOUS	(CS(S*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	ihn	PPER	*	ihn	sg	masc	-	(71)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	der	ART	(NP*	der	sg	masc	-	(72
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Wassereimer	NN	*)	wassereimer	sg	masc	-	72)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	will	VMFIN	*)	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	der	PRELS	(S*	der	sg	masc	-	(72)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Dem	ART	*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Löschen	NN	*)	löschen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	so	ADV	(VP(AP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	geschäftig	ADJD	*)	geschäftig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	sich	PRF	*	sich	sg	-	-	(72)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	erwiesen	VVPP	*)))	erweisen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	PDS	(VROOT(PSEUDO(DL(S*	der	sg	masc	-	(72)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ließ	VVFIN	*	lassen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	(VP*	sich	sg	-	-	(72)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	füllen	VVINF	*))	füllen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ließ	VVFIN	(S*	lassen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	(VP*	sich	sg	-	-	(72)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	leeren	VVINF	*)	leer	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	mir	PPER	*	sich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Nichts	PIS	(NP*	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	dir	PPER	(S(NP*	dir	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	also	ADV	*	also	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	auch	ADV	(NP*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	der	ART	*	der	sg	masc	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Mann	NN	*)))))	mann	sg	masc	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(CS(S(VP(NP*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	*	der	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ward	NN	*)	ward	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	*	der	sg	fem	-	(73
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Glut	NN	*)	glut	sg	fem	-	73)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	hineingestoßen	VVPP	*)	hineinstoßen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Da	ADV	(S*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	fiel	VVFIN	*	fallen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	ungefähr	ADJD	*	ungefähr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	ihm	PPER	*	ihm	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	den	ART	*	der	sg	masc	-	(74
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Arm	NN	*)	arm	sg	masc	-	74)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Da	ADV	(S*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	blieb	VVFIN	*	bleiben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	ungefähr	ADJD	*	ungefähr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	so	ADV	(AVP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	ein	ART	*	ein	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	Funken	NN	*	funken	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	Auf	APPR	(PP*	auf	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	seinem	PPOSAT	*	sein	sg	masc	-	(75|(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	Mantel	NN	*)))	mantel	sg	masc	-	75)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	ihm	PPER	*	ihm	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	34	seinen	PPOSAT	*	sein	pl	masc	-	(74|(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	35	Armen	NN	*)	arm	pl	masc	-	74)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	36	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	37	Bis	APPR	(S(PP*	bis	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	38	wiederum	ADV	*)	wiederum	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	39	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	40	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	41	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	42	nicht	PTKNEG	*))))	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	43	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	44	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	45	uns	PPER	*	uns	pl	*	-	(76)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	46	beide	PIAT	(NP*	beide	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	47	Herausschmiß	NN	*)	herausschmiß	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	48	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	49	der	ART	*	der	sg	fem	-	(73
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	50	Glut	NN	*)))	glut	sg	fem	-	73)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	51	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	gibt	VVFIN	*	geben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	da	ADV	(VP(NP*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Zu	NN	*)	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	danken	VVINF	*))	danken	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	In	APPR	(S(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Europa	NE	*)	europa	sg	neut	(LOC*)	(30)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	treibt	VVFIN	*	treiben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(NP*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Wein	NN	*)	wein	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Zu	APPR	(VP(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	noch	ADV	*)	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	weit	ADJD	*	weit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	andern	VVINF	*))	anderer	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Taten	NN	*	tat	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherren	NN	(NP*	tempelherr	pl	fem	-	(77)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Die	PDS	(VP(AVP(CS(S*	der	pl	fem	-	(77)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	müssen	VMFIN	*	müssen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	einmal	ADV	(VP*	einmal	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	handeln	VVINF	*))	handeln	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	müssen	VMFIN	(S*	müssen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Wie	KOKOM	(NP(AP(AP(AVP*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	etwas	ADV	*)	etwas	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	besser	ADJD	*)	gut	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	zugelernte	ADJA	*)	zugelernt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Hunde	NN	*)	hund	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Sowohl	KON	*	sowohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Feuer	NN	*)))	feuer	sg	neut	-	(78)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	als	KOUS	*)	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	Wasser	NN	*)	wasser	sg	neut	-	(79)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	holen	VVINF	*))	holen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(S*	der	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	pl	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Erstaunen	NN	(CNP*	erstaunen	sg	neut	-	(80)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Unruhe	NN	*)	unruhe	sg	fem	-	(81)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	(NP*	der	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Zeit	NN	*))	zeit	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	über	APPR	(PP*	über	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	betrachtet	ADJD	*))	betrachten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	NE	(VROOT(PSEUDO(NP(MPN*	O	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Daja	NE	*)	daja	-	-	(PER*)	0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Daja	NE	*)	daja	-	-	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	in	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Augenblicken	NN	*	augenblick	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Des	ART	*	der	sg	masc	-	(82
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Kummers	NN	*	kummer	sg	masc	-	82)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	*	der	sg	masc	-	(83
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Galle	NN	*	galle	sg	masc	-	83)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	meine	PPOSAT	*	mein	sg	fem	-	(84|(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Laune	NN	*	laune	sg	fem	-	84)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Dich	PPER	*	dich	sg	-	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	übel	ADV	*	übel	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	anließ	VVFIN	*	anlassen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	warum	PWAV	*	warum	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	jede	PIAT	*	jeder	sg	fem	-	(356
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Torheit	NN	*	torheit	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	356)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Die	NN	*	der	sg	fem	-	(86)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	meiner	PPOSAT	*	mein	sg	fem	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	Zung	NN	*	zung	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	entfuhr	VVFIN	*	entfahren	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	hinterbringen	VVFIN	*	hinterbringen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(85)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	hieß	VVFIN	*	heißen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	(VP*	sich	sg	-	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	empfindlich	ADJD	*)	empfindlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	rächen	VVINF	*))	rächen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Daja	NE	*	daja	-	-	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	(PP*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	an	APZR	*)	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	besser	ADJD	*	gut	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	mich	PPER	*	mich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Bei	APPR	(VP(PP*	bei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	ihr	PPER	*)	ihr	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	vertreten	VVINF	*)	vertreten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	willst	VMFIN	*)	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	denke	VVFIN	*	denken	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ritter	NN	*	ritter	*	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ich	PPER	(S*	ich	sg	masc	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	denke	VVFIN	*	denken	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	diese	PDAT	(NP*	dieser	pl	neut	-	(86
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	kleinen	ADJA	*	klein	pl	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Stacheln	NN	*	stachel	pl	neut	-	86)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Ihr	PPER	(VP*	ihr	pl	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	an	APPR	(PP*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	das	ART	*	der	sg	neut	-	(51
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Herz	NN	*)	herz	sg	neut	-	51)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	geworfen	VVPP	*))	werfen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Euch	PPER	(VP*	euch	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	da	ADV	*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	sehr	ADV	*	sehr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	Geschadet	VVPP	*)	schaden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	haben	VAINF	*)))	haben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	hattet	VVFIN	*	hatten	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Kummer	NN	*)	kummer	sg	fem	-	(82)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wart	VVFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(NP(AP(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euerm	NN	*	euerm	sg	masc	-	(82|(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Kummer	NN	*)	kummer	sg	masc	-	82)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	geiziger	ADJA	*))	geizig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Als	APPR	(PP*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Euerm	PPOSAT	*	euerm	sg	masc	-	(87|(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Leben	NN	*))	leben	*	neut	-	87)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gutes	ADJA	(VROOT(PSEUDO(NP*	gut	sg	neut	-	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	holdes	ADJA	*	hold	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Kind	NN	*)	kind	sg	neut	-	2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*)	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	meine	PPOSAT	(S(NP*	mein	sg	fem	-	(88|(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Seele	NN	*	seele	sg	fem	-	88)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	zwischen	APPR	(PP*	zwischen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Auge	NN	(CNP*	auge	sg	masc	-	(89)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Ohr	NN	*)))	ohr	-	-	-	(90)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	geteilt	VVPP	*)	teilen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	(NP*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Mädchen	NN	*)	mädchen	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	(PP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Nein	NN	*	nein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	nein	PTKANT	(S*	nein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	das	PDS	*	der	sg	neut	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	es	PPER	*	es	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	das	ART	(NP*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	dem	ART	*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Feuer	NN	*))))	feuer	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Ich	PPER	(S*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	holte	VVFIN	*)	holen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wer	PWS	*	wer	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	hätte	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	die	PDS	(VP*	der	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	gekannt	VVPP	*))	kennen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Und	KON	(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	aus	APPR	(VP(PP*	aus	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	dem	ART	*	der	sg	neut	-	(73
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Feuer	NN	*)	feuer	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	73)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	geholt	VVPP	*))	holen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	hätte	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Auf	APPR	(VP(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*)	mich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	gewartet	VVPP	*))	warten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Zwar	ADV	*	zwar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	verstellt	VVPP	*	verstellen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	–	NN	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	(NP*	der	sg	masc	-	(91
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Schreck	NN	*)))	schreck	sg	masc	-	91)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Pause	NN	*	pause	-	-	-	(92
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	unter	APPR	*	unter	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	PRELS	*	der	sg	fem	-	(92)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	in	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Anschauung	NN	*	anschauung	sg	fem	-	(89)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihrer	PPOSAT	*	ihr	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	sich	PRF	*	sich	sg	-	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	wie	PWAV	*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	verliert	VVPP	*	verlieren	sg	-	-	92)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	aber	ADV	*	aber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	find	VAFIN	*	find	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	-	-	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	den	ART	(NP*	der	sg	masc	-	(93
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nämlichen	ADJA	*))	nämlich	-	-	-	93)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Dergleichen	NN	*	dergleichen	-	-	-	(94)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	bis	KOUS	*	bis	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	fortfährt	VVFIN	*	fortfahren	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	um	KOUI	*	um	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihn	PPER	*	ihn	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	in	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	seinem	PPOSAT	*	sein	sg	masc	-	(80|(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Anstaunen	NN	*	anstaune	sg	masc	-	80)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	unterbrechen	VVINF	*	unterbrechen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Ritter	NN	*	ritter	-	-	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	uns	PPER	*	uns	pl	*	-	(63)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	wo	PWAV	*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	Ihr	PPER	*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	lange	ADJA	*	lang	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	Gewesen	NN	*	gewesen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dergleichen	NN	(VROOT(PSEUDO(S*	dergleichen	-	-	-	(94)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	bis	KOUS	*	bis	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	fortfährt	VVFIN	*	fortfahren	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	um	KOUI	(VP*	um	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ihn	PPER	*	ihn	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	seinem	PPOSAT	*	sein	sg	masc	-	(80|(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Anstaunen	NN	*)	anstaune	sg	masc	-	80)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	unterbrechen	VVINF	*)))	unterbrechen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Fast	ADV	*	fast	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dürft	VMFIN	*	dürfen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	fragen	VVINF	*	fragen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	wo	PWAV	*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Ihr	PPER	*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	itzo	ADV	*	itzo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	seid	VAFIN	*	sein	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(95|(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	–	NN	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wo	PWAV	*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	sollte	VMFIN	*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	sein	VAINF	*	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	95)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihr	PPER	*	ihr	sg	fem	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	gewesen	VAPP	*	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wo	PWAV	*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	solltet	VMFIN	*	sollten	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	sein	VAINF	*	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	gewesen	VAPP	*	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(95)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	gut	ADJD	*))	gut	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auf	APPR	(VROOT(PSEUDO(S(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	–	NN	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	–	CARD	*))	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wie	PWAV	*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	heißt	VVFIN	*	heißen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(NP*	der	sg	masc	-	(96
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Berg	NN	*))	berg	sg	masc	-	96)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auf	APPR	(VROOT(PSEUDO(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sinai	NE	*)	sinai	sg	masc	-	(96)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auf	APPR	(VROOT(PSEUDO(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sinai	NE	*)	sinai	sg	masc	-	(96)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	*	ah	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	schön	ADJD	*	schön	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S(AVP(S*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	zuverlässig	ADJD	*	zuverlässig	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	einmal	ADV	*	einmal	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Erfahren	NN	*)	erfahren	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	ob	KOUS	*)	ob	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	es	PPER	*	es	sg	neut	-	(97)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	wahr	ADJD	*)	wahr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Obs	XY	*	obs	-	-	-	(98)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wahr	PTKVZ	*	wahr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Daß	KOUS	*	daß	-	-	-	(98
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	daselbst	ADV	*	daselbst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	*	der	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ort	NN	*	ort	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	APPR	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	sehn	CARD	*	sehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	wo	PWAV	*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Moses	NE	*	moses	sg	*	-	(99)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Vor	APPR	*	vor	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Gott	NN	*	gott	sg	masc	-	(38)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	gestanden	VVPP	*	gestehen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	als	KOKOM	*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	98)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(AVP*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	(S*	der	sg	neut	-	(98)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wo	PWAV	(S*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(99)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	stand	VVFIN	*)	stehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	stand	VVFIN	*	stehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(99)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	vor	APPR	(PP*	vor	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Gott	NN	*))	gott	sg	masc	(PER*)	(70)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	davon	PROAV	*	davon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	zur	APPRART	(AP(PP*	zu	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Gnüge	NN	*)	gnüge	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	schon	ADV	*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	bekannt	ADJD	*))	bekannt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Obs	NN	*	obs	-	-	-	(97)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wahr	PTKVZ	*	wahr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Möcht	NN	*	möcht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	gern	ADV	*	gern	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Euch	PPER	*	euch	-	-	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	erfahren	VVINF	*	erfahren	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	daß	KOUS	*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	–	PPER	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Daß	KOUS	*	daß	-	-	-	(97
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	es	PPER	*	es	sg	neut	-	(100)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	bei	APPR	*	bei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	weitem	ADJA	*	weit	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	mühsam	ADJD	*	mühsam	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	sei	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	Auf	APPR	*	auf	-	-	-	(100
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	diesen	PDAT	*	dieser	sg	masc	-	(96
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	Berg	NN	*	berg	sg	masc	-	96)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	hinauf	ADV	*	hinauf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	steigen	VVINF	*	steigen	-	-	-	100)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	als	KOKOM	*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	Herab	NN	*	herab	sg	neut	-	97)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	Gestiegen	VVPP	*	gestieg	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	34	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	35	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	36	wars	VVFIN	*	war	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	37	just	ADV	*	just	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	38	das	ART	*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	39	Gegenteil	NN	*	gegenteil	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	40	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ritter	NN	*	ritter	-	-	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	(S*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	kehrt	VVFIN	*)	kehren	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	(S*	euch	pl	-	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*)	sich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ab	PTKVZ	*)	ab	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wollt	VMFIN	(VROOT(PSEUDO(S*	wollen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*	mich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	sehn	VVINF	*)	sehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Weil	KOUS	(VROOT(PSEUDO(S*	weil	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	(VP*	euch	pl	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	hören	VVINF	*)	hören	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	will	VMFIN	*)	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Weil	KOUS	*	weil	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PRF	*	mich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wollt	VMFIN	*	wollt	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	merken	VVINF	*	merken	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	lassen	VVINF	*	lassen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	daß	KOUS	*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Ihr	PPER	*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	meiner	PPOSAT	*	mein	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Einfalt	NN	*	einfalt	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	lächelt	VVFIN	*	lächeln	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	daß	KOUS	*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Ihr	PPER	*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	lächelt	VVFIN	*	lächeln	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Euch	PPER	*	euch	sg	-	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	gar	ADV	*	gar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	Wichtigers	NN	*	wichtiger	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	Von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	diesem	PDAT	*	dieser	sg	masc	-	(96
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	heiligen	ADJA	*	heilig	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	Berg	NN	*	berg	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	aller	PIAT	*	aller	pl	masc	-	(101
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	Berge	NN	*	berg	pl	masc	-	96)|101)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	Zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	34	fragen	VVINF	*	fragen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	35	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	36	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wahr	PTKVZ	*	wahr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	ADV	*	euch	pl	masc	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	*	der	pl	neut	-	(102
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Augen	NN	*	auge	pl	neut	-	102)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	sehn	CARD	*))	sehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	schlagt	VVFIN	*	schlagen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	*	sie	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	nieder	PTKVZ	*)	nieder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	verbeißt	VVFIN	*	verbeißen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Das	ART	*	der	sg	neut	-	(103
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Lächeln	NN	*	lächeln	sg	neut	-	103)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	wie	PWAV	*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	erst	ADV	*	erst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Mienen	NN	*	miene	pl	fem	-	(104)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	In	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	zweifelhaften	ADJA	*	zweifelhaft	pl	*	-	(104
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Mienen	NN	*	miene	pl	*	-	104)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	lesen	VVINF	*	lesen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	deutlich	ADJD	*	deutlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	hör	ADJD	*	hör	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	vernehmlich	ADJD	*	vernehmlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	Mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	–	NN	*	–	-	-	(PER*)	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	verschweigt	VVFIN	*	verschweigen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	(NP*	ah	-	-	-	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Recha	NE	*)	recha	-	-	-	2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Recha	NE	(VROOT(PSEUDO(MPN*	recha	-	-	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wahr	ADJD	*	wahr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	gesagt	VVPP	*	sagen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	»	XY	*	»	*	*	-	(105
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Kennt	VVFIN	*	kennen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	erst	ADV	*	erst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	«	XY	*	«	-	-	-	105)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	*	wer	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wem	PWS	*	wem	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*	euch	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	(VP*	der	sg	neut	-	(105)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	gesagt	VVPP	*))	sagen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	»	XY	*	»	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kennt	VVFIN	*	kennt	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	erst	ADV	*	erst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	«	XY	*	«	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	hat	VAFIN	(VROOT(PSEUDO(S*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Euer	PPOSAT	(VP(NP*	euer	sg	masc	-	(1|(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Vater	NN	*)	vater	sg	masc	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	gesagt	VVPP	*)	sagen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Von	APPR	(VP(PP*	von	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	*)	euch	sg	neut	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	gesagt	VVPP	*))	sagen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	etwa	ADV	*	etwa	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	auch	ADV	*))	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	denn	ADV	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	*)	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Allein	ADV	(VROOT(PSEUDO(S*	allein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wo	PWAV	*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*)	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	(VROOT(PSEUDO(S*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euer	ADJA	(NP*	euer	sg	masc	-	(1|(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Vater	NN	*))	vater	sg	masc	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ist	VAFIN	(VROOT(PSEUDO(S*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Beim	APPRART	(PP*	bei	*	*	-	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Sultan	NN	*))	sultan	sg	*	-	7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ohne	APPR	(VROOT(PSEUDO(PP*	ohne	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Zweifel	NN	*)	zweifel	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Noch	ADV	(VROOT(PSEUDO(NP*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	(AVP*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	da	KOUS	*))	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	O	XY	*	O	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(17|(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vergeßlichen	NN	*	vergeßlichen	pl	*	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	(VROOT(PSEUDO(S*	nein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nein	PTKANT	(AVP(S*	nein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	da	ADV	(S*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	schwerlich	ADJD	*))	schwerlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	mehr	ADV	*))	mehr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	(S*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	dort	ADV	(VP*	dort	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	unten	ADV	*	unten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Dem	ART	*	der	sg	neut	-	(106
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Kloster	NN	*	kloster	sg	neut	-	106)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	meiner	PIS	*)	mein	sg	fem	-	(362)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	warten	VVINF	*	warten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	ganz	ADV	(AVP*	ganz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	gewiß	ADV	*)))	gewiß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	redten	VVFIN	*	reden	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mein	PPOSAT	*	mein	sg	-	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	wir	PPER	*	wir	pl	*	-	(107)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	es	PPER	*	es	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	ab	PTKVZ	*	ab	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Erlaubt	VVPP	*	erlauben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	geh	XY	*	gehn	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	hol	VVFIN	*	hol	sg	-	-	(108
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ihn	PPER	*	ihn	sg	masc	-	108)|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(108)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	meine	PPOSAT	(NP*	mein	sg	fem	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sache	NN	*))	sache	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Bleibt	VVFIN	(VROOT(PSEUDO(S*	bleiben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ritter	NN	*	ritter	*	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	bleibt	VVFIN	*)	bleiben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	bring	VVFIN	*	bring	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	unverzüglich	ADJD	*)	unverzüglich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(NP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(CO(AVP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*)))	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	sieht	VVFIN	*	sehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	entgegen	PTKVZ	*	entgegen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	*	euch	pl	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dazu	PROAV	(VROOT(PSEUDO(S*	dazu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	könnte	VMFIN	*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	leicht	ADJD	*	leicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	wer	PWS	(S*	wer	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	weiß	VVFIN	*))	weiß	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Er	PPER	(S*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	könnte	VMFIN	*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	dem	ART	*	der	sg	masc	-	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Sultan	NN	*)	sultan	sg	masc	-	7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	leicht	ADJD	*)	leicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Ihr	PPER	(S*	ihr	pl	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Den	ART	(NP*	der	sg	masc	-	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Sultan	NN	*)	sultan	sg	masc	-	7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO(S(ISU*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	leicht	ADJD	(VP*	leicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Verlegenheit	NN	*)	verlegenheit	pl	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Gekommen	NN	*	gekommen	pl	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	sein	VAINF	*)	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Glaubt	VVFIN	(S*	glauben	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*)	sich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	(S*	es	sg	neut	-	(109)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Gefahr	NN	(NP*	gefahr	sg	fem	-	(110)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Wenn	KOUS	(S*	wenn	-	-	-	(109
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*)))	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	geh	XY	*	geh	-	-	-	109)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gefahr	NN	(VROOT(PSEUDO*	gefahr	sg	fem	-	(110)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	für	APPR	*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Gefahr	NN	*	gefahr	sg	fem	-	(110)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gefahr	NN	(VROOT(PSEUDO(CS(S*	gefahr	sg	fem	-	(110
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	für	APPR	(PP*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*)	mich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	für	APPR	(PP*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*))	euch	pl	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	für	APPR	(S(PP*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihn	PPER	*)	ihn	sg	masc	-	110)|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	schleunig	ADJD	*)))	schleunig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	schleunig	ADJD	*	schleunig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	geh	XY	*	gehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ab	NN	(VROOT(PSEUDO*	ab	-	-	-	(111
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	111)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Recha	NE	(VROOT(PSEUDO(CNP*	recha	-	-	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*)	daja	-	-	(PER*)	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	(NP*	der	sg	neut	-	(111)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Daja	NE	*))	daja	-	-	(PER*)	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(S(ISU*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	schnell	ADJD	*))	schnell	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ihm	PPER	*	ihm	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	an	PTKVZ	*)	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	fiel	VVFIN	*	fallen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	auf	PTKVZ	*)	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	jagt	VVFIN	*	jagen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*)	ihn	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laßt	VVIMP	*	lassen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	laßt	VVIMP	*	lassen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	denk	VVFIN	*	denk	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*	es	sg	neut	-	(111)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Kein	PIAT	*	kein	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	schlimmes	ADJA	*	schlimm	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Zeichen	NN	*	zeichen	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zeichen	NN	(VROOT(PSEUDO*	zeichen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wovon	PWAV	*	wovon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	etwas	PIS	*	etwas	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	vorgeht	VVFIN	*)	vorgehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	innerhalb	APPR	*	innerhalb	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(112)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	kocht	VVFIN	*	kochen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Und	KON	(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	überkochen	VVINF	*))	überkochen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laßt	VVIMP	(VROOT(PSEUDO(S*	lassen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihn	PPER	*	ihn	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*)	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(AVP*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ists	ADV	*	ists	-	-	-	(113)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	an	APPR	(PP*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*))	euch	sg	masc	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	an	APPR	(PP*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*))	sich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wirst	VVFIN	*	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	(AP*	sich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	unbegreiflich	ADJD	*)))	unbegreiflich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Bald	ADV	(VROOT(PSEUDO(S*	bald	-	-	-	(113
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	könnt	VVFIN	*	können	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*	ihm	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	(NP*	der	sg	fem	-	(114
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Unruh	NN	*))	unruh	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	all	PIAT	*	all	*	*	-	114)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	vergelten	VVFIN	*	vergeln	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	die	ART	*	der	pl	neut	-	(114)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Er	PPER	(S*	er	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Euch	PPER	(S(VP*	euch	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	gemacht	VVPP	*)	machen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	hat	VAFIN	*)	haben	sg	-	-	113)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	allzustreng	ADJD	*)	allzustreng	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	allzu	PTKA	*	allzu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	rachbegierig	ADJD	*))	rachbegierig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wovon	PWAV	(VROOT(PSEUDO(S*	wovon	-	-	-	(115
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	(NP*	du	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sprichst	ADV	*)	sprichst	sg	-	-	115)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	(S*	der	sg	neut	-	(115)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	magst	VVFIN	*	magen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	du	PPER	(VP*	du	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	selber	ADV	*	selber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	wissen	VVINF	*)))	wissen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	bereits	ADV	(AP(AVP*	bereits	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*)	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ruhig	ADJD	*	ruhig	-	-	-	(116)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	wieder	ADV	*))	wieder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(116)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	(S(NP*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	das	PDS	*)	der	sg	neut	-	(116)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	bin	VAFIN	*))	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenigstens	ADV	*	wenigstens	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gesteht	VVFIN	*	gesteht	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	pl	-	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	seiner	PPOSAT	*	sein	sg	fem	-	(81|(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Unruh	NN	*	unruh	sg	fem	-	81)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	freut	VVFIN	*	freuen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	seiner	PPOSAT	*	sein	sg	fem	-	(81|(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Unruh	NN	*	unruh	sg	fem	-	81)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	danket	VVFIN	*	danket	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	was	PWS	*	was	sg	neut	-	(117
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Ihr	PPER	*	ihr	pl	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	itzt	VVFIN	*	itzen	sg	-	-	117)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Ruh	NE	*	ruh	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	genießt	VVFIN	*	genießen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mir	PPER	(VROOT(PSEUDO(AP*	sich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	völlig	ADJD	*	völlig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	unbewußt	ADJD	*)	unbewußt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	(118
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	höchstens	ADV	*	höchstens	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*	dir	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	gestehen	VVINF	*	gestehen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	könnte	VMFIN	*	können	sg	-	-	118)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Wär	NN	*	sein	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	daß	KOUS	*	daß	-	-	-	(118
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	es	PPER	*	es	sg	neut	-	(119)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	mich	PPER	*	mich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	–	VVFIN	*	–	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	mich	PPER	*	mich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	befremdet	VVFIN	*	befremdet	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	wie	KOKOM	*	wie	-	-	-	118)|(119)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Auf	APPR	*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	einen	ART	*	ein	sg	masc	-	(114
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	solchen	PIAT	*	solcher	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	Sturm	NN	*	sturm	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	in	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	meinem	PPOSAT	*	mein	sg	masc	-	(51|(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	Herzen	NN	*	herz	sg	masc	-	114)|51)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	So	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	eine	ART	*	ein	sg	fem	-	(117
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	Stille	NN	*	stille	sg	fem	-	117)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	plötzlich	ADJD	*	plötzlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	folgen	VVINF	*	folgen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	können	VMINF	*	können	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sein	NN	(VROOT(PSEUDO(CS(S(NP*	sein	sg	masc	-	(120|(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	voller	APPR	(PP*	voll	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Anblick	NN	*))	anblick	sg	masc	-	120)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	sein	PPOSAT	(NP*	sein	sg	neut	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Gespräch	NN	*))	gespräch	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	sein	PPOSAT	(S(NP*	sein	-	-	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Tun	NN	*)	tun	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Hat	VAFIN	*))	haben	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	mich	PPER	*	mich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gesättigt	VVPP	(VROOT(PSEUDO(VP*	gesättigt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	schon	ADV	(S*))	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gesättigt	VVPP	*	gesättigen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	sagen	VVINF	*	sagen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	nein	PTKANT	*	nein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	bei	APPR	*	bei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	weitem	ADJA	*	weit	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	–	XY	*	–	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Den	NE	(VROOT(PSEUDO(S*	der	pl	masc	-	(121
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	heißen	VVFIN	*	heiß	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Hunger	NN	(VP*	hunger	pl	masc	-	121)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	gestillt	VVPP	*))	stillen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ja	ADV	(VP*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	du	PPER	*	du	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*))	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	willst	VMFIN	*)	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	eben	ADV	*	eben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(CS(S*	er	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mir	NE	(VP*	sich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ewig	ADJD	(AP*	ewig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wert	ADJD	*	wert	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ewig	ADJD	*	ewig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	werter	ADJD	(AP*	wert	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	als	KOKOM	(NP*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Mein	PPOSAT	*	mein	sg	neut	-	(122|(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Leben	NN	*)))	leben	sg	neut	-	122)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	bleiben	VVINF	*))	bleiben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	wenn	ADV	(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	schon	ADV	*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	mein	PPOSAT	(NP*	mein	sg	neut	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Puls	NN	*)	pul	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	mehr	ADV	*)	mehr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	seinem	PPOSAT	*	sein	sg	masc	-	(123|(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	bloßen	ADJA	*	bloß	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	Namen	NN	*)	name	sg	masc	-	123)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	wechselt	VVFIN	*)	wechseln	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	Nicht	PTKNEG	(S(AVP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	mehr	ADV	*)	mehr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	mein	PPOSAT	(NP*	mein	-	-	-	(51|(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	Herz	NN	*)	herz	-	-	-	51)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	so	ADV	(CS(S(AVP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	34	oft	ADV	*)	oft	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	35	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	36	an	APPR	(PP*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	37	ihn	PPER	*)	ihn	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	38	denke	VVFIN	*)	denken	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	39	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	40	Geschwinder	NN	(S*	geschwind	pl	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	41	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	42	stärker	ADJD	*	stark	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	43	schlägt	VVFIN	*))))	schlagen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	44	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	schwatz	VVFIN	*	schwatz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Komm	NN	(VROOT(PSEUDO(S(CNP*	komm	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Komm	NN	*	komm	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	liebe	NN	(NP*	lieben	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Daja	NE	*))	daja	-	-	(PER*)	0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	wieder	ADV	(PP*	wieder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	an	APPR	*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	das	ART	*	der	sg	neut	-	(124
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Fenster	NN	*)	fenster	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	124)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Das	PRELS	(S*	der	sg	neut	-	(124)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	die	ART	*	der	pl	fem	-	(125
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Palmen	NN	*)	palme	pl	fem	-	125)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	sieht	VVFIN	*))	sehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Wohl	ADV	(AVP*	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	noch	ADV	*)	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ganz	ADV	*	ganz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	gestillt	VVPP	*)	stillen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	der	ART	(NP*	der	sg	masc	-	(121
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	heiße	ADJA	*	heiß	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Hunger	NN	*))	hunger	sg	masc	-	121)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	werd	VVFIN	*	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	die	ART	*	der	pl	fem	-	(125
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Palmen	NN	*	palme	pl	fem	-	125)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	sehn	CARD	*	sehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	ihn	PPER	*	ihn	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	bloß	ADV	*	bloß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	untern	ADJD	*	untern	-	-	-	(125
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Palmen	NN	*	palme	-	-	-	125)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Diese	PDAT	(VROOT(PSEUDO(S(NP*	dieser	sg	fem	-	(117
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kälte	NN	*)	kälte	sg	fem	-	117)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Beginnt	VVFIN	*	beginnen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ein	ART	(NP*	ein	sg	neut	-	(121
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	neues	ADJA	*	neu	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Fieber	NN	*)	fieber	sg	neut	-	121)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	*)	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	RECHA	NE	(VROOT(PSEUDO*	recha	-	-	(LOC*)	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	2)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	(117
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kält	NN	*	kält	pl	-	-	117)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	kalt	ADJD	*))	kalt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	sehe	VVFIN	*	sehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wahrlich	ADJD	*	wahrlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nicht	PTKNEG	(AVP(AVP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	minder	ADV	*)	minder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	gern	ADV	*)	gern	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Ruhe	NN	*)	ruhe	sg	fem	-	(117)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	sehe	VVFIN	*))	sehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Szene	NN	(VROOT(PSEUDO(S*	szene	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Audienzsaal	NN	*	audienzsaal	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	dem	ART	*	der	sg	neut	-	(126
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Palaste	NN	*	palaste	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	des	ART	(NP*	der	sg	masc	-	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Saladin	NN	*))))	saladin	sg	masc	-	126)|7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO(CNP*	saladin	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sittah	NE	*)	sittah	sg	*	-	(127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	im	APPRART	(VROOT(PSEUDO(CPP(PP*	in	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Hereintreten	NN	*)	hereintreten	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	gegen	APPR	(PP*	gegen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	die	ART	*	der	sg	fem	-	(128
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Türe	NN	*))	türe	sg	fem	-	128)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hier	ADV	(VROOT(PSEUDO(S*	hier	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	bringt	VVFIN	*	bringen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	(NP*	der	sg	masc	-	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Juden	NN	*)	Jude	sg	masc	(MISC*)	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	her	PTKVZ	*	her	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	bald	ADV	*	bald	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	kömmt	VVFIN	*))	kömmen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	scheint	VVFIN	*	scheinen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	(VP*	sich	sg	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	eben	ADV	(AVP*	eben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	übereilen	VVINF	*)))	übereilen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(127
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	127)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	*	der	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Hand	NN	*)	hand	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	gleich	ADV	*	gleich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	finden	VVINF	*)))	finden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Schwester	NN	(VROOT(PSEUDO*	schwester	sg	masc	-	(127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Schwester	NN	(VROOT(PSEUDO*	schwester	sg	masc	-	(127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(127
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	127)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Tust	VVFIN	(VROOT(PSEUDO(S*	tust	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Als	APPR	(S*	als	-	-	-	(129
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	stünde	VVFIN	*	stehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	dir	PPER	*	dir	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	(NP*	ein	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Treffen	NN	*)	treffen	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	vor	PTKVZ	*))	vor	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	129)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	ART	(NP*	der	sg	neut	-	(129)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Waffen	NN	*)	waffe	pl	fem	-	(130
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	die	PRELS	(S*	der	sg	fem	-	(130)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	(VP(VP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	gelernt	VVPP	*)	lernen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	führen	VVINF	*))))	führen	-	-	-	130)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CS(S*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PRF	(VP*	mich	sg	-	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	stellen	VVINF	*))	stellen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	soll	VMFIN	(S*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	besorgen	VVINF	(VP*	besorgen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	lassen	VVINF	*	lassen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Soll	VMFIN	(S*	sollen	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Fallen	NN	(VP*	falle	pl	fem	-	(131|(130)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	legen	VVINF	*)	legen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	131)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	soll	VMFIN	(S*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	auf	APPR	(VP(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Glatteis	NN	*)	glatteis	sg	masc	-	(130)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	führen	VVINF	*))))))	führen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	hätt	VAFIN	*	hätt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	PDS	*	der	sg	neut	-	(131)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	gekonnt	VVPP	*	gekonnt	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	hätt	VAFIN	*	hätt	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	*	der	sg	neut	-	(131)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Gelernt	NN	*	gelernt	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	PDS	*	der	sg	neut	-	(131)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	alles	PIS	*	alle	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ah	VVFIN	*	ah	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	wozu	PWAV	*	wozu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wozu	PWAV	(VROOT(PSEUDO*	wozu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Um	KOUI	(NP(VP*	um	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Geld	NN	*	geld	sg	neut	-	(132)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	fischen	VVINF	*))	fischen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Geld	NN	*)	geld	sg	neut	-	(132)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Um	APPR	(PP*	um	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Geld	NN	*	geld	sg	neut	-	(132)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Geld	NN	(VP*	geld	sg	neut	-	(133)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	einem	ART	(NP*	ein	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Juden	NN	*)	Jude	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	abzubangen	VVIZU	*))	abbangen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Geld	NN	*	geld	sg	neut	-	(132)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zu	APPR	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	solchen	PIAT	*	solcher	pl	fem	-	(131
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	kleinen	ADJA	*	klein	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Listen	NN	*	liste	pl	fem	-	131)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	endlich	ADV	*	endlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Gebracht	NN	*	gebracht	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	der	ART	*	der	sg	masc	-	(132
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Kleinigkeiten	NN	*	kleinigkeit	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	kleinste	ADJA	*	klein	sg	fem	-	132)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Zu	NN	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	schaffen	VVINF	*	schaffen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(127
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	127)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Jede	PIAT	(VROOT(PSEUDO(S(CNP(NP*	jeder	sg	fem	-	(134
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kleinigkeit	NN	*)	kleinigkeit	sg	fem	-	134)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(NP(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	sehr	ADV	(AP*	sehr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Verschmäht	ADJD	*))	verschmäht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	die	PDS	*))	der	sg	fem	-	(134)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	rächt	VVFIN	*	rächen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	sich	PRF	*	sich	sg	-	-	(134)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Bruder	NN	*)	bruder	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Leider	ADV	(VROOT(PSEUDO(AP*	leider	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wahr	ADJD	*)	wahr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	dieser	PDAT	(NP*	dieser	sg	masc	-	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Jude	NN	*))	jude	sg	masc	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	gar	ADV	(NP*	gar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	gute	ADJA	*	gut	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Vernünftge	ADJA	(S(NP*	vernünftg	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Mann	NN	*)	mann	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	der	ART	(NP*	der	sg	masc	-	(3
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Derwisch	NN	*)	derwisch	sg	masc	-	3)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	dir	PPER	*	dir	sg	*	-	(127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Ihn	PPER	(VP*	ihn	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	ehedem	ADV	*	ehedem	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	beschrieben	VVPP	*))))	beschreiben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(127
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	127)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(S*)	O	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	(S*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dann	ADV	*)	dann	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(131)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	dann	ADV	*	dann	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	für	APPR	(PP*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Not	NN	*))	not	-	-	-	(110)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	(131
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Schlinge	NN	*)	schling	sg	fem	-	131)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	liegt	VVFIN	*)	liegen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ja	PTKANT	(S*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	(NP*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	dem	ART	*	der	sg	masc	-	(135
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	geizigen	ADJA	*	geizig	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	besorglichen	ADJA	*	besorglichen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	135)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Furchtsamen	ADJA	*	furchtsam	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Juden	NN	*)	Jude	pl	masc	(MISC*)	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	dem	ART	*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	guten	ADJA	*	gut	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Dem	ART	*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	weisen	ADJA	*	weisen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Manne	NN	*)))	manne	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dieser	PDS	(VROOT(PSEUDO(S*	dieser	sg	masc	-	(136)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	(AP*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	(AVP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Schon	ADV	*)	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	unser	ADJD	*	unser	sg	neut	-	(137)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ohne	APPR	(PP*	ohne	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Schlinge	NN	*)))	schling	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	*	der	sg	neut	-	(138
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Vergnügen	NN	*	vergnügen	sg	neut	-	138)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	hören	VVINF	*	hören	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	wie	KOKOM	*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ein	ART	*	ein	sg	masc	-	(136
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	solcher	PIAT	*	solcher	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Mann	NN	*	mann	sg	masc	-	136)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	sich	PRF	*	sich	sg	-	-	(136)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	ausredt	VVFIN	*	ausredt	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Mit	APPR	*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	welcher	PWAT	*	welcher	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	dreisten	ADJA	*	dreist	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Stärk	NN	*	stärk	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	entweder	KON	*	entweder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	er	PPER	*	er	sg	masc	-	(136)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Die	ART	*	der	sg	fem	-	(131
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	Stricke	NN	*	strick	sg	fem	-	131)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	kurz	ADJD	*	kurz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	zerreißet	VVPP	*	zerreißet	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	oder	KON	*	oder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	Mit	APPR	*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	welcher	PWAT	*	welcher	sg	fem	-	(139
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	schlauen	ADJA	*	schlau	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	Vorsicht	NN	*	vorsicht	sg	-	-	139)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	er	PPER	*	er	sg	masc	-	(136)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	die	ART	*	der	sg	fem	-	(131
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	Netze	NN	*	netz	sg	fem	-	131)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	34	Vorbei	VVFIN	*	vorbei	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	35	sich	PRF	*	sich	sg	-	-	(136)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	36	windet	VVFIN	*	winden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	37	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	38	dies	PDS	*	dieser	sg	neut	-	(138
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	39	Vergnügen	NN	*	vergnügen	sg	neut	-	138)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	40	hast	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	41	Du	PPER	*	du	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	42	obendrein	ADV	*	obendrein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	43	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wahr	ADJD	*)	wahr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gewiß	ADV	*	gewiß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	freue	VVFIN	*	freuen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	mich	PRF	*	mich	sg	-	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	darauf	PROAV	*	darauf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(127
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	127)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PRF	*	dich	sg	-	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Auch	ADV	(VP(VP(NP*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	weiter	ADV	*	weiter	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	verlegen	VVINF	*)	verlegen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	machen	VVINF	*))	machen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ists	NE	*	ist	sg	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	einer	PIS	*	ein	sg	masc	-	(140
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	*	der	sg	fem	-	(141
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Menge	NN	*)	menge	sg	fem	-	141)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	bloß	PTKVZ	*	bloß	-	-	-	140)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	ists	ADV	(S*	ists	-	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	bloß	ADV	(S(PP*	bloß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Ein	ART	*	ein	sg	neut	-	(140
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Jude	NN	*	jude	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	ein	ART	(NP*	ein	sg	neut	-	(141
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Jude	NN	*	jude	sg	neut	-	140)|141)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	gegen	APPR	(PP*	gegen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	den	ART	*	der	sg	masc	-	(141)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Wirst	NN	*))	wirst	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	du	PPER	*	du	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	dich	PRF	*	dich	sg	-	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	schämen	VVINF	*	schämen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	so	ADV	(VP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	scheinen	VVINF	*)	scheinen	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	Wie	KOKOM	(NP*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	er	PPER	*))))	er	sg	masc	-	(141)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	die	ART	(AP(NP*	der	pl	masc	-	(46
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	Menschen	NN	*)	mensch	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	all	PIAT	*))	all	*	*	-	46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	34	sich	PRF	*	sich	sg	-	-	(141)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	35	denkt	VVFIN	*))	denken	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	36	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Vielmehr	ADV	(VROOT(PSEUDO(S*	vielmehr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wer	PWS	(NP(S*	wer	sg	masc	-	(142
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	sich	PRF	*	sich	sg	-	-	(142)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*	ihm	sg	masc	-	(141)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	besser	ADJD	*	gut	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	zeigt	VVFIN	*)	zeigen	sg	-	-	142)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	der	PDS	*)	der	sg	masc	-	(142)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	zeigt	VVFIN	*	zeigen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	sich	PRF	*	sich	sg	-	-	(142)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	ihm	PPER	*	ihm	sg	masc	-	(141)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Als	APPR	(PP*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Geck	NN	*)	geck	sg	masc	-	(143)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	als	APPR	(PP*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Narr	NN	*))	narr	sg	masc	-	(143)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	gar	ADV	(NP*	gar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Schlecht	NN	*)	schlecht	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	handeln	VVFIN	*	handeln	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	mir	PPER	*)	sich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	der	ART	(NP*	der	sg	masc	-	(144
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Schlechte	NN	*)	schlecht	pl	neut	-	144)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Schlecht	ADJD	*	schlecht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	denke	VVFIN	*))	denken	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(127
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	127)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Traun	NE	(VROOT(PSEUDO(MPN*	traun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	wenn	KOUS	(VROOT(PSEUDO(S(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	schlecht	ADJD	*	schlecht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	handeln	VVFIN	*)	handeln	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	nennst	ADV	*	nennen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ein	ART	(VP(NP*	ein	sg	neut	-	(46
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	jedes	PIAT	(NP*	jeder	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Ding	NN	*))	ding	sg	neut	-	46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	nach	APPR	(PP*	nach	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	seiner	PPOSAT	*	sein	sg	fem	-	(145|(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Art	NN	*)	Art	sg	fem	-	145)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	brauchen	VVINF	*)))	brauchen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	(146
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	hätt	VAFIN	*	hätt	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ein	ART	*	ein	sg	masc	-	(147
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Weiberkopf	NN	*	weiberkopf	sg	masc	-	147)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	erdacht	VVPP	*	erdachen	-	-	-	146)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	das	PRELS	*	der	sg	neut	-	(146)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(147)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Nicht	PTKNEG	*	nicht	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	beschönen	VVINF	*	beschönen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	wüßte	VMFIN	*	wissen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(127
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	127)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	beschönen	VVINF	*	beschönen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(131
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	feine	ADJA	*	fein	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	spitze	ADJA	*	spitz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ding	NN	*	ding	sg	neut	-	131)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	besorg	ADJD	(S*	besorg	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	In	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	meiner	PPOSAT	*	mein	sg	fem	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	plumpen	ADJA	*	plump	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Hand	NN	*)))	hand	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	zerbricht	VVFIN	*)	zerbrechen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(NP(CS(S*	so	-	-	-	(130
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	*	was	*	neut	-	130)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Will	VMFIN	*	wollen	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ausgeführt	VVPP	(VP*	ausführen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*))	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	wies	VVFIN	(S*	weisen	sg	-	-	(130)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	erfunden	VVPP	*	erfinden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	ist	VAFIN	*))	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Mit	APPR	(NP(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	aller	PIAT	*	aller	sg	fem	-	(148
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Pfiffigkeit	NN	*)	pfiffigkeit	sg	fem	-	148)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Gewandtheit	NN	*))	gewandtheit	sg	fem	-	(148)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(NP*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Mags	NN	*)	mag	-	-	-	(149)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	(AVP*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*)	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	mags	ADV	(S*)	mags	-	-	-	(149)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	tanze	VVFIN	*	tanzen	sg	-	-	(150)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	wie	PWAV	*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	könnt	VVFIN	*	können	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	es	PPER	*	es	-	-	-	(150)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	lieber	ADV	*	lieber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	–	CARD	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	schlechter	ADJD	*	schlecht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	noch	ADV	*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Als	APPR	*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	besser	ADJD	*	gut	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(127
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	127)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Trau	NN	(VROOT(PSEUDO(S*	trau	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	dir	PPER	*	dir	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKA	(AP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	wenig	PIS	*))	wenig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(6)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	stehe	VVFIN	*	stehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dir	PPER	*	dir	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	für	APPR	(PP*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	dich	PPER	*))	dich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	(NP*	du	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*)	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	willst	VMFIN	*)	wollen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	uns	PPER	*	uns	pl	*	-	(151)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	(NP*	der	pl	masc	-	(152
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Männer	NN	*))	mann	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	deines	PPOSAT	(NP*	dein	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	gleichen	ADJA	*	gleich	pl	-	-	152)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	doch	ADV	(S*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	So	ADV	(AVP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	gern	ADV	*)	gern	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	bereden	VVINF	*	bereden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	möchten	VMFIN	*)	möchten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	ihr	PPOSAT	*	ihr	sg	fem	-	(153|(152)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Schwert	NN	*	schwert	pl	-	-	153)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Ihr	PPOSAT	(S(NP*	ihr	pl	*	-	(153|(152)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Schwert	NN	*)	schwert	pl	-	-	153)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	sie	PPER	(VP*	sie	sg	fem	-	(152)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	so	ADV	(AP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	weit	ADJD	*)	weit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	gebracht	VVPP	*)))	bringen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Löwe	NN	*)	löwe	sg	masc	-	7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	schämt	VVFIN	*	schämen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	sich	PRF	*	sich	sg	-	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Dem	ART	*	der	sg	neut	-	(127
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Fuchse	NN	*)	fuchse	-	-	-	127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	jagt	VVFIN	*	jagen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	–	NN	(CNP(NP*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	des	ART	(NP*	der	sg	masc	-	(127
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Fuchses	NN	*))	fuchs	sg	masc	-	127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	der	ART	*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	List	NN	*))))	list	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	daß	KOUS	*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	pl	neut	-	(151
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Weiber	NN	*)	weiber	pl	neut	-	151)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	(AVP*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	*)	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	gern	ADV	*	gern	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	den	ART	(NP*	der	sg	masc	-	(154
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Mann	NN	*	mann	sg	masc	-	154)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	sich	PRF	(NP*	sich	sg	-	-	(151)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	herunter	ADV	*)))	herunter	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	hätten	VAFIN	*)	haben	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	XY	*	geh	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(S*)	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	geh	XY	*	geh	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	glaube	VVFIN	*	glauben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	meine	PPOSAT	(VP(NP*	mein	sg	fem	-	(131|(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Lektion	NN	*)	lektion	sg	fem	-	131)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	können	VMINF	*)))	können	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(127
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	127)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	ich	PPER	*	ich	sg	*	-	(6)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	gehn	CARD	*	gehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wolltest	VVFIN	*	wolltest	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	(VP*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	bleiben	VVINF	*))	bleiben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SITTAH	NE	(VROOT(PSEUDO*	sittah	-	-	-	(127
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	127)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	auch	ADV	(AVP*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	bleiben	VVINF	*)	bleiben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	(S(ISU*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*)	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	im	APPRART	(PP*	in	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Gesicht	NN	*)	gesicht	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	euch	PPER	(VP*	euch	pl	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	bleiben	VVINF	*)	bleiben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	–	VAFIN	*)	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Doch	KON	(S*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	hier	ADV	*)	hier	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	im	APPRART	(PP*	in	sg	neut	-	(155
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Nebenzimmer	NN	*)	nebenzimmer	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	–	XY	*))	–	-	-	-	155)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Da	KOUS	*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	horchen	VVINF	*	horchen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(S*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Schwester	NN	*	schwester	sg	neut	-	(127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	soll	VMFIN	*))	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	bestehn	VVFIN	*	bestehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Fort	NN	(S*	fort	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	fort	PTKVZ	*)	fort	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Vorhang	NN	*)	vorhang	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	rauscht	VVFIN	*	rauschen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	kömmt	VVFIN	*)	kömmen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	(AVP*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	daß	KOUS	*)	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Du	PPER	(S*	du	sg	*	-	(127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	da	ADV	(VP*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	verweilst	VVPP	*))	verweilen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	sehe	VVFIN	*	sehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nach	PTKVZ	*)	nach	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Indem	KOUS	(VROOT(PSEUDO(S(S*	indem	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*	sie	pl	*	-	(127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	*	sich	pl	-	-	(127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	durch	APPR	(AP(PP*	durch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	die	ART	*	der	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	eine	ART	(NP*	ein	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Türe	NN	*))	türe	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	entfernt	ADJD	*)	entfernt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	tritt	VVFIN	(S*	treten	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Nathan	NE	*	nathan	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	der	ART	*	der	sg	fem	-	(128
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	andern	PIS	*)	anderer	-	-	-	128)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	herein	PTKVZ	*))	herein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	und	KON	(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Saladin	NE	*	saladin	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	sich	PRF	(VP*	sich	sg	-	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	gesetzt	VVPP	*)))	setzen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO(CNP*	saladin	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nathan	NE	*)	nathan	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Tritt	VVFIN	(VROOT(PSEUDO(S*	treten	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	näher	ADJD	*	nah	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Jude	NN	*)	jude	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Näher	ADJD	*	nah	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	(S*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ganz	ADV	*	ganz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	her	PTKVZ	*)	her	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ohne	APPR	*	ohne	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Furcht	NN	*	furcht	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(NP*	der	sg	fem	-	(91)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	bleibe	FM	(MPN*	bleiben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	deinem	FM	*	dein	sg	masc	-	(77|(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Feinde	FM	*))	feind	sg	-	-	77)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nennst	VVFIN	*	nennen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PRF	*)	dich	sg	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*	nathan	-	-	-	(156)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Den	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(156
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	weisen	ADJA	*	weisen	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nathan	NN	*)	nathan	sg	-	-	156)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	*	nein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wohl	ADV	(VROOT(PSEUDO(S*)	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	nennst	VVFIN	(VROOT(PSEUDO(S*	nennen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PRF	*	dich	sg	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nennt	VVFIN	(S*	nennen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	dich	PPER	*	dich	sg	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	das	ART	(NP*	der	sg	neut	-	(157
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Volk	NN	*)))	volk	sg	neut	-	157)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	VMFIN	*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	sein	VAINF	*	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	*	der	sg	neut	-	(157
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Volk	NN	*	volk	sg	neut	-	157)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(CS(S*	du	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	glaubst	VVFIN	*	glauben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Verächtlich	ADJD	*	verächtlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	des	ART	(NP*	der	sg	neut	-	(157
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Volkes	NN	*)	volk	sg	neut	-	157)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Stimme	NN	*)	stimme	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	denke	VVFIN	*))	denken	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	längst	ADV	(VP*	längst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	gewünscht	VVPP	*	wünschen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	den	ART	(S(VP(NP*	der	sg	masc	-	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Mann	NN	*)	mann	sg	masc	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	kennen	VVINF	*))	kennen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Den	NE	*	der	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	es	PPER	*	es	sg	neut	-	(157)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	den	ART	(NP*	der	sg	masc	-	(158
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Weisen	NN	*))))	weise	sg	masc	-	158)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	nennt	VVFIN	*	nennen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	es	PPER	*	es	sg	neut	-	(157)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*	ihn	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Zum	APPRART	(PP*	zu	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Spott	NN	*)	spott	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	nennte	VVFIN	*)	nennen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	dem	ART	*	der	sg	neut	-	(157
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Volke	NN	*	volk	sg	neut	-	157)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	weise	VVFIN	*	weise	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	weiter	ADV	*	weiter	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	wär	ADJD	*	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	als	APPR	*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	klug	ADJD	*	klug	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	klug	VVFIN	*	klug	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(NP*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	PDS	*	der	sg	masc	-	(159
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	159)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Der	PRELS	(S*	der	sg	masc	-	(159)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	*	sich	sg	-	-	(159)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	seinen	PPOSAT	*	sein	sg	masc	-	(160|(159)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Vorteil	NN	*)	vorteil	sg	masc	-	160)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	gut	ADJD	*	gut	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	versteht	VVFIN	*)))	verstehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auf	APPR	(VROOT(PSEUDO(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	seinen	PPOSAT	*	sein	sg	masc	-	(160|(159)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wahren	ADJA	*	wahr	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vorteil	NN	*	vorteil	sg	masc	-	160)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	meinst	ADV	(S*	meinst	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	du	PPER	*	du	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	doch	ADV	*))	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dann	ADV	*	dann	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wär	VAFIN	*	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Eigennützigste	NN	*	eigennützigst	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Der	ART	*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Klügste	NN	*	klügste	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Dann	ADV	*	dann	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	klug	ADJD	*	klug	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	weise	VVFIN	*	weise	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	eins	PIS	*	eins	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	höre	VVFIN	*	hören	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PRF	(VP*	dich	sg	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	erweisen	VVINF	*	erweisen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Du	PPER	*	du	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	widersprechen	VVINF	*	widersprechen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	willst	VMFIN	*)))	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Des	ART	(NP*	der	sg	*	-	(352
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Menschen	NN	*)	mensch	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	wahre	ADJA	*	wahr	pl	masc	-	352)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Vorteile	NN	(NP*	vorteil	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	die	PRELS	(S*	der	pl	masc	-	(161)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	das	ART	(NP*	der	sg	neut	-	(157
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Volk	NN	*)	volk	sg	neut	-	157)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	kennt	VVFIN	*	kennen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	kennst	VVFIN	(S*	kennen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	du	PPER	*)))	du	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hast	VAFIN	(VROOT(PSEUDO(CS(S*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	du	PPER	*	du	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	kennen	VVINF	*)	kennen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wenigstens	ADV	*	wenigstens	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	gesucht	VVPP	*	suchen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Hast	NN	(S*	haben	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	drüber	PROAV	(VP*	drüber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	nachgedacht	VVPP	*)))	nachdenken	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	das	ART	(NP*	der	sg	neut	-	(162)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	auch	ADV	(AP*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	allein	ADV	(AP*	allein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Macht	NN	*))	macht	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	schon	ADV	(AP*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	den	ART	*)	der	sg	masc	-	(163
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Weisen	NN	*))	weise	sg	masc	-	163)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(163)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	sich	PRF	*	sich	sg	-	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	jeder	PIS	*	jeder	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	dünkt	ADJD	*	dünken	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	(NP*	der	sg	fem	-	(164
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Bescheidenheit	NN	*	bescheidenheit	sg	fem	-	164)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	genug	ADV	*))	genug	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	(VP*	sie	*	*	-	(164)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(AVP*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	immerdar	ADV	*)	immerdar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	hören	VVINF	*)	hören	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	wo	PWAV	(S*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Man	NE	(NP*	man	sg	*	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	trockene	ADJA	*	trocken	sg	-	-	(165
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Vernunft	NN	*)	vernunft	sg	fem	-	165)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	erwartet	VVPP	*))	erwarten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	ekelt	VVFIN	*)	ekeln	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	springt	VVFIN	*	springen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	auf	PTKVZ	*)	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	VVIMP	(VROOT(PSEUDO(S*	lassen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	uns	PPER	*	uns	pl	*	-	(166)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	zur	APPRART	(VP(PP*	zu	sg	fem	-	(167
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sache	NN	*)	sache	sg	fem	-	167)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	kommen	VVINF	*))	kommen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	*	aber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	aber	KON	*	aber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Aufrichtig	ADJD	*	aufrichtig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Jud	NE	*	jud	-	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	aufrichtig	ADJD	*	aufrichtig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sultan	NE	(VROOT(PSEUDO(S*	sultan	-	-	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	sicherlich	ADV	*	sicherlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	dich	PRF	(VP*	dich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	bedienen	VVINF	*)	bedienen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Ich	PPER	(NP*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	deiner	PPOSAT	*	dein	sg	-	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	fernern	ADV	*	fernern	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Kundschaft	NN	*	kundschaft	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	würdig	ADJD	*)	würdig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	bleibe	VVFIN	*))	bleiben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Bedienen	NN	(VROOT(PSEUDO*	bediener	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(CS(S*	du	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	sollst	VMFIN	*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	ART	(NP*	der	sg	neut	-	(168
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Beste	NN	*)	gut	sg	neut	-	168)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	haben	VAFIN	*	haben	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	allem	PIS	*))	alle	sg	neut	-	(169)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	sollst	VMFIN	(S*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	es	PPER	*	es	sg	neut	-	(168)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	um	APPR	(VP(PP*	um	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	den	ART	*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	billigsten	ADJA	*	billig	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Preis	NN	*)	preis	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	haben	VAINF	*)))	haben	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wovon	PWAV	(VROOT(PSEUDO(S*	wovon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	sprichst	ADV	(NP*	sprichen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*))	du	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	doch	ADV	(VROOT(PSEUDO(PP(AVP*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*)	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	deinen	PPOSAT	*	dein	pl	fem	-	(170|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Waren	NN	*)	sein	pl	fem	-	170)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Schachern	NN	(S*	schach	sg	neut	-	(171
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*))	dir	sg	*	-	171)|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Schon	ADV	(NP*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	meine	PPOSAT	*	mein	sg	fem	-	(127|(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Schwester	NN	*)	schwester	sg	fem	-	127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	(	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	*	der	sg	neut	-	(171)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	sg	fem	-	(127
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Horcherin	NN	*	horcherin	sg	fem	-	127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	)	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	–	$(	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	mit	APPR	*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	dem	ART	*	der	sg	neut	-	(172
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Kaufmann	NN	*	kaufmann	sg	neut	-	172)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	tun	VVINF	*	tun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wirst	VVFIN	*	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ohne	APPR	(VP(PP*	ohne	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Zweifel	NN	*)	zweifel	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	wissen	VVINF	*))	wissen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	wollen	VMFIN	*	wollen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	meinem	PPOSAT	*	mein	sg	masc	-	(173|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Wege	NN	*)	weg	sg	masc	-	173)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	dem	ART	*	der	sg	neut	-	(77
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Feinde	NN	*	feind	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	77)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Der	PRELS	(S*	der	sg	masc	-	(77)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	allerdings	ADV	*	allerdings	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	sich	PRF	*	sich	sg	-	-	(77)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	reget	VVFIN	*))	reget	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	etwa	ADV	(VP*	etwa	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	Bemerkt	NN	*	bemerkt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	getroffen	VVPP	*)))	treffen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	unverhohlen	ADJD	*)	unverhohlen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(S(AVP*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	darauf	PROAV	*)	darauf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	eben	ADV	*	eben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	mit	APPR	(NP(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	dir	PPER	*)	dir	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Gesteuert	NN	*))	gesteuert	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Davon	PROAV	(VROOT(PSEUDO(S*	davon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	viel	PIS	*	viel	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	nötig	ADJD	*	nötig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	habe	VAFIN	*))	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kurz	NN	*	kurz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	–	XY	*	–	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gebiete	NN	(VROOT(PSEUDO(CNP*	gebiet	pl	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sultan	NN	*)	sultan	pl	neut	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	heische	VVFIN	*	heisch	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	deinen	PPOSAT	(NP*	dein	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Unterricht	NN	*)	unterricht	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ganz	ADV	*))	ganz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	anderm	PIS	*	ander	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	ganz	ADV	(S*	ganz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	was	PIS	(NP*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	anderm	PIS	*)))	ander	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Da	KOUS	*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	So	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	weise	ADJD	*	weise	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	bist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	sage	VVFIN	*	sagen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	einmal	ADV	*	einmal	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	–	$(	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Was	PWS	*	was	sg	neut	-	(62
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	für	APPR	*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	ein	ART	*	ein	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Glaube	NN	*	glaube	sg	neut	-	62)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	was	PWS	*	was	sg	neut	-	(174
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	für	APPR	*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	ein	ART	*	ein	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	Gesetz	NN	*	gesetz	sg	neut	-	174)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	Hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	dir	PPER	*	dir	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	am	PTKA	*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	meisten	PIS	*	meister	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	eingeleuchtet	VVPP	*	eingeuchten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sultan	NE	*	sultan	-	-	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	*	ein	sg	neut	-	(140
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Jud	NN	*	jud	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	140)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Muselmann	NN	*))	muselmann	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(41
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Christ	NN	*)	christ	sg	masc	-	41)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	zwischen	APPR	(PP*	zwischen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	uns	PPER	*))	uns	pl	*	-	(166)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	diesen	PDAT	*	dieser	pl	fem	-	(175
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	drei	CARD	*	drei	-	-	-	175)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Religionen	NN	*)	religion	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	kann	VMFIN	(S*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	eine	PIS	(VP(NP(AVP*	ein	sg	fem	-	(62)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	nur	ADV	*)	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Die	ART	*	der	sg	fem	-	(176
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	wahre	NN	*)	wahr	sg	fem	-	176)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	sein	VAINF	*))	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ein	ART	(NP*	ein	sg	masc	-	(177
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mann	NN	*	mann	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wie	KOKOM	(CS(S*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	du	PPER	*	du	sg	*	-	177)|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	bleibt	VVFIN	(S*	bleiben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	da	ADV	*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Nicht	PTKNEG	(VP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	stehen	VVINF	*)))	stehen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	wo	PWAV	(S*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	der	ART	(NP*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Zufall	NN	*	zufall	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	der	ART	(NP*	der	sg	fem	-	(178
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Geburt	NN	*))	geburt	sg	fem	-	178)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Ihn	PPER	(VP*	ihn	sg	masc	-	(177)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	hingeworfen	VVPP	*	hinwerfen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	:	$.	*))))	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	oder	KON	*	oder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	wenn	KOUS	(S(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	er	PPER	*	er	sg	masc	-	(177)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	bleibt	VVFIN	*)	bleiben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	Bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	er	PPER	*	er	sg	masc	-	(177)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	Einsicht	NN	(CNP*	einsicht	sg	fem	-	(179)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	Gründen	NN	*	grund	pl	masc	-	(180)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	Wahl	NN	*))	wahl	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	des	ART	(NP*	der	sg	masc	-	(160
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	34	Bessern	NN	*))	besser	sg	masc	-	160)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	35	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wohlan	NN	(VROOT(PSEUDO*	wohlan	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	so	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	teile	VVFIN	*	teilen	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	deine	PPOSAT	(NP*	dein	sg	fem	-	(181|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Einsicht	NN	*)	einsicht	sg	fem	-	181)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*	sich	sg	fem	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Dann	ADV	*	dann	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	mit	PTKVZ	*)	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	KOUS	(VROOT(PSEUDO(CO(VP(NP(S*	lassen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*	mich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(VP(NP*	der	sg	fem	-	(182
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Gründe	NN	*)	grund	pl	masc	-	182)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	hören	VVINF	*))	hören	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	denen	PRELS	(S*	der	pl	masc	-	(182)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	selber	ADV	*))	selber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	nachzugrübeln	VVIZU	*)	nachzugrübeln	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	die	ART	*	der	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Zeit	NN	*	zeit	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Gehabt	NN	*))	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	KOUS	(VROOT(PSEUDO(S*	lassen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*	mich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(NP*	der	sg	fem	-	(183
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Wahl	NN	*	wahl	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	die	PRELS	(S*	der	sg	fem	-	(183)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	diese	PDAT	(NP*	dieser	pl	masc	-	(182
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Gründe	NN	*)	grund	pl	masc	-	183)|182)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Bestimmt	VVFIN	*))	bestimmt	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	–	PPER	(S*	–	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	versteht	VVFIN	*	verstehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	sich	PRF	*	sich	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	im	APPRART	(VP(PP*	in	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Vertrauen	NN	*	vertrauen	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	–	NE	*)	–	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	wissen	VVINF	*	wissen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Damit	KOUS	(S*	damit	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	sie	PPER	*	sie	*	*	-	(183)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	meiner	PIS	*)	mein	sg	fem	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	mache	VVFIN	*))))	machen	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	stutzest	VVFIN	*)	stutzesen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	wägst	VVFIN	(VROOT(PSEUDO(S*	wägsen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	mich	PPER	*	mich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	*	der	sg	masc	-	(184
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Auge	NN	*))	auge	sg	masc	-	184)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kann	VMFIN	(S*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wohl	ADV	(VP*	wohl	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	sein	VAINF	*	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	(NP*	der	sg	masc	-	(185
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	erste	ADJA	*	erster	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Sultan	NN	*)	sultan	sg	masc	-	185)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	bin	VAFIN	*))	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Der	ART	(S*	der	sg	masc	-	(185)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	eine	ART	(NP*	ein	sg	fem	-	(186
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	solche	PIAT	(NP*	solcher	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Grille	NN	*))	grille	sg	fem	-	186)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	hat	VAFIN	*))	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	die	ART	(S*	der	sg	fem	-	(186)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	mich	PPER	*	mich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Doch	KON	(AP(S*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	eines	ART	(NP*	ein	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	Sultans	NN	*))	sultan	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	eben	ADV	*	eben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	ganz	ADV	*)	ganz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	Unwürdig	ADJD	*)	unwürdig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	dünkt	VVFIN	*)	dünken	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wahr	PTKVZ	*	wahr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	rede	VVFIN	*	reden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*)	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sprich	NE	(VROOT(PSEUDO(MPN*	sprich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Oder	NE	*	oder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	willst	VVFIN	(S*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	*)	du	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	einen	ART	(NP*	ein	sg	masc	-	(19
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Augenblick	NN	*	augenblick	sg	masc	-	19)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Dich	PPER	(VP*	dich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	bedenken	VVINF	*)))	bedenken	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gut	ADJD	*	gut	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	geb	VVFIN	*	geb	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ihn	PPER	*	ihn	sg	masc	-	(19)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	dir	PPER	*	dir	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	(	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ob	KOUS	*	ob	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	*	sie	-	-	-	(127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	horcht	VVFIN	*	horchen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(DL(S*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	(VP*	sie	pl	*	-	(127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	belauschen	VVINF	*))	belauschen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Will	VMFIN	(S*	wollen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	hören	VVINF	*	hören	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	ob	KOUS	(S*	ob	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	ichs	NE	*	ich	sg	*	-	(131)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	recht	ADJD	(VP*	recht	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	gemacht	VVPP	*))))	machen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	)	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Denk	NN	*	denk	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nach	PTKVZ	*	nach	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geschwind	NN	(VROOT(PSEUDO(S*	geschwind	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	denk	VVFIN	*	denk	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nach	PTKVZ	*)	nach	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	säume	VVFIN	*	säumen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	zurück	PTKVZ	*	zurück	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	kommen	VVINF	*	kommen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	geht	VVFIN	*	gehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	*	der	sg	neut	-	(155
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Nebenzimmer	NN	*	nebenzimmer	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nach	APPR	(S(PP*	nach	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	welchem	PRELS	*)	welcher	sg	neut	-	(155)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	sich	PRF	*	sich	sg	-	-	(127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Sittah	NE	*	sittah	sg	*	-	(127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	begeben	VVFIN	*)))	begeben	-	-	-	155)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*))	nathan	-	-	-	(1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	allein	ADV	(VROOT(PSEUDO*	allein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hm	XY	*	hm	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	hm	XY	*	hm	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wunderlich	ADJD	*	wunderlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Mir	PPER	*	sich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*)	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*)	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(NP*	der	sg	masc	-	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Sultan	NN	*)	sultan	sg	masc	-	7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Auf	APPR	(VP(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Geld	NN	*)	geld	sg	neut	-	(132)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	gefaßt	VVPP	*))	fassen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	–	ART	(NP*	–	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Wahrheit	NN	*))	wahrheit	sg	fem	-	(187)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wahrheit	NN	(VROOT(PSEUDO*	wahrheit	sg	fem	-	(187)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(187)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	(CAVP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	–	KON	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	(AP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	bar	ADJD	(CAP*	bar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	(AP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	blank	ADJD	*))))	blank	-	-	(PER*)	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	–	$.	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	ob	KOUS	*	ob	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Die	ART	(NP*	der	sg	fem	-	(187
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Wahrheit	NN	*)	wahrheit	sg	fem	-	187)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Münze	NN	*	münze	sg	-	-	(188)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	wäre	VAFIN	*))	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ja	PTKANT	(S*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	wenn	KOUS	*	wenn	-	-	-	(189
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	(NP*	noch	-	-	-	189)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Uralte	ADJA	*	uralt	pl	neut	-	(188
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Münze	NN	*)	münze	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	die	PRELS	(VP*	der	pl	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	gewogen	VVPP	*)	wiegen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	ward	VVFIN	*)	werden	-	-	-	188)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(189)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ginge	VVFIN	*)	gehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	noch	ADV	*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Allein	ADV	*	allein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	neue	ADJA	*	neu	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Münze	NN	*	münze	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Die	PWS	*	der	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	der	ART	*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Stempel	NN	*	stempel	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	macht	VVFIN	*	machen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	die	PRELS	*	der	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	man	PIS	*	man	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	aufs	APPRART	*	auf	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Brett	NN	*	brett	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	zählen	VVINF	*	zählen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	darf	VMFIN	*	dürfen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	das	PDS	*	der	sg	neut	-	(188)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	sie	PPER	*	sie	sg	fem	-	(187)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Geld	NN	(NP*	geld	sg	neut	-	(132)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sack	NE	*))	sack	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	striche	VVFIN	*	strich	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	man	PIS	*	man	sg	*	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Kopf	NN	*)	kopf	sg	masc	-	(165)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Auch	ADV	(NP*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Wahrheit	NN	*)	wahrheit	sg	fem	-	(187)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	ein	PTKVZ	*))	ein	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	hier	ADV	*	hier	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(NP*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Jude	NN	*))	jude	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CNP*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	oder	KON	*	oder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*)	er	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wie	PWAV	*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sollt	VMFIN	*	sollen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Die	ART	*	der	sg	fem	-	(187
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Wahrheit	NN	*	wahrheit	sg	fem	-	187)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	in	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Wahrheit	NN	*	wahrheit	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	fodern	VVINF	*	fodern	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Zwar	ADV	*	zwar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Zwar	ADV	*	zwar	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Verdacht	NN	*	verdacht	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	die	ART	*	der	sg	fem	-	(187
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Wahrheit	NN	*	wahrheit	sg	fem	-	187)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Als	APPR	*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Falle	NN	*	fall	sg	fem	-	(131)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	brauche	VVFIN	*	brauchen	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	gar	ADV	*	gar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	zu	PTKA	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	klein	ADJD	*	klein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Zu	APPR	(NP(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	klein	ADJD	*))	klein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	für	APPR	(AP(CPP(PP*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	einen	ART	*	ein	sg	masc	-	(190
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Großen	NN	*)	groß	sg	masc	-	190)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	denn	KON	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Zu	NN	*)	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	klein	ADJD	*))	klein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gewiß	PTKANT	(S*	gewiß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	gewiß	ADV	*	gewiß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	stürzte	VVFIN	*	stürzen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Der	ART	*	der	sg	fem	-	(186
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Türe	NN	*))	türe	sg	fem	-	186)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	(PP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	ins	APPRART	*	in	sg	neut	-	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Haus	NN	*)	haus	sg	neut	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Man	PIS	(VROOT(PSEUDO(S*	man	sg	*	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	pocht	VVFIN	*	pochen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	hört	VVFIN	(S*	hören	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Doch	NE	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	erst	ADV	*	erst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	man	PIS	(NP*	man	sg	*	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	als	APPR	(PP*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Freund	NN	*))	freund	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	sich	PRF	*	sich	sg	-	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	naht	VVFIN	*)))	nahen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Behutsam	NN	(NP*	behutsam	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	gehn	CARD	*)	gehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wie	PWAV	*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	wie	PWAV	*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(AVP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ganz	ADV	*)	ganz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Stockjude	NN	(S(VP(VP*	stockjude	-	-	-	(140)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	sein	VAINF	*)	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	wollen	VMINF	*))	wollen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	geht	VVFIN	*	gehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	schon	ADV	*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(NP(AVP(CAVP*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ganz	ADV	*	ganz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	gar	ADV	*)	gar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Jude	NN	*	jude	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	geht	VVFIN	(S*	gehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	noch	ADV	*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	minder	ADV	*))	minder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	kein	PIAT	(NP*	kein	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Jude	NN	*)	jude	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	dürft	VVFIN	(S*	dürfen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	mich	PRF	(VP*	mich	sg	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	fragen	VVINF	*))	fragen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Warum	PWAV	(S*	warum	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	kein	PIAT	(NP*	kein	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Muselmann	NN	*)))	muselmann	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wars	FM	*	war	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(191)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mich	PPER	(VP*	mich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	retten	VVINF	*))	retten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nicht	PTKNEG	(S*	nicht	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	(S(NP*	der	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Kinder	NN	*)	kind	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	bloß	VVFIN	*)	bloß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	speist	VVFIN	*	speisen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	man	PIS	*	man	sg	*	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Märchen	NN	*)	märchen	sg	*	-	(192)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	ab	PTKVZ	*)	ab	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	(S*	er	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	kömmt	VVFIN	*)	kömmen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	komme	VVFIN	*	kommen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*)	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO(CNP*	saladin	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nathan	NE	*)	nathan	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	(	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	*	der	sg	neut	-	(128
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Feld	NN	*	feld	sg	neut	-	128)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	hier	ADV	*	hier	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	rein	ADJD	*	rein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	)	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	–	$(	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	komm	VVIMP	*	kommen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	dir	PPER	*	dir	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	zu	PTKA	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	geschwind	ADJD	*	geschwind	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	zurück	PTKVZ	*	zurück	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	(VROOT(PSEUDO(S*	du	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	bist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Rande	NN	*	rand	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	deiner	PPOSAT	*	dein	sg	fem	-	(193|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Überlegung	NN	*)))	überlegung	sg	fem	-	193)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	rede	VVFIN	*)	reden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	hört	VVFIN	*	hören	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	uns	PPER	*	uns	pl	*	-	(166)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	keine	PIAT	(NP*	kein	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Seele	NN	*))	seele	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Möcht	VVIMP	(VROOT(PSEUDO(S*	möcht	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Die	ART	(NP*	der	sg	fem	-	(46
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ganze	ADJA	*	ganz	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Welt	NN	*)	welt	sg	fem	-	46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	uns	PPER	(VP*	uns	pl	*	-	(166)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	hören	VVINF	*))	hören	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S(AP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	gewiß	ADJD	*)	gewiß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	(NP*	nathan	-	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	seiner	PPOSAT	(NP*	sein	sg	fem	-	(193|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Sache	NN	*)))	sache	sg	fem	-	193)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ha	XY	*	ha	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	*	der	sg	neut	-	(194)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nenn	VVFIN	*	nenn	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	einen	ART	*	ein	sg	masc	-	(195
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Weisen	NN	*	weise	sg	masc	-	195)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nie	ADV	(VROOT(PSEUDO(NP*	nie	sg	fem	-	(194
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	*	der	sg	fem	-	(187
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wahrheit	NN	*	wahrheit	sg	fem	-	187)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	zu	APPR	(PP*	zu	-	-	-	194)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Verhehlen	NN	*))	verhehlen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	für	APPR	(VROOT(PSEUDO(VP(PP*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	sie	PPER	*)	sie	pl	*	-	(195)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	alles	PIS	(NP*	alle	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Spiel	NN	*))	spiel	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	setzen	VVINF	*))	setzen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Leib	NN	(VROOT(PSEUDO(CNP*	leib	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Leben	NN	*)	leben	sg	neut	-	(196)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gut	ADJD	(VROOT(PSEUDO(S*	gut	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Blut	NN	*)	blut	-	-	-	(197)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	ja	ADV	(VROOT(PSEUDO(S*)	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	wanns	ADV	(VROOT(PSEUDO(CS(S(VP(AP*	wanns	-	-	-	(194)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nötig	ADJD	*))	nötig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*)	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	nutzt	VVFIN	*)	nutzen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Von	APPR	(VROOT(PSEUDO(S(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*)	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	An	APPR	(PP*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	darf	VMFIN	(CNP(NP(S*	dürfen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	hoffen	VVINF	*	hoffen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	einen	PIS	(NP*	ein	sg	masc	-	(198
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	meiner	PPOSAT	(NP*	mein	pl	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Titel	NN	*)))	titel	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	198)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Verbesserer	NN	(NP*	verbesserer	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	der	ART	(NP*	der	sg	fem	-	(199
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Welt	NN	*)))	welt	sg	fem	-	199)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	des	ART	(NP*	der	sg	masc	-	(174
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Gesetzes	NN	*)))	gesetz	sg	masc	-	174)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Mit	APPR	(VP(PP*	mit	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Recht	NN	*)	recht	sg	neut	-	(200)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	führen	VVINF	*)))	führen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Traun	NE	(VROOT(PSEUDO(NP*	traun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	(198
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	schöner	ADJA	*	schön	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Titel	NN	*))	titel	sg	masc	-	198)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sultan	NE	*	sultan	sg	neut	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	eh	XY	*	eh	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	mich	PRF	*	mich	sg	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	dir	PPER	*	dir	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	ganz	ADV	*	ganz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	vertraue	VVFIN	*	vertrauen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Erlaubst	NN	*	erlaubst	sg	-	-	(201
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	du	PPER	*	du	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	dir	PPER	*	dir	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	ein	ART	*	ein	sg	neut	-	(191
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Geschichtchen	NN	*	geschichtchen	sg	neut	-	191)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	zu	APPR	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Erzählen	NN	*	erzählen	-	-	-	201)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Warum	PWAV	*	warum	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	PDS	*	der	sg	neut	-	(201)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	stets	ADV	(VP*	stets	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ein	ART	(NP*	ein	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Freund	NN	*)	freund	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	gewesen	VAPP	*)	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Geschichtchen	NN	*)	geschichtchen	pl	neut	-	(192)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	gut	ADJD	*	gut	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Erzählt	VVFIN	*)	erzählen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(CS(S*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	gut	ADJD	(VP*	gut	-	-	-	(202
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	erzählen	VVINF	*))	erzählen	-	-	-	202)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	das	PDS	(S*	der	sg	neut	-	(202)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Wohl	ADV	(AVP*	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	eben	ADV	*)	eben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	meine	PPOSAT	(NP*	mein	sg	fem	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Sache	NN	*)	sache	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Schon	ADV	(VROOT(PSEUDO(VP(AVP*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	So	ADV	*)	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	stolz	ADJD	*	stolz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	bescheiden	VVINF	*)	bescheiden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mach	NE	*	mach	pl	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	erzähl	ADJD	*	erzähl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	erzähle	VVIMP	*	erzählen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Vor	APPR	*	vor	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	grauen	ADJA	*	grau	pl	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Jahren	NN	*	jahr	pl	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	lebt	VVFIN	*	leben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ein	ART	*	ein	sg	masc	-	(203
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Mann	NN	*	mann	sg	masc	-	203)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Osten	NN	*	osten	sg	masc	-	(204)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Der	PRELS	*	der	sg	masc	-	(203)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	einen	ART	*	ein	sg	masc	-	(205
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Ring	NN	*	ring	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	unschätzbarem	ADJA	*	unschätzbar	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Wert	NN	*	wert	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	205)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Aus	APPR	*	aus	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	lieber	ADJA	*	lieber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Hand	NN	*	hand	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	besaß	VVFIN	*	besitzen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(CS(S(NP*	der	sg	masc	-	(206
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Stein	NN	*)	stein	sg	masc	-	206)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ein	ART	(NP*	ein	sg	masc	-	(207)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Opal	NN	*))	opal	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(S(NP*	der	sg	masc	-	(207)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	hundert	CARD	*	hundert	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	schöne	ADJA	*	schön	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Farben	NN	*)	farbe	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	spielte	VVFIN	*	spielen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Und	KON	(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	hatte	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	die	ART	(NP*	der	sg	fem	-	(208
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	geheime	ADJA	*	geheim	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Kraft	NN	*)	kraft	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	vor	APPR	(VP(PP*	vor	-	-	-	(209
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Gott	NN	(CNP*	gott	sg	masc	-	208)|209)|(43)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	Menschen	NN	*))	mensch	sg	masc	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	angenehm	ADJD	*	angenehm	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	machen	VVINF	*))	machen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	wer	PWS	(S*	wer	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	In	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	dieser	PDAT	*	dieser	sg	fem	-	(209
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	Zuversicht	NN	*)	zuversicht	sg	fem	-	209)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	ihn	PPER	*	ihn	sg	masc	-	(206)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	trug	VVFIN	*))))	tragen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wunder	NN	*	wunder	sg	neut	-	(210)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihn	PPER	*	ihn	sg	masc	-	(206)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	(NP*	der	sg	masc	-	(203
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Mann	NN	*)	mann	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Osten	NN	*)	osten	pl	masc	-	203)|(204)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	darum	PROAV	*	darum	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	nie	ADV	*	nie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Vom	APPRART	(PP*	von	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Finger	NN	*)	finger	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	ließ	VVFIN	*	lassen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	und	KON	(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	die	ART	(NP*	der	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Verfügung	NN	*)	verfügung	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	traf	VVFIN	*	treffen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Auf	APPR	(S*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	ewig	ADJD	*	ewig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	ihn	PPER	*	ihn	sg	masc	-	(206)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	seinem	PPOSAT	*	sein	sg	neut	-	(211|(203)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	Hause	NN	*)	haus	sg	neut	-	211)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	Erhalten	NN	*)))))	erhalten	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nämlich	ADV	(VROOT(PSEUDO(AVP*	nämlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	*)	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(203)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ließ	VVFIN	*	lassen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	den	ART	*	der	sg	masc	-	(205
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ring	NN	*	ring	sg	masc	-	205)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	seinen	PPOSAT	*	sein	pl	fem	-	(212|(203)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Söhnen	NN	*	söhnen	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	dem	ART	*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	geliebtesten	ADJA	*	geliebt	-	-	-	212)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	setzte	VVFIN	*	setzen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	fest	PTKVZ	*	fest	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	daß	KOUS	*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	dieser	PDS	*	dieser	sg	masc	-	(212)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	wiederum	ADV	*	wiederum	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Den	ART	*	den	sg	masc	-	(205
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Ring	NN	*	ring	sg	masc	-	205)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	von	APPR	*	von	-	-	-	(213
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	seinen	PPOSAT	*	sein	pl	fem	-	(212)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	Söhnen	NN	*	söhnen	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	dem	ART	*	der	sg	masc	-	213)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	vermache	ADJA	*	vermachen	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	Der	PRELS	*	der	sg	masc	-	(213)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	ihm	PPER	*	ihm	sg	masc	-	(212)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	der	ART	*	der	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	liebste	ADJA	*	lieb	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	sei	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	stets	ADV	*	stets	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	der	ART	*	der	sg	masc	-	(214
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	34	liebste	ADJA	*	lieb	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	35	,	$,	*	--	-	-	-	214)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	36	Ohn	NE	*	ohn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	37	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	38	Ansehn	NN	*	ansehn	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	39	der	ART	*	der	sg	masc	-	(178
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	40	Geburt	NN	*	geburt	sg	-	-	178)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	41	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	42	in	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	43	Kraft	NN	*	kraft	sg	fem	-	(215
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	44	allein	ADV	*	allein	-	-	-	215)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	45	Des	ART	*	der	-	-	-	(206
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	46	Rings	NN	*	ring	-	-	-	206)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	47	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	48	das	ART	*	der	sg	neut	-	(216
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	49	Haupt	NN	*	haupt	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	50	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	51	der	ART	*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	52	Fürst	NN	*	fürst	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	53	des	ART	*	der	sg	neut	-	(211
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	54	Hauses	NN	*	haus	sg	neut	-	216)|211)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	55	werde	VAFIN	*	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	56	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Versteh	NE	*	versteh	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Sultan	NN	*	sultan	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	versteh	VVFIN	*	verstehn	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dich	PRF	*)	dich	sg	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Weiter	ADV	(VROOT(PSEUDO(S*)	weiter	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	kam	VVFIN	*	kommen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	dieser	PDAT	(NP*	dieser	sg	masc	-	(205
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ring	NN	*)	ring	sg	masc	-	205)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	(S(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Sohn	NN	*)	sohn	sg	masc	-	(214)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	APPR	(AP(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Sohn	NN	*	sohn	sg	masc	-	(214)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Auf	APPR	(S(PP*	auf	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	einen	ART	*	ein	sg	masc	-	(217
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Vater	NN	*)	vater	sg	masc	-	217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	endlich	ADV	*	endlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	drei	CARD	(AP(NP*	drei	-	-	-	(218
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Söhnen	NN	*	söhne	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	;	$.	*)	--	-	-	-	218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Die	ART	*	der	-	-	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	alle	PIAT	(NM*	aller	pl	*	-	(218
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	drei	CARD	*)))	drei	-	-	-	218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	ihm	PPER	*	ihm	sg	masc	-	(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	gleich	ADV	(AP*	gleich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	gehorsam	ADJD	*)	gehorsam	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	waren	VAFIN	*))	sein	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	Die	ART	*	der	pl	*	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	alle	PIAT	(NM*	aller	pl	*	-	(218
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	drei	CARD	*)))	drei	-	-	-	218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	er	PPER	*	er	sg	masc	-	(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	folglich	ADV	(VP*	folglich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	gleich	ADV	*	gleich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	34	lieben	VVINF	*))	lieben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	35	Sich	PRF	(VP*	sich	sg	-	-	(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	36	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	37	entbrechen	VVINF	*)	entbrechen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	38	konnte	VMFIN	*)	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	39	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nur	ADV	(VROOT(PSEUDO(S(PP*	nur	-	-	-	(219
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Zeit	NN	*	zeit	sg	fem	-	219)|(220)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Zu	APPR	(PP*	zu	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Zeit	NN	*))	zeit	sg	fem	-	(220)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	schien	VVFIN	*	scheinen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ihm	PPER	*	ihm	sg	masc	-	(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	bald	ADV	*	bald	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	der	PDS	(NP*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	bald	ADV	(AP(S*	bald	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	dieser	PDS	(NP*	dieser	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	bald	ADV	(CS(S*	bald	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Der	ART	(NP*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	dritte	ADJA	*))	dritter	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	–	KON	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	so	ADV	(CS(S(AVP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	jeder	PIS	*))	jeder	sg	masc	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	sich	PRF	*	sich	sg	-	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	ihm	PPER	*)	ihm	sg	masc	-	(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	Allein	ADV	*	allein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	befand	VVFIN	*)	befinden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	sein	PPOSAT	(S(NP*	sein	-	-	-	(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	ergießend	ADJD	*	ergießend	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	Herz	NN	*)	herz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	Die	ART	(NP*	der	pl	masc	-	(221
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	andern	PIS	*))))))	anderer	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	zwei	CARD	*))	zwei	-	-	-	221)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	34	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	35	teilten	VVFIN	*)	teilen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	36	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	37	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	38	würdiger	ADJA	*	würdig	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	39	Des	ART	(NP*	der	sg	masc	-	(205
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	40	Ringes	NN	*	ring	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	41	;	$.	*)	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	42	den	ART	*	der	sg	masc	-	(205)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	43	er	PPER	(S(VP*	er	sg	masc	-	(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	44	denn	ADV	(S*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	45	auch	ADV	(NP*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	46	einem	ART	*	ein	sg	neut	-	(218
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	47	jeden	PIAT	(AP*	jeder	sg	masc	-	218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	48	Die	ART	(AP*	der	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	49	fromme	ADJA	*))	fromm	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	50	Schwachheit	NN	*)	schwachheit	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	51	hatte	VAFIN	*)	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	52	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	53	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	54	versprechen	VVINF	*))	versprechen	-	-	-	205)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	55	Das	PDS	(AP(AVP(S*	der	sg	neut	-	(219)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	56	ging	VVFIN	*	gehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	57	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	58	so	ADV	*)	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	59	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	60	so	ADV	*)	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	61	lang	ADJD	*)	lang	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	62	es	PPER	*	es	sg	neut	-	(219)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	63	ging	VVFIN	*)	gehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	64	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Allein	ADV	(S*	allein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Es	PPER	*	es	sg	neut	-	(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	kam	VVFIN	*	kommen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	zum	APPRART	(PP*	zu	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Sterben	NN	*))	sterben	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	der	ART	(NP*	der	sg	masc	-	(217
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	gute	ADJA	*	gut	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Vater	NN	*	vater	sg	masc	-	217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Kömmt	NE	*	kömmt	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Verlegenheit	NN	*))	verlegenheit	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	(222)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	schmerzt	VVFIN	*	schmerzen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	zwei	CARD	(AP*	zwei	-	-	-	(365)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	seinen	PPOSAT	*	sein	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Söhnen	NN	*	söhnen	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	die	PRELS	(S*	der	pl	fem	-	(221)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	sich	PRF	*	sich	pl	-	-	(221)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	sein	PPOSAT	*	sein	sg	neut	-	(223
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Wort	NN	*)	wort	sg	neut	-	223)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Verlassen	NN	*	verlassen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	so	ADV	(VP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	kränken	VVINF	*))))))	kränken	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	tun	VVINF	*	tun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	*	er	sg	masc	-	(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sendet	VVFIN	*	senden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	in	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	geheim	ADJD	*	geheim	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	APPR	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	einem	ART	*	ein	sg	masc	-	(224
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Künstler	NN	*	künstler	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	224)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Bei	APPR	*	bei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	dem	PRELS	*	der	sg	masc	-	(224)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	er	PPER	*	er	sg	masc	-	(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	nach	APPR	*	nach	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	dem	ART	*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Muster	NN	*	muster	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	seines	PPOSAT	*	sein	sg	neut	-	(205|(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Ringes	NN	*	ring	sg	neut	-	205)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Zwei	CARD	*	zwei	-	-	-	(225
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	andere	PIS	*	anderer	pl	*	-	225)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	bestellt	VVFIN	*	bestellen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	weder	KON	*	weder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	Kosten	NN	*	kosten	pl	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	Noch	KON	*	noch	pl	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	Mühe	NN	*	mühe	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	sparen	VVINF	*	sparen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	heißt	VVFIN	*	heißen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	sie	PPER	*	sie	sg	fem	-	(226|(225)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	jenem	PDAT	*	jener	sg	masc	-	(205)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	gleich	ADV	*	gleich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	34	,	$,	*	--	-	-	-	226)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	35	Vollkommen	NN	*	vollkommen	pl	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	36	gleich	ADV	*	gleich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	37	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	38	machen	VVINF	*	machen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	39	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(226)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	gelingt	VVFIN	*	gelingen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Dem	ART	(NP*	der	sg	neut	-	(224
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Künstler	NN	*))	künstler	*	*	-	224)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Da	KOUS	*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(224)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	masc	-	(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	*	der	sg	fem	-	(227
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ringe	NN	*	ring	sg	fem	-	227)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	bringt	VVFIN	*	bringen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Kann	NE	*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	*	der	sg	masc	-	(217
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Vater	NN	*	vater	sg	masc	-	217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	seinen	PPOSAT	*	sein	sg	masc	-	(205|(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Musterring	NN	*	musterring	sg	masc	-	205)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	unterscheiden	VVINF	*	unterscheiden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Froh	ADJD	(VROOT(PSEUDO(S(CAP*	froh	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	freudig	ADJD	*)	freudig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ruft	VVFIN	*	rufen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Er	PPER	(NP*	er	sg	masc	-	(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	seine	PPOSAT	(NP*	sein	sg	fem	-	(218|(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Söhne	NN	*))	sohn	sg	fem	-	218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	jeden	PIAT	(S(NP*	jeder	sg	masc	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	ins	APPRART	(AP(PP*)	in	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	besondre	ADJA	*))	besondre	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Gibt	NE	(NP*	geben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	jedem	PIAT	(NP*	jeder	sg	masc	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	ins	APPRART	(AP(PP*)	in	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	besondre	ADJA	*)	besondre	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	seinen	PPOSAT	(NP*	sein	sg	masc	-	(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Segen	NN	*)))	segen	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	–	$.	*	–	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Und	KON	(CS(CO(NP*	und	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	seinen	PPOSAT	*	sein	sg	masc	-	(227|(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	Ring	NN	*)	ring	sg	masc	-	227)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	–	NN	*)	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	stirbt	VVFIN	*)))	sterben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	(NP*	du	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	hörst	ADV	*	hörst	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Sultan	NN	*)	sultan	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(S*	der	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	sich	PRF	*	sich	sg	-	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	betroffen	ADJD	*	betreffen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(VP(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*)	ihm	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	gewandt	VVPP	*))	wenden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	hör	VVFIN	*	hör	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	(S*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	höre	VVFIN	*))	hören	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Komm	NN	(NP*	komm	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	deinem	PPOSAT	*	dein	sg	masc	-	(191|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Märchen	NN	*))	märchen	sg	masc	-	191)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Nur	ADV	(AVP*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	bald	ADV	*)	bald	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Ende	NN	*)	ende	sg	neut	-	(228)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wirds	NN	*	wird	-	-	-	(228)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ende	NN	*))	ende	sg	neut	-	(228)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(S*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	folgt	VVFIN	*)	folgen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	versteht	VVFIN	*	verstehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	*	sich	sg	-	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ja	ADV	(PP*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	selbst	ADV	*))	selbst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kaum	ADV	*	kaum	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	*	der	sg	masc	-	(217
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Vater	NN	*	vater	sg	masc	-	217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	tot	ADJD	*	tot	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	ein	ART	*	ein	sg	masc	-	(218
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	jeder	PIAT	*	jeder	sg	masc	-	218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Mit	APPR	*	mit	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	seinem	PPOSAT	*	sein	sg	masc	-	(227|(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Ring	NN	*	ring	sg	masc	-	227)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	jeder	PIS	*	jeder	sg	masc	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	der	ART	*	der	sg	masc	-	(216
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Fürst	NN	*	fürst	sg	masc	-	216)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	Des	NE	*	der	sg	neut	-	(211
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	Hauses	NE	*	haus	sg	neut	-	211)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	sein	VAINF	*	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Man	PIS	(VROOT(PSEUDO(S*	man	sg	*	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	untersucht	VVFIN	*	untersuchen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	man	PIS	(S*	man	sg	*	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	zankt	VVFIN	*	zanken	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Man	PIS	*	man	sg	*	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	klagt	VVFIN	*))	klagen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Umsonst	ADV	*	umsonst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	sg	masc	-	(205
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	rechte	ADJA	*	rechter	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ring	NN	*	ring	sg	masc	-	205)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Erweislich	ADJD	*	erweislich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Nach	APPR	*	nach	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	einer	ART	*	ein	sg	fem	-	(229
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Pause	NN	*	pause	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	in	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	welcher	PRELS	*	welcher	sg	fem	-	(229)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	des	ART	*	der	sg	neut	-	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Sultans	NN	*	sultan	sg	neut	-	7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Antwort	NN	*	antwort	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	erwartet	VVPP	*	erwarten	-	-	-	229)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	Fast	ADV	*	fast	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	unerweislich	ADJD	*	unerweislich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	als	APPR	*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	Uns	NN	*	uns	pl	*	-	(166)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	itzt	VVFIN	*	itzen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	–	NN	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	der	ART	*	der	sg	fem	-	(62
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	rechte	ADJA	*	rechter	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	Glaube	NN	*	glaube	sg	*	-	62)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nach	APPR	(VROOT(PSEUDO(PP*	nach	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	einer	ART	*	ein	sg	fem	-	(229
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Pause	NN	*	pause	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	(S(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	welcher	PRELS	*)	welcher	sg	fem	-	(229)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	des	ART	(NP*	der	sg	neut	-	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Sultans	NN	*	sultan	sg	neut	-	7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Antwort	NN	*)	antwort	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	erwartet	VVPP	*))	erwarten	-	-	-	229)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(191)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Die	ART	(VP(NP*	der	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Antwort	NN	*)	antwort	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	sein	VAINF	*	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	meine	PPOSAT	*	mein	sg	fem	-	(186|(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Frage	NN	*)))	frage	sg	fem	-	186)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Soll	VMFIN	(VROOT(PSEUDO(S*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mich	PPER	*	mich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	bloß	ADV	(VP*	bloß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	entschuldigen	VVINF	*	entschuldigen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	die	ART	(NP*	der	sg	fem	-	(62
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Ringe	NN	*	ring	sg	fem	-	62)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Mir	NE	*)	sich	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	getrau	ADJD	*	getrau	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	zu	PTKZU	(VP(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	unterscheiden	VVINF	*)	unterscheiden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	die	PRELS	(S*	der	sg	fem	-	(62)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Der	ART	(VP(NP*	der	sg	masc	-	(43
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Vater	NN	*)	vater	sg	masc	-	43)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	der	ART	*	der	sg	fem	-	(230
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	Absicht	NN	*)	absicht	sg	fem	-	230)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	machen	VVINF	*)	machen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	ließ	VVFIN	*	lassen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	Damit	KOUS	(S*	damit	sg	-	-	(230
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	sie	PPER	(VP*	sie	sg	fem	-	(62)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	unterscheiden	VVINF	*))	unterscheiden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	wären	VAFIN	*))))))	sein	pl	-	-	230)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(NP*	der	sg	fem	-	(62
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ringe	NN	*)	ring	sg	fem	-	62)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Spiele	NN	(NP*	spiel	pl	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	(PP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*))	sich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dächte	VVFIN	*	dächen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	(NP*	der	pl	fem	-	(175
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Religionen	NN	*	religion	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	die	PRELS	(S*	der	sg	fem	-	(175)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	dir	PPER	*	dir	sg	*	-	175)|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Genannt	NN	*))	nennen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	doch	ADV	(VP*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	unterscheiden	VVINF	*))	unterscheiden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	wären	VAFIN	*))	sein	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Bis	APPR	(VROOT(PSEUDO(PP*	bis	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	die	ART	*	der	sg	fem	-	(231
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Kleidung	NN	*)	kleidung	sg	fem	-	231)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	bis	APPR	(PP*	bis	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	auf	APPR	*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Speis	NN	(CNP*	speise	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Trank	NN	*))	trank	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Seiten	NN	*	seite	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihrer	PPOSAT	(NP*	ihr	sg	fem	-	(182|(175)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Gründe	NN	*))	grund	sg	-	-	182)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	gründen	VVFIN	*	gründen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	alle	PIS	*)	alle	pl	*	-	(175)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	sich	PRF	(S*	sich	pl	-	-	(175)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Geschichte	NN	*))	geschichte	sg	fem	-	(232)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geschrieben	VVPP	(VROOT(PSEUDO(S(CVP*	geschrieben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	oder	KON	*	oder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	überliefert	VVPP	*))	überliefern	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Geschichte	NN	(S*	geschichte	sg	fem	-	(232)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	allein	ADV	*	allein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	auf	APPR	(VP(VP(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Treu	NN	(CNP*	treu	-	-	-	(233)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Glauben	NN	*))	glaube	pl	fem	-	(62)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	angenommen	VVPP	*)	annehmen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	werden	VAINF	*))	werden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wessen	VVFIN	*	wessen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Treu	NN	*	treu	-	-	-	(234)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Glauben	NN	(S*	glaube	sg	masc	-	(62)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	zieht	VVFIN	*	ziehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	man	PIS	*	man	sg	*	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	denn	ADV	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Am	APPRART	(CPP(PP*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	wenigsten	PIS	*)	wenig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Zweifel	NN	*)))	zweifel	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	der	ART	*	der	sg	fem	-	(235
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Seinen	PPOSS	*	sein	sg	fem	-	235)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	deren	PRELAT	(NP*	der	*	*	-	(235
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Blut	NN	*)	blut	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	wir	PPER	*	wir	pl	*	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	sind	VAFIN	*)	sein	pl	-	-	235)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	deren	PDS	(NP*	der	pl	masc	-	(235
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	die	PRELS	(S*	der	sg	fem	-	235)|(235)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Kindheit	NN	*)	kindheit	sg	-	-	(236)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	an	APPR	(NP(PP*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	uns	PPER	*)	uns	pl	*	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Proben	NN	*))))	probe	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	ihrer	PPOSAT	(NP*	ihr	sg	fem	-	(235)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Liebe	NN	*	liebe	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Gegeben	NN	*)	gegeben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	die	ART	(VROOT(PSEUDO(S*	der	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	uns	PPER	*	uns	pl	*	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nie	ADV	*	nie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	getäuscht	VVPP	*	täuschen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	wo	PWAV	(VP*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Getäuscht	NN	*	getäuscht	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	werden	VAINF	*))	werden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	uns	PPER	*	uns	pl	*	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	heilsamer	ADJD	*	heilsam	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	war	VAFIN	*))	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	*	wie	-	-	-	(237
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	meinen	PPOSAT	*	mein	pl	masc	-	(238|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Vätern	NN	*	Vater	pl	masc	-	238)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	weniger	ADV	*	weniger	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Als	KOUS	*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	du	PPER	*	du	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	*	der	sg	masc	-	(239
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	deinen	PPOSAT	*	dein	sg	masc	-	239)|(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	glauben	VVINF	*	glauben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Oder	KON	(VROOT(PSEUDO(VP(AP*	oder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	umgekehrt	ADJD	*))	umgekehrt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kann	VMFIN	(S*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(VP(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	dir	PPER	*)	dir	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	verlangen	VVINF	*))	verlangen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	du	PPER	*	du	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	deine	PPOSAT	(VP(NP*	dein	pl	fem	-	(363)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Vorfahren	NN	*)	vorfahr	pl	fem	-	237)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	widersprechen	VVINF	*)))	widersprechen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Oder	KON	(VROOT(PSEUDO(VP(AP*	oder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	umgekehrt	ADJD	*))	umgekehrt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S(NP*	der	sg	neut	-	(237
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nämliche	ADJA	*)	nämlich	sg	neut	-	237)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	gilt	VVFIN	*	gelten	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	*	der	pl	*	-	(41
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Christen	NN	*))	christ	pl	*	(MISC*)	41)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	(	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Bei	APPR	*	bei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dem	ART	*	der	sg	neut	-	(240
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Lebendigen	NN	*	lebendige	sg	neut	-	240)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mann	NN	*)	mann	sg	masc	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Recht	NN	*)	recht	sg	neut	-	(200)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	verstummen	VVINF	*	verstummen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	)	$(	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laß	NN	*	lassen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	unsre	ADJA	*	unsr	sg	fem	-	(227|(166)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ring	NN	*	ring	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	227)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Uns	NE	*	uns	-	-	-	(166)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	kommen	VVINF	*	kommen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S(VP*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	gesagt	VVPP	*)	sagen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	(NP*	der	sg	fem	-	(218
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Söhne	NN	*	sohn	sg	fem	-	218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Verklagten	NN	*)	verklagter	pl	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	*	sich	sg	-	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	jeder	PIS	*	jeder	sg	fem	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	schwur	VVFIN	*	schwur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	dem	ART	(NP*	der	sg	masc	-	(241
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Richter	NN	*)	richter	sg	masc	-	241)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Unmittelbar	ADJD	(VP(AP*	unmittelbar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	seines	PPOSAT	*	sein	sg	masc	-	(217|(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Vaters	NN	*	vater	sg	masc	-	217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Hand	NN	(NP*	hand	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Den	NE	(MPN*	der	*	*	-	(227
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Ring	NE	*))))	ring	sg	*	-	227)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	haben	VAINF	*))))	haben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	NN	(S*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	wahr	PTKVZ	*)	wahr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nachdem	KOUS	(S*	nachdem	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Er	PPER	(NP*	er	sg	masc	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*)	ihm	sg	masc	-	(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	lange	ADV	*	lange	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	das	ART	*	der	sg	neut	-	(223
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Versprechen	NN	*)	versprechen	sg	neut	-	223)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	schon	ADV	(NP*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Gehabt	NN	*)	haben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	des	ART	(NP*	der	sg	masc	-	(215|(205
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Ringes	ADJA	*	ring	sg	masc	-	205)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Vorrecht	NN	*))	vorrecht	-	-	-	215)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	einmal	ADV	(S*	einmal	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Genießen	NN	*))	genießen	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	minder	ADV	(AP*	minder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wahr	ADJD	*))	wahr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	*	der	sg	masc	-	(217
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Vater	NN	*	vater	sg	masc	-	217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Beteu	NN	*	beteu	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	rte	VVFIN	*	ren	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	jeder	PIS	*	jeder	sg	masc	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	könne	VMFIN	*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	gegen	APPR	*	gegen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	ihn	PPER	*	ihn	sg	masc	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	falsch	ADJD	*	falsch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	gewesen	VAPP	*	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	sein	VAINF	*	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	eh	XY	*	eh	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	er	PPER	*	er	sg	masc	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	dieses	PDAT	*	dieser	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	Von	APPR	*	von	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	ihm	PPER	*	ihm	sg	masc	-	(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	einem	ART	*	ein	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	solchen	PIAT	*	solcher	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	lieben	ADJA	*	lieb	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	Vater	NN	*	vater	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	Argwohnen	NN	*	argwohnen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	laß	VVFIN	*	lassen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	34	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	35	eh	XY	*	eh	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	36	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	37	müß	VMFIN	*	müß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	38	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	39	er	PPER	*	er	sg	masc	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	40	seine	PPOSAT	*	sein	pl	neut	-	(221|(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	41	Brüder	NN	*	Bruder	pl	neut	-	221)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	42	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	43	So	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	44	gern	ADV	*	gern	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	45	er	PPER	*	er	sg	masc	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	46	sonst	ADV	*	sonst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	47	von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	48	ihnen	PPER	*	ihnen	pl	masc	-	(221)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	49	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	50	das	ART	*	der	sg	neut	-	(242
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	51	Beste	NN	*	gut	sg	neut	-	242)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	52	Bereit	ADJD	*	bereit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	53	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	54	glauben	VVINF	*	glauben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	55	sei	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	56	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	57	des	ART	*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	58	falschen	ADJA	*	falsch	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	59	Spiels	NN	*	spiel	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	60	Bezeihen	NN	*	bezeihen	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	61	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	62	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	63	er	PPER	*	er	sg	masc	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	64	wolle	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	65	die	ART	*	der	pl	masc	-	(221
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	66	Verräter	NN	*	verräter	pl	masc	-	221)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	67	Schon	ADV	*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	68	auszufinden	VVIZU	*	ausfinden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	69	wissen	VVINF	*	wissen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	70	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	71	sich	PRF	*	sich	sg	-	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	72	schon	ADV	*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	73	rächen	VVINF	*	rächen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	74	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(NP*	der	sg	masc	-	(241
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Richter	NN	*))	richter	sg	masc	-	241)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mich	PPER	(S*	mich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	verlangt	VVFIN	*	verlangen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	zu	PTKZU	(VP(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	hören	VVINF	*)	hören	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*	du	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	den	ART	(VP(NP*	der	sg	masc	-	(241
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Richter	NN	*)	richter	sg	masc	-	241)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	sagen	VVINF	*))))	sagen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	lässest	VVFIN	*	lässest	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sprich	NE	(VROOT(PSEUDO(MPN*	sprich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(241
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Richter	NN	*	richter	sg	masc	-	241)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sprach	VVFIN	*	sprechen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ihr	PPER	*	ihr	sg	fem	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*	sich	sg	*	-	(360)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	den	ART	*	der	sg	masc	-	(217
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Vater	NN	*	vater	sg	masc	-	217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	bald	ADV	*	bald	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	zur	APPRART	*	zu	sg	fem	-	(243
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Stelle	NN	*	stelle	sg	fem	-	243)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	schafft	VVFIN	*	schaffen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	weis	ADJD	*	weis	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	ich	PPER	*	ich	sg	*	-	(360)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	euch	PRF	*	euch	pl	*	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	Von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	meinem	PPOSAT	*	mein	sg	masc	-	(243|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	Stuhle	NN	*	stuhle	sg	masc	-	243)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denkt	VVFIN	(VROOT(PSEUDO(S*	denken	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihr	PPER	(NP*	ihr	sg	fem	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(360)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Rätsel	NN	*	rätsel	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Zu	NN	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	lösen	VVFIN	*))	lösen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	da	ADV	*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	bin	VAFIN	*)	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Oder	KON	(VROOT(PSEUDO(S*	oder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	harret	VVFIN	*	harret	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPER	*	ihr	pl	*	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Bis	KOUS	(S*	bis	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	daß	KOUS	*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(NP*	der	sg	masc	-	(205
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	rechte	ADJA	*	rechter	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Ring	NN	*)	ring	sg	masc	-	205)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	den	ART	(NP*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Mund	NN	*)	mund	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	eröffne	VVFIN	*))	eröffnen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	halt	ADV	*	halt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(360)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	höre	VVFIN	*	hören	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	(NP*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(S(NP*	der	sg	masc	-	(205
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	rechte	ADJA	*	rechter	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ring	NN	*)	ring	sg	masc	-	205)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Besitzt	VVFIN	*	besitzt	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	die	ART	(VP(NP*	der	sg	fem	-	(208
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Wunderkraft	NN	*)	wunderkraft	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	beliebt	ADJD	*	beliebt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	machen	VVINF	*))	machen	-	-	-	208)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Vor	APPR	(PP*	vor	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Gott	NN	(CNP*	gott	sg	masc	-	(43)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Menschen	NN	*))))	mensch	sg	masc	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	angenehm	ADJD	*)	angenehm	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	*	der	sg	neut	-	(208)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Entscheiden	NN	*	entscheiden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	die	ART	*	der	pl	fem	-	(225
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	falschen	ADJA	*	falsch	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ringe	NN	*	ring	pl	masc	-	225)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	werden	VAFIN	*	werden	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Doch	KON	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	das	PDS	*	der	sg	neut	-	(208)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	können	VMFIN	*	können	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	wen	PWS	*	wen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	lieben	VVFIN	*	lieben	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	zwei	CARD	*	zwei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	euch	PPER	*	euch	pl	*	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	am	PTKA	*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	meisten	PIS	*	meister	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Macht	NN	(NP*	macht	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	sagt	VVFIN	(S*	sagen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	an	PTKVZ	*))	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	schweigt	VVFIN	*)	schweigen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	(227
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ringe	NN	*)	ring	sg	fem	-	227)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wirken	VVFIN	*	wirken	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	zurück	PTKVZ	*)	zurück	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nach	APPR	(PP*	nach	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	außen	ADV	*))	außen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Jeder	PIS	(VROOT(PSEUDO(S*	jeder	sg	masc	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	liebt	VVFIN	*	lieben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	(VP*	sich	sg	-	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	selber	ADV	(AP*	selber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Am	NN	*)	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	meisten	VVINF	*))	meister	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	O	XY	*	O	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	seid	VAFIN	(S*	sein	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihr	PPER	*	ihr	sg	fem	-	(218
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	alle	PIAT	(NP*	aller	pl	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	drei	CARD	*	drei	-	-	-	218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Betrogene	NN	*))	betrogener	pl	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Betrieger	NN	*	betrieger	pl	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Eure	PPOSAT	(VROOT(PSEUDO(S(NP*	euer	pl	masc	-	(227|(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ringe	NN	*)	ring	pl	masc	-	227)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sind	VAFIN	*	sein	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	alle	PIAT	(AP(NM*	aller	pl	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	drei	CARD	*)	drei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	echt	ADJD	*))	echt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(VP(S(NP*	der	sg	masc	-	(205
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	echte	ADJA	*	echt	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ring	NN	*)	ring	sg	*	-	205)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vermutlich	ADV	*	vermutlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ging	VVFIN	*)	gehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	verloren	VVPP	*	verlieren	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*)))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Den	ART	(VROOT(PSEUDO(VP(NP*	der	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Verlust	NN	*)	verlust	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	bergen	VVINF	*)	bergen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	(VP(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ersetzen	VVINF	*)	ersetzen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	ließ	VVFIN	(S*	lassen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	(NP*	der	sg	masc	-	(217
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Vater	NN	*	vater	sg	masc	-	217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Die	ART	(NP*	der	pl	*	-	(227
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	drei	CARD	*))	drei	-	-	-	227)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	für	APPR	(VP(PP*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	einen	PIS	*)	ein	sg	masc	-	(205)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	machen	VVINF	*))))	machen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Herrlich	ADJD	(VROOT(PSEUDO*	herrlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	herrlich	ADJD	(VROOT(PSEUDO*	herrlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	also	ADV	*	also	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	fuhr	VVFIN	(S(S*	fahren	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(NP*	der	pl	masc	-	(241
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Richter	NN	*)	richter	pl	masc	-	241)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	fort	PTKVZ	*	fort	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	ihr	PPOSAT	(NP*	ihr	sg	fem	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Nicht	NN	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	meinen	VVFIN	*	meinen	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Rat	NN	*	Rat	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	statt	APPR	(PP*	statt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	meines	PPOSAT	*	mein	sg	neut	-	(360)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Spruches	NN	*)))	spruch	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	wollt	VMFIN	*	wollen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Geht	NN	(NP*	gehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	nur	ADV	*)))	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mein	PPOSAT	(S(NP*	mein	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Rat	NN	*)	Rat	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	aber	ADV	*	aber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	(S*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ihr	PPER	(S*	ihr	sg	fem	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	nehmt	VVFIN	*	nehmen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Die	ART	(NP*	der	sg	fem	-	(244
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Sache	NN	*)	sache	sg	fem	-	244)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	völlig	ADJD	*)))	völlig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	wie	KOKOM	(S*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	sie	PPER	*	sie	sg	fem	-	(244)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	liegt	VVFIN	*)	liegen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hat	VAFIN	(VROOT(PSEUDO(S*	haben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*)	euch	pl	*	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	jeder	PIS	*	jeder	sg	fem	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	seinen	PPOSAT	(NP*	sein	sg	masc	-	(227|(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ring	NN	*)	ring	sg	masc	-	227)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	seinem	PPOSAT	*	sein	sg	masc	-	(217|(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Vater	NN	*)	vater	sg	masc	-	217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	So	ADV	(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	glaube	VVFIN	*	glauben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	jeder	PIS	*	jeder	sg	masc	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	sicher	ADJD	(VP*	sicher	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	seinen	PPOSAT	(NP*	sein	sg	masc	-	(227|(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Ring	NN	*	ring	-	-	-	227)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Den	NE	*)	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	echten	VVINF	*)))	echt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Möglich	ADJD	*	möglich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	(NP*	der	sg	masc	-	(217
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Vater	NN	*)	vater	sg	masc	-	217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Die	ART	(NP*	der	sg	fem	-	(215
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Tyrannei	NN	*	tyrannei	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	des	ART	(NP*	der	sg	masc	-	(205
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Einen	NN	*	ein	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Rings	NE	*))	ring	sg	masc	-	215)|205)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	länger	ADJD	(VP*	lang	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	In	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	seinem	PPOSAT	*	sein	sg	neut	-	(211|(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Hause	NN	*)	haus	sg	neut	-	211)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	dulden	VVINF	*)	dulden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	wollen	VMFIN	*)	wollen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	gewiß	ADV	*	gewiß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Daß	KOUS	(CS(VP(AP(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	er	PPER	*	er	sg	masc	-	(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	euch	PPER	*	euch	pl	*	-	(218
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	alle	PIS	*)	aller	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	drei	CARD	*)	drei	-	-	-	218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	geliebt	VVPP	*)	lieben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	gleich	ADV	(S*	gleich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Geliebt	NN	*)))	geliebt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	indem	PIS	(S*	indem	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	er	PPER	*	er	sg	masc	-	(217)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	zwei	CARD	(VP*	zwei	-	-	-	(221)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	drücken	VVINF	*)	drücken	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	mögen	VMFIN	*	mögen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	Um	KOUI	(VP*	um	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	einen	PIS	*	ein	sg	masc	-	(214)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	begünstigen	VVINF	*)))	begünstigen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wohlan	NN	*	wohlan	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	(VROOT(PSEUDO(S*	es	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	eifre	VVFIN	*	eifren	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	jeder	PIS	(NP*	jeder	sg	masc	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	seiner	PPOSAT	(NP*	sein	pl	fem	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	unbestochnen	ADJA	*	unbestochnen	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Von	APPR	(AP(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Vorurteilen	NN	*)	vorurteil	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	freien	ADJA	*)	frei	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Liebe	NN	*))	liebe	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	nach	PTKVZ	*)	nach	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Es	PPER	*	es	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	strebe	VVFIN	*	streben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	*	von	-	-	-	(218
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	euch	PPER	*	euch	pl	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	jeder	PIS	*	jeder	sg	masc	-	218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	um	APPR	*	um	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	*	der	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Wette	NN	*	wette	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Die	ART	*	der	sg	fem	-	(208
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Kraft	NN	*	kraft	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	des	ART	*	der	sg	masc	-	(245
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Steins	NE	*	stein	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	in	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	seinem	PPOSAT	*	sein	sg	masc	-	(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Ring	NN	*	ring	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	208)|245)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	an	APPR	*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Tag	NN	*	tag	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	legen	VVINF	*	legen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	komme	VVFIN	*	kommen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	dieser	PDAT	*	dieser	sg	masc	-	(208
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Kraft	NN	*	kraft	sg	masc	-	208)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Sanftmut	NN	*	sanftmut	sg	-	-	(246)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Mit	APPR	*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	herzlicher	ADJA	*	herzlich	sg	fem	-	(246
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Verträglichkeit	NN	*	verträglichkeit	sg	fem	-	246)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	mit	APPR	*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Wohltun	NN	*	wohltun	sg	neut	-	(242)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Mit	APPR	*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	innigster	ADJA	*	innig	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Ergebenheit	NN	*	ergebenheit	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	in	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Gott	NN	*	gott	sg	masc	(PER*)	(43)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Zu	APPR	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Hülf	NE	*	hülf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	*	sich	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	dann	ADV	*	dann	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	der	ART	*	der	sg	masc	-	(208|(245
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Steine	ADJA	*	stein	sg	masc	-	245)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Kräfte	NN	*	kraft	pl	fem	-	208)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Bei	APPR	*	bei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	euern	PPOSAT	*	euern	pl	neut	-	(247|(218)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Kindes-Kindeskindern	NN	*	kindes-kindeskind	pl	neut	-	247)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	äußern	VVINF	*	äußern	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	So	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	lad	ADJD	*	lad	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	über	ADV	*	über	-	-	-	(248
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	tausend	CARD	*	tausend	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	tausend	CARD	*	tausend	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Jahre	NN	*	jahr	pl	neut	-	248)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	Sie	PPER	*	sie	pl	fem	-	(247)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	wiederum	ADV	*	wiederum	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	vor	APPR	*	vor	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	diesen	PDAT	*	dieser	pl	fem	-	(243
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	Stuhl	NN	*	stuhl	pl	fem	-	243)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO(S*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ein	ART	(NP*	ein	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	weisrer	ADJA	*	weisr	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Mann	NN	*)	mann	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	auf	APPR	(VP(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	diesem	PDAT	*	dieser	sg	masc	-	(243
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Stuhle	NN	*)	stuhle	sg	masc	-	243)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	sitzen	VVINF	*)	sitzen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Als	KOUS	(S*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(360)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	(CNP*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	sprechen	VVINF	*	sprechen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*)))))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	*	gehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sagte	VVFIN	*	sagen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	(NP*	der	sg	masc	-	(241)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Bescheidne	ADJA	*	bescheidne	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Richter	NN	*)	richter	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gott	NN	(VROOT(PSEUDO*	gott	-	-	-	(249)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gott	NN	(VROOT(PSEUDO*	gott	-	-	-	(249)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Saladin	NE	(VROOT(PSEUDO(NP*	saladin	-	-	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	du	PPER	*	du	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	dich	PRF	*	dich	sg	-	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	fühlest	VVFIN	*	fühlest	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	dieser	PDAT	(NP*	dieser	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	weisere	ADJA	*	weis	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Versprochne	NN	*)	versprochn	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Mann	NN	(VP*	mann	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	sein	VAINF	*))))	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	der	ART	(VROOT(PSEUDO(S(CS(S(NP*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*))	ihn	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	zustürzt	VVFIN	*)	stürzen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	seine	PPOSAT	(S(NP*	sein	sg	fem	-	(250|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Hand	NN	*)	hand	sg	fem	-	250)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	ergreift	VVFIN	*))	ergreifen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	die	PRELS	(S*	der	sg	fem	-	(250)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	er	PPER	*	er	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	bis	APPR	(PP*	bis	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	zu	APPR	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Ende	NN	*)	ende	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	wieder	ADV	(VP*	wieder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	fahren	VVINF	*)	fahren	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	läßt	VVFIN	*))	lassen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7|(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Staub	VVFIN	*)	staub	sg	-	-	7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(7|(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nichts	PIS	*	nichts	*	neut	-	7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(S*)	O	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*	gott	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dir	PPER	(NP*	dir	sg	*	-	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Sultan	NN	*))	sultan	-	-	-	7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(DL*	nathan	-	-	-	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	lieber	ADV	(S*	lieber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nathan	NE	*))	nathan	-	-	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	(S(NP*	der	pl	fem	-	(248
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	tausend	CARD	*	tausend	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	tausend	CARD	*	tausend	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Jahre	NN	*	jahr	pl	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	deines	PPOSAT	(NP*	dein	sg	masc	-	(241|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Richters	NN	*))	richter	sg	masc	-	248)|241)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Sind	VAFIN	*	sein	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	noch	ADV	(AVP*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	um	PTKVZ	*)	um	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sein	PPOSAT	*	sein	sg	neut	-	(243|(241)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Richterstuhl	NN	*	richterstuhl	sg	neut	-	243)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Der	ART	*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	meine	PPOSAT	*	mein	sg	fem	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	XY	*	geh	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	XY	*	geh	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Aber	KON	(S*	aber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sei	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mein	PPOSAT	(NP*	mein	sg	masc	-	(251|(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Freund	NN	*))	freund	sg	masc	-	251)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	weiter	ADV	*	weiter	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	hätte	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Saladin	NE	*	saladin	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*	sich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nichts	PIS	(VP*	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Zu	NN	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	sagen	VVINF	*))	sagen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gar	ADV	(VROOT(PSEUDO(NP*	gar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	warum	PWAV	*	warum	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	hätte	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	noch	ADV	(VP(NP*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Gelegenheit	NN	*)	gelegenheit	sg	fem	-	(252)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	gewünscht	VVPP	*	wünschen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Dir	PPER	(VP*	dir	sg	fem	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	eine	ART	(NP*	ein	sg	fem	-	(253
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Bitte	NN	*)	bitte	sg	fem	-	253)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	vorzutragen	VVIZU	*)))	vortragen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Brauchts	APPR	(VROOT(PSEUDO(PP*	braucht	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gelegenheit	NN	*	gelegenheit	sg	fem	-	(252)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	einer	ART	*	ein	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Bitte	NN	*))	bitte	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Rede	NN	*	rede	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	komm	VVFIN	*	kommen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	einer	ART	*	ein	sg	fem	-	(254
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	weiten	ADJA	*	weit	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Reis	NN	*	reis	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	auf	APPR	*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	welcher	PRELS	*	welcher	sg	fem	-	254)|(254)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Schulden	NN	*	schuld	pl	fem	-	(255)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	eingetrieben	VVPP	*	eintreiben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Fast	NN	*	fast	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	hab	VAFIN	*	hab	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Des	ART	*	der	sg	-	-	(170
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	baren	ADJA	*	bar	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Gelds	NN	*	geld	-	-	-	170)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKA	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	viel	PIS	*	viel	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	*	der	sg	fem	-	(256
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Zeit	NN	*	zeit	sg	fem	-	256)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	beginnt	VVFIN	*	beginnen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Bedenklich	ADJD	*	bedenklich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	wiederum	ADV	*	wiederum	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	werden	VAINF	*	werden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	–	$(	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	recht	ADV	*	recht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	wo	PWAV	*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	sicher	ADJD	*	sicher	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	damit	PROAV	*	damit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	hin	PTKVZ	*	hin	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Da	ADV	(S*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dacht	VVFIN	*	dacht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ob	KOUS	(S*	ob	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	du	PPER	*	du	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	vielleicht	ADV	*	vielleicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	–	NN	(S*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	weil	KOUS	*	weil	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Ein	ART	(NP*	ein	sg	masc	-	(257
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	naher	ADJA	*	nah	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Krieg	NN	*	krieg	sg	masc	-	257)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	des	ART	(NP*	der	sg	masc	-	(132
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Geldes	NN	*)))))	geld	sg	masc	-	132)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	immer	ADV	(S(NP(AP*	immer	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	mehr	PIAT	*)	mehr	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Erfodert	NN	*)	erfodert	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	–	$.	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	etwas	PIS	(VP*	etwas	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	brauchen	VVINF	*)	brauchen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	könntest	VMFIN	*)	könntest	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*))	saladin	-	-	-	(7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	ihm	PPER	(VROOT(PSEUDO(S*	ihm	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	steif	VVFIN	*	steif	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	(AP(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	*	der	pl	neut	-	(184
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Augen	NN	*)	auge	pl	neut	-	184)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	sehend	ADJD	*))	sehend	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(MPN*	nathan	-	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	(VP(VP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	fragen	VVINF	*	fragen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ob	KOUS	(S*	ob	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Al-Hafi	NE	*	al-hafi	sg	*	(MISC*)	(3)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	schon	ADV	*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Bei	APPR	(AP(PP*	bei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	dir	PPER	*))))	dir	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	gewesen	VAPP	*))	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	will	VMFIN	(S*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	untersuchen	VVINF	(VP*	untersuchen	-	-	-	(258)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Ob	KOUS	(S*	ob	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	dich	PPER	*	dich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	sonst	ADV	*	sonst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	ein	ART	*	ein	sg	masc	-	(180
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	Argwohn	NN	*)	argwohn	sg	masc	-	180)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	treibt	VVFIN	*	treiben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	mir	PPER	(VP*	sich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	dieses	PDAT	(NP*	dieser	sg	neut	-	(253)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	Erbieten	NN	*	erbiet	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	freier	ADJA	(NP*	frei	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	Dings	NN	*))	ding	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	tun	VVINF	*)))))	tun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	34	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	35	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	36	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ein	ART	(VROOT(PSEUDO(NP*	ein	sg	masc	-	(180
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Argwohn	NN	*)	argwohn	sg	masc	-	180)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	(AP*	ihn	sg	masc	-	(180)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	wert	ADJD	*))	wert	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Verzeih	NN	*	verzeih	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	KON	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	denn	ADV	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	was	PIS	(NP*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	hilfts	ADV	*))	hilft	-	-	-	(258)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dir	PPER	*	dir	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	gestehen	VVINF	*	gestehen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	–	PWAV	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	daß	KOUS	*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	im	APPRART	*	in	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Begriffe	NN	*	begreifen	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	–	XY	*	–	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	(VP(NP*	der	sg	neut	-	(253
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	nämliche	ADJA	*	nämlich	sg	neut	-	253)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	An	NN	*)	an	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	mich	PPER	*	mich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	suchen	VVINF	*)))	suchen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Allerdings	ADV	(VROOT(PSEUDO(S*)	allerdings	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Uns	NN	*	uns	pl	*	-	(166)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	beiden	PIS	*	beide	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ja	ADV	*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	geholfen	VVPP	*	helfen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	*	aber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Dir	PPER	*	dir	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	alle	PIS	*	aller	sg	-	-	(357
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	meine	PPOSAT	(NP*	mein	sg	fem	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Barschaft	NN	*))	barschaft	sg	fem	-	357)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	(S*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	schicken	VVINF	*)	schicken	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Das	PDS	(S*	der	sg	neut	-	(259)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	macht	VVFIN	*	machen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	der	ART	(NP*	der	sg	masc	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	junge	ADJA	*	jung	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Tempelherr	NN	*))	tempelherr	sg	masc	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Du	PPER	(S*	du	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	kennst	VVFIN	*	kennen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ihn	PPER	*	ihn	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*)	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihm	PPER	*	ihm	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	hab	VAFIN	*	hab	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	eine	ART	*	ein	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	große	ADJA	*	groß	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Post	NN	*	post	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Vorher	ADV	*	vorher	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	noch	ADV	*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	bezahlen	VVINF	*	bezahlen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Tempelherr	NN	(VROOT(PSEUDO*	tempelherr	-	-	-	(77)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Du	PPER	*	du	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wirst	VAFIN	*	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	meine	PPOSAT	*	mein	pl	masc	-	(77|(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	schlimmsten	ADJA	*	schlimm	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Feinde	NN	*	feind	pl	masc	-	77)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Mit	APPR	*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	deinem	PPOSAT	*	dein	sg	neut	-	(170|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Geld	NN	*	geld	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	'	$(	*	--	-	-	-	170)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	unterstützen	VVINF	*	unterstützen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	wollen	VMINF	*	wollen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	spreche	VVFIN	*	sprechen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	dem	ART	(NP*	der	sg	masc	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	einen	PIS	*	ein	sg	masc	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	*)))	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	dem	ART	*	der	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	du	PPER	(S*	du	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Das	ART	(NP*	der	sg	neut	-	(87
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Leben	NN	*)	leben	sg	neut	-	87)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	spartest	VVFIN	*)	spartesen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	woran	PWAV	*	woran	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	erinnerst	VVPP	*	erinnerst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Du	PPER	*	du	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Hab	XY	*	hab	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	fem	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	diesen	PDAT	*	dieser	sg	masc	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Jüngling	NN	*	jüngling	sg	masc	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ganz	ADV	*	ganz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Vergessen	VVPP	*	vergessen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kennst	VVFIN	*	kennen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*	ihn	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wo	PWAV	*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	weißt	VVFIN	*	weißen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	du	PPER	*	du	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	viel	PIS	(NP*	viel	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	deiner	PPOSAT	*	dein	sg	fem	-	(260|(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Gnade	NN	*))	gnade	sg	fem	-	260)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Für	APPR	(PP*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	ihn	PPER	*)	ihn	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	durch	APPR	(VP(PP*	durch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	ihn	PPER	*)	ihn	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	mich	PPER	*)	mich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	geflossen	VVPP	*)))	fließen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Er	PPER	*	er	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mit	APPR	*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Gefahr	NN	*	gefahr	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	des	ART	*	der	sg	masc	-	(87
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	neu	ADJD	*	neu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	erhaltnen	ADJA	*	erhaltnen	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Lebens	NN	*	leben	sg	masc	-	87)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	meine	PPOSAT	*	mein	sg	fem	-	(261|(2|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Tochter	NN	*	tochter	sg	fem	-	2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	aus	APPR	*	aus	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	dem	ART	*	der	sg	neut	-	(73
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Feu	NN	*	feu	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	r	PPER	*	--	-	-	-	73)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	gerettet	VVPP	*	retten	-	-	-	261)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(261)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ha	NE	*	ha	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	darnach	PROAV	(VROOT(PSEUDO(S*	darnach	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	sah	VVFIN	*	sehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	aus	PTKVZ	*)	aus	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	*	der	sg	neut	-	(261)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	hätte	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	traun	VVFIN	*	traun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mein	PPOSAT	*	mein	sg	masc	-	(262|(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Bruder	NN	*	bruder	sg	masc	-	262)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	getan	VVPP	*	tun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Dem	PWS	*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	er	PPER	*	er	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	ähnelt	VVFIN	*	ähneln	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	VAFIN	(S*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	noch	ADV	*)	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	hier	ADV	*	hier	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	bring	VVFIN	*	bring	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	her	PTKVZ	*)	her	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	meiner	PPOSAT	(NP*	mein	pl	masc	-	(127|(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Schwester	NN	*))	schwester	pl	masc	-	127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	diesem	PDAT	*	dieser	sg	masc	-	(262
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ihren	PPOSAT	(NP*	ihr	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Bruder	NN	*)	bruder	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	den	PRELS	(S*	der	sg	masc	-	(262)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	pl	masc	-	(127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	nicht	PTKNEG	*	nicht	-	-	-	262)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Gekannt	NN	(VP(VP(NP*	gekannt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	so	ADV	(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	viel	PIS	*	viel	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	erzählet	VVPP	(CVP*	erzählet	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	sie	PPER	*	sie	sg	fem	-	(127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	Sein	PPOSAT	(NP*	sein	sg	neut	-	(17|(262)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	Ebenbild	NN	*)	ebenbild	sg	neut	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	auch	ADV	*))	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	muß	VMFIN	*))	müssen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	sehen	VVINF	*)	sehen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	lassen	VVINF	*)))	lassen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Geh	XY	*	geh	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	hol	XY	*	hol	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihn	PPER	*	ihn	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Einer	ART	(CO(NP*	einer	sg	fem	-	(260
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	guten	ADJA	*	gut	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Tat	NN	*)	tat	sg	fem	-	260)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Gebar	NN	*))	gebar	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	sie	PPER	*	sie	sg	fem	-	(260)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	schon	ADV	*)	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	bloße	ADJA	(NP*	bloß	sg	fem	-	(263
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Leidenschaft	NN	*)	leidenschaft	sg	fem	-	263)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Doch	KON	(S*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	so	ADV	(VP*	so	-	-	-	(242
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	viel	PIAT	(NP*	viel	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	andre	ADJA	*	andre	pl	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	gute	ADJA	*	gut	pl	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Taten	NN	*)	tat	pl	fem	-	242)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	fließen	VVINF	*))	fließen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geh	XY	*	geh	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	hol	VAFIN	*	hol	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ihn	PPER	*	ihn	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*))	nathan	-	-	-	(1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	indem	KOUS	(VROOT(PSEUDO(S*	indem	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Saladins	NE	(VP(NP*	saladin	sg	*	-	(264|(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Hand	NN	*)	hand	sg	fem	-	264)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	fahren	VVINF	*)	fahren	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	läßt	VVFIN	*)	lassen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Augenblicks	NN	(VROOT(PSEUDO*	augenblick	-	-	-	(19)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dem	ART	*	der	sg	neut	-	(253
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	andern	ADJA	*	anderer	sg	neut	-	253)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Bleibt	NN	*)	bleiben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	es	PPER	*	es	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	auch	ADV	*)	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ab	NN	(VROOT(PSEUDO*	ab	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	SALADIN	NE	(VROOT(PSEUDO*	saladin	sg	neut	(LOC*)	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	7)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	meine	PPOSAT	(NP*	mein	sg	-	-	(127|(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Schwester	NN	*)	schwester	sg	neut	-	127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Nicht	PTKNEG	(VP(VP*	nicht	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	horchen	VVINF	*)	horchen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	lassen	VVINF	*))	lassen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Zu	APPR	(NP(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPER	*))	ihr	sg	fem	-	(127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	zu	APPR	(VROOT(PSEUDO(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ihr	PPER	*)	ihr	-	-	-	(127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*	ich	sg	*	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	alles	PIS	*	alle	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	das	PDS	*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ihr	PPOSAT	*	ihr	sg	neut	-	(127)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	erzählen	VVINF	*	erzählen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ab	APPR	(VROOT(PSEUDO(PP*	ab	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	sg	fem	-	(265
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	andern	ADJA	*	anderer	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Seite	NN	*)	seite	sg	fem	-	265)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	(266
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Szene	NN	*	szene	sg	fem	-	266)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	unter	APPR	(CPP(PP*	unter	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	den	ART	*	der	pl	*	-	(125
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Palmen	NN	*)	palme	pl	*	-	125)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	der	ART	*	der	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Nähe	NN	*	nähe	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	des	ART	(NP*	der	sg	masc	-	(106
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Klosters	NN	*))))	kloster	sg	masc	-	106)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	wo	PWAV	(S*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	der	ART	(NP*	der	sg	masc	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Tempelherr	NN	*)	tempelherr	sg	masc	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Nathans	NE	*	nathan	sg	neut	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	wartet	VVFIN	*))	warten	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DER	NE	(VROOT(PSEUDO(MPN*	der	-	-	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	TEMPELHERR	NE	*)))	tempelherr	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	geht	VVFIN	(VROOT(PSEUDO(S*	gehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(PP*	mit	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	sich	PRF	*	sich	sg	-	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	selbst	ADV	*)	selbst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	kämpfend	ADJD	*	kämpfend	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	auf	PTKVZ	(CAVP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	ab	PTKVZ	*)	ab	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	bis	KON	*	bis	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	er	PPER	*	er	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	losbricht	VVFIN	*)	losbrechen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Hier	ADV	(S*	hier	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	hält	VVFIN	*	halten	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	das	ART	(NP*	der	sg	neut	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Opfertier	NN	*))	opfertier	sg	neut	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ermüdet	VVFIN	(S*	ermüden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	still	PTKVZ	*)	still	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(S(ISU*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	gut	ADJD	*))	gut	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CS(S*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	mag	VMFIN	*	mögen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	mag	VMFIN	(S*	mögen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	näher	ADJD	(VP*	nah	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	wissen	VVINF	*	wissen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	mir	PPER	*)	sich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	vorgeht	VVFIN	*))))	vorgehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	mag	VMFIN	(S*	mögen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	voraus	ADV	(VP*	voraus	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	wittern	VVINF	*	wittern	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Was	PWS	(S*	was	sg	neut	-	(267
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	vorgehn	VVPP	*	vorgehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	wird	VAFIN	*))))	werden	sg	-	-	267)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Genug	NN	(NP*	genug	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	(S*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	umsonst	ADV	*))	umsonst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Geflohn	NN	*	geflohn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	umsonst	ADV	(VROOT(PSEUDO*	umsonst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	weiter	ADV	*	weiter	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	konnt	ADJD	*	konnen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	fem	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	als	KOKOM	*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	fliehn	CARD	*	fliehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	komm	VVIMP	*	komm	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	kommen	VVINF	*	kommen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihm	PPER	(S(VP*	ihm	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	auszubeugen	VVIZU	*	ausbeugen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	war	VAFIN	(S*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	(AP(NP*	der	sg	masc	-	(268
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Streich	NN	*)	streich	sg	masc	-	268)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKA	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	schnell	ADJD	*))))	schnell	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Gefallen	NN	*	gefallen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	unter	APPR	(CS(VP(AVP*	unter	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	den	ART	*)	der	pl	*	-	(268)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	kommen	VVINF	*)	kommen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	ich	PPER	(AP*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	So	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	lang	ADJD	*))	lang	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	viel	ADV	(S*	viel	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	mich	PPER	*	mich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	weigerte	VVFIN	*))	weigern	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sie	PPER	*	sie	pl	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sehn	CARD	*	sehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Die	KOUS	*	der	sg	-	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	zu	APPR	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	sehn	CARD	*	sehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	wenig	PIS	*	wenig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	lüstern	VVINF	*	lüstern	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	–	KOUS	*	–	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	sehn	CARD	*	sehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	der	ART	*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Entschluß	NN	*	entschluß	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	sie	PPER	*	sie	*	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	aus	APPR	*	aus	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	Den	ART	*	der	pl	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	Augen	NN	*	auge	pl	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	nie	ADV	*	nie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	lassen	VVINF	*	lassen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	–	$.	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	Was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	Entschluß	NN	*	entschluß	sg	neut	-	(269)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Entschluß	NN	*	entschluß	sg	masc	-	(269)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Vorsatz	NN	*	vorsatz	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Tat	NN	*	tat	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	litt	VVFIN	*	leiden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	litte	VVFIN	*	litten	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	bloß	PTKVZ	*	bloß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sie	PPER	*	sie	pl	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sehn	CARD	*	sehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	das	ART	*	der	sg	neut	-	(270
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Gefühl	NN	*	gefühl	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	270)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	An	APPR	*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	verstrickt	VVPP	*	verstricken	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	in	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	verwebt	VVPP	*	verweben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	sein	VAINF	*	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	War	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	eins	PIS	*	eins	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO(S*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	eins	PIS	*)	eins	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPER	*	ihr	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	getrennt	VVPP	*	trennen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	leben	VVINF	*	leben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	ganz	ADV	*	ganz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	undenkbar	ADJD	*	undenkbar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Mein	PPOSAT	*	mein	sg	masc	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Tod	NN	*	tod	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	–	NN	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	wo	PWAV	*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	wir	PPER	*	wir	pl	*	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	immer	ADV	*	immer	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	nach	APPR	*	nach	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	dem	ART	*	der	sg	masc	-	(271
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	Tode	NN	*	tod	sg	masc	-	271)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	Noch	ADV	*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	sind	VAFIN	*	sein	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	da	ADV	*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	mein	PPOSAT	*	mein	sg	masc	-	(272|(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	Tod	NN	*	tod	sg	masc	-	272)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	VAFIN	(S*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(270)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Liebe	NN	*	liebe	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	So	ADV	(S(AVP*	so	-	-	-	(273
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	–	ADJD	*)	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	liebt	VVFIN	*	lieben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	(NP*	der	sg	masc	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Tempelritter	NN	*)	tempelritter	sg	masc	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	–	PPER	(S*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	liebt	VVFIN	*	lieben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Der	ART	(NP*	der	sg	masc	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Christ	NN	*))))	christ	sg	masc	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	das	ART	(NP*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Judenmädchen	NN	*	judenmädchen	sg	neut	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	freilich	ADV	*)	freilich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	273)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	tuts	FM	*	tut	-	-	-	(273)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	hab	VAFIN	*	hab	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	in	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	dem	ART	*	der	sg	neut	-	(14
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	gelobten	ADJA	*	gelobt	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Lande	NN	*	land	sg	neut	-	14)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	–	$.	*	–	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	drum	ADV	*	drum	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	gelobt	VVPP	*	loben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	auf	APPR	*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	immerdar	ADV	*	immerdar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	(NP*	der	sg	masc	-	(274
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Vorurteile	NN	*	vorurteil	sg	masc	-	274)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mehr	ADV	(VP*	mehr	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	schon	ADV	*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	abgelegt	VVPP	*))	ablegen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*)	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mein	PPOSAT	(NP*	mein	sg	neut	-	(275|(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Orden	NN	*	orden	sg	neut	-	275)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	auch	ADV	*)	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(CS(S*	ich	sg	*	-	(17|(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherr	NN	*	tempelherr	sg	-	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	tot	ADJD	*	tot	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	war	VAFIN	(S*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	dem	ART	*	der	sg	masc	-	(276
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Augenblick	NN	*)	augenblick	sg	masc	-	276)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	ihm	PPER	*	ihm	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	tot	ADJD	*))	tot	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Der	KOUS	(S*	der	sg	masc	-	(276)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	mich	PPER	*	mich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Saladins	NE	*	saladin	sg	*	-	(277|(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Gefangnen	NN	*)	gefangnen	sg	*	-	277)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	machte	VVFIN	*))	machen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(278|(279
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kopf	NN	*	kopf	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	den	ART	*	der	sg	masc	-	(279)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Saladin	NN	*	saladin	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	schenkte	VVFIN	*	schenken	sg	-	-	279)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Mein	PPOSAT	*	mein	sg	masc	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	alter	ADJA	*	alt	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	*	ein	sg	masc	-	(280
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	neuer	ADJA	*	neu	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	der	ART	*	der	sg	masc	-	(280)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	allem	PIS	*	alle	sg	neut	-	280)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	was	PRELS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	jenem	PDAT	*	jener	sg	masc	-	(281)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	eingeplaudert	VVPP	*	einplaudern	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	ward	VVFIN	*	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	jenen	PDS	*	jener	sg	*	-	(281)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	band	VVFIN	*	binden	*	*	-	278)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Den	ART	*	der	sg	masc	-	(282
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	väterlichen	ADJA	*	väterlich	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	Himmel	NN	*	himmel	sg	masc	-	282)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	mehr	ADV	*	mehr	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	gemacht	VVPP	*	machen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	*	der	sg	neut	-	(278)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	spür	FM	*	spüren	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	erst	ADV	*	erst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ihm	PPER	*	ihm	sg	masc	-	(279)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	beginn	VVFIN	*	beginn	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	denken	VVINF	*	denken	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	wie	KOKOM	*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	mein	PPOSAT	*	mein	sg	masc	-	(283|(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Vater	NN	*	vater	sg	masc	-	283)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	hier	ADV	*	hier	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Gedacht	NN	*	gedacht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	haben	VAFIN	*	haben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	man	PIS	*	man	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	Märchen	NN	*	märchen	sg	*	-	(284)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	Von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	ihm	PPER	*	ihm	sg	masc	-	(283)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	vorgelogen	VVPP	*	voeliegen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Märchen	NN	*	märchen	pl	fem	-	(284)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	doch	ADV	(NP(AP*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ganz	ADV	*	ganz	-	-	-	(284
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	glaubliche	ADJA	*))	glaublich	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	die	ART	(S(NP*	der	sg	fem	-	(284)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	glaublicher	ADJA	*)	glaublich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	nie	ADV	(VP*	nie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Als	APPR	(NP(AP(PP*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	itzt	ADJD	*)	itzt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	geschienen	ADJA	*)	geschien	-	-	-	284)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Zu	NN	*)	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	straucheln	VVINF	*)	straucheln	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	laufe	VVFIN	*	laufen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	wo	PWAV	(S*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	er	PPER	*	er	sg	masc	-	(283)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	fiel	VVFIN	*))	fallen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	(S*	er	sg	masc	-	(283)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	fiel	VVFIN	*)	fallen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(VP(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Männern	NN	*)	mann	pl	masc	-	(285)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	lieber	ADV	*	lieber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	fallen	VVINF	*	fallen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Kindern	NN	*)	kind	pl	neut	-	(286)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	stehn	VVFIN	*)))	stehn	pl	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sein	PPOSAT	(S(NP*	sein	sg	neut	-	(283)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Beispiel	NN	*)	beispiel	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	bürget	VVFIN	*	bürgen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	mir	PPER	*)	sich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Für	APPR	(NP(PP*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	seinen	PPOSAT	*	sein	sg	masc	-	(283)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Beifall	NN	*))	beifall	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	an	APPR	(PP*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wessen	PWAT	*	wessen	sg	masc	-	(287
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Beifall	NN	*)	beifall	sg	masc	-	287)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Liegt	VVFIN	*	liegen	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	denn	ADV	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	sonst	ADV	*)	sonst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	An	APPR	*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nathans	NN	*	nathan	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	O	NE	(NP*	O	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	an	APPR	(PP*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	dessen	PRELAT	*	der	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ermuntrung	NN	*))	ermuntrung	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	mehr	ADV	(NP*	mehr	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	als	APPR	(PP*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Beifall	NN	*)	beifall	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	kann	VMFIN	(S*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	es	PPER	*	es	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	mir	PPER	(VP*	sich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Noch	ADV	(AP*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	weniger	PIS	*)	weniger	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	gebrechen	VVINF	*)))	gebrechen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Welch	NN	*	welch	sg	*	-	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	neut	-	(141
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Jude	NN	*)	jude	sg	neut	-	1)|141)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(S*	der	sg	masc	-	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	(AVP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ganz	ADV	*)	ganz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nur	ADV	(VP(AP*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Jude	NN	*)	jude	-	-	-	(140)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	scheinen	VVINF	*)	scheinen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	will	VMFIN	*)	wollen	sg	-	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Da	ADV	(VROOT(PSEUDO*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	kömmt	VVFIN	(S(S*	kömmen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	kömmt	VVFIN	(S*	kömmen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Hast	NN	*)))	haben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	glüht	VVFIN	(S*	glühen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	heitre	ADJA	(NP*	heitr	-	-	-	(288
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Freude	NN	*)))	freude	sg	-	-	288)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Wer	PWS	(S*	wer	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	kam	VVFIN	*	kommen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	vom	APPRART	(PP*	von	sg	masc	-	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Saladin	NN	*)	saladin	sg	masc	-	7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	je	ADV	(AVP*	je	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	anders	ADV	*))	anders	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	He	XY	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	He	XY	(VROOT(PSEUDO*	--	-	-	-	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nathan	NE	*	nathan	-	-	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(CNP*	nathan	-	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	(NP*	der	sg	fem	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Tempelherr	NN	*))	tempelherr	sg	fem	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	seid	VAFIN	*	sein	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihrs	NN	*	ihr	sg	*	-	(66)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	habt	VAFIN	*	haben	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Sehr	ADV	*	sehr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	lang	ADJD	*	lang	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	bei	APPR	*	bei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	dem	ART	*	der	sg	masc	-	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Sultan	NN	*	sultan	sg	masc	-	7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	aufgehalten	VVPP	*	aufhalten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(AVP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	lange	ADV	*	lange	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ward	VVFIN	*	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	im	APPRART	(PP*	in	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Hingehn	NN	*)	hingehn	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	viel	PIS	*)	viel	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	verweilt	VVFIN	*)	verweilen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ah	NE	*	ah	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	wahrlich	ADV	(NP*	wahrlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Curd	NE	*	curd	-	-	(PER*)	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	der	ART	(NP*	der	sg	masc	-	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Mann	NN	*	mann	sg	masc	-	7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Steht	NN	*))	stehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	seinen	PPOSAT	(NP*	sein	sg	masc	-	(289|(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Ruhm	NN	*)	ruhm	sg	masc	-	289)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sein	PPOSAT	(VROOT(PSEUDO(S(NP*	sein	sg	neut	-	(289|(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ruhm	NN	*)	ruhm	sg	neut	-	289)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	bloß	ADV	*	bloß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	sein	PPOSAT	(NP*	sein	-	-	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Schatten	NN	*))	schatten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO(S*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	laßt	VVIMP	*	lassen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	vor	APPR	(PP*	vor	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	allen	PIAT	*	aller	pl	masc	-	(290
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Dingen	NN	*)	ding	pl	masc	-	290)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	geschwind	ADJD	*	geschwind	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	sagen	VVINF	*)	sagen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S(S*	er	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	(VP*	euch	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	sprechen	VVINF	*))	sprechen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	ungesäumt	ADJD	*	ungesäumen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Ihr	PPER	*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	ihm	PPER	*)	ihm	sg	masc	-	(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	kommt	VVFIN	*))	kommen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Begleitet	VVFIN	*	begleiten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mich	PPER	*	mich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nach	APPR	*	nach	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Hause	NN	*	haus	sg	neut	-	(15
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	wo	PWAV	*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	noch	ADV	*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	für	APPR	*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	ihn	PPER	*	ihn	sg	masc	-	15)|(7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Erst	ADV	*	erst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	etwas	ADV	*	etwas	-	-	-	(133
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	anders	ADV	*	anders	-	-	-	133)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	verfügen	VVINF	*	verfügen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	dann	ADV	*	dann	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	gehn	ADJD	*	gehn	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	wir	PPER	*	wir	pl	*	-	(107)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	*	nathan	-	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euer	ADJA	*	euer	-	-	-	(15|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Haus	NN	*	haus	-	-	-	15)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Betret	NN	*	betret	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	wieder	ADV	*	wieder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	eher	ADV	*	eher	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	seid	VAFIN	*	sein	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(VP*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	indes	ADV	*	indes	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	schon	ADV	*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	da	ADV	*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	gewesen	VAPP	*))	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	habt	VAFIN	(VROOT(PSEUDO(S*	haben	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Indes	NE	*	indes	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	pl	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	(VP*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	gesprochen	VVPP	*))	sprechen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	(S*)	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sagt	NN	*	sagen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	wie	KOKOM	(NP*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Gefällt	NN	*	gefallen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	(NP*	euch	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Recha	NE	*	recha	*	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Über	APPR	(VROOT(PSEUDO(PP*	über	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	allen	PIAT	*	aller	sg	masc	-	(291
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ausdruck	NN	*)	ausdruck	sg	masc	-	291)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Allein	ADV	(NP*	allein	-	-	-	(292
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	–	KOUS	(S*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	sie	PPER	*	sie	sg	fem	-	(293|(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	wiedersehn	ADV	*	wiedersehn	-	-	-	293)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	–	VVFIN	*	–	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	das	PDS	(S*	der	sg	neut	-	(293)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	werd	VAFIN	*	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	nie	ADV	*)))	nie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nie	ADV	(VROOT(PSEUDO(S*)	nie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	nie	ADV	(VROOT(PSEUDO(S*)	nie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	müßtet	VMFIN	*	müßten	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	zur	APPRART	*	zu	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Stelle	NN	*	stelle	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	denn	KON	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Versprechen	NN	*	versprechen	pl	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	daß	KOUS	*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	auf	APPR	*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	immer	ADV	*	immer	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	immer	ADV	*	immer	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	–	$(	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Soll	VMFIN	*	sollen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	können	VMFIN	*	können	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	sehn	CARD	*	sehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	.	$.	*	--	-	-	-	292)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wollt	VMFIN	*	wollen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	daß	KOUS	*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	das	ART	*	der	sg	neut	-	(292)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Versteh	NN	*	versteh	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	nach	APPR	(VROOT(PSEUDO(AP(PP*	nach	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	einer	ART	*	ein	sg	fem	-	(92
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	kurzen	ADJA	*	kurz	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Pause	NN	*)	pause	sg	fem	-	92)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	plötzlich	ADJD	*	plötzlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	um	APPR	(AP(PP*	um	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	den	ART	*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Hals	NN	*)	hals	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	fallend	ADJD	*))	fallend	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(NP*	mein	sg	masc	-	(1|(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Vater	NN	*)	vater	sg	masc	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Junger	ADJA	*	junger	sg	masc	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mann	NN	*	mann	sg	masc	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	ihn	PPER	(VROOT(PSEUDO(AP*	ihn	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	eben	ADV	(AVP*	eben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*)	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	plötzlich	ADJD	*	plötzlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wieder	ADV	(AP*	wieder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	lassend	ADJD	*))	lassend	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(NP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sohn	NN	*	sohn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*)))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	bitt	VVFIN	*	bitt	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	pl	*	-	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Nathan	NE	*	nathan	-	-	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*))	–	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Lieber	ADV	(VROOT(PSEUDO(NP*	lieb	-	-	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	junger	ADJA	*	jung	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mann	NN	*)	mann	*	masc	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(NP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sohn	NN	*	sohn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*)))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	bitt	VVFIN	*	bitt	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	pl	*	-	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Nathan	NE	*	nathan	-	-	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	beschwör	VVFIN	*	beschwör	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	bei	APPR	*	bei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	den	ART	*	der	pl	masc	-	(294
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ersten	ADJA	*	erster	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Banden	NN	*	bande	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	*	der	sg	masc	-	(295
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Natur	NN	*	natur	-	-	-	294)|295)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Zieht	VVFIN	(S*	ziehen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihnen	PPER	*)	ihnen	pl	*	-	(294)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	spätre	ADJA	(NP*	spätr	-	-	-	(296
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Fesseln	NN	*	fessel	pl	fem	-	296)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	doch	ADV	(AVP(AVP*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	vor	PTKVZ	*))	vor	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Begnügt	VVFIN	(S*	begnügen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	(VP(NP*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	*	ein	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Mensch	NN	*)	mensch	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	sein	VAINF	*)))	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Stoßt	NE	*	stoßen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	*	mich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Lieber	NN	(VROOT(PSEUDO*	lieb	-	-	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	lieber	ADJA	(NP*	lieber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Freund	NN	*)	freund	-	-	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sohn	NN	*	sohn	sg	masc	-	(297)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sohn	NN	*	sohn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Auch	ADV	(AVP(AVP*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dann	ADV	*)	dann	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	dann	ADV	(S(AVP*	dann	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	einmal	ADV	*)	einmal	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Erkenntlichkeit	NN	(NP*	erkenntlichkeit	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	zum	APPRART	(PP*	zu	sg	neut	-	(51
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Herzen	NN	*))	herz	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Eurer	PPOSAT	(VP(NP*	eurer	*	*	-	(2|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Tochter	NN	*	tochter	*	*	-	51)|2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Der	ART	(NP*	der	sg	masc	-	(270
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Liebe	NN	*))	liebe	sg	masc	-	270)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	schon	ADV	*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	den	ART	(NP*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Weg	NN	*)	weg	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	gebahnet	VVPP	*)	bahnen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	hätte	VAFIN	*)	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Auch	ADV	(VROOT(PSEUDO(S(AVP*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	dann	ADV	*	dann	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	einmal	ADV	*)	einmal	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	in	APPR	(NP(VP(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	eins	PIS	*)	eins	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	schmelzen	VVINF	*)	schmelz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Auf	APPR	(PP*	auf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Euern	NN	*	euer	-	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Wink	NE	*))	wink	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	beide	PIS	*)	beide	pl	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	warteten	VVFIN	*)	warten	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	(S*	ihr	pl	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	schweigt	VVFIN	*)	schweigen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	überrascht	VVFIN	*	überraschen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PPER	(NP*	mich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	junger	ADJA	(NP*	jung	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ritter	NN	*)))	ritter	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	überrasch	VVFIN	*	überrasch	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	überrasch	ADJD	*	überrasch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Nathan	NE	*	nathan	-	-	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Mit	APPR	*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Euern	NN	*	euer	pl	masc	-	(298|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	eigenen	ADJA	*	eigen	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Gedanken	NN	*	gedanke	pl	masc	-	298)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPOSAT	(NP*	ihr	pl	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Verkennt	NN	*	verkennen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	(S*	sie	sg	fem	-	(298)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	(AVP*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	in	APPR	*)	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	meinem	PPOSAT	(NP*	mein	sg	neut	-	(299|(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Munde	NN	*)	mund	sg	neut	-	299)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	überrasch	ADJD	*	überrasch	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	pl	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Eh	XY	(VROOT(PSEUDO*	eh	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ich	PPER	(S(NP*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	einmal	ADV	*)	einmal	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	für	APPR	(PP*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ein	ART	*	ein	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Stauffen	NN	*)	stauff	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Euer	ADJA	(NP*	euer	*	*	-	(283|(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Vater	NN	*)))	vater	sg	masc	-	283)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	denn	KON	(S*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Gewesen	NN	*	gewesen	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	ist	VAFIN	*)	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(NP*	ihr	sg	masc	-	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Nathan	NE	*	nathan	sg	masc	(PER*)	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	In	APPR	(S(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	diesem	PDAT	*	dieser	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Augenblicke	NN	*)	augenblick	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	fühlt	VVFIN	*	fühlen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	(NP*	ihr	sg	neut	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nichts	PIS	*))	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Als	APPR	*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Neubegier	NN	*	neubegier	sg	neut	-	(300)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	seht	VVFIN	*	sehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	selbst	ADV	(NP*	selbst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Wohl	NN	*)	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	einen	ART	(VP(NP*	ein	sg	masc	-	(283
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Stauffen	NN	*)	stauffen	sg	masc	-	283)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ehedem	PIS	*	ehedem	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	gekannt	VVPP	*	kennen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Der	ART	(S(NP*	der	sg	masc	-	(283)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Conrad	NE	*)	conrad	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	hieß	VVFIN	*)))	heißen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mein	PPOSAT	(NP*	mein	sg	masc	-	(283|(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Vater	NN	*)	vater	sg	masc	-	283)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Nun	ADV	*)	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	eben	ADV	(S(VP*	eben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	geheißen	VVPP	*)	heißen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	hätte	VAFIN	*)	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wahrlich	ADJD	(VROOT(PSEUDO*	wahrlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	heiße	VVFIN	*	heißen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	selber	ADV	*	selber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	nach	APPR	(PP*	nach	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	meinem	PPOSAT	*	mein	sg	masc	-	(283|(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Vater	NN	*	vater	sg	masc	-	283)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Curd	NE	(NP*	curd	-	-	-	(123)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Ist	NE	(MPN*	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Conrad	NE	*))))	conrad	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	mein	PPOSAT	(NP*	mein	sg	masc	-	(283|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Conrad	NE	*))	conrad	sg	masc	(PER*)	283)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	doch	ADV	(NP*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Euer	ADJA	*)	euer	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Vater	NN	*)	vater	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Denn	KON	(VROOT(PSEUDO(CS(CS(S*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	mein	PPOSAT	(NP*	mein	sg	masc	-	(283|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Conrad	NE	*)	conrad	sg	masc	(PER*)	283)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	war	VAFIN	*)	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ihr	PPER	*	ihr	sg	neut	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Tempelherr	NN	*))	tempelherr	sg	masc	-	(301)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	war	VAFIN	(S*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	nie	ADV	(VP*	nie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	vermählt	VVPP	*)))	vermählen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	*	O	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	darum	PROAV	*	darum	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	KON	*	O	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	darum	PROAV	*	darum	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	könnt	VVFIN	*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(283)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Mein	PPOSAT	*	mein	sg	masc	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Vater	NN	*	vater	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	gewesen	VAPP	*	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	sein	VAINF	*	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	scherzt	VVFIN	*)	scherzen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nehmts	ADV	*	nehmts	-	-	-	(302)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	wahrlich	ADV	(AP*	wahrlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKA	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	genau	ADJD	*))	genau	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wärs	VAFIN	*	wär	-	-	-	(302)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Denn	KON	(AVP*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	nun	ADV	*))	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Bastard	NN	*)	bastard	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	oder	KON	*	oder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Bankert	NN	*)	bankert	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Schlag	NN	*)	schlag	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	auch	ADV	(VP*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	verachten	VVINF	*)))	verachten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(S*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Entlaßt	VVFIN	*	entlassen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mich	PPER	*	mich	sg	-	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	immer	ADV	*)	immer	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	meiner	PPOSAT	(NP*	mein	pl	masc	-	(303|(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ahnenprobe	NN	*)	ahnenprobe	pl	masc	-	303)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PRF	*	euch	pl	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Eurer	NN	*	eurer	sg	*	-	(359)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wiederum	ADV	(VP*	wiederum	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	entlassen	VVPP	*))	entlassen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(S(AVP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	zwar	ADV	*)	zwar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ob	KOUS	*	ob	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	den	ART	(NP*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	geringsten	ADJA	*	gering	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Zweifel	NN	*	zweifel	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	In	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Euern	NN	*	euer	-	-	-	(304|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Stammbaum	NN	*))	stammbaum	sg	masc	-	304)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	setzte	VVFIN	*))	setzen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gott	NN	(VROOT(PSEUDO(S*	gott	sg	masc	(PER*)	(38)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	behüte	VVFIN	*)	behüten	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	könnt	VVFIN	*	können	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	*	ihn	sg	masc	-	(304)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Blatt	NN	(NP*	blatt	sg	neut	-	(238)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	vor	APPR	(PP*	vor	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Blatt	NN	*	blatt	sg	neut	-	(238)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	bis	APPR	(PP*	bis	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Abraham	NE	*)))	abraham	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Hinauf	NN	(VP*	hinauf	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	belegen	VVINF	*))	belegen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(CS(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	da	ADV	*)	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	(AVP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	weiter	ADV	*))	weiter	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Weiß	NN	(S*	weiße	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	ihn	PPER	(NP*	ihn	sg	masc	-	(302)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	selbst	ADV	*)	selbst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	will	VMFIN	(S*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	ihn	PPER	*	ihn	sg	masc	-	(302)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	beschwören	VVFIN	*)))	beschwören	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	(VROOT(PSEUDO(S*	ihr	pl	*	-	(305|(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	werdet	VAFIN	*	werden	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	bitter	ADJD	*)	bitter	-	-	-	305)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	verdien	VVFIN	*	verdien	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ichs	PTKVZ	*	ichs	-	-	-	(305)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Schlug	NN	(NP*	schlug	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	(NP*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*))	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	(S*	euch	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	schon	ADV	*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	was	PIS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ab	PTKVZ	*)	ab	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ja	ADV	(AVP*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Nur	ADV	*))	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	bei	APPR	(VP(PP*	bei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	dem	ART	*	der	sg	neut	-	(306
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Worte	NN	*)	wort	sg	neut	-	306)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	den	ART	(NP*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Augenblick	NN	*)	augenblick	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	So	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	fassen	VVINF	*)	fassen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Weiter	ADV	(AP*	weiter	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gewiß	ADV	(VROOT(PSEUDO(S*)	gewiß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nichts	PIS	(CO(AVP*	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	weiter	ADV	*))	weiter	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	ITJ	(VROOT(PSEUDO(CS(S*)	O	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	so	ADV	(S(VP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	vergebt	VVPP	*)))	vergeben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	(S*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	kommt	VVFIN	*))	kommen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wohin	PWAV	(VROOT(PSEUDO*	wohin	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nein	PTKANT	*	nein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mit	APPR	*	mit	-	-	-	(307
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	in	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euer	ADJA	(NP*	euer	sg	neut	-	(15|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Haus	NN	*)	haus	sg	neut	-	307)|15)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	*	der	sg	neut	-	(307)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	das	PDS	*	der	sg	neut	-	(307)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Da	KOUS	*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	brennts	NE	*	brennt	-	-	-	(270)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	(VP*	euch	sg	neut	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	hier	ADV	*	hier	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	erwarten	VVINF	*))	erwarten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	*	gehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Soll	VMFIN	(S*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	sie	PPER	(VP*	sie	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	wiedersehn	VVINF	*))	wiedersehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	so	ADV	(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	seh	VVFIN	*	seh	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Noch	ADV	(AVP*	noch	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	oft	ADV	*	oft	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	genug	ADV	*))	genug	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wo	PWAV	(VROOT(PSEUDO(S*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	sah	VVFIN	*	sehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	sie	PPER	*	sie	*	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Schon	ADV	(AP(AVP*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	viel	ADV	*)	viel	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	zu	PTKA	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	viel	PIS	*)))	viel	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	NATHAN	NE	(VROOT(PSEUDO*	nathan	-	-	(LOC*)	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	1)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PRF	(VP*	mich	sg	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	möglichst	ADV	*	möglichst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	eilen	VVINF	*))	eilen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(NP*	der	sg	masc	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Tempelherr	NN	*)	tempelherr	sg	masc	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	bald	ADV	(S(AVP*	bald	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	darauf	PROAV	*)	darauf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Daja	NE	*)	daja	-	-	(PER*)	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Schon	ADV	(VROOT(PSEUDO(S*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	mehr	PIS	*	mehr	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	als	KOKOM	(AP*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	gnug	ADJD	*))	gnug	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Des	ART	(NP*	der	sg	*	-	(165|(46
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Menschen	ADJA	*	mensch	pl	masc	-	46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Hirn	NN	*)	hirn	-	-	-	165)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	faßt	VVFIN	*	fassen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	so	ADV	(NP(AP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Unendlich	ADJD	*)	unendlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	viel	PIS	*)	viel	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	und	KON	(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	doch	ADV	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	manchmal	ADV	(AP*	manchmal	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	So	ADV	(AP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	plötzlich	ADJD	*)	plötzlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	voll	ADJD	*))	voll	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	von	APPR	(VROOT(PSEUDO(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	einer	ART	*	ein	sg	fem	-	(270
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Kleinigkeit	NN	*	kleinigkeit	sg	fem	-	270)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	So	ADV	(AP(AP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	plötzlich	ADJD	*)	plötzlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	voll	ADJD	*))	voll	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Taugt	VVFIN	*	taugt	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nichts	PIS	(S(S*	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	taugt	VVFIN	*	taugen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nichts	PIS	*)	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	es	PPER	*	es	sg	neut	-	(279)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	sei	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Auch	ADV	(AP*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	voll	ADJD	*))	voll	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	wovon	PWAV	(S*	wovon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	es	PPER	*	es	sg	neut	-	(279)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	will	VMFIN	*)	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(NP*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Geduld	NN	*)	geduld	-	-	-	(308)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(CS(S(NP*	der	sg	fem	-	(88
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Seele	NN	*)	seele	sg	fem	-	88)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wirkt	VVFIN	*	wirken	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	den	ART	(NP*	der	sg	masc	-	(270
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	aufgedunsnen	ADJA	*	aufgedunsn	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Stoff	NN	*	stoff	sg	masc	-	270)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Bald	ADV	*	bald	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	einander	PRF	*)	einander	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	schafft	VVFIN	(S*	schaffen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	sich	PRF	*))	sich	sg	-	-	(88)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Raum	NN	*)	raum	sg	*	-	(309)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Licht	NN	(S(MPN*	licht	sg	neut	-	(310)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Ordnung	NN	*)	ordnung	sg	fem	-	(310)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	kommen	VVFIN	*	kommen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	wieder	PTKVZ	*))	wieder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Lieb	NE	*	lieb	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	denn	KON	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Zum	APPRART	*	zu	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	erstenmale	ADJA	*	erstenmal	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Oder	NE	(S*	oder	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	war	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	was	PRELS	(S*	was	sg	neut	-	(311
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	311)|(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Als	APPR	(NP(S*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Liebe	NN	*	liebe	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	kenne	VVFIN	*)	kennen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Liebe	NN	*)	liebe	pl	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	nicht	PTKNEG	*))	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Liebe	NN	*	liebe	sg	fem	-	(311)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	itzt	VVFIN	*	itzen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	empfinde	VVFIN	*	empfinden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*))	daja	-	-	-	(0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	die	ART	(VROOT(PSEUDO(VP(NP*	der	sg	fem	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	sich	PRF	(AP*	sich	sg	-	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	der	ART	*)	der	sg	fem	-	(312
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Seite	NN	*)	seite	sg	fem	-	312)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	herbeigeschlichen	VVIZU	*)	herbeigeschlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ritter	NN	(VROOT(PSEUDO*	ritter	-	-	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ritter	NN	(VROOT(PSEUDO*	ritter	-	-	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wer	PWS	(VROOT(PSEUDO(S*	wer	sg	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ruft	VVFIN	*)	rufen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ha	NE	*	ha	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Daja	NE	*	daja	-	-	(PER*)	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	pl	*	-	0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	habe	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mich	PRF	(VP*	mich	sg	-	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ihm	PPER	*)	ihm	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	vorbei	ADV	*	vorbei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	geschlichen	VVPP	*))	schleichen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	*	aber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	noch	ADV	*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Könnt	NE	*	könnt	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	uns	PPER	*	uns	pl	*	-	(313)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	sehn	CARD	*	sehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	wo	PWAV	*	wo	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Ihr	PPER	*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	da	ADV	*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	steht	VVFIN	*	stehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Drum	NN	*	drum	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	kommt	VVFIN	*	kommen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Doch	NN	(NP*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	näher	ADJD	(AP*	nah	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	mir	PPER	*))	sich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	hinter	APPR	(PP*	hinter	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	diesen	PDAT	*	dieser	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Baum	NN	*))	baum	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	gibts	ADV	*	gibt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	denn	ADV	*)	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(S(ISU*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	geheimnisvoll	ADJD	*))	geheimnisvoll	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ists	FM	*	ist	-	-	-	(314)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ja	PTKANT	(VROOT(PSEUDO(CS(S*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	betrifft	VVFIN	*	betreffen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	(NP*	es	sg	neut	-	(314)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ein	ART	(NP*	ein	sg	neut	-	(315
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Geheimnis	NN	*))	geheimnis	sg	neut	-	315)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	(S*	was	sg	neut	-	(314)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Mich	PPER	*	mich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Euch	PPER	*)	euch	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	bringt	VVFIN	*))	bringen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	zwar	ADV	(S*	zwar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	ein	ART	(NP*	ein	sg	neut	-	(315
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	doppeltes	ADJA	*)))	doppelt	sg	neut	-	315)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(CS(S(NP*	der	sg	neut	-	(316
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	eine	PIS	*)	ein	sg	fem	-	316)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	(NP*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ich	PPER	*))	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	das	ART	(S(NP*	der	sg	neut	-	(317
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	andre	ADJA	*)	andre	sg	neut	-	317)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	wißt	VVFIN	*	wissen	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Nur	ADV	(NP*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Ihr	PPER	*)))	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	(S*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	sg	neut	-	(318)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	wenn	KOUS	(S*	wenn	-	-	-	(318
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	wir	PPER	*	wir	pl	*	-	(313)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	tauschten	VVFIN	*))	tauschen	pl	-	-	318)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Vertraut	ADJD	*	vertraut	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	mir	PPER	*	sich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euers	NE	*	euer	sg	masc	-	(358)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	vertrau	ADJD	*	vertrau	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Euch	PPER	*	euch	sg	-	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Das	PDS	*	der	sg	neut	-	(316
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	meine	VVFIN	*	mein	sg	-	-	316)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mit	APPR	(VROOT(PSEUDO(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Vergnügen	NN	*)	vergnügen	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	*)	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Erst	ADV	(S*	erst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	was	PWS	(S*	was	sg	neut	-	(319
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Ihr	PPER	*	ihr	sg	neut	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	für	APPR	(PP*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	meines	PIS	*)	mein	sg	neut	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	achtet	VVFIN	*))	achten	-	-	-	319)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Doch	KON	(VROOT(PSEUDO*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(S*	der	sg	neut	-	(319)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	aus	APPR	(VP(PP*	aus	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Euerm	NE	*)	euerm	-	-	-	(366)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	erhellen	VVINF	*))	erhellen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Fangt	VVFIN	*	fangen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nur	ADV	(S*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	immer	ADV	*	immer	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	an	PTKVZ	*)	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	PPER	(VROOT(PSEUDO(S*	ei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	denkt	VVFIN	*	denken	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	doch	ADV	*)	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nein	PTKANT	(S*	nein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Herr	NN	(NP*	herr	sg	masc	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ritter	NE	*)	ritter	sg	masc	(PER*)	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Erst	ADV	(S*	erst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ihr	PPER	*	ihr	-	-	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	folge	VVFIN	*))	folgen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	(S*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	versichert	VVFIN	*	versichern	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	mein	PPOSAT	(NP*	mein	sg	neut	-	(366)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Geheimnis	NN	*))	geheimnis	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	kann	VMFIN	(CS(S*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	*	euch	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	gar	ADV	*	gar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	nichts	PIS	(VP*	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	nutzen	VVINF	*))	nutzen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	zuvor	ADV	*)	zuvor	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	das	ART	(NP*	der	sg	neut	-	(317
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Eure	NN	*)	euer	-	-	-	317)|(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	habe	VAFIN	*))	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nur	ADV	(NP*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Geschwind	NN	*)	geschwind	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Denn	KON	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	frag	VVFIN	*	frag	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ichs	APPRART	*	ichs	-	-	-	(317)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Euch	PPER	*	euch	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	erst	ADV	*	erst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ab	PTKVZ	*	ab	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	habt	VAFIN	*	haben	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Ihr	PPER	*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	vertrauet	VVPP	*	vertrauen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Mein	PPOSAT	(VROOT(PSEUDO(CS(S(NP*	mein	sg	neut	-	(316|(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Geheimnis	NN	*	geheimnis	sg	neut	-	316)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	dann	ADV	*)	dann	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Bleibt	VVFIN	*	bleiben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	mein	PPOSAT	(NP*	mein	sg	neut	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Geheimnis	NN	*))	geheimnis	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	das	ART	(S(NP*	der	sg	neut	-	(317
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Eure	NN	*)	euer	sg	neut	-	317)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	seid	VAFIN	*	sein	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Ihr	PPER	*	ihr	sg	neut	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	los	PTKVZ	*))	los	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(NP*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	armer	ADJA	*	arm	-	-	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ritter	NN	*)	ritter	-	-	-	17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Daß	KOUS	(S(PP*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPOSAT	*	ihr	sg	fem	-	(320
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Männer	NN	*)	mann	*	*	-	320)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Ein	ART	(NP*	ein	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	solch	PIAT	(NP*	solch	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Geheimnis	NN	*	geheimnis	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	vor	APPR	(PP*	vor	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	uns	PPER	*))))	uns	pl	*	-	(151
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Weibern	NN	(S*	weiber	pl	masc	-	151)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	haben	VAFIN	*	haben	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Zu	NN	(VP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	können	VMINF	*	können	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	auch	ADV	(VP*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	glaubt	VVPP	*)))	glauben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(VP*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wir	PPER	*	wir	pl	*	-	(320)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	haben	VAINF	*)	haben	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Oft	NN	*	oft	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	selbst	ADV	*	selbst	-	-	-	(320)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	wissen	VVINF	*)	wissen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	ADV	(VROOT(PSEUDO(VP*	können	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sein	VAINF	*)	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Drum	ADV	(VROOT(PSEUDO(S*	drum	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ich	PPER	(VP(CNP(NP*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	erst	ADV	*	erst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Euch	PPER	(VP*	euch	-	-	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	selbst	ADV	*	selbst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	damit	PROAV	(AP*	damit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	bekannt	ADJD	*)	bekannt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	machen	VVINF	*)))	machen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	schon	ADV	(NP*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	die	ART	*	der	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Freundschaft	NN	*))	freundschaft	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	haben	VAINF	*))	haben	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sagt	NN	*	sagen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	hieß	VVFIN	*	heißen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	denn	ADV	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	das	PDS	(NP*	der	sg	neut	-	(321)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	daß	KOUS	(S*	daß	-	-	-	(321
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Ihr	PPER	(CNP(NP*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*)	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Knall	NN	*	knall	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Fall	NN	*)	fall	pl	-	-	321)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Euch	PPER	*	euch	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	aus	APPR	(PP*	aus	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	dem	ART	*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Staube	NN	*)	staube	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	machtet	VVFIN	*)))	machten	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	uns	PPER	(VP*	uns	pl	*	-	(63)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	So	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	sitzen	VVINF	*)	sitzen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ließet	VVFIN	*)	ließen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	daß	KOUS	*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	mit	APPR	*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Nathan	NN	*	nathan	sg	neut	(PER*)	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Nicht	PTKNEG	*	nicht	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	wiederkommt	VVFIN	*	wiederkommen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Hat	VAFIN	(S*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Recha	NE	*	recha	sg	masc	(PER*)	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*)	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	wenig	PIAT	(NP*	wenig	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Auf	NN	*	auf	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PPER	(VP*	euch	sg	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	gewirkt	VVPP	*))	wirken	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	wie	PWAV	(VROOT(PSEUDO*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	oder	KON	(VROOT(PSEUDO(S*	oder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	auch	ADV	*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	so	ADV	(NP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	viel	PIS	*))	viel	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(NP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	viel	PIS	*)	viel	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	so	ADV	(VROOT(PSEUDO(NP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	viel	PIS	*)	viel	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Lehrt	VVFIN	*	lehrt	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(NP*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	des	ART	(NP*	der	sg	masc	-	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	armen	ADJA	*	arm	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Vogels	NN	*)	vogel	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Der	PRELS	(S*	der	sg	masc	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	an	APPR	(PP*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	der	ART	*	der	sg	fem	-	(121
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Rute	NN	*)	rute	sg	fem	-	121)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	klebt	VVFIN	*))	kleben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Geflattre	NN	(S*	geflattre	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	mich	PPER	(VP*	mich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Doch	NN	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	kennen	VVINF	*))	kennen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kurz	NN	*	kurz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	gesteht	VVFIN	*	gestehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*	es	sg	neut	-	(322)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	gleich	ADV	*	gleich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Daß	KOUS	*	daß	-	-	-	(322
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Ihr	PPER	*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	liebt	VVFIN	*	lieben	sg	-	-	322)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	liebt	VVFIN	*	lieben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	bis	APPR	*	bis	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	zum	APPRART	*	zu	sg	masc	-	(323
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Unsinn	NN	*	unsinn	sg	masc	-	323)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	sag	VVFIN	*	sögen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	Euch	PPER	*	euch	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	was	PIS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Zum	APPRART	(VROOT(PSEUDO(PP*	zu	sg	masc	-	(323
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Unsinn	NN	*)	unsinn	sg	masc	-	323)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wahrlich	ADJD	(VROOT(PSEUDO(S*	wahrlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(S*	ihr	pl	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Versteht	VVFIN	*	verstehen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Euch	PPER	*	euch	pl	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	trefflich	ADJD	*	trefflich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	drauf	PTKVZ	*))	drauf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(CS(S*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	gebt	VVFIN	*	geben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mir	PPER	*	sich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	(NP*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Die	ART	*	der	sg	fem	-	(270
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Liebe	NN	*)	liebe	sg	fem	-	270)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKVZ	*)	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	den	ART	(S(NP*	der	sg	masc	-	(323
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Unsinn	NN	*)	unsinn	sg	masc	-	323)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Euch	PRF	(VP*	euch	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Erlassen	VVINF	*)))	erlaß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Weil	KOUS	(VROOT(PSEUDO(S*	weil	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(323)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	*	sich	sg	-	-	(323)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	selbst	ADV	*)	selbst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	versteht	VVFIN	*)	verstehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ein	ART	(NP*	ein	sg	masc	-	(77
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Tempelherr	NN	*	tempelherr	sg	masc	-	77)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ein	ART	(VP(NP*	ein	sg	neut	-	(324
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Judenmädchen	NN	*)	judenmädchen	sg	neut	-	324)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	lieben	VVINF	*))	lieben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	.	$.	(VROOT(PSEUDO*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Scheint	VVFIN	(VROOT(PSEUDO(S*	scheint	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	freilich	ADV	*	freilich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	wenig	PIAT	(VP(VP(NP*	wenig	*	*	-	(325
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sinn	NN	*))	sinn	sg	masc	-	325)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	haben	VAINF	*)))	haben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	KON	(S*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Zuweilen	NN	*	zuweilen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	des	ART	(NP*	der	sg	neut	-	(325
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Sinns	NN	*	sinn	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	in	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	einer	ART	*	ein	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Sache	NN	*)))	sache	sg	fem	-	325)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Auch	ADV	(NP(AP*	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	mehr	ADV	(AP*	mehr	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	als	KOKOM	(S*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	wir	PPER	*	wir	pl	*	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	vermuten	VVFIN	*	vermuten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	und	KON	(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	es	PPER	*	es	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	wäre	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	So	ADV	(AP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	unerhört	ADJD	*)	unerhört	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	doch	ADV	(AVP*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	uns	PPER	*	uns	pl	*	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	der	ART	(NP*	der	sg	masc	-	(38
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	Heiland	NE	*)	heiland	sg	neut	-	38)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	Auf	APPR	(PP*	auf	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	Wegen	NN	*	wegen	-	-	-	(37)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	zu	APPR	(PP*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	sich	PRF	*)))))))	sich	pl	-	-	(38)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	zöge	FM	*	zögen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	34	die	PRELS	(S*	der	sg	fem	-	(37)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	35	der	ART	(VP(NP*	der	sg	masc	-	(326
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	36	Kluge	NN	*)	kluge	sg	masc	-	326)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	37	Von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	38	selbst	ADV	*)	selbst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	39	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	40	leicht	ADJD	*	leicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	41	betreten	VVINF	*)	betreten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	42	würde	VAFIN	*))	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	43	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	ART	(VROOT(PSEUDO(S(VP(AP(AVP*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	*)	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	feierlich	ADJD	*)))	feierlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	(	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	setz	FM	*	setz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	statt	APPR	*	statt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	des	ART	*	der	sg	neut	-	(38
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Heilands	NE	*	heiland	sg	neut	-	38)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Die	ART	*	der	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Vorsicht	NN	*	vorsicht	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	hat	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	sie	PPER	*	sie	sg	fem	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	denn	ADV	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Recht	NN	*	recht	-	-	-	(200)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	?	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	)	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	macht	VVFIN	*	machen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	Mich	PPER	*	mich	sg	masc	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	neubegieriger	ADJD	*	neubegierig	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	als	KOUS	*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	sonst	ADV	*	sonst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	Zu	NN	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	sein	PPOSAT	*	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	gewohnt	VVPP	*	wohnen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	O	$.	*	O	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	das	PDS	*	der	sg	neut	-	(327)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	das	ART	*	der	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Land	NN	*	land	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Der	ART	*	der	sg	masc	-	(328
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Wunder	NN	*	wunder	sg	masc	-	328)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	(	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	KON	(VROOT(PSEUDO(PP*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	des	ART	*	der	sg	masc	-	(328
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wunderbaren	NN	*)	wunderbare	sg	masc	-	328)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Kann	VMFIN	(VROOT(PSEUDO(VP(S*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Es	PPER	*	es	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	auch	ADV	*)	auch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	wohl	ADV	*	wohl	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	anders	ADV	*	anders	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	sein	VAINF	*)	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	*	der	sg	fem	-	(46
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ganze	ADJA	*	ganz	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Welt	NN	*	welt	sg	fem	-	46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Drängt	VVFIN	*	drängen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	sich	PRF	*	sich	sg	-	-	(46)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ja	ADV	*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	hier	ADV	*	hier	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	zusammen	PTKVZ	*	zusammen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	)	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	–	ADJA	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Liebe	NN	*	liebe	sg	fem	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Daja	NE	*	daja	sg	fem	(PER*)	0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Nehmt	NN	*	nehmt	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	für	APPR	*	für	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	gestanden	ADJD	*	gestehen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	an	PTKVZ	*	an	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	was	PWS	*	was	sg	neut	-	(317
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	verlangt	VVFIN	*	verlangen	-	-	-	317)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	Daß	KOUS	*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	liebe	VVFIN	*	lieben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	daß	KOUS	*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	begreife	VVFIN	*	begreifen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	34	ohne	APPR	*	ohne	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	35	sie	PPER	*	sie	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	36	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	37	leben	VVINF	*	leben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	38	werde	VAFIN	*	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	39	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	40	daß	KOUS	*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	41	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	42	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	43	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Gewiß	ADV	(VROOT(PSEUDO(S*)	gewiß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	gewiß	ADV	(VROOT(PSEUDO(S*)	gewiß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	So	ADV	(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	schwört	VVFIN	*	schwören	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	(NP*	sich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ritter	NN	*)	ritter	*	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	sie	PPER	*	sie	sg	fem	-	(355)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Zur	APPRART	(PP*	zu	sg	fem	-	(330
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Eurigen	NN	*)	eurige	sg	fem	-	330)|(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	machen	VVINF	*)	machen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	sie	PPER	(VP*	sie	-	-	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	retten	VVINF	*)))	retten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Sie	PPER	(S*	sie	pl	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	zeitlich	ADJD	(AP*	zeitlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	hier	ADV	*)	hier	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	sie	PPER	(VP*	sie	pl	neut	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	ewig	ADJD	*	ewig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	dort	ADV	*	dort	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	retten	VVINF	*)))	retten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wie	PWAV	*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Kann	VMFIN	(S*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	schwören	VVINF	*	schwören	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	was	PWS	(S*	was	sg	neut	-	(329)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	In	APPR	(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	meiner	PPOSAT	*	mein	sg	fem	-	(331|(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Macht	NN	*)	macht	sg	fem	-	331)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	steht	VVFIN	*))	stehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	In	APPR	(VROOT(PSEUDO(S(PP*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Eurer	PPOSAT	*	eurer	sg	fem	-	(331|(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Macht	NN	*)	macht	sg	fem	-	331)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Steht	VVFIN	*	stehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*)	es	sg	neut	-	(329)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	bring	VVFIN	*	bring	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	es	PPER	*	es	-	-	-	(329)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	durch	APPR	*	durch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ein	ART	*	ein	sg	neut	-	(316
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	einzig	ADJD	*	einzig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Wort	NN	*	wort	-	-	-	316)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	In	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Eure	PPOSAT	*	euer	sg	fem	-	(331|(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Macht	NN	*	macht	sg	fem	-	331)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	selbst	ADV	(NP*	selbst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	der	ART	*	der	sg	masc	-	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vater	NN	*)	vater	sg	masc	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	nichts	PIS	*	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Dawider	NN	*	dawider	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	hätte	VAFIN	*)	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ei	XY	*	ei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vater	NN	*	vater	sg	masc	-	(332)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Vater	NN	(VROOT(PSEUDO*	vater	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	*	der	sg	masc	-	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Vater	NN	*	vater	sg	masc	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	schon	ADV	*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	müssen	VMFIN	*	müssen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Müssen	NE	(VROOT(PSEUDO(CNP*	müssen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Daja	NE	*)	daja	-	-	(PER*)	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Noch	ADV	(S*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	unter	APPR	(VP(PP*	unter	-	-	-	(333
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Räuber	NN	*)	räuber	-	-	-	333)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	gefallen	VVPP	*))	fallen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	müssen	VMFIN	*	müssen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(CS(S*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	muß	VMFIN	*	müssen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	wollen	VMFIN	*)	wollen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Muß	NN	(S*	müssen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	gern	ADV	(PP*	gern	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	am	APPRART	*	an	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Ende	NN	*)	ende	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	wollen	VMFIN	*))	wollen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Muß	NN	(VROOT(PSEUDO*	müssen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	gern	ADV	*	gern	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Doch	NE	*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Daja	NE	*	daja	-	-	(PER*)	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	wenn	KOUS	*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Euch	PRF	*	euch	pl	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	nun	ADV	*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	sage	VVFIN	*	sagen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	daß	KOUS	*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	selber	ADV	*	selber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	diese	PDAT	*	dieser	sg	fem	-	(306
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Sait	NN	*	sait	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	306)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	anzuschlagen	VVIZU	*	anschlagen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Bereits	ADV	*	bereits	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	versucht	VVPP	*	versuchen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	fiel	VVFIN	*	fallen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ein	PTKVZ	*)	ein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	fiel	VVFIN	*	fallen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	einem	ART	*	ein	sg	neut	-	(334
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Mißlaut	NN	*)	mißlaut	sg	neut	-	334)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ein	PTKVZ	*	ein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	der	PRELS	(S*	der	sg	masc	-	(334)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	mich	PPER	*	mich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	–	APPR	(PP*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Beleidigte	NN	*)))	beleidigter	pl	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Was	PWS	(VROOT(PSEUDO(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*)	ihr	sg	neut	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wie	PWAV	*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPER	*	ihr	sg	neut	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	hättet	VVFIN	*	hätten	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Den	ART	*	der	pl	masc	-	(306
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Schatten	NN	*	schatten	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	eines	ART	*	ein	sg	masc	-	(335
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Wunsches	NN	*	wunsch	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	nach	APPR	*	nach	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Recha	NE	*	recha	sg	neut	-	306)|335)|(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Ihm	PPER	*	ihm	sg	neut	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	blicken	VVINF	*	blicken	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	lassen	VVINF	*	lassen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	vor	APPR	*	vor	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	Freuden	NN	*	freud	pl	masc	-	(288)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	aufgesprungen	VVPP	*	aufgpringen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	hätte	VAFIN	(VROOT(PSEUDO(S*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	frostig	ADJD	*	frostig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	(VP*	sich	pl	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Zurückgezogen	VVPP	*))	zurückgezogen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	hätte	VAFIN	(VROOT(PSEUDO(S*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Schwierigkeiten	NN	(VP*	schwierigkeit	pl	fem	-	(334)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Gemacht	VVPP	*))	gemacht	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(AVP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ungefähr	ADJD	*)	ungefähr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	denn	ADV	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Mich	PRF	*	mich	sg	-	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	länger	ADJD	*	lang	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	keinen	PIAT	(VP(NP*	kein	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Augenblick	NN	*)	augenblick	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	bedenken	VVINF	*))	bedenken	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	–	$.	*))	–	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Pause	NN	(VROOT(PSEUDO*	pause	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	bedenkt	VVFIN	*	bedenken	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	doch	ADV	*)	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Der	ART	(VROOT(PSEUDO(S(NP*	der	sg	masc	-	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Mann	NN	*)	mann	sg	masc	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	sonst	ADV	(AP*	sonst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	So	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	gut	ADJD	*))	gut	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ich	PPER	(S(NP*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	selber	ADV	*)	selber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	bin	VAFIN	*)	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	viel	PIS	*	viel	*	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ihm	PPER	(AP*	ihm	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	schuldig	ADJD	*))	schuldig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	doch	ADV	*)	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	gar	ADV	(S(AVP*	gar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	hören	VVINF	*	hören	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	will	VMFIN	*)	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Gott	NN	*	gott	sg	masc	(PER*)	(38)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	weiß	VVFIN	(S*	weiß	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Das	ART	(S(NP*	der	sg	neut	-	(35
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Herze	NN	*)	herze	sg	neut	-	35)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	blutet	VVFIN	*	bluten	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	mir	PPER	*	sich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	ihn	PPER	(VP*	ihn	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	zwingen	VVINF	*))))	zwingen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(336|(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	bitt	VVFIN	*	bitt	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Euch	PPER	*	euch	pl	*	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Daja	NE	*	daja	-	-	(PER*)	0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	setzt	VVFIN	*	setzen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	mich	PPER	*	mich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	kurz	ADJD	*	kurz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	gut	ADJD	*	gut	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Aus	NN	*	aus	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	dieser	PDAT	*	dieser	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Ungewißheit	NN	*	ungewißheit	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Seid	VAFIN	(VROOT(PSEUDO(CS(S*	sein	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	aber	ADV	*	aber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Noch	ADV	*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	selber	ADV	(AP*	selber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	ungewiß	ADJD	*)	ungewiß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ob	KOUS	(S*	ob	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	was	PWS	(S*	was	sg	neut	-	(337
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	vorhabt	VVFIN	*)))	vorhaben	-	-	-	337)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Gut	ADJD	(S(CAP*	gut	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	oder	KON	*	oder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	böse	ADJD	*)	böse	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	schändlich	ADJD	(CAP*	schändlich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	oder	KON	*	oder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	löblich	ADJD	*)	löblich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Zu	NN	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	nennen	VVFIN	*	nennen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	–	PPER	(S*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	schweigt	VVFIN	*)))	schweigen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	vergessen	VVINF	(VP*	vergessen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	etwas	PIS	(VP*	etwas	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	verschweigen	VVINF	*))	verschweigen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	habt	VAFIN	*)))	haben	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	336)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(336)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	spornt	VVFIN	*	spornen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Anstatt	NE	(VP*	anstatt	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	halten	VVINF	*)))	halten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nun	ADV	(VROOT(PSEUDO(S*	nun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	so	ADV	*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	wißt	VVFIN	*	wissen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	denn	ADV	*	denn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Recha	NE	(S(MPN*	recha	sg	neut	-	(361)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Ist	NE	*)	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	keine	PIAT	(NP*	kein	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Jüdin	NN	*)	jüdin	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	–	PPER	(S*	–	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	eine	ART	(NP*	ein	sg	fem	-	(339
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Christin	NN	*))))	christin	sg	fem	-	339)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	kalt	ADJD	(VROOT(PSEUDO*	kalt	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(S*)	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wünsch	NN	*	wünsch	sg	masc	-	(340
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	sg	neut	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Glück	NN	*	glück	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Hats	NE	(VROOT(PSEUDO(S*	hat	-	-	-	(338)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	schwer	ADJD	(VP*	schwer	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	gehalten	VVPP	*))	halten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Laßt	VVIMP	(VROOT(PSEUDO(S*	lassen	pl	-	-	340)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*	euch	pl	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	die	ART	(VP(NP*	der	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Wehen	NN	*)	wehe	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	schrecken	VVINF	*))	schrecken	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Fahret	NN	*	fahret	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ja	ADV	(S*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Mit	APPR	(PP*	mit	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Eifer	NN	*)	eifer	sg	neut	-	(341)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	fort	PTKVZ	*	fort	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	den	ART	(VP(NP*	der	sg	masc	-	(282
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Himmel	NN	*)	himmel	sg	masc	-	282)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	bevölkern	VVINF	*)))	bevölkern	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Ihr	PPER	(NP*	ihr	pl	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	die	ART	*	der	sg	fem	-	(199
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Erde	NN	*)	erde	sg	fem	-	199)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	nicht	PTKNEG	(AVP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	mehr	ADV	*)	mehr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	könnt	VVFIN	*)	können	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wie	PWAV	(VROOT(PSEUDO(S*	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ritter	NN	*)	ritter	-	-	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Verdienet	VVFIN	(VROOT(PSEUDO(S*	verdienet	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	meine	PPOSAT	(NP*	mein	sg	fem	-	(338|(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Nachricht	NN	*)	nachricht	sg	fem	-	338)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	diesen	PDAT	(NP*	dieser	sg	masc	-	(340
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Spott	NN	*))	spott	sg	masc	-	340)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Daß	KOUS	(VROOT(PSEUDO(S(NP(S*	daß	-	-	-	(338
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Recha	NE	*	recha	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	eine	ART	(NP*	ein	sg	fem	-	(339
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Christin	NN	*)	christin	sg	fem	-	339)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	ist	VAFIN	*)	sein	sg	-	-	338)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	das	PDS	*)	der	sg	neut	-	(338)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	freuet	VVFIN	*	freuet	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Euch	PPER	*	euch	pl	*	-	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	einen	ART	(NP*	ein	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Christen	NN	*)	christ	sg	masc	(MISC*)	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	einen	ART	(NP*	ein	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Tempelherrn	NN	*	tempelherr	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	Der	PRELS	(S*	der	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Ihr	PPER	*	ihr	sg	masc	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	sie	PPER	*	sie	pl	neut	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	liebt	VVFIN	*)))))	lieben	sg	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Besonders	ADV	(VROOT(PSEUDO(S*	besonders	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	da	KOUS	*	da	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	eine	ART	(NP*	ein	sg	fem	-	(339
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Christin	NN	*)	christin	sg	fem	-	339)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	von	APPR	(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Eurer	PPOSAT	*	eurer	sg	fem	-	(341|(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Mache	NN	*))	mache	sg	fem	-	341)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ah	NE	(VROOT(PSEUDO(MPN*	ah	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*)))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	so	ADV	(VROOT(PSEUDO(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	versteht	VVFIN	*	verstehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihrs	NN	*)	ihr	sg	*	-	(354)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	So	ADV	(VROOT(PSEUDO(VP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	mags	ADV	*	mags	-	-	-	(340)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	gelten	VVINF	*)	gelten	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nein	PTKANT	*	nein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Den	NE	*	der	-	-	-	(342)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	will	VMFIN	*	wollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	sehn	CARD	*	sehn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	der	PRELS	*	der	sg	masc	-	(342)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	die	ART	*	der	pl	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	bekehren	VVINF	*	bekehren	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ihr	PPOSAT	*	ihr	sg	neut	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Glück	NN	*	glück	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	längst	ADV	*	längst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	sein	VAINF	*	sein	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	was	PWS	*	was	sg	neut	-	(339
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	werden	VAINF	*	werden	-	-	-	339)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Verdorben	NN	*	verdorbe	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Erklärt	VVFIN	(VROOT(PSEUDO(S*	erklären	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Euch	PPER	*	euch	pl	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	oder	KON	(S*	oder	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	–	PPER	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	geht	VVFIN	*))	gehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(DL(S*	sie	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ein	ART	(NP*	ein	sg	masc	-	(343
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Christenkind	NN	*)	christenkind	sg	masc	-	343)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	von	APPR	(VP(PP*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Christeneltern	NN	*)	christenelter	pl	masc	(MISC*)	(344)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Geboren	VVPP	*))	gebor	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	ist	VAFIN	(S*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	getauft	VVPP	*))	taufen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*))	tempelherr	-	-	-	(17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	hastig	ADJD	(VROOT(PSEUDO*	hastig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Nathan	NE	*	nathan	-	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nicht	PTKNEG	(VROOT(PSEUDO(NP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPOSAT	*	ihr	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Vater	NN	*)	vater	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(S*	nathan	-	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nicht	PTKNEG	(NP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihr	PPOSAT	*	ihr	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Vater	NN	*))	vater	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wißt	VVFIN	*	wissen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	(NP*	ihr	pl	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	was	PWS	(S*	was	-	-	-	(316
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	sagt	VVFIN	*))	sagen	sg	-	-	316)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Die	ART	(VROOT(PSEUDO(S(NP*	der	sg	fem	-	(316
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wahrheit	NN	*	wahrheit	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	die	PRELS	(S*	der	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	(AVP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	oft	ADV	*)	oft	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Mich	PPER	(VP*	mich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	blutge	ADJA	(NP*	blutg	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Tränen	NN	*)	träne	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	weinen	VVINF	*)	weinen	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	machen	VVFIN	*))	machen	pl	-	-	316)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	ist	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	ihr	PPOSAT	(NP*	ihr	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Vater	NN	*)	vater	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	nicht	PTKNEG	*)	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	.	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Und	KON	(VROOT(PSEUDO(S*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	hätte	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Als	APPR	(VP*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	seine	PPOSAT	(NP*	sein	sg	fem	-	(345|(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Tochter	NN	*)	tochter	sg	fem	-	345)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	erzogen	VVPP	*))	erziehen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	hätte	VAFIN	(VROOT(PSEUDO(S*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	ART	(NP*	der	sg	neut	-	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Christenkind	NN	*)	christenkind	sg	neut	-	2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	als	APPR	(PP*	als	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	eine	ART	*	ein	sg	fem	-	(346
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Jüdin	NN	*))	jüdin	sg	fem	-	346)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	*	sich	sg	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Erzogen	NN	*	erzogen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ganz	ADV	(VROOT(PSEUDO(AP*	ganz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	gewiß	ADJD	*)	gewiß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Sie	PPER	(VROOT(PSEUDO(S*	sie	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wüßte	VVFIN	*	wissen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Was	PWS	(S*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	sie	PPER	*	sie	pl	masc	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	geboren	VVPP	*	gebären	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	sei	VAFIN	*))	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Sie	PPER	*	sie	pl	*	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	hätt	VAFIN	*	hätt	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	es	PPER	*	es	sg	neut	-	(316)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	nie	ADV	*	nie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	erfahren	VVINF	*	erfahren	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	daß	KOUS	*	daß	-	-	-	(316
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	eine	ART	*	ein	sg	fem	-	(339
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Christin	NN	*	christin	sg	fem	-	316)|339)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Geboren	VVPP	*	gebären	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	sei	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	keine	PIAT	*	kein	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Jüdin	NN	*	jüdin	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nie	ADV	(VROOT(PSEUDO(S*)	nie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	hätt	VVFIN	*	hätt	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	in	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	diesem	PDAT	*	dieser	sg	masc	-	(347
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Wahne	NN	*	wahne	sg	masc	-	347)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	das	ART	*	der	sg	neut	-	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Kind	NN	*	kind	sg	neut	-	2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Bloß	ADV	*	bloß	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	auferzogen	VVPP	*	auferehen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	?	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	ließ	VVFIN	(VROOT(PSEUDO(S*	lassen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	das	ART	(NP*	der	sg	neut	-	(2
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Mädchen	NN	*)	mädchen	sg	neut	-	2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	noch	ADV	(PP*	noch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	In	APPR	*	in	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	diesem	PDAT	*	dieser	sg	masc	-	(347
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Wahne	NN	*))	wahne	sg	masc	-	347)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Leider	ADV	(VROOT(PSEUDO(S*)	leider	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Nathan	NE	(VROOT(PSEUDO(NP*	nathan	-	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	–	CARD	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Wie	NN	*)	wie	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Der	ART	(S(NP*	der	sg	masc	-	(1
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	weise	ADV	(AP*	weise	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	gute	ADJA	*)	gut	pl	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Nathan	NN	*)	nathan	-	-	-	1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	hätte	VAFIN	*	haben	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	sich	PRF	(VP*	sich	sg	-	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Erlaubt	VVPP	*))	erlauben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	die	ART	(CNP(NP*	der	sg	fem	-	(51
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Stimme	NN	*	stimme	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	der	ART	(NP*	der	sg	fem	-	(295
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	Natur	NN	*)	natur	sg	fem	-	51)|295)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	so	ADV	*)	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	zu	APPR	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Verfälschen	NN	*)	verfälschen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Die	ART	(NP*	der	sg	fem	-	(348
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ergießung	NN	*)	ergießung	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	eines	ART	(NP*	ein	sg	masc	-	(51
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Herzens	NN	*	Herz	sg	masc	-	348)|51)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	So	ADV	(S(CVP(VP(NP(VP*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	verlenken	VVINF	*))	verlenken	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	die	PDS	*)	der	sg	fem	-	(348)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	sich	PRF	(NP*	sich	sg	-	-	(348)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	selbst	ADV	*)	selbst	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	gelassen	VVPP	*)	lassen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Ganz	ADV	(VP*	ganz	-	-	-	(37
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	andre	ADJA	(NP*	andr	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Wege	NN	*)	weg	-	-	-	37)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	nehmen	VVINF	*))	nehmen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	würde	VAFIN	*))	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Daja	NE	*	daja	-	-	(PER*)	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Ihr	PPER	*	ihr	pl	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	habt	VAFIN	*	haben	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	allerdings	ADV	*	allerdings	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	etwas	ADV	*	etwas	*	neut	-	(316)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	vertraut	ADJD	*	vertraut	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	–	$(	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	Von	APPR	*	von	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	Wichtigkeit	NN	*	wichtigkeit	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	–	NN	*	–	sg	fem	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	was	APPR	*	was	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Folgen	NN	*	folge	pl	fem	-	(349)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	haben	VAINF	*	haben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	kann	VMFIN	*	können	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	–	XY	*	–	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	Was	PWS	*	was	sg	neut	-	(316)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	mich	PPER	*	mich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	verwirrt	VVFIN	*	verwirrt	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	23	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	24	–	XY	*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	25	worauf	PROAV	*	worauf	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	26	ich	PPER	*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	27	gleich	ADV	*	gleich	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	28	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	29	weiß	VVFIN	*	weiß	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	30	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	31	Was	PWS	*	was	sg	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	32	mir	PPER	*	sich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	33	zu	PTKZU	*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	34	tun	VVINF	*	tun	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	35	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Drum	NN	*	drum	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	laßt	VVFIN	(S*	lassen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	mir	PPER	*)	sich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Zeit	NN	*	zeit	sg	fem	-	(350)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Drum	NN	(S*	drum	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	geht	VVFIN	*)	gehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	(VROOT(PSEUDO(S*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	kömmt	VVFIN	*	kömmen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	hier	ADV	*	hier	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	wiederum	ADV	*	wiederum	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	vorbei	PTKVZ	*)	vorbei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Er	PPER	*	er	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	möcht	VMFIN	*	möchen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	Uns	NN	*	uns	pl	*	-	(313)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	überfallen	VVPP	*	überfallen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	.	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	*	gehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	*	ich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wär	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	'	$(	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	des	ART	*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Todes	NN	*	tod	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	!	$.	*	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Ich	PPER	(VROOT(PSEUDO(S*	ich	sg	*	-	(4)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	bin	VAFIN	*	sein	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihn	PPER	(VP*	ihn	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	itzt	ADJD	*	itzen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	zu	PTKZU	(VZ*	zu	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	sprechen	VVINF	*))	sprechen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	ganz	ADV	*	ganz	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	und	KON	*	und	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	gar	ADV	*	gar	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Nicht	PTKNEG	(AP*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	fähig	ADJD	*))	fähig	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Wenn	KOUS	(VROOT(PSEUDO(S(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Ihr	PPER	*	ihr	pl	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	ihm	PPER	*	ihm	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	begegnet	VVFIN	*)	begegnen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	sagt	VVFIN	*	sagen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	Ihm	PPER	(NP*	ihm	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	daß	KOUS	(S*	daß	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	wir	PPER	*	wir	pl	*	-	(107)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	einander	PRF	(VP*	einander	-	-	-	(107)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	bei	APPR	(PP*	bei	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	dem	ART	*	der	sg	masc	-	(7
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	Sultan	NN	*)	sultan	sg	masc	-	7)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Schon	ADV	*	schon	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	finden	VVINF	*)	finden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	würden	VAFIN	*)))	werden	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	DAJA	NE	(VROOT(PSEUDO*	daja	-	-	-	(0
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	0)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Aber	KON	(VROOT(PSEUDO(S*	aber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	laßt	VVIMP	*	lassen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Euch	PPER	*	euch	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	ja	ADV	*	ja	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	Nichts	PIS	(VP*	nichts	*	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	merken	VVINF	*	merken	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	gegen	APPR	(PP*	gegen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	ihn	PPER	*)))	ihn	sg	masc	-	(1)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Das	PDS	(CS(S*	der	sg	neut	-	(316)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	soll	VMFIN	*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	nur	ADV	(AVP*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	so	ADV	*)	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	Den	ART	(VP(NP*	der	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	letzten	ADJA	*	letzter	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	Druck	NN	*)	druck	sg	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	dem	ART	(NP*	der	sg	neut	-	(27
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	Dinge	NN	*)	ding	sg	neut	-	27)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	geben	VVINF	*))	geben	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	;	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	soll	VMFIN	(S*	sollen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Euch	PPER	*	euch	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	Rechas	NE	(PP*	rechas	-	-	(LOC*)	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	wegen	APPO	*)	wegen	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	alle	PIAT	(NP*	aller	pl	*	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	19	Skrupel	NN	*)))	skrupel	pl	masc	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	20	nur	ADV	(NP*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	21	Benehmen	NN	*)	benehmen	pl	neut	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	22	!	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	–	XY	(VROOT(PSEUDO*	–	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	Wenn	KOUS	(S*	wenn	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	Ihr	PPER	*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	aber	ADV	(AVP*	aber	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	dann	ADV	*)	dann	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	5	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	6	sie	PPER	*	sie	sg	fem	-	(2)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	7	nach	APPR	(PP*	nach	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	8	Europa	NE	*)	europa	sg	neut	(LOC*)	(30)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	9	führt	VVFIN	*)	führen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	10	:	$.	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	11	so	ADV	(S*	so	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	12	laßt	VVIMP	*	lassen	pl	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	13	Ihr	PPER	*	ihr	pl	*	-	(17)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	14	doch	ADV	(NP*	doch	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	15	mich	PPER	*)	mich	sg	*	-	(0)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	16	nicht	PTKNEG	*	nicht	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	17	Zurück	PTKVZ	*)	zurück	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	18	?	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	TEMPELHERR	NE	(VROOT(PSEUDO*	tempelherr	-	-	(LOC*)	(17
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	.	$.	*))	--	-	-	-	17)

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Das	PDS	(VROOT(PSEUDO(S*	der	sg	neut	-	(351)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	wird	VAFIN	*	werden	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	sich	PRF	(VP*	sich	sg	-	-	(351)
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	finden	VVINF	*))	finden	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	.	$.	*))	--	-	-	-	-

Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	0	Geht	VVFIN	(VROOT(PSEUDO(S*	gehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	1	nur	ADV	*	nur	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	2	,	$,	*	--	-	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	3	geht	VVFIN	*)	gehen	sg	-	-	-
Nathan_Act3.part.xml.rkpt.0.CoNLL2012.conll	000	4	!	$.	*))	--	-	-	-	-

#end document
